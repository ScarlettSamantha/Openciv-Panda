import dtoolconfig
import panda3d.core
from _typeshed import Incomplete
from typing import Any, ClassVar, overload

Dtool_PyNativeInterface: int

class GPUCommand(dtoolconfig.DTOOL_SUPER_BASE):
    CMDInvalid: ClassVar[int] = ...
    CMDRemoveLight: ClassVar[int] = ...
    CMDRemoveSources: ClassVar[int] = ...
    CMDStoreLight: ClassVar[int] = ...
    CMDStoreSource: ClassVar[int] = ...
    CMD_invalid: ClassVar[int] = ...
    CMD_remove_light: ClassVar[int] = ...
    CMD_remove_sources: ClassVar[int] = ...
    CMD_store_light: ClassVar[int] = ...
    CMD_store_source: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getUsesIntegerPacking(*args, **kwargs): ...
    @staticmethod
    def get_uses_integer_packing() -> Any: ...
    def pushFloat(self, *args, **kwargs): ...
    def pushInt(self, *args, **kwargs): ...
    def pushMat3(self, *args, **kwargs): ...
    def pushMat4(self, *args, **kwargs): ...
    def pushVec3(self, *args, **kwargs): ...
    def pushVec4(self, *args, **kwargs): ...
    def push_float(self, constGPUCommandself, floatv) -> Any: ...
    def push_int(self, constGPUCommandself, intv) -> Any: ...
    def push_mat3(self, constGPUCommandself, constLMatrix3fv) -> Any: ...
    def push_mat4(self, constGPUCommandself, constLMatrix4fv) -> Any: ...
    @overload
    def push_vec3(self, constGPUCommandself, constLVecBase3fv) -> Any: ...
    @overload
    def push_vec3(self, constGPUCommandself, constLVecBase3iv) -> Any: ...
    @overload
    def push_vec4(self, constGPUCommandself, constLVecBase4fv) -> Any: ...
    @overload
    def push_vec4(self, constGPUCommandself, constLVecBase4iv) -> Any: ...
    def write(self, GPUCommandself, ostreamout) -> Any: ...
    def writeTo(self, *args, **kwargs): ...
    def write_to(self, constGPUCommandself, constPointerToArraydest, intcommand_index) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GPUCommandList(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    num_commands: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addCommand(self, *args, **kwargs): ...
    def add_command(self, constGPUCommandListself, constGPUCommandcmd) -> Any: ...
    def getNumCommands(self, *args, **kwargs): ...
    def get_num_commands(self, GPUCommandListself) -> Any: ...
    def writeCommandsTo(self, *args, **kwargs): ...
    def write_commands_to(self, constGPUCommandListself, constPointerToArraydest, intlimit) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class IESDataset(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def generateDatasetTextureInto(self, *args, **kwargs): ...
    def generate_dataset_texture_into(self, IESDatasetself, Texturedest_tex, intz) -> Any: ...
    def setCandelaValues(self, *args, **kwargs): ...
    def setHorizontalAngles(self, *args, **kwargs): ...
    def setVerticalAngles(self, *args, **kwargs): ...
    def set_candela_values(self, constIESDatasetself, constPointerToArraycandela_values) -> Any: ...
    def set_horizontal_angles(self, constIESDatasetself, constPointerToArrayhorizontal_angles) -> Any: ...
    def set_vertical_angles(self, constIESDatasetself, constPointerToArrayvertical_angles) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class InternalLightManager(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    max_light_index: Incomplete
    num_lights: Incomplete
    num_shadow_sources: Incomplete
    shadow_manager: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addLight(self, *args, **kwargs): ...
    def add_light(self, constInternalLightManagerself, RPLightlight) -> Any: ...
    def getMaxLightIndex(self, *args, **kwargs): ...
    def getNumLights(self, *args, **kwargs): ...
    def getNumShadowSources(self, *args, **kwargs): ...
    def getShadowManager(self, *args, **kwargs): ...
    def get_max_light_index(self, InternalLightManagerself) -> Any: ...
    def get_num_lights(self, InternalLightManagerself) -> Any: ...
    def get_num_shadow_sources(self, InternalLightManagerself) -> Any: ...
    def get_shadow_manager(self, InternalLightManagerself) -> Any: ...
    def removeLight(self, *args, **kwargs): ...
    def remove_light(self, constInternalLightManagerself, RPLightlight) -> Any: ...
    def setCameraPos(self, *args, **kwargs): ...
    def setCommandList(self, *args, **kwargs): ...
    def setShadowManager(self, *args, **kwargs): ...
    def setShadowUpdateDistance(self, *args, **kwargs): ...
    def set_camera_pos(self, constInternalLightManagerself, constLPoint3fpos) -> Any: ...
    def set_command_list(self, constInternalLightManagerself, GPUCommandListcmd_list) -> Any: ...
    def set_shadow_manager(self, constInternalLightManagerself, ShadowManagermgr) -> Any: ...
    def set_shadow_update_distance(self, constInternalLightManagerself, floatdist) -> Any: ...
    def update(self, constInternalLightManagerself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PSSMCameraRig(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getCamera(self, *args, **kwargs): ...
    def getMvpArray(self, *args, **kwargs): ...
    def getNearfarArray(self, *args, **kwargs): ...
    def get_camera(self, PSSMCameraRigself, intindex) -> Any: ...
    def get_mvp_array(self, PSSMCameraRigself) -> Any: ...
    def get_nearfar_array(self, PSSMCameraRigself) -> Any: ...
    def reparentTo(self, *args, **kwargs): ...
    def reparent_to(self, constPSSMCameraRigself, NodePathparent) -> Any: ...
    def resetFilmSizeCache(self, *args, **kwargs): ...
    def reset_film_size_cache(self, constPSSMCameraRigself) -> Any: ...
    def setBorderBias(self, *args, **kwargs): ...
    def setLogarithmicFactor(self, *args, **kwargs): ...
    def setPssmDistance(self, *args, **kwargs): ...
    def setResolution(self, *args, **kwargs): ...
    def setSunDistance(self, *args, **kwargs): ...
    def setUseFixedFilmSize(self, *args, **kwargs): ...
    def setUseStableCsm(self, *args, **kwargs): ...
    def set_border_bias(self, constPSSMCameraRigself, floatbias) -> Any: ...
    def set_logarithmic_factor(self, constPSSMCameraRigself, floatfactor) -> Any: ...
    def set_pssm_distance(self, constPSSMCameraRigself, floatdistance) -> Any: ...
    def set_resolution(self, constPSSMCameraRigself, intresolution) -> Any: ...
    def set_sun_distance(self, constPSSMCameraRigself, floatdistance) -> Any: ...
    def set_use_fixed_film_size(self, constPSSMCameraRigself, boolflag) -> Any: ...
    def set_use_stable_csm(self, constPSSMCameraRigself, boolflag) -> Any: ...
    def update(self, constPSSMCameraRigself, NodePathcam_node, constLVecBase3flight_vector) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class RPLight(panda3d.core.ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    LTEmpty: ClassVar[int] = ...
    LTPointLight: ClassVar[int] = ...
    LTSpotLight: ClassVar[int] = ...
    LT_empty: ClassVar[int] = ...
    LT_point_light: ClassVar[int] = ...
    LT_spot_light: ClassVar[int] = ...
    casts_shadows: Incomplete
    color: Incomplete
    energy: Incomplete
    ies_profile: Incomplete
    light_type: Incomplete
    near_plane: Incomplete
    pos: Incomplete
    shadow_map_resolution: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearIesProfile(self, *args, **kwargs): ...
    def clear_ies_profile(self, constRPLightself) -> Any: ...
    def getCastsShadows(self, *args, **kwargs): ...
    def getColor(self, *args, **kwargs): ...
    def getEnergy(self, *args, **kwargs): ...
    def getIesProfile(self, *args, **kwargs): ...
    def getLightType(self, *args, **kwargs): ...
    def getNearPlane(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getShadowMapResolution(self, *args, **kwargs): ...
    def get_casts_shadows(self, RPLightself) -> Any: ...
    def get_color(self, RPLightself) -> Any: ...
    def get_energy(self, RPLightself) -> Any: ...
    def get_ies_profile(self, RPLightself) -> Any: ...
    def get_light_type(self, RPLightself) -> Any: ...
    def get_near_plane(self, RPLightself) -> Any: ...
    def get_pos(self, RPLightself) -> Any: ...
    def get_shadow_map_resolution(self, RPLightself) -> Any: ...
    def hasIesProfile(self, *args, **kwargs): ...
    def has_ies_profile(self, RPLightself) -> Any: ...
    def invalidateShadows(self, *args, **kwargs): ...
    def invalidate_shadows(self, constRPLightself) -> Any: ...
    def setCastsShadows(self, *args, **kwargs): ...
    def setColor(self, *args, **kwargs): ...
    def setColorFromTemperature(self, *args, **kwargs): ...
    def setEnergy(self, *args, **kwargs): ...
    def setIesProfile(self, *args, **kwargs): ...
    def setNearPlane(self, *args, **kwargs): ...
    def setPos(self, *args, **kwargs): ...
    def setShadowMapResolution(self, *args, **kwargs): ...
    def set_casts_shadows(self, constRPLightself, boolflag) -> Any: ...
    @overload
    def set_color(self, constRPLightself, constLVecBase3fcolor) -> Any: ...
    @overload
    def set_color(self, constRPLightself, floatr, floatg, floatb) -> Any: ...
    def set_color_from_temperature(self, constRPLightself, floattemperature) -> Any: ...
    def set_energy(self, constRPLightself, floatenergy) -> Any: ...
    def set_ies_profile(self, constRPLightself, intprofile) -> Any: ...
    def set_near_plane(self, constRPLightself, floatnear_plane) -> Any: ...
    @overload
    def set_pos(self, constRPLightself, constLVecBase3fpos) -> Any: ...
    @overload
    def set_pos(self, constRPLightself, floatx, floaty, floatz) -> Any: ...
    def set_shadow_map_resolution(self, constRPLightself, intresolution) -> Any: ...

class RPPointLight(RPLight):
    DtoolClassDict: ClassVar[dict] = ...
    inner_radius: Incomplete
    radius: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getInnerRadius(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    def get_inner_radius(self, RPPointLightself) -> Any: ...
    def get_radius(self, RPPointLightself) -> Any: ...
    def setInnerRadius(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    def set_inner_radius(self, constRPPointLightself, floatinner_radius) -> Any: ...
    def set_radius(self, constRPPointLightself, floatradius) -> Any: ...

class RPSpotLight(RPLight):
    DtoolClassDict: ClassVar[dict] = ...
    direction: Incomplete
    fov: Incomplete
    radius: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getDirection(self, *args, **kwargs): ...
    def getFov(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    def get_direction(self, RPSpotLightself) -> Any: ...
    def get_fov(self, RPSpotLightself) -> Any: ...
    def get_radius(self, RPSpotLightself) -> Any: ...
    def lookAt(self, *args, **kwargs): ...
    @overload
    def look_at(self, constRPSpotLightself, LVecBase3fpoint) -> Any: ...
    @overload
    def look_at(self, constRPSpotLightself, floatx, floaty, floatz) -> Any: ...
    def setDirection(self, *args, **kwargs): ...
    def setFov(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    @overload
    def set_direction(self, constRPSpotLightself, LVecBase3fdirection) -> Any: ...
    @overload
    def set_direction(self, constRPSpotLightself, floatdx, floatdy, floatdz) -> Any: ...
    def set_fov(self, constRPSpotLightself, floatfov) -> Any: ...
    def set_radius(self, constRPSpotLightself, floatradius) -> Any: ...

class ShadowAtlas(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    coverage: Incomplete
    num_used_tiles: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getCoverage(self, *args, **kwargs): ...
    def getNumUsedTiles(self, *args, **kwargs): ...
    def get_coverage(self, ShadowAtlasself) -> Any: ...
    def get_num_used_tiles(self, ShadowAtlasself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ShadowManager(panda3d.core.ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    atlas: Incomplete
    atlas_size: Incomplete
    num_update_slots_left: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getAtlas(self, *args, **kwargs): ...
    def getAtlasSize(self, *args, **kwargs): ...
    def getNumUpdateSlotsLeft(self, *args, **kwargs): ...
    def get_atlas(self, ShadowManagerself) -> Any: ...
    def get_atlas_size(self, ShadowManagerself) -> Any: ...
    def get_num_update_slots_left(self, ShadowManagerself) -> Any: ...
    def init(self, constShadowManagerself) -> Any: ...
    def setAtlasGraphicsOutput(self, *args, **kwargs): ...
    def setAtlasSize(self, *args, **kwargs): ...
    def setMaxUpdates(self, *args, **kwargs): ...
    def setScene(self, *args, **kwargs): ...
    def setTagStateManager(self, *args, **kwargs): ...
    def set_atlas_graphics_output(self, constShadowManagerself, GraphicsOutputgraphics_output) -> Any: ...
    def set_atlas_size(self, constShadowManagerself, intatlas_size) -> Any: ...
    def set_max_updates(self, constShadowManagerself, intmax_updates) -> Any: ...
    def set_scene(self, constShadowManagerself, NodePathscene_parent) -> Any: ...
    def set_tag_state_manager(self, constShadowManagerself, TagStateManagertag_mgr) -> Any: ...
    def update(self, constShadowManagerself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TagStateManager(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def applyState(self, *args, **kwargs): ...
    def apply_state(self, constTagStateManagerself, strstate, NodePathnp, Shadershader, strname, intsort) -> Any: ...
    def cleanupStates(self, *args, **kwargs): ...
    def cleanup_states(self, constTagStateManagerself) -> Any: ...
    def getMask(self, *args, **kwargs): ...
    def get_mask(self, TagStateManagerself, strcontainer_name) -> Any: ...
    def registerCamera(self, *args, **kwargs): ...
    def register_camera(self, constTagStateManagerself, strstate, Camerasource) -> Any: ...
    def unregisterCamera(self, *args, **kwargs): ...
    def unregister_camera(self, constTagStateManagerself, strstate, Camerasource) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

def Dtool_BorrowThisReference(*args, **kwargs): ...
