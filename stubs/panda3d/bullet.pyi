import dtoolconfig
import panda3d.core
from _typeshed import Incomplete
from typing import Any, ClassVar, overload

Dtool_PyNativeInterface: int
XUp: int
X_up: int
YUp: int
Y_up: int
ZUp: int
Z_up: int

class BulletAllHitsRayResult(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    closest_hit_fraction: Incomplete
    from_pos: Incomplete
    hits: Incomplete
    to_pos: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def empty() -> Any: ...
    def getClosestHitFraction(self, *args, **kwargs): ...
    def getFromPos(self, *args, **kwargs): ...
    def getHit(self, *args, **kwargs): ...
    def getHits(self, *args, **kwargs): ...
    def getNumHits(self, *args, **kwargs): ...
    def getToPos(self, *args, **kwargs): ...
    def get_closest_hit_fraction(self, BulletAllHitsRayResultself) -> Any: ...
    def get_from_pos(self, BulletAllHitsRayResultself) -> Any: ...
    def get_hit(self, BulletAllHitsRayResultself, intidx) -> Any: ...
    def get_hits(self, *args, **kwargs): ...
    def get_num_hits(self, BulletAllHitsRayResultself) -> Any: ...
    def get_to_pos(self, BulletAllHitsRayResultself) -> Any: ...
    def hasHits(self, *args, **kwargs): ...
    def has_hits(self, BulletAllHitsRayResultself) -> Any: ...

class BulletBaseCharacterControllerNode(panda3d.core.PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class BulletBodyNode(panda3d.core.PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    active: Incomplete
    anisotropic_friction: Incomplete
    ccd_motion_threshold: Incomplete
    ccd_swept_sphere_radius: Incomplete
    collision_notification: Incomplete
    collision_response: Incomplete
    contact_processing_threshold: Incomplete
    contact_response: Incomplete
    deactivation_enabled: Incomplete
    deactivation_time: Incomplete
    debug_enabled: Incomplete
    friction: Incomplete
    kinematic: Incomplete
    restitution: Incomplete
    shape_bounds: Incomplete
    shape_mat: Incomplete
    shape_pos: Incomplete
    shape_transform: Incomplete
    shapes: Incomplete
    static: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addShape(self, *args, **kwargs): ...
    def addShapesFromCollisionSolids(self, *args, **kwargs): ...
    def add_shape(self, constBulletBodyNodeself, BulletShapeshape, constTransformStatexform) -> Any: ...
    @overload
    def add_shapes_from_collision_solids(self, constBulletBodyNodeself, CollisionNodecnode) -> Any: ...
    @overload
    def add_shapes_from_collision_solids(self, constBulletBodyNodeself, CollisionNodecnode, constTransformStaterelative_transform) -> Any: ...
    def checkCollisionWith(self, *args, **kwargs): ...
    def check_collision_with(self, constBulletBodyNodeself, PandaNodenode) -> Any: ...
    def forceActive(self, *args, **kwargs): ...
    def force_active(self, constBulletBodyNodeself, boolactive) -> Any: ...
    def getAnisotropicFriction(self, *args, **kwargs): ...
    def getCcdMotionThreshold(self, *args, **kwargs): ...
    def getCcdSweptSphereRadius(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCollisionResponse(self, *args, **kwargs): ...
    def getContactProcessingThreshold(self, *args, **kwargs): ...
    def getDeactivationTime(self, *args, **kwargs): ...
    def getFriction(self, *args, **kwargs): ...
    def getNumShapes(self, *args, **kwargs): ...
    def getRestitution(self, *args, **kwargs): ...
    def getShape(self, *args, **kwargs): ...
    def getShapeBounds(self, *args, **kwargs): ...
    def getShapeMat(self, *args, **kwargs): ...
    def getShapePos(self, *args, **kwargs): ...
    def getShapeTransform(self, *args, **kwargs): ...
    def getShapes(self, *args, **kwargs): ...
    def get_anisotropic_friction(self, BulletBodyNodeself) -> Any: ...
    def get_ccd_motion_threshold(self, BulletBodyNodeself) -> Any: ...
    def get_ccd_swept_sphere_radius(self, BulletBodyNodeself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_collision_response(self, BulletBodyNodeself) -> Any: ...
    def get_contact_processing_threshold(self, BulletBodyNodeself) -> Any: ...
    def get_deactivation_time(self, BulletBodyNodeself) -> Any: ...
    def get_friction(self, BulletBodyNodeself) -> Any: ...
    def get_num_shapes(self, BulletBodyNodeself) -> Any: ...
    def get_restitution(self, BulletBodyNodeself) -> Any: ...
    def get_shape(self, BulletBodyNodeself, intidx) -> Any: ...
    def get_shape_bounds(self, BulletBodyNodeself) -> Any: ...
    def get_shape_mat(self, BulletBodyNodeself, intidx) -> Any: ...
    def get_shape_pos(self, BulletBodyNodeself, intidx) -> Any: ...
    def get_shape_transform(self, BulletBodyNodeself, intidx) -> Any: ...
    def get_shapes(self, *args, **kwargs): ...
    def hasAnisotropicFriction(self, *args, **kwargs): ...
    def hasContactResponse(self, *args, **kwargs): ...
    def has_anisotropic_friction(self, BulletBodyNodeself) -> Any: ...
    def has_contact_response(self, BulletBodyNodeself) -> Any: ...
    def isActive(self, *args, **kwargs): ...
    def isDeactivationEnabled(self, *args, **kwargs): ...
    def isDebugEnabled(self, *args, **kwargs): ...
    def isKinematic(self, *args, **kwargs): ...
    def isStatic(self, *args, **kwargs): ...
    def is_active(self, BulletBodyNodeself) -> Any: ...
    def is_deactivation_enabled(self, BulletBodyNodeself) -> Any: ...
    def is_debug_enabled(self, BulletBodyNodeself) -> Any: ...
    def is_kinematic(self, BulletBodyNodeself) -> Any: ...
    def is_static(self, BulletBodyNodeself) -> Any: ...
    def notifiesCollisions(self, *args, **kwargs): ...
    def notifies_collisions(self, BulletBodyNodeself) -> Any: ...
    def notifyCollisions(self, *args, **kwargs): ...
    def notify_collisions(self, constBulletBodyNodeself, boolvalue) -> Any: ...
    def removeShape(self, *args, **kwargs): ...
    def remove_shape(self, constBulletBodyNodeself, BulletShapeshape) -> Any: ...
    def setActive(self, *args, **kwargs): ...
    def setAnisotropicFriction(self, *args, **kwargs): ...
    def setCcdMotionThreshold(self, *args, **kwargs): ...
    def setCcdSweptSphereRadius(self, *args, **kwargs): ...
    def setCollisionResponse(self, *args, **kwargs): ...
    def setContactProcessingThreshold(self, *args, **kwargs): ...
    def setDeactivationEnabled(self, *args, **kwargs): ...
    def setDeactivationTime(self, *args, **kwargs): ...
    def setDebugEnabled(self, *args, **kwargs): ...
    def setFriction(self, *args, **kwargs): ...
    def setIntoCollideMask(self, *args, **kwargs): ...
    def setKinematic(self, *args, **kwargs): ...
    def setRestitution(self, *args, **kwargs): ...
    def setStatic(self, *args, **kwargs): ...
    def setTransformDirty(self, *args, **kwargs): ...
    def set_active(self, constBulletBodyNodeself, boolactive, boolforce) -> Any: ...
    def set_anisotropic_friction(self, constBulletBodyNodeself, constLVecBase3ffriction) -> Any: ...
    def set_ccd_motion_threshold(self, constBulletBodyNodeself, floatthreshold) -> Any: ...
    def set_ccd_swept_sphere_radius(self, constBulletBodyNodeself, floatradius) -> Any: ...
    def set_collision_response(self, constBulletBodyNodeself, boolvalue) -> Any: ...
    def set_contact_processing_threshold(self, constBulletBodyNodeself, floatthreshold) -> Any: ...
    def set_deactivation_enabled(self, constBulletBodyNodeself, boolenabled) -> Any: ...
    def set_deactivation_time(self, constBulletBodyNodeself, floatdt) -> Any: ...
    def set_debug_enabled(self, constBulletBodyNodeself, boolenabled) -> Any: ...
    def set_friction(self, constBulletBodyNodeself, floatfriction) -> Any: ...
    def set_into_collide_mask(self, constBulletBodyNodeself, BitMaskmask) -> Any: ...
    def set_kinematic(self, constBulletBodyNodeself, boolvalue) -> Any: ...
    def set_restitution(self, constBulletBodyNodeself, floatrestitution) -> Any: ...
    def set_static(self, constBulletBodyNodeself, boolvalue) -> Any: ...
    def set_transform_dirty(self, constBulletBodyNodeself) -> Any: ...

class BulletBoxShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    half_extents_with_margin: Incomplete
    half_extents_without_margin: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHalfExtentsWithMargin(self, *args, **kwargs): ...
    def getHalfExtentsWithoutMargin(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_half_extents_with_margin(self, BulletBoxShapeself) -> Any: ...
    def get_half_extents_without_margin(self, BulletBoxShapeself) -> Any: ...
    @staticmethod
    def makeFromSolid(*args, **kwargs): ...
    @staticmethod
    def make_from_solid(constCollisionBoxsolid) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletCapsuleShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    height: Incomplete
    radius: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHalfHeight(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_half_height(self, BulletCapsuleShapeself) -> Any: ...
    def get_radius(self, BulletCapsuleShapeself) -> Any: ...
    @staticmethod
    def makeFromSolid(*args, **kwargs): ...
    @staticmethod
    def make_from_solid(constCollisionCapsulesolid) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletCharacterControllerNode(BulletBaseCharacterControllerNode):
    DtoolClassDict: ClassVar[dict] = ...
    gravity: Incomplete
    max_slope: Incomplete
    on_ground: Incomplete
    shape: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def canJump(self, *args, **kwargs): ...
    def can_jump(self, BulletCharacterControllerNodeself) -> Any: ...
    def doJump(self, *args, **kwargs): ...
    def do_jump(self, constBulletCharacterControllerNodeself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getGravity(self, *args, **kwargs): ...
    def getMaxSlope(self, *args, **kwargs): ...
    def getShape(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_gravity(self, BulletCharacterControllerNodeself) -> Any: ...
    def get_max_slope(self, BulletCharacterControllerNodeself) -> Any: ...
    def get_shape(self, BulletCharacterControllerNodeself) -> Any: ...
    def isOnGround(self, *args, **kwargs): ...
    def is_on_ground(self, BulletCharacterControllerNodeself) -> Any: ...
    def setAngularMovement(self, *args, **kwargs): ...
    def setFallSpeed(self, *args, **kwargs): ...
    def setGravity(self, *args, **kwargs): ...
    def setJumpSpeed(self, *args, **kwargs): ...
    def setLinearMovement(self, *args, **kwargs): ...
    def setMaxJumpHeight(self, *args, **kwargs): ...
    def setMaxSlope(self, *args, **kwargs): ...
    def setUseGhostSweepTest(self, *args, **kwargs): ...
    def set_angular_movement(self, constBulletCharacterControllerNodeself, floatomega) -> Any: ...
    def set_fall_speed(self, constBulletCharacterControllerNodeself, floatfall_speed) -> Any: ...
    def set_gravity(self, constBulletCharacterControllerNodeself, floatgravity) -> Any: ...
    def set_jump_speed(self, constBulletCharacterControllerNodeself, floatjump_speed) -> Any: ...
    def set_linear_movement(self, constBulletCharacterControllerNodeself, constLVector3fvelocity, boolis_local) -> Any: ...
    def set_max_jump_height(self, constBulletCharacterControllerNodeself, floatmax_jump_height) -> Any: ...
    def set_max_slope(self, constBulletCharacterControllerNodeself, floatmax_slope) -> Any: ...
    def set_use_ghost_sweep_test(self, constBulletCharacterControllerNodeself, boolvalue) -> Any: ...

class BulletClosestHitRayResult(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    from_pos: Incomplete
    hit_fraction: Incomplete
    hit_normal: Incomplete
    hit_pos: Incomplete
    node: Incomplete
    shape_part: Incomplete
    to_pos: Incomplete
    triangle_index: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def empty() -> Any: ...
    def getFromPos(self, *args, **kwargs): ...
    def getHitFraction(self, *args, **kwargs): ...
    def getHitNormal(self, *args, **kwargs): ...
    def getHitPos(self, *args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getShapePart(self, *args, **kwargs): ...
    def getToPos(self, *args, **kwargs): ...
    def getTriangleIndex(self, *args, **kwargs): ...
    def get_from_pos(self, BulletClosestHitRayResultself) -> Any: ...
    def get_hit_fraction(self, BulletClosestHitRayResultself) -> Any: ...
    def get_hit_normal(self, BulletClosestHitRayResultself) -> Any: ...
    def get_hit_pos(self, BulletClosestHitRayResultself) -> Any: ...
    def get_node(self, BulletClosestHitRayResultself) -> Any: ...
    def get_shape_part(self, BulletClosestHitRayResultself) -> Any: ...
    def get_to_pos(self, BulletClosestHitRayResultself) -> Any: ...
    def get_triangle_index(self, BulletClosestHitRayResultself) -> Any: ...
    def hasHit(self, *args, **kwargs): ...
    def has_hit(self, BulletClosestHitRayResultself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletClosestHitSweepResult(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    from_pos: Incomplete
    hit_fraction: Incomplete
    hit_normal: Incomplete
    hit_pos: Incomplete
    node: Incomplete
    to_pos: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def empty() -> Any: ...
    def getFromPos(self, *args, **kwargs): ...
    def getHitFraction(self, *args, **kwargs): ...
    def getHitNormal(self, *args, **kwargs): ...
    def getHitPos(self, *args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getToPos(self, *args, **kwargs): ...
    def get_from_pos(self, BulletClosestHitSweepResultself) -> Any: ...
    def get_hit_fraction(self, BulletClosestHitSweepResultself) -> Any: ...
    def get_hit_normal(self, BulletClosestHitSweepResultself) -> Any: ...
    def get_hit_pos(self, BulletClosestHitSweepResultself) -> Any: ...
    def get_node(self, BulletClosestHitSweepResultself) -> Any: ...
    def get_to_pos(self, BulletClosestHitSweepResultself) -> Any: ...
    def hasHit(self, *args, **kwargs): ...
    def has_hit(self, BulletClosestHitSweepResultself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletConeShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    height: Incomplete
    radius: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHeight(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_height(self, BulletConeShapeself) -> Any: ...
    def get_radius(self, BulletConeShapeself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletConeTwistConstraint(BulletConstraint):
    DtoolClassDict: ClassVar[dict] = ...
    fix_threshold: Incomplete
    frame_a: Incomplete
    frame_b: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def enableMotor(self, *args, **kwargs): ...
    def enable_motor(self, constBulletConeTwistConstraintself, boolenable) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFixThreshold(self, *args, **kwargs): ...
    def getFrameA(self, *args, **kwargs): ...
    def getFrameB(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_fix_threshold(self, BulletConeTwistConstraintself) -> Any: ...
    def get_frame_a(self, BulletConeTwistConstraintself) -> Any: ...
    def get_frame_b(self, BulletConeTwistConstraintself) -> Any: ...
    def setDamping(self, *args, **kwargs): ...
    def setFixThreshold(self, *args, **kwargs): ...
    def setFrames(self, *args, **kwargs): ...
    def setLimit(self, *args, **kwargs): ...
    def setMaxMotorImpulse(self, *args, **kwargs): ...
    def setMaxMotorImpulseNormalized(self, *args, **kwargs): ...
    def setMotorTarget(self, *args, **kwargs): ...
    def setMotorTargetInConstraintSpace(self, *args, **kwargs): ...
    def set_damping(self, constBulletConeTwistConstraintself, floatdamping) -> Any: ...
    def set_fix_threshold(self, constBulletConeTwistConstraintself, floatthreshold) -> Any: ...
    def set_frames(self, constBulletConeTwistConstraintself, constTransformStatets_a, constTransformStatets_b) -> Any: ...
    @overload
    def set_limit(self, constBulletConeTwistConstraintself, intindex, floatvalue) -> Any: ...
    @overload
    def set_limit(self, constBulletConeTwistConstraintself, floatswing1, floatswing2, floattwist, floatsoftness, floatbias, floatrelaxation) -> Any: ...
    def set_max_motor_impulse(self, constBulletConeTwistConstraintself, floatmax_impulse) -> Any: ...
    def set_max_motor_impulse_normalized(self, constBulletConeTwistConstraintself, floatmax_impulse) -> Any: ...
    def set_motor_target(self, constBulletConeTwistConstraintself, constLQuaternionfquat) -> Any: ...
    def set_motor_target_in_constraint_space(self, constBulletConeTwistConstraintself, constLQuaternionfquat) -> Any: ...

class BulletConstraint(panda3d.core.TypedReferenceCount):
    CPCfm: ClassVar[int] = ...
    CPErp: ClassVar[int] = ...
    CPStopCfm: ClassVar[int] = ...
    CPStopErp: ClassVar[int] = ...
    CP_cfm: ClassVar[int] = ...
    CP_erp: ClassVar[int] = ...
    CP_stop_cfm: ClassVar[int] = ...
    CP_stop_erp: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    applied_impulse: Incomplete
    breaking_threshold: Incomplete
    debug_draw_size: Incomplete
    enabled: Incomplete
    rigid_body_a: Incomplete
    rigid_body_b: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def enableFeedback(self, *args, **kwargs): ...
    def enable_feedback(self, constBulletConstraintself, boolvalue) -> Any: ...
    def getAppliedImpulse(self, *args, **kwargs): ...
    def getBreakingThreshold(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDebugDrawSize(self, *args, **kwargs): ...
    def getParam(self, *args, **kwargs): ...
    def getRigidBodyA(self, *args, **kwargs): ...
    def getRigidBodyB(self, *args, **kwargs): ...
    def get_applied_impulse(self, BulletConstraintself) -> Any: ...
    def get_breaking_threshold(self, BulletConstraintself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_debug_draw_size(self, constBulletConstraintself) -> Any: ...
    def get_param(self, constBulletConstraintself, intnum, intaxis) -> Any: ...
    def get_rigid_body_a(self, constBulletConstraintself) -> Any: ...
    def get_rigid_body_b(self, constBulletConstraintself) -> Any: ...
    def isEnabled(self, *args, **kwargs): ...
    def is_enabled(self, BulletConstraintself) -> Any: ...
    def setBreakingThreshold(self, *args, **kwargs): ...
    def setDebugDrawSize(self, *args, **kwargs): ...
    def setEnabled(self, *args, **kwargs): ...
    def setParam(self, *args, **kwargs): ...
    def set_breaking_threshold(self, constBulletConstraintself, floatthreshold) -> Any: ...
    def set_debug_draw_size(self, constBulletConstraintself, floatsize) -> Any: ...
    def set_enabled(self, constBulletConstraintself, boolenabled) -> Any: ...
    def set_param(self, constBulletConstraintself, intnum, floatvalue, intaxis) -> Any: ...

class BulletContact(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    idx0: Incomplete
    idx1: Incomplete
    manifold_point: Incomplete
    node0: Incomplete
    node1: Incomplete
    part_id0: Incomplete
    part_id1: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getIdx0(self, *args, **kwargs): ...
    def getIdx1(self, *args, **kwargs): ...
    def getManifoldPoint(self, *args, **kwargs): ...
    def getNode0(self, *args, **kwargs): ...
    def getNode1(self, *args, **kwargs): ...
    def getPartId0(self, *args, **kwargs): ...
    def getPartId1(self, *args, **kwargs): ...
    def get_idx0(self, BulletContactself) -> Any: ...
    def get_idx1(self, BulletContactself) -> Any: ...
    def get_manifold_point(self, constBulletContactself) -> Any: ...
    def get_node0(self, BulletContactself) -> Any: ...
    def get_node1(self, BulletContactself) -> Any: ...
    def get_part_id0(self, BulletContactself) -> Any: ...
    def get_part_id1(self, BulletContactself) -> Any: ...

class BulletContactCallbackData(panda3d.core.CallbackData):
    DtoolClassDict: ClassVar[dict] = ...
    index0: Incomplete
    index1: Incomplete
    manifold: Incomplete
    node0: Incomplete
    node1: Incomplete
    part_id0: Incomplete
    part_id1: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getIndex0(self, *args, **kwargs): ...
    def getIndex1(self, *args, **kwargs): ...
    def getManifold(self, *args, **kwargs): ...
    def getNode0(self, *args, **kwargs): ...
    def getNode1(self, *args, **kwargs): ...
    def getPartId0(self, *args, **kwargs): ...
    def getPartId1(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_index0(self, BulletContactCallbackDataself) -> Any: ...
    def get_index1(self, BulletContactCallbackDataself) -> Any: ...
    def get_manifold(self, BulletContactCallbackDataself) -> Any: ...
    def get_node0(self, BulletContactCallbackDataself) -> Any: ...
    def get_node1(self, BulletContactCallbackDataself) -> Any: ...
    def get_part_id0(self, BulletContactCallbackDataself) -> Any: ...
    def get_part_id1(self, BulletContactCallbackDataself) -> Any: ...

class BulletContactResult(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    contacts: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getContact(self, *args, **kwargs): ...
    def getContacts(self, *args, **kwargs): ...
    def getNumContacts(self, *args, **kwargs): ...
    def get_contact(self, constBulletContactResultself, intidx) -> Any: ...
    def get_contacts(self, *args, **kwargs): ...
    def get_num_contacts(self, BulletContactResultself) -> Any: ...

class BulletConvexHullShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addArray(self, *args, **kwargs): ...
    def addGeom(self, *args, **kwargs): ...
    def addPoint(self, *args, **kwargs): ...
    def add_array(self, constBulletConvexHullShapeself, constPointerToArraypoints) -> Any: ...
    def add_geom(self, constBulletConvexHullShapeself, constGeomgeom, constTransformStatets) -> Any: ...
    def add_point(self, constBulletConvexHullShapeself, constLPoint3fp) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletConvexPointCloudShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    num_points: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumPoints(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_points(self, BulletConvexPointCloudShapeself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletCylinderShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    half_extents_with_margin: Incomplete
    half_extents_without_margin: Incomplete
    radius: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHalfExtentsWithMargin(self, *args, **kwargs): ...
    def getHalfExtentsWithoutMargin(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_half_extents_with_margin(self, BulletCylinderShapeself) -> Any: ...
    def get_half_extents_without_margin(self, BulletCylinderShapeself) -> Any: ...
    def get_radius(self, BulletCylinderShapeself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletDebugNode(panda3d.core.PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    bounding_boxes: Incomplete
    constraints: Incomplete
    normals: Incomplete
    wireframe: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def drawMaskChanged(self, *args, **kwargs): ...
    def draw_mask_changed(self, constBulletDebugNodeself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getShowBoundingBoxes(self, *args, **kwargs): ...
    def getShowConstraints(self, *args, **kwargs): ...
    def getShowNormals(self, *args, **kwargs): ...
    def getShowWireframe(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_show_bounding_boxes(self, BulletDebugNodeself) -> Any: ...
    def get_show_constraints(self, BulletDebugNodeself) -> Any: ...
    def get_show_normals(self, BulletDebugNodeself) -> Any: ...
    def get_show_wireframe(self, BulletDebugNodeself) -> Any: ...
    def showBoundingBoxes(self, *args, **kwargs): ...
    def showConstraints(self, *args, **kwargs): ...
    def showNormals(self, *args, **kwargs): ...
    def showWireframe(self, *args, **kwargs): ...
    def show_bounding_boxes(self, constBulletDebugNodeself, boolshow) -> Any: ...
    def show_constraints(self, constBulletDebugNodeself, boolshow) -> Any: ...
    def show_normals(self, constBulletDebugNodeself, boolshow) -> Any: ...
    def show_wireframe(self, constBulletDebugNodeself, boolshow) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletFilterCallbackData(panda3d.core.CallbackData):
    DtoolClassDict: ClassVar[dict] = ...
    collide: Incomplete
    node_0: Incomplete
    node_1: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCollide(self, *args, **kwargs): ...
    def getNode0(self, *args, **kwargs): ...
    def getNode1(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_collide(self, BulletFilterCallbackDataself) -> Any: ...
    def get_node_0(self, BulletFilterCallbackDataself) -> Any: ...
    def get_node_1(self, BulletFilterCallbackDataself) -> Any: ...
    def setCollide(self, *args, **kwargs): ...
    def set_collide(self, constBulletFilterCallbackDataself, boolcollide) -> Any: ...

class BulletGenericConstraint(BulletConstraint):
    DtoolClassDict: ClassVar[dict] = ...
    frame_a: Incomplete
    frame_b: Incomplete
    translational_limit_motor: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getAngle(self, *args, **kwargs): ...
    def getAxis(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFrameA(self, *args, **kwargs): ...
    def getFrameB(self, *args, **kwargs): ...
    def getPivot(self, *args, **kwargs): ...
    def getRotationalLimitMotor(self, *args, **kwargs): ...
    def getTranslationalLimitMotor(self, *args, **kwargs): ...
    def get_angle(self, BulletGenericConstraintself, intaxis) -> Any: ...
    def get_axis(self, BulletGenericConstraintself, intaxis) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_frame_a(self, BulletGenericConstraintself) -> Any: ...
    def get_frame_b(self, BulletGenericConstraintself) -> Any: ...
    def get_pivot(self, BulletGenericConstraintself, intaxis) -> Any: ...
    def get_rotational_limit_motor(self, constBulletGenericConstraintself, intaxis) -> Any: ...
    def get_translational_limit_motor(self, constBulletGenericConstraintself) -> Any: ...
    def setAngularLimit(self, *args, **kwargs): ...
    def setFrames(self, *args, **kwargs): ...
    def setLinearLimit(self, *args, **kwargs): ...
    def set_angular_limit(self, constBulletGenericConstraintself, intaxis, floatlow, floathigh) -> Any: ...
    def set_frames(self, constBulletGenericConstraintself, constTransformStatets_a, constTransformStatets_b) -> Any: ...
    def set_linear_limit(self, constBulletGenericConstraintself, intaxis, floatlow, floathigh) -> Any: ...

class BulletGhostNode(BulletBodyNode):
    DtoolClassDict: ClassVar[dict] = ...
    overlapping_nodes: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumOverlappingNodes(self, *args, **kwargs): ...
    def getOverlappingNode(self, *args, **kwargs): ...
    def getOverlappingNodes(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_overlapping_nodes(self, BulletGhostNodeself) -> Any: ...
    def get_overlapping_node(self, BulletGhostNodeself, intidx) -> Any: ...
    def get_overlapping_nodes(self, *args, **kwargs): ...

class BulletHeightfieldShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def setUseDiamondSubdivision(self, *args, **kwargs): ...
    def set_use_diamond_subdivision(self, constBulletHeightfieldShapeself, boolflag) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletHelper(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    sb_flip: Incomplete
    sb_index: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def addSbFlipColumn(*args, **kwargs): ...
    @staticmethod
    def addSbIndexColumn(*args, **kwargs): ...
    @staticmethod
    def add_sb_flip_column(constGeomVertexFormatformat) -> Any: ...
    @staticmethod
    def add_sb_index_column(constGeomVertexFormatformat) -> Any: ...
    @staticmethod
    def fromCollisionSolids(*args, **kwargs): ...
    @staticmethod
    def from_collision_solids(NodePathnp, boolclear) -> Any: ...
    @staticmethod
    def getSbFlip(*args, **kwargs): ...
    @staticmethod
    def getSbIndex(*args, **kwargs): ...
    @staticmethod
    def get_sb_flip() -> Any: ...
    @staticmethod
    def get_sb_index() -> Any: ...
    @staticmethod
    def makeGeomFromFaces(*args, **kwargs): ...
    @staticmethod
    def makeGeomFromLinks(*args, **kwargs): ...
    @staticmethod
    def makeTexcoordsForPatch(*args, **kwargs): ...
    @staticmethod
    def make_geom_from_faces(BulletSoftBodyNodenode, constGeomVertexFormatformat, booltwo_sided) -> Any: ...
    @staticmethod
    def make_geom_from_links(BulletSoftBodyNodenode, constGeomVertexFormatformat) -> Any: ...
    @staticmethod
    def make_texcoords_for_patch(Geomgeom, intresx, intresy) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletHingeConstraint(BulletConstraint):
    DtoolClassDict: ClassVar[dict] = ...
    angular_only: Incomplete
    frame_a: Incomplete
    frame_b: Incomplete
    hinge_angle: Incomplete
    lower_limit: Incomplete
    upper_limit: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def enableAngularMotor(self, *args, **kwargs): ...
    def enableMotor(self, *args, **kwargs): ...
    def enable_angular_motor(self, constBulletHingeConstraintself, boolenable, floattarget_velocity, floatmax_impulse) -> Any: ...
    def enable_motor(self, constBulletHingeConstraintself, boolenable) -> Any: ...
    def getAngularOnly(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFrameA(self, *args, **kwargs): ...
    def getFrameB(self, *args, **kwargs): ...
    def getHingeAngle(self, *args, **kwargs): ...
    def getLowerLimit(self, *args, **kwargs): ...
    def getUpperLimit(self, *args, **kwargs): ...
    def get_angular_only(self, BulletHingeConstraintself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_frame_a(self, BulletHingeConstraintself) -> Any: ...
    def get_frame_b(self, BulletHingeConstraintself) -> Any: ...
    def get_hinge_angle(self, constBulletHingeConstraintself) -> Any: ...
    def get_lower_limit(self, BulletHingeConstraintself) -> Any: ...
    def get_upper_limit(self, BulletHingeConstraintself) -> Any: ...
    def setAngularOnly(self, *args, **kwargs): ...
    def setAxis(self, *args, **kwargs): ...
    def setFrames(self, *args, **kwargs): ...
    def setLimit(self, *args, **kwargs): ...
    def setMaxMotorImpulse(self, *args, **kwargs): ...
    def setMotorTarget(self, *args, **kwargs): ...
    def set_angular_only(self, constBulletHingeConstraintself, boolvalue) -> Any: ...
    def set_axis(self, constBulletHingeConstraintself, constLVector3faxis) -> Any: ...
    def set_frames(self, constBulletHingeConstraintself, constTransformStatets_a, constTransformStatets_b) -> Any: ...
    def set_limit(self, constBulletHingeConstraintself, floatlow, floathigh, floatsoftness, floatbias, floatrelaxation) -> Any: ...
    def set_max_motor_impulse(self, constBulletHingeConstraintself, floatmax_impulse) -> Any: ...
    @overload
    def set_motor_target(self, constBulletHingeConstraintself, constLQuaternionfquat, floatdt) -> Any: ...
    @overload
    def set_motor_target(self, constBulletHingeConstraintself, floattarget_angle, floatdt) -> Any: ...

class BulletManifoldPoint(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    applied_impulse: Incomplete
    applied_impulse_lateral1: Incomplete
    applied_impulse_lateral2: Incomplete
    combined_friction: Incomplete
    combined_restitution: Incomplete
    contact_cfm1: Incomplete
    contact_cfm2: Incomplete
    contact_motion1: Incomplete
    contact_motion2: Incomplete
    distance: Incomplete
    index0: Incomplete
    index1: Incomplete
    lateral_friction_dir1: Incomplete
    lateral_friction_dir2: Incomplete
    lateral_friction_initialized: Incomplete
    life_time: Incomplete
    local_point_a: Incomplete
    local_point_b: Incomplete
    normal_world_on_b: Incomplete
    part_id0: Incomplete
    part_id1: Incomplete
    position_world_on_a: Incomplete
    position_world_on_b: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getAppliedImpulse(self, *args, **kwargs): ...
    def getAppliedImpulseLateral1(self, *args, **kwargs): ...
    def getAppliedImpulseLateral2(self, *args, **kwargs): ...
    def getCombinedFriction(self, *args, **kwargs): ...
    def getCombinedRestitution(self, *args, **kwargs): ...
    def getContactCfm1(self, *args, **kwargs): ...
    def getContactCfm2(self, *args, **kwargs): ...
    def getContactMotion1(self, *args, **kwargs): ...
    def getContactMotion2(self, *args, **kwargs): ...
    def getDistance(self, *args, **kwargs): ...
    def getIndex0(self, *args, **kwargs): ...
    def getIndex1(self, *args, **kwargs): ...
    def getLateralFrictionDir1(self, *args, **kwargs): ...
    def getLateralFrictionDir2(self, *args, **kwargs): ...
    def getLateralFrictionInitialized(self, *args, **kwargs): ...
    def getLifeTime(self, *args, **kwargs): ...
    def getLocalPointA(self, *args, **kwargs): ...
    def getLocalPointB(self, *args, **kwargs): ...
    def getNormalWorldOnB(self, *args, **kwargs): ...
    def getPartId0(self, *args, **kwargs): ...
    def getPartId1(self, *args, **kwargs): ...
    def getPositionWorldOnA(self, *args, **kwargs): ...
    def getPositionWorldOnB(self, *args, **kwargs): ...
    def get_applied_impulse(self, BulletManifoldPointself) -> Any: ...
    def get_applied_impulse_lateral1(self, BulletManifoldPointself) -> Any: ...
    def get_applied_impulse_lateral2(self, BulletManifoldPointself) -> Any: ...
    def get_combined_friction(self, BulletManifoldPointself) -> Any: ...
    def get_combined_restitution(self, BulletManifoldPointself) -> Any: ...
    def get_contact_cfm1(self, BulletManifoldPointself) -> Any: ...
    def get_contact_cfm2(self, BulletManifoldPointself) -> Any: ...
    def get_contact_motion1(self, BulletManifoldPointself) -> Any: ...
    def get_contact_motion2(self, BulletManifoldPointself) -> Any: ...
    def get_distance(self, BulletManifoldPointself) -> Any: ...
    def get_index0(self, BulletManifoldPointself) -> Any: ...
    def get_index1(self, BulletManifoldPointself) -> Any: ...
    def get_lateral_friction_dir1(self, BulletManifoldPointself) -> Any: ...
    def get_lateral_friction_dir2(self, BulletManifoldPointself) -> Any: ...
    def get_lateral_friction_initialized(self, BulletManifoldPointself) -> Any: ...
    def get_life_time(self, BulletManifoldPointself) -> Any: ...
    def get_local_point_a(self, BulletManifoldPointself) -> Any: ...
    def get_local_point_b(self, BulletManifoldPointself) -> Any: ...
    def get_normal_world_on_b(self, BulletManifoldPointself) -> Any: ...
    def get_part_id0(self, BulletManifoldPointself) -> Any: ...
    def get_part_id1(self, BulletManifoldPointself) -> Any: ...
    def get_position_world_on_a(self, BulletManifoldPointself) -> Any: ...
    def get_position_world_on_b(self, BulletManifoldPointself) -> Any: ...
    def setAppliedImpulse(self, *args, **kwargs): ...
    def setAppliedImpulseLateral1(self, *args, **kwargs): ...
    def setAppliedImpulseLateral2(self, *args, **kwargs): ...
    def setCombinedFriction(self, *args, **kwargs): ...
    def setCombinedRestitution(self, *args, **kwargs): ...
    def setContactCfm1(self, *args, **kwargs): ...
    def setContactCfm2(self, *args, **kwargs): ...
    def setContactMotion1(self, *args, **kwargs): ...
    def setContactMotion2(self, *args, **kwargs): ...
    def setLateralFrictionDir1(self, *args, **kwargs): ...
    def setLateralFrictionDir2(self, *args, **kwargs): ...
    def setLateralFrictionInitialized(self, *args, **kwargs): ...
    def set_applied_impulse(self, constBulletManifoldPointself, floatvalue) -> Any: ...
    def set_applied_impulse_lateral1(self, constBulletManifoldPointself, floatvalue) -> Any: ...
    def set_applied_impulse_lateral2(self, constBulletManifoldPointself, floatvalue) -> Any: ...
    def set_combined_friction(self, constBulletManifoldPointself, floatvalue) -> Any: ...
    def set_combined_restitution(self, constBulletManifoldPointself, floatvalue) -> Any: ...
    def set_contact_cfm1(self, constBulletManifoldPointself, floatvalue) -> Any: ...
    def set_contact_cfm2(self, constBulletManifoldPointself, floatvalue) -> Any: ...
    def set_contact_motion1(self, constBulletManifoldPointself, floatvalue) -> Any: ...
    def set_contact_motion2(self, constBulletManifoldPointself, floatvalue) -> Any: ...
    def set_lateral_friction_dir1(self, constBulletManifoldPointself, constLVecBase3fdir) -> Any: ...
    def set_lateral_friction_dir2(self, constBulletManifoldPointself, constLVecBase3fdir) -> Any: ...
    def set_lateral_friction_initialized(self, constBulletManifoldPointself, boolvalue) -> Any: ...

class BulletMinkowskiSumShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    shape_a: Incomplete
    shape_b: Incomplete
    transform_a: Incomplete
    transform_b: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getShapeA(self, *args, **kwargs): ...
    def getShapeB(self, *args, **kwargs): ...
    def getTransformA(self, *args, **kwargs): ...
    def getTransformB(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_shape_a(self, BulletMinkowskiSumShapeself) -> Any: ...
    def get_shape_b(self, BulletMinkowskiSumShapeself) -> Any: ...
    def get_transform_a(self, BulletMinkowskiSumShapeself) -> Any: ...
    def get_transform_b(self, BulletMinkowskiSumShapeself) -> Any: ...
    def setTransformA(self, *args, **kwargs): ...
    def setTransformB(self, *args, **kwargs): ...
    def set_transform_a(self, constBulletMinkowskiSumShapeself, constTransformStatets) -> Any: ...
    def set_transform_b(self, constBulletMinkowskiSumShapeself, constTransformStatets) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletMultiSphereShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    sphere_count: Incomplete
    sphere_pos: Incomplete
    sphere_radius: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constBulletMultiSphereShapeself, constBulletMultiSphereShapecopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getSphereCount(self, *args, **kwargs): ...
    def getSpherePos(self, *args, **kwargs): ...
    def getSphereRadius(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_sphere_count(self, BulletMultiSphereShapeself) -> Any: ...
    def get_sphere_pos(self, BulletMultiSphereShapeself, intindex) -> Any: ...
    def get_sphere_radius(self, BulletMultiSphereShapeself, intindex) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletPersistentManifold(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    contact_breaking_threshold: Incomplete
    contact_processing_threshold: Incomplete
    manifold_points: Incomplete
    node0: Incomplete
    node1: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearManifold(self, *args, **kwargs): ...
    def clear_manifold(self, constBulletPersistentManifoldself) -> Any: ...
    def getContactBreakingThreshold(self, *args, **kwargs): ...
    def getContactProcessingThreshold(self, *args, **kwargs): ...
    def getManifoldPoint(self, *args, **kwargs): ...
    def getManifoldPoints(self, *args, **kwargs): ...
    def getNode0(self, *args, **kwargs): ...
    def getNode1(self, *args, **kwargs): ...
    def getNumManifoldPoints(self, *args, **kwargs): ...
    def get_contact_breaking_threshold(self, BulletPersistentManifoldself) -> Any: ...
    def get_contact_processing_threshold(self, BulletPersistentManifoldself) -> Any: ...
    def get_manifold_point(self, BulletPersistentManifoldself, intidx) -> Any: ...
    def get_manifold_points(self, *args, **kwargs): ...
    def get_node0(self, constBulletPersistentManifoldself) -> Any: ...
    def get_node1(self, constBulletPersistentManifoldself) -> Any: ...
    def get_num_manifold_points(self, BulletPersistentManifoldself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletPlaneShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    plane: Incomplete
    plane_constant: Incomplete
    plane_normal: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPlane(self, *args, **kwargs): ...
    def getPlaneConstant(self, *args, **kwargs): ...
    def getPlaneNormal(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_plane(self, BulletPlaneShapeself) -> Any: ...
    def get_plane_constant(self, BulletPlaneShapeself) -> Any: ...
    def get_plane_normal(self, BulletPlaneShapeself) -> Any: ...
    @staticmethod
    def makeFromSolid(*args, **kwargs): ...
    @staticmethod
    def make_from_solid(constCollisionPlanesolid) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletRayHit(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    hit_fraction: Incomplete
    hit_normal: Incomplete
    hit_pos: Incomplete
    node: Incomplete
    shape_part: Incomplete
    triangle_index: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def empty() -> Any: ...
    def getHitFraction(self, *args, **kwargs): ...
    def getHitNormal(self, *args, **kwargs): ...
    def getHitPos(self, *args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getShapePart(self, *args, **kwargs): ...
    def getTriangleIndex(self, *args, **kwargs): ...
    def get_hit_fraction(self, BulletRayHitself) -> Any: ...
    def get_hit_normal(self, BulletRayHitself) -> Any: ...
    def get_hit_pos(self, BulletRayHitself) -> Any: ...
    def get_node(self, BulletRayHitself) -> Any: ...
    def get_shape_part(self, BulletRayHitself) -> Any: ...
    def get_triangle_index(self, BulletRayHitself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletRigidBodyNode(BulletBodyNode):
    DtoolClassDict: ClassVar[dict] = ...
    angular_damping: Incomplete
    angular_factor: Incomplete
    angular_sleep_threshold: Incomplete
    angular_velocity: Incomplete
    gravity: Incomplete
    inertia: Incomplete
    inv_inertia_diag_local: Incomplete
    inv_inertia_tensor_world: Incomplete
    inv_mass: Incomplete
    linear_damping: Incomplete
    linear_factor: Incomplete
    linear_sleep_threshold: Incomplete
    linear_velocity: Incomplete
    mass: Incomplete
    total_force: Incomplete
    total_torque: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def applyCentralForce(self, *args, **kwargs): ...
    def applyCentralImpulse(self, *args, **kwargs): ...
    def applyForce(self, *args, **kwargs): ...
    def applyImpulse(self, *args, **kwargs): ...
    def applyTorque(self, *args, **kwargs): ...
    def applyTorqueImpulse(self, *args, **kwargs): ...
    def apply_central_force(self, constBulletRigidBodyNodeself, constLVector3fforce) -> Any: ...
    def apply_central_impulse(self, constBulletRigidBodyNodeself, constLVector3fimpulse) -> Any: ...
    def apply_force(self, constBulletRigidBodyNodeself, constLVector3fforce, constLPoint3fpos) -> Any: ...
    def apply_impulse(self, constBulletRigidBodyNodeself, constLVector3fimpulse, constLPoint3fpos) -> Any: ...
    def apply_torque(self, constBulletRigidBodyNodeself, constLVector3ftorque) -> Any: ...
    def apply_torque_impulse(self, constBulletRigidBodyNodeself, constLVector3ftorque) -> Any: ...
    def clearForces(self, *args, **kwargs): ...
    def clear_forces(self, constBulletRigidBodyNodeself) -> Any: ...
    def getAngularDamping(self, *args, **kwargs): ...
    def getAngularFactor(self, *args, **kwargs): ...
    def getAngularSleepThreshold(self, *args, **kwargs): ...
    def getAngularVelocity(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getGravity(self, *args, **kwargs): ...
    def getInertia(self, *args, **kwargs): ...
    def getInvInertiaDiagLocal(self, *args, **kwargs): ...
    def getInvInertiaTensorWorld(self, *args, **kwargs): ...
    def getInvMass(self, *args, **kwargs): ...
    def getLinearDamping(self, *args, **kwargs): ...
    def getLinearFactor(self, *args, **kwargs): ...
    def getLinearSleepThreshold(self, *args, **kwargs): ...
    def getLinearVelocity(self, *args, **kwargs): ...
    def getMass(self, *args, **kwargs): ...
    def getTotalForce(self, *args, **kwargs): ...
    def getTotalTorque(self, *args, **kwargs): ...
    def get_angular_damping(self, BulletRigidBodyNodeself) -> Any: ...
    def get_angular_factor(self, BulletRigidBodyNodeself) -> Any: ...
    def get_angular_sleep_threshold(self, BulletRigidBodyNodeself) -> Any: ...
    def get_angular_velocity(self, BulletRigidBodyNodeself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_gravity(self, BulletRigidBodyNodeself) -> Any: ...
    def get_inertia(self, BulletRigidBodyNodeself) -> Any: ...
    def get_inv_inertia_diag_local(self, BulletRigidBodyNodeself) -> Any: ...
    def get_inv_inertia_tensor_world(self, BulletRigidBodyNodeself) -> Any: ...
    def get_inv_mass(self, BulletRigidBodyNodeself) -> Any: ...
    def get_linear_damping(self, BulletRigidBodyNodeself) -> Any: ...
    def get_linear_factor(self, BulletRigidBodyNodeself) -> Any: ...
    def get_linear_sleep_threshold(self, BulletRigidBodyNodeself) -> Any: ...
    def get_linear_velocity(self, BulletRigidBodyNodeself) -> Any: ...
    def get_mass(self, BulletRigidBodyNodeself) -> Any: ...
    def get_total_force(self, BulletRigidBodyNodeself) -> Any: ...
    def get_total_torque(self, BulletRigidBodyNodeself) -> Any: ...
    def pickDirtyFlag(self, *args, **kwargs): ...
    def pick_dirty_flag(self, constBulletRigidBodyNodeself) -> Any: ...
    def setAngularDamping(self, *args, **kwargs): ...
    def setAngularFactor(self, *args, **kwargs): ...
    def setAngularSleepThreshold(self, *args, **kwargs): ...
    def setAngularVelocity(self, *args, **kwargs): ...
    def setGravity(self, *args, **kwargs): ...
    def setInertia(self, *args, **kwargs): ...
    def setLinearDamping(self, *args, **kwargs): ...
    def setLinearFactor(self, *args, **kwargs): ...
    def setLinearSleepThreshold(self, *args, **kwargs): ...
    def setLinearVelocity(self, *args, **kwargs): ...
    def setMass(self, *args, **kwargs): ...
    def set_angular_damping(self, constBulletRigidBodyNodeself, floatvalue) -> Any: ...
    def set_angular_factor(self, constBulletRigidBodyNodeself, constLVector3ffactor) -> Any: ...
    def set_angular_sleep_threshold(self, constBulletRigidBodyNodeself, floatthreshold) -> Any: ...
    def set_angular_velocity(self, constBulletRigidBodyNodeself, constLVector3fvelocity) -> Any: ...
    def set_gravity(self, constBulletRigidBodyNodeself, constLVector3fgravity) -> Any: ...
    def set_inertia(self, constBulletRigidBodyNodeself, constLVecBase3finertia) -> Any: ...
    def set_linear_damping(self, constBulletRigidBodyNodeself, floatvalue) -> Any: ...
    def set_linear_factor(self, constBulletRigidBodyNodeself, constLVector3ffactor) -> Any: ...
    def set_linear_sleep_threshold(self, constBulletRigidBodyNodeself, floatthreshold) -> Any: ...
    def set_linear_velocity(self, constBulletRigidBodyNodeself, constLVector3fvelocity) -> Any: ...
    def set_mass(self, constBulletRigidBodyNodeself, floatmass) -> Any: ...

class BulletRotationalLimitMotor(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    accumulated_impulse: Incomplete
    current_error: Incomplete
    current_limit: Incomplete
    current_position: Incomplete
    limited: Incomplete
    motor_enabled: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getAccumulatedImpulse(self, *args, **kwargs): ...
    def getCurrentError(self, *args, **kwargs): ...
    def getCurrentLimit(self, *args, **kwargs): ...
    def getCurrentPosition(self, *args, **kwargs): ...
    def getMotorEnabled(self, *args, **kwargs): ...
    def get_accumulated_impulse(self, BulletRotationalLimitMotorself) -> Any: ...
    def get_current_error(self, BulletRotationalLimitMotorself) -> Any: ...
    def get_current_limit(self, BulletRotationalLimitMotorself) -> Any: ...
    def get_current_position(self, BulletRotationalLimitMotorself) -> Any: ...
    def get_motor_enabled(self, BulletRotationalLimitMotorself) -> Any: ...
    def isLimited(self, *args, **kwargs): ...
    def is_limited(self, BulletRotationalLimitMotorself) -> Any: ...
    def setBounce(self, *args, **kwargs): ...
    def setDamping(self, *args, **kwargs): ...
    def setHighLimit(self, *args, **kwargs): ...
    def setLowLimit(self, *args, **kwargs): ...
    def setMaxLimitForce(self, *args, **kwargs): ...
    def setMaxMotorForce(self, *args, **kwargs): ...
    def setMotorEnabled(self, *args, **kwargs): ...
    def setNormalCfm(self, *args, **kwargs): ...
    def setSoftness(self, *args, **kwargs): ...
    def setStopCfm(self, *args, **kwargs): ...
    def setStopErp(self, *args, **kwargs): ...
    def setTargetVelocity(self, *args, **kwargs): ...
    def set_bounce(self, constBulletRotationalLimitMotorself, floatbounce) -> Any: ...
    def set_damping(self, constBulletRotationalLimitMotorself, floatdamping) -> Any: ...
    def set_high_limit(self, constBulletRotationalLimitMotorself, floatlimit) -> Any: ...
    def set_low_limit(self, constBulletRotationalLimitMotorself, floatlimit) -> Any: ...
    def set_max_limit_force(self, constBulletRotationalLimitMotorself, floatforce) -> Any: ...
    def set_max_motor_force(self, constBulletRotationalLimitMotorself, floatforce) -> Any: ...
    def set_motor_enabled(self, constBulletRotationalLimitMotorself, boolenable) -> Any: ...
    def set_normal_cfm(self, constBulletRotationalLimitMotorself, floatcfm) -> Any: ...
    def set_softness(self, constBulletRotationalLimitMotorself, floatsoftness) -> Any: ...
    def set_stop_cfm(self, constBulletRotationalLimitMotorself, floatcfm) -> Any: ...
    def set_stop_erp(self, constBulletRotationalLimitMotorself, floaterp) -> Any: ...
    def set_target_velocity(self, constBulletRotationalLimitMotorself, floatvelocity) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletShape(panda3d.core.TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    concave: Incomplete
    convex: Incomplete
    convex_2d: Incomplete
    infinite: Incomplete
    margin: Incomplete
    name: Incomplete
    non_moving: Incomplete
    polyhedral: Incomplete
    shape_bounds: Incomplete
    soft_body: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMargin(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getShapeBounds(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_margin(self, BulletShapeself) -> Any: ...
    def get_name(self, BulletShapeself) -> Any: ...
    def get_shape_bounds(self, BulletShapeself) -> Any: ...
    def isConcave(self, *args, **kwargs): ...
    def isConvex(self, *args, **kwargs): ...
    def isConvex2d(self, *args, **kwargs): ...
    def isInfinite(self, *args, **kwargs): ...
    def isNonMoving(self, *args, **kwargs): ...
    def isPolyhedral(self, *args, **kwargs): ...
    def isSoftBody(self, *args, **kwargs): ...
    def is_concave(self, BulletShapeself) -> Any: ...
    def is_convex(self, BulletShapeself) -> Any: ...
    def is_convex_2d(self, BulletShapeself) -> Any: ...
    def is_infinite(self, BulletShapeself) -> Any: ...
    def is_non_moving(self, BulletShapeself) -> Any: ...
    def is_polyhedral(self, BulletShapeself) -> Any: ...
    def is_soft_body(self, BulletShapeself) -> Any: ...
    def setMargin(self, *args, **kwargs): ...
    def set_margin(self, constBulletShapeself, floatmargin) -> Any: ...

class BulletSliderConstraint(BulletConstraint):
    DtoolClassDict: ClassVar[dict] = ...
    angular_pos: Incomplete
    frame_a: Incomplete
    frame_b: Incomplete
    linear_pos: Incomplete
    lower_angular_limit: Incomplete
    lower_linear_limit: Incomplete
    max_angular_motor_force: Incomplete
    max_linear_motor_force: Incomplete
    powered_angular_motor: Incomplete
    powered_linear_motor: Incomplete
    target_angular_motor_velocity: Incomplete
    target_linear_motor_velocity: Incomplete
    upper_angular_limit: Incomplete
    upper_linear_limit: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getAngularPos(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFrameA(self, *args, **kwargs): ...
    def getFrameB(self, *args, **kwargs): ...
    def getLinearPos(self, *args, **kwargs): ...
    def getLowerAngularLimit(self, *args, **kwargs): ...
    def getLowerLinearLimit(self, *args, **kwargs): ...
    def getMaxAngularMotorForce(self, *args, **kwargs): ...
    def getMaxLinearMotorForce(self, *args, **kwargs): ...
    def getPoweredAngularMotor(self, *args, **kwargs): ...
    def getPoweredLinearMotor(self, *args, **kwargs): ...
    def getTargetAngularMotorVelocity(self, *args, **kwargs): ...
    def getTargetLinearMotorVelocity(self, *args, **kwargs): ...
    def getUpperAngularLimit(self, *args, **kwargs): ...
    def getUpperLinearLimit(self, *args, **kwargs): ...
    def get_angular_pos(self, BulletSliderConstraintself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_frame_a(self, BulletSliderConstraintself) -> Any: ...
    def get_frame_b(self, BulletSliderConstraintself) -> Any: ...
    def get_linear_pos(self, BulletSliderConstraintself) -> Any: ...
    def get_lower_angular_limit(self, BulletSliderConstraintself) -> Any: ...
    def get_lower_linear_limit(self, BulletSliderConstraintself) -> Any: ...
    def get_max_angular_motor_force(self, BulletSliderConstraintself) -> Any: ...
    def get_max_linear_motor_force(self, BulletSliderConstraintself) -> Any: ...
    def get_powered_angular_motor(self, BulletSliderConstraintself) -> Any: ...
    def get_powered_linear_motor(self, BulletSliderConstraintself) -> Any: ...
    def get_target_angular_motor_velocity(self, BulletSliderConstraintself) -> Any: ...
    def get_target_linear_motor_velocity(self, BulletSliderConstraintself) -> Any: ...
    def get_upper_angular_limit(self, BulletSliderConstraintself) -> Any: ...
    def get_upper_linear_limit(self, BulletSliderConstraintself) -> Any: ...
    def setFrames(self, *args, **kwargs): ...
    def setLowerAngularLimit(self, *args, **kwargs): ...
    def setLowerLinearLimit(self, *args, **kwargs): ...
    def setMaxAngularMotorForce(self, *args, **kwargs): ...
    def setMaxLinearMotorForce(self, *args, **kwargs): ...
    def setPoweredAngularMotor(self, *args, **kwargs): ...
    def setPoweredLinearMotor(self, *args, **kwargs): ...
    def setTargetAngularMotorVelocity(self, *args, **kwargs): ...
    def setTargetLinearMotorVelocity(self, *args, **kwargs): ...
    def setUpperAngularLimit(self, *args, **kwargs): ...
    def setUpperLinearLimit(self, *args, **kwargs): ...
    def set_frames(self, constBulletSliderConstraintself, constTransformStatets_a, constTransformStatets_b) -> Any: ...
    def set_lower_angular_limit(self, constBulletSliderConstraintself, floatvalue) -> Any: ...
    def set_lower_linear_limit(self, constBulletSliderConstraintself, floatvalue) -> Any: ...
    def set_max_angular_motor_force(self, constBulletSliderConstraintself, floatmax_force) -> Any: ...
    def set_max_linear_motor_force(self, constBulletSliderConstraintself, floatmax_force) -> Any: ...
    def set_powered_angular_motor(self, constBulletSliderConstraintself, boolon) -> Any: ...
    def set_powered_linear_motor(self, constBulletSliderConstraintself, boolon) -> Any: ...
    def set_target_angular_motor_velocity(self, constBulletSliderConstraintself, floattarget_velocity) -> Any: ...
    def set_target_linear_motor_velocity(self, constBulletSliderConstraintself, floattarget_velocity) -> Any: ...
    def set_upper_angular_limit(self, constBulletSliderConstraintself, floatvalue) -> Any: ...
    def set_upper_linear_limit(self, constBulletSliderConstraintself, floatvalue) -> Any: ...

class BulletSoftBodyConfig(dtoolconfig.DTOOL_SUPER_BASE):
    AMFaceOneSided: ClassVar[int] = ...
    AMFaceTwoSided: ClassVar[int] = ...
    AMVertexOneSided: ClassVar[int] = ...
    AMVertexPoint: ClassVar[int] = ...
    AMVertexTwoSided: ClassVar[int] = ...
    AM_face_one_sided: ClassVar[int] = ...
    AM_face_two_sided: ClassVar[int] = ...
    AM_vertex_one_sided: ClassVar[int] = ...
    AM_vertex_point: ClassVar[int] = ...
    AM_vertex_two_sided: ClassVar[int] = ...
    CFClusterRigidSoft: ClassVar[int] = ...
    CFClusterSelf: ClassVar[int] = ...
    CFClusterSoftSoft: ClassVar[int] = ...
    CFRigidVsSoftMask: ClassVar[int] = ...
    CFSdfRigidSoft: ClassVar[int] = ...
    CFSoftVsSoftMask: ClassVar[int] = ...
    CFVertexFaceSoftSoft: ClassVar[int] = ...
    CF_cluster_rigid_soft: ClassVar[int] = ...
    CF_cluster_self: ClassVar[int] = ...
    CF_cluster_soft_soft: ClassVar[int] = ...
    CF_rigid_vs_soft_mask: ClassVar[int] = ...
    CF_sdf_rigid_soft: ClassVar[int] = ...
    CF_soft_vs_soft_mask: ClassVar[int] = ...
    CF_vertex_face_soft_soft: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    aero_model: Incomplete
    anchors_hardness: Incomplete
    cluster_solver_iterations: Incomplete
    damping_coefficient: Incomplete
    drag_coefficient: Incomplete
    drift_solver_iterations: Incomplete
    dynamic_friction_coefficient: Incomplete
    kinetic_contacts_hardness: Incomplete
    lift_coefficient: Incomplete
    maxvolume: Incomplete
    pose_matching_coefficient: Incomplete
    positions_solver_iterations: Incomplete
    pressure_coefficient: Incomplete
    rigid_contacts_hardness: Incomplete
    soft_contacts_hardness: Incomplete
    soft_vs_kinetic_hardness: Incomplete
    soft_vs_kinetic_impulse_split: Incomplete
    soft_vs_rigid_hardness: Incomplete
    soft_vs_rigid_impulse_split: Incomplete
    soft_vs_soft_hardness: Incomplete
    soft_vs_soft_impulse_split: Incomplete
    timescale: Incomplete
    velocities_correction_factor: Incomplete
    velocities_solver_iterations: Incomplete
    volume_conservation_coefficient: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearAllCollisionFlags(self, *args, **kwargs): ...
    def clear_all_collision_flags(self, constBulletSoftBodyConfigself) -> Any: ...
    def getAeroModel(self, *args, **kwargs): ...
    def getAnchorsHardness(self, *args, **kwargs): ...
    def getClusterSolverIterations(self, *args, **kwargs): ...
    def getCollisionFlag(self, *args, **kwargs): ...
    def getDampingCoefficient(self, *args, **kwargs): ...
    def getDragCoefficient(self, *args, **kwargs): ...
    def getDriftSolverIterations(self, *args, **kwargs): ...
    def getDynamicFrictionCoefficient(self, *args, **kwargs): ...
    def getKineticContactsHardness(self, *args, **kwargs): ...
    def getLiftCoefficient(self, *args, **kwargs): ...
    def getMaxvolume(self, *args, **kwargs): ...
    def getPoseMatchingCoefficient(self, *args, **kwargs): ...
    def getPositionsSolverIterations(self, *args, **kwargs): ...
    def getPressureCoefficient(self, *args, **kwargs): ...
    def getRigidContactsHardness(self, *args, **kwargs): ...
    def getSoftContactsHardness(self, *args, **kwargs): ...
    def getSoftVsKineticHardness(self, *args, **kwargs): ...
    def getSoftVsKineticImpulseSplit(self, *args, **kwargs): ...
    def getSoftVsRigidHardness(self, *args, **kwargs): ...
    def getSoftVsRigidImpulseSplit(self, *args, **kwargs): ...
    def getSoftVsSoftHardness(self, *args, **kwargs): ...
    def getSoftVsSoftImpulseSplit(self, *args, **kwargs): ...
    def getTimescale(self, *args, **kwargs): ...
    def getVelocitiesCorrectionFactor(self, *args, **kwargs): ...
    def getVelocitiesSolverIterations(self, *args, **kwargs): ...
    def getVolumeConservationCoefficient(self, *args, **kwargs): ...
    def get_aero_model(self, BulletSoftBodyConfigself) -> Any: ...
    def get_anchors_hardness(self, BulletSoftBodyConfigself) -> Any: ...
    def get_cluster_solver_iterations(self, BulletSoftBodyConfigself) -> Any: ...
    def get_collision_flag(self, BulletSoftBodyConfigself, intflag) -> Any: ...
    def get_damping_coefficient(self, BulletSoftBodyConfigself) -> Any: ...
    def get_drag_coefficient(self, BulletSoftBodyConfigself) -> Any: ...
    def get_drift_solver_iterations(self, BulletSoftBodyConfigself) -> Any: ...
    def get_dynamic_friction_coefficient(self, BulletSoftBodyConfigself) -> Any: ...
    def get_kinetic_contacts_hardness(self, BulletSoftBodyConfigself) -> Any: ...
    def get_lift_coefficient(self, BulletSoftBodyConfigself) -> Any: ...
    def get_maxvolume(self, BulletSoftBodyConfigself) -> Any: ...
    def get_pose_matching_coefficient(self, BulletSoftBodyConfigself) -> Any: ...
    def get_positions_solver_iterations(self, BulletSoftBodyConfigself) -> Any: ...
    def get_pressure_coefficient(self, BulletSoftBodyConfigself) -> Any: ...
    def get_rigid_contacts_hardness(self, BulletSoftBodyConfigself) -> Any: ...
    def get_soft_contacts_hardness(self, BulletSoftBodyConfigself) -> Any: ...
    def get_soft_vs_kinetic_hardness(self, BulletSoftBodyConfigself) -> Any: ...
    def get_soft_vs_kinetic_impulse_split(self, BulletSoftBodyConfigself) -> Any: ...
    def get_soft_vs_rigid_hardness(self, BulletSoftBodyConfigself) -> Any: ...
    def get_soft_vs_rigid_impulse_split(self, BulletSoftBodyConfigself) -> Any: ...
    def get_soft_vs_soft_hardness(self, BulletSoftBodyConfigself) -> Any: ...
    def get_soft_vs_soft_impulse_split(self, BulletSoftBodyConfigself) -> Any: ...
    def get_timescale(self, BulletSoftBodyConfigself) -> Any: ...
    def get_velocities_correction_factor(self, BulletSoftBodyConfigself) -> Any: ...
    def get_velocities_solver_iterations(self, BulletSoftBodyConfigself) -> Any: ...
    def get_volume_conservation_coefficient(self, BulletSoftBodyConfigself) -> Any: ...
    def setAeroModel(self, *args, **kwargs): ...
    def setAnchorsHardness(self, *args, **kwargs): ...
    def setClusterSolverIterations(self, *args, **kwargs): ...
    def setCollisionFlag(self, *args, **kwargs): ...
    def setDampingCoefficient(self, *args, **kwargs): ...
    def setDragCoefficient(self, *args, **kwargs): ...
    def setDriftSolverIterations(self, *args, **kwargs): ...
    def setDynamicFrictionCoefficient(self, *args, **kwargs): ...
    def setKineticContactsHardness(self, *args, **kwargs): ...
    def setLiftCoefficient(self, *args, **kwargs): ...
    def setMaxvolume(self, *args, **kwargs): ...
    def setPoseMatchingCoefficient(self, *args, **kwargs): ...
    def setPositionsSolverIterations(self, *args, **kwargs): ...
    def setPressureCoefficient(self, *args, **kwargs): ...
    def setRigidContactsHardness(self, *args, **kwargs): ...
    def setSoftContactsHardness(self, *args, **kwargs): ...
    def setSoftVsKineticHardness(self, *args, **kwargs): ...
    def setSoftVsKineticImpulseSplit(self, *args, **kwargs): ...
    def setSoftVsRigidHardness(self, *args, **kwargs): ...
    def setSoftVsRigidImpulseSplit(self, *args, **kwargs): ...
    def setSoftVsSoftHardness(self, *args, **kwargs): ...
    def setSoftVsSoftImpulseSplit(self, *args, **kwargs): ...
    def setTimescale(self, *args, **kwargs): ...
    def setVelocitiesCorrectionFactor(self, *args, **kwargs): ...
    def setVelocitiesSolverIterations(self, *args, **kwargs): ...
    def setVolumeConservationCoefficient(self, *args, **kwargs): ...
    def set_aero_model(self, constBulletSoftBodyConfigself, intvalue) -> Any: ...
    def set_anchors_hardness(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_cluster_solver_iterations(self, constBulletSoftBodyConfigself, intvalue) -> Any: ...
    def set_collision_flag(self, constBulletSoftBodyConfigself, intflag, boolvalue) -> Any: ...
    def set_damping_coefficient(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_drag_coefficient(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_drift_solver_iterations(self, constBulletSoftBodyConfigself, intvalue) -> Any: ...
    def set_dynamic_friction_coefficient(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_kinetic_contacts_hardness(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_lift_coefficient(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_maxvolume(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_pose_matching_coefficient(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_positions_solver_iterations(self, constBulletSoftBodyConfigself, intvalue) -> Any: ...
    def set_pressure_coefficient(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_rigid_contacts_hardness(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_soft_contacts_hardness(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_soft_vs_kinetic_hardness(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_soft_vs_kinetic_impulse_split(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_soft_vs_rigid_hardness(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_soft_vs_rigid_impulse_split(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_soft_vs_soft_hardness(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_soft_vs_soft_impulse_split(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_timescale(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_velocities_correction_factor(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def set_velocities_solver_iterations(self, constBulletSoftBodyConfigself, intvalue) -> Any: ...
    def set_volume_conservation_coefficient(self, constBulletSoftBodyConfigself, floatvalue) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletSoftBodyControl(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def setAngle(self, *args, **kwargs): ...
    def setGoal(self, *args, **kwargs): ...
    def setMaxTorque(self, *args, **kwargs): ...
    def setSign(self, *args, **kwargs): ...
    def set_angle(self, constBulletSoftBodyControlself, floatangle) -> Any: ...
    def set_goal(self, constBulletSoftBodyControlself, floatgoal) -> Any: ...
    def set_max_torque(self, constBulletSoftBodyControlself, floatmaxtorque) -> Any: ...
    def set_sign(self, constBulletSoftBodyControlself, floatsign) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletSoftBodyMaterial(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    angular_stiffness: Incomplete
    linear_stiffness: Incomplete
    volume_preservation: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def empty() -> Any: ...
    def getAngularStiffness(self, *args, **kwargs): ...
    def getLinearStiffness(self, *args, **kwargs): ...
    def getVolumePreservation(self, *args, **kwargs): ...
    def get_angular_stiffness(self, BulletSoftBodyMaterialself) -> Any: ...
    def get_linear_stiffness(self, BulletSoftBodyMaterialself) -> Any: ...
    def get_volume_preservation(self, BulletSoftBodyMaterialself) -> Any: ...
    def setAngularStiffness(self, *args, **kwargs): ...
    def setLinearStiffness(self, *args, **kwargs): ...
    def setVolumePreservation(self, *args, **kwargs): ...
    def set_angular_stiffness(self, constBulletSoftBodyMaterialself, floatvalue) -> Any: ...
    def set_linear_stiffness(self, constBulletSoftBodyMaterialself, floatvalue) -> Any: ...
    def set_volume_preservation(self, constBulletSoftBodyMaterialself, floatvalue) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletSoftBodyNode(BulletBodyNode):
    DtoolClassDict: ClassVar[dict] = ...
    aabb: Incomplete
    cfg: Incomplete
    materials: Incomplete
    nodes: Incomplete
    num_clusters: Incomplete
    wind_velocity: Incomplete
    world_info: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addForce(self, *args, **kwargs): ...
    def addVelocity(self, *args, **kwargs): ...
    @overload
    def add_force(self, constBulletSoftBodyNodeself, constLVector3fforce) -> Any: ...
    @overload
    def add_force(self, constBulletSoftBodyNodeself, constLVector3fforce, intnode) -> Any: ...
    @overload
    def add_velocity(self, constBulletSoftBodyNodeself, constLVector3fvelocity) -> Any: ...
    @overload
    def add_velocity(self, constBulletSoftBodyNodeself, constLVector3fvelocity, intnode) -> Any: ...
    def appendAnchor(self, *args, **kwargs): ...
    def appendAngularJoint(self, *args, **kwargs): ...
    def appendLinearJoint(self, *args, **kwargs): ...
    def appendMaterial(self, *args, **kwargs): ...
    @overload
    def append_anchor(self, constBulletSoftBodyNodeself, intnode, BulletRigidBodyNodebody) -> Any: ...
    @overload
    def append_anchor(self, constBulletSoftBodyNodeself, intnode, BulletRigidBodyNodebody, constLVector3fpivot, booldisable) -> Any: ...
    @overload
    def append_anchor(self, constBulletSoftBodyNodeself, intnode, BulletRigidBodyNodebody, booldisable) -> Any: ...
    def append_angular_joint(self, constBulletSoftBodyNodeself, BulletBodyNodebody, constLVector3faxis, floaterp, floatcfm, floatsplit, BulletSoftBodyControlcontrol) -> Any: ...
    @overload
    def append_linear_joint(self, constBulletSoftBodyNodeself, BulletBodyNodebody, constLPoint3fpos, floaterp, floatcfm, floatsplit) -> Any: ...
    @overload
    def append_linear_joint(self, constBulletSoftBodyNodeself, BulletBodyNodebody, intcluster, floaterp, floatcfm, floatsplit) -> Any: ...
    def append_material(self, constBulletSoftBodyNodeself) -> Any: ...
    def clusterCom(self, *args, **kwargs): ...
    def cluster_com(self, BulletSoftBodyNodeself, intcluster) -> Any: ...
    def generateBendingConstraints(self, *args, **kwargs): ...
    def generateClusters(self, *args, **kwargs): ...
    def generate_bending_constraints(self, constBulletSoftBodyNodeself, intdistance, BulletSoftBodyMaterialmaterial) -> Any: ...
    def generate_clusters(self, constBulletSoftBodyNodeself, intk, intmaxiterations) -> Any: ...
    def getAabb(self, *args, **kwargs): ...
    def getCfg(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getClosestNodeIndex(self, *args, **kwargs): ...
    def getMass(self, *args, **kwargs): ...
    def getMaterial(self, *args, **kwargs): ...
    def getMaterials(self, *args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getNodes(self, *args, **kwargs): ...
    def getNumClusters(self, *args, **kwargs): ...
    def getNumMaterials(self, *args, **kwargs): ...
    def getNumNodes(self, *args, **kwargs): ...
    def getTotalMass(self, *args, **kwargs): ...
    def getVolume(self, *args, **kwargs): ...
    def getWindVelocity(self, *args, **kwargs): ...
    def getWorldInfo(self, *args, **kwargs): ...
    def get_aabb(self, BulletSoftBodyNodeself) -> Any: ...
    def get_cfg(self, constBulletSoftBodyNodeself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_closest_node_index(self, constBulletSoftBodyNodeself, LVecBase3fpoint, boollocal) -> Any: ...
    def get_mass(self, BulletSoftBodyNodeself, intnode) -> Any: ...
    def get_material(self, BulletSoftBodyNodeself, intidx) -> Any: ...
    def get_materials(self, *args, **kwargs): ...
    def get_node(self, BulletSoftBodyNodeself, intidx) -> Any: ...
    def get_nodes(self, *args, **kwargs): ...
    def get_num_clusters(self, BulletSoftBodyNodeself) -> Any: ...
    def get_num_materials(self, BulletSoftBodyNodeself) -> Any: ...
    def get_num_nodes(self, BulletSoftBodyNodeself) -> Any: ...
    def get_total_mass(self, BulletSoftBodyNodeself) -> Any: ...
    def get_volume(self, BulletSoftBodyNodeself) -> Any: ...
    def get_wind_velocity(self, BulletSoftBodyNodeself) -> Any: ...
    def get_world_info(self, constBulletSoftBodyNodeself) -> Any: ...
    def linkCurve(self, *args, **kwargs): ...
    def linkGeom(self, *args, **kwargs): ...
    def linkSurface(self, *args, **kwargs): ...
    def link_curve(self, constBulletSoftBodyNodeself, NurbsCurveEvaluatorcurve) -> Any: ...
    def link_geom(self, constBulletSoftBodyNodeself, Geomgeom) -> Any: ...
    def link_surface(self, constBulletSoftBodyNodeself, NurbsSurfaceEvaluatorsurface) -> Any: ...
    @staticmethod
    def makeEllipsoid(*args, **kwargs): ...
    @staticmethod
    def makePatch(*args, **kwargs): ...
    @staticmethod
    def makeRope(*args, **kwargs): ...
    @staticmethod
    def makeTetMesh(*args, **kwargs): ...
    @staticmethod
    def makeTriMesh(*args, **kwargs): ...
    @staticmethod
    def make_ellipsoid(BulletSoftBodyWorldInfoinfo, constLPoint3fcenter, constLVecBase3fradius, intres) -> Any: ...
    @staticmethod
    def make_patch(BulletSoftBodyWorldInfoinfo, constLPoint3fcorner00, constLPoint3fcorner10, constLPoint3fcorner01, constLPoint3fcorner11, intresx, intresy, intfixeds, boolgendiags) -> Any: ...
    @staticmethod
    def make_rope(BulletSoftBodyWorldInfoinfo, constLPoint3ffrom, constLPoint3fto, intres, intfixeds) -> Any: ...
    @overload
    @staticmethod
    def make_tet_mesh(BulletSoftBodyWorldInfoinfo, PointerToArraypoints, PointerToArrayindices) -> Any: ...
    @overload
    @staticmethod
    def make_tet_mesh(BulletSoftBodyWorldInfoinfo, PointerToArraypoints, PointerToArrayindices, booltetralinks) -> Any: ...
    @overload
    @staticmethod
    def make_tet_mesh(BulletSoftBodyWorldInfoinfo, strele, strface, strnode) -> Any: ...
    @overload
    @staticmethod
    def make_tri_mesh(BulletSoftBodyWorldInfoinfo, constGeomgeom) -> Any: ...
    @overload
    @staticmethod
    def make_tri_mesh(BulletSoftBodyWorldInfoinfo, PointerToArraypoints, PointerToArrayindices, boolrandomizeConstraints) -> Any: ...
    @overload
    @staticmethod
    def make_tri_mesh(BulletSoftBodyWorldInfoinfo, constGeomgeom, boolrandomizeConstraints) -> Any: ...
    def randomizeConstraints(self, *args, **kwargs): ...
    def randomize_constraints(self, constBulletSoftBodyNodeself) -> Any: ...
    def releaseCluster(self, *args, **kwargs): ...
    def releaseClusters(self, *args, **kwargs): ...
    def release_cluster(self, constBulletSoftBodyNodeself, intindex) -> Any: ...
    def release_clusters(self, constBulletSoftBodyNodeself) -> Any: ...
    def setMass(self, *args, **kwargs): ...
    def setPose(self, *args, **kwargs): ...
    def setTotalDensity(self, *args, **kwargs): ...
    def setTotalMass(self, *args, **kwargs): ...
    def setVelocity(self, *args, **kwargs): ...
    def setVolumeDensity(self, *args, **kwargs): ...
    def setVolumeMass(self, *args, **kwargs): ...
    def setWindVelocity(self, *args, **kwargs): ...
    def set_mass(self, constBulletSoftBodyNodeself, intnode, floatmass) -> Any: ...
    def set_pose(self, constBulletSoftBodyNodeself, boolbvolume, boolbframe) -> Any: ...
    def set_total_density(self, constBulletSoftBodyNodeself, floatdensity) -> Any: ...
    def set_total_mass(self, constBulletSoftBodyNodeself, floatmass, boolfromfaces) -> Any: ...
    def set_velocity(self, constBulletSoftBodyNodeself, constLVector3fvelocity) -> Any: ...
    def set_volume_density(self, constBulletSoftBodyNodeself, floatdensity) -> Any: ...
    def set_volume_mass(self, constBulletSoftBodyNodeself, floatmass) -> Any: ...
    def set_wind_velocity(self, constBulletSoftBodyNodeself, constLVector3fvelocity) -> Any: ...
    def unlinkCurve(self, *args, **kwargs): ...
    def unlinkGeom(self, *args, **kwargs): ...
    def unlinkSurface(self, *args, **kwargs): ...
    def unlink_curve(self, constBulletSoftBodyNodeself) -> Any: ...
    def unlink_geom(self, constBulletSoftBodyNodeself) -> Any: ...
    def unlink_surface(self, constBulletSoftBodyNodeself) -> Any: ...

class BulletSoftBodyNodeElement(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    area: Incomplete
    attached: Incomplete
    inv_mass: Incomplete
    normal: Incomplete
    pos: Incomplete
    velocity: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def empty() -> Any: ...
    def getArea(self, *args, **kwargs): ...
    def getInvMass(self, *args, **kwargs): ...
    def getNormal(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getVelocity(self, *args, **kwargs): ...
    def get_area(self, BulletSoftBodyNodeElementself) -> Any: ...
    def get_inv_mass(self, BulletSoftBodyNodeElementself) -> Any: ...
    def get_normal(self, BulletSoftBodyNodeElementself) -> Any: ...
    def get_pos(self, BulletSoftBodyNodeElementself) -> Any: ...
    def get_velocity(self, BulletSoftBodyNodeElementself) -> Any: ...
    def isAttached(self, *args, **kwargs): ...
    def is_attached(self, BulletSoftBodyNodeElementself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletSoftBodyShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    body: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getBody(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_body(self, BulletSoftBodyShapeself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...

class BulletSoftBodyWorldInfo(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    air_density: Incomplete
    gravity: Incomplete
    water_density: Incomplete
    water_normal: Incomplete
    water_offset: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def garbageCollect(self, *args, **kwargs): ...
    def garbage_collect(self, constBulletSoftBodyWorldInfoself, intlifetime) -> Any: ...
    def getAirDensity(self, *args, **kwargs): ...
    def getGravity(self, *args, **kwargs): ...
    def getWaterDensity(self, *args, **kwargs): ...
    def getWaterNormal(self, *args, **kwargs): ...
    def getWaterOffset(self, *args, **kwargs): ...
    def get_air_density(self, BulletSoftBodyWorldInfoself) -> Any: ...
    def get_gravity(self, BulletSoftBodyWorldInfoself) -> Any: ...
    def get_water_density(self, BulletSoftBodyWorldInfoself) -> Any: ...
    def get_water_normal(self, BulletSoftBodyWorldInfoself) -> Any: ...
    def get_water_offset(self, BulletSoftBodyWorldInfoself) -> Any: ...
    def setAirDensity(self, *args, **kwargs): ...
    def setGravity(self, *args, **kwargs): ...
    def setWaterDensity(self, *args, **kwargs): ...
    def setWaterNormal(self, *args, **kwargs): ...
    def setWaterOffset(self, *args, **kwargs): ...
    def set_air_density(self, constBulletSoftBodyWorldInfoself, floatdensity) -> Any: ...
    def set_gravity(self, constBulletSoftBodyWorldInfoself, constLVector3fgravity) -> Any: ...
    def set_water_density(self, constBulletSoftBodyWorldInfoself, floatdensity) -> Any: ...
    def set_water_normal(self, constBulletSoftBodyWorldInfoself, constLVector3fnormal) -> Any: ...
    def set_water_offset(self, constBulletSoftBodyWorldInfoself, floatoffset) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletSphereShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    radius: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_radius(self, BulletSphereShapeself) -> Any: ...
    @staticmethod
    def makeFromSolid(*args, **kwargs): ...
    @staticmethod
    def make_from_solid(constCollisionSpheresolid) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletSphericalConstraint(BulletConstraint):
    DtoolClassDict: ClassVar[dict] = ...
    pivot_a: Incomplete
    pivot_b: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPivotInA(self, *args, **kwargs): ...
    def getPivotInB(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_pivot_in_a(self, BulletSphericalConstraintself) -> Any: ...
    def get_pivot_in_b(self, BulletSphericalConstraintself) -> Any: ...
    def setPivotA(self, *args, **kwargs): ...
    def setPivotB(self, *args, **kwargs): ...
    def set_pivot_a(self, constBulletSphericalConstraintself, constLPoint3fpivot_a) -> Any: ...
    def set_pivot_b(self, constBulletSphericalConstraintself, constLPoint3fpivot_b) -> Any: ...

class BulletTickCallbackData(panda3d.core.CallbackData):
    DtoolClassDict: ClassVar[dict] = ...
    timestep: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getTimestep(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_timestep(self, BulletTickCallbackDataself) -> Any: ...

class BulletTranslationalLimitMotor(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    accumulated_impulse: Incomplete
    current_diff: Incomplete
    current_error: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getAccumulatedImpulse(self, *args, **kwargs): ...
    def getCurrentDiff(self, *args, **kwargs): ...
    def getCurrentError(self, *args, **kwargs): ...
    def getCurrentLimit(self, *args, **kwargs): ...
    def getMotorEnabled(self, *args, **kwargs): ...
    def get_accumulated_impulse(self, BulletTranslationalLimitMotorself) -> Any: ...
    def get_current_diff(self, BulletTranslationalLimitMotorself) -> Any: ...
    def get_current_error(self, BulletTranslationalLimitMotorself) -> Any: ...
    def get_current_limit(self, BulletTranslationalLimitMotorself, intaxis) -> Any: ...
    def get_motor_enabled(self, BulletTranslationalLimitMotorself, intaxis) -> Any: ...
    def isLimited(self, *args, **kwargs): ...
    def is_limited(self, BulletTranslationalLimitMotorself, intaxis) -> Any: ...
    def setDamping(self, *args, **kwargs): ...
    def setHighLimit(self, *args, **kwargs): ...
    def setLowLimit(self, *args, **kwargs): ...
    def setMaxMotorForce(self, *args, **kwargs): ...
    def setMotorEnabled(self, *args, **kwargs): ...
    def setNormalCfm(self, *args, **kwargs): ...
    def setRestitution(self, *args, **kwargs): ...
    def setSoftness(self, *args, **kwargs): ...
    def setStopCfm(self, *args, **kwargs): ...
    def setStopErp(self, *args, **kwargs): ...
    def setTargetVelocity(self, *args, **kwargs): ...
    def set_damping(self, constBulletTranslationalLimitMotorself, floatdamping) -> Any: ...
    def set_high_limit(self, constBulletTranslationalLimitMotorself, constLVecBase3flimit) -> Any: ...
    def set_low_limit(self, constBulletTranslationalLimitMotorself, constLVecBase3flimit) -> Any: ...
    def set_max_motor_force(self, constBulletTranslationalLimitMotorself, constLVecBase3fforce) -> Any: ...
    def set_motor_enabled(self, constBulletTranslationalLimitMotorself, intaxis, boolenable) -> Any: ...
    def set_normal_cfm(self, constBulletTranslationalLimitMotorself, constLVecBase3fcfm) -> Any: ...
    def set_restitution(self, constBulletTranslationalLimitMotorself, floatrestitution) -> Any: ...
    def set_softness(self, constBulletTranslationalLimitMotorself, floatsoftness) -> Any: ...
    def set_stop_cfm(self, constBulletTranslationalLimitMotorself, constLVecBase3fcfm) -> Any: ...
    def set_stop_erp(self, constBulletTranslationalLimitMotorself, constLVecBase3ferp) -> Any: ...
    def set_target_velocity(self, constBulletTranslationalLimitMotorself, constLVecBase3fvelocity) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletTriangleMesh(panda3d.core.TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    triangles: Incomplete
    vertices: Incomplete
    welding_distance: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addArray(self, *args, **kwargs): ...
    def addGeom(self, *args, **kwargs): ...
    def addTriangle(self, *args, **kwargs): ...
    def add_array(self, constBulletTriangleMeshself, constPointerToArraypoints, constPointerToArrayindices, boolremove_duplicate_vertices) -> Any: ...
    def add_geom(self, constBulletTriangleMeshself, constGeomgeom, boolremove_duplicate_vertices, constTransformStatets) -> Any: ...
    def add_triangle(self, constBulletTriangleMeshself, constLPoint3fp0, constLPoint3fp1, constLPoint3fp2, boolremove_duplicate_vertices) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumTriangles(self, *args, **kwargs): ...
    def getWeldingDistance(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_triangles(self, BulletTriangleMeshself) -> Any: ...
    def get_welding_distance(self, BulletTriangleMeshself) -> Any: ...
    def output(self, BulletTriangleMeshself, ostreamout) -> Any: ...
    def preallocate(self, constBulletTriangleMeshself, intnum_verts, intnum_indices) -> Any: ...
    def setWeldingDistance(self, *args, **kwargs): ...
    def set_welding_distance(self, constBulletTriangleMeshself, floatdistance) -> Any: ...
    def write(self, BulletTriangleMeshself, ostreamout, intindent_level) -> Any: ...

class BulletTriangleMeshShape(BulletShape):
    DtoolClassDict: ClassVar[dict] = ...
    dynamic: Incomplete
    static: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def isDynamic(self, *args, **kwargs): ...
    def isStatic(self, *args, **kwargs): ...
    def is_dynamic(self, BulletTriangleMeshShapeself) -> Any: ...
    def is_static(self, BulletTriangleMeshShapeself) -> Any: ...
    def refitTree(self, *args, **kwargs): ...
    def refit_tree(self, constBulletTriangleMeshShapeself, constLPoint3faabb_min, constLPoint3faabb_max) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletVehicle(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    chassis: Incomplete
    current_speed_km_hour: Incomplete
    forward_vector: Incomplete
    tuning: Incomplete
    wheels: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def applyEngineForce(self, *args, **kwargs): ...
    def apply_engine_force(self, constBulletVehicleself, floatforce, intidx) -> Any: ...
    def createWheel(self, *args, **kwargs): ...
    def create_wheel(self, constBulletVehicleself, floatsuspension_rest_length) -> Any: ...
    def getChassis(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCurrentSpeedKmHour(self, *args, **kwargs): ...
    def getForwardVector(self, *args, **kwargs): ...
    def getNumWheels(self, *args, **kwargs): ...
    def getSteeringValue(self, *args, **kwargs): ...
    def getTuning(self, *args, **kwargs): ...
    def getWheel(self, *args, **kwargs): ...
    def getWheels(self, *args, **kwargs): ...
    def get_chassis(self, constBulletVehicleself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_current_speed_km_hour(self, BulletVehicleself) -> Any: ...
    def get_forward_vector(self, BulletVehicleself) -> Any: ...
    def get_num_wheels(self, BulletVehicleself) -> Any: ...
    def get_steering_value(self, BulletVehicleself, intidx) -> Any: ...
    def get_tuning(self, constBulletVehicleself) -> Any: ...
    def get_wheel(self, BulletVehicleself, intidx) -> Any: ...
    def get_wheels(self, *args, **kwargs): ...
    def resetSuspension(self, *args, **kwargs): ...
    def reset_suspension(self, constBulletVehicleself) -> Any: ...
    def setBrake(self, *args, **kwargs): ...
    def setCoordinateSystem(self, *args, **kwargs): ...
    def setPitchControl(self, *args, **kwargs): ...
    def setSteeringValue(self, *args, **kwargs): ...
    def set_brake(self, constBulletVehicleself, floatbrake, intidx) -> Any: ...
    def set_coordinate_system(self, constBulletVehicleself, intup) -> Any: ...
    def set_pitch_control(self, constBulletVehicleself, floatpitch) -> Any: ...
    def set_steering_value(self, constBulletVehicleself, floatsteering, intidx) -> Any: ...

class BulletVehicleTuning(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    friction_slip: Incomplete
    max_suspension_force: Incomplete
    max_suspension_travel_cm: Incomplete
    suspension_compression: Incomplete
    suspension_damping: Incomplete
    suspension_stiffness: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getFrictionSlip(self, *args, **kwargs): ...
    def getMaxSuspensionForce(self, *args, **kwargs): ...
    def getMaxSuspensionTravelCm(self, *args, **kwargs): ...
    def getSuspensionCompression(self, *args, **kwargs): ...
    def getSuspensionDamping(self, *args, **kwargs): ...
    def getSuspensionStiffness(self, *args, **kwargs): ...
    def get_friction_slip(self, BulletVehicleTuningself) -> Any: ...
    def get_max_suspension_force(self, BulletVehicleTuningself) -> Any: ...
    def get_max_suspension_travel_cm(self, BulletVehicleTuningself) -> Any: ...
    def get_suspension_compression(self, BulletVehicleTuningself) -> Any: ...
    def get_suspension_damping(self, BulletVehicleTuningself) -> Any: ...
    def get_suspension_stiffness(self, BulletVehicleTuningself) -> Any: ...
    def setFrictionSlip(self, *args, **kwargs): ...
    def setMaxSuspensionForce(self, *args, **kwargs): ...
    def setMaxSuspensionTravelCm(self, *args, **kwargs): ...
    def setSuspensionCompression(self, *args, **kwargs): ...
    def setSuspensionDamping(self, *args, **kwargs): ...
    def setSuspensionStiffness(self, *args, **kwargs): ...
    def set_friction_slip(self, constBulletVehicleTuningself, floatvalue) -> Any: ...
    def set_max_suspension_force(self, constBulletVehicleTuningself, floatvalue) -> Any: ...
    def set_max_suspension_travel_cm(self, constBulletVehicleTuningself, floatvalue) -> Any: ...
    def set_suspension_compression(self, constBulletVehicleTuningself, floatvalue) -> Any: ...
    def set_suspension_damping(self, constBulletVehicleTuningself, floatvalue) -> Any: ...
    def set_suspension_stiffness(self, constBulletVehicleTuningself, floatvalue) -> Any: ...

class BulletWheel(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    brake: Incomplete
    chassis_connection_point_cs: Incomplete
    clipped_inv_connection_point_cs: Incomplete
    delta_rotation: Incomplete
    engine_force: Incomplete
    friction_slip: Incomplete
    front_wheel: Incomplete
    max_suspension_force: Incomplete
    max_suspension_travel_cm: Incomplete
    node: Incomplete
    raycast_info: Incomplete
    roll_influence: Incomplete
    rotation: Incomplete
    skid_info: Incomplete
    steering: Incomplete
    suspension_relative_velocity: Incomplete
    suspension_rest_length: Incomplete
    suspension_stiffness: Incomplete
    wheel_axle_cs: Incomplete
    wheel_direction_cs: Incomplete
    wheel_radius: Incomplete
    wheels_damping_compression: Incomplete
    wheels_damping_relaxation: Incomplete
    wheels_suspension_force: Incomplete
    world_transform: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getBrake(self, *args, **kwargs): ...
    def getChassisConnectionPointCs(self, *args, **kwargs): ...
    def getClippedInvConnectionPointCs(self, *args, **kwargs): ...
    def getDeltaRotation(self, *args, **kwargs): ...
    def getEngineForce(self, *args, **kwargs): ...
    def getFrictionSlip(self, *args, **kwargs): ...
    def getMaxSuspensionForce(self, *args, **kwargs): ...
    def getMaxSuspensionTravelCm(self, *args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getRaycastInfo(self, *args, **kwargs): ...
    def getRollInfluence(self, *args, **kwargs): ...
    def getRotation(self, *args, **kwargs): ...
    def getSkidInfo(self, *args, **kwargs): ...
    def getSteering(self, *args, **kwargs): ...
    def getSuspensionRelativeVelocity(self, *args, **kwargs): ...
    def getSuspensionRestLength(self, *args, **kwargs): ...
    def getSuspensionStiffness(self, *args, **kwargs): ...
    def getWheelAxleCs(self, *args, **kwargs): ...
    def getWheelDirectionCs(self, *args, **kwargs): ...
    def getWheelRadius(self, *args, **kwargs): ...
    def getWheelsDampingCompression(self, *args, **kwargs): ...
    def getWheelsDampingRelaxation(self, *args, **kwargs): ...
    def getWheelsSuspensionForce(self, *args, **kwargs): ...
    def getWorldTransform(self, *args, **kwargs): ...
    def get_brake(self, BulletWheelself) -> Any: ...
    def get_chassis_connection_point_cs(self, BulletWheelself) -> Any: ...
    def get_clipped_inv_connection_point_cs(self, BulletWheelself) -> Any: ...
    def get_delta_rotation(self, BulletWheelself) -> Any: ...
    def get_engine_force(self, BulletWheelself) -> Any: ...
    def get_friction_slip(self, BulletWheelself) -> Any: ...
    def get_max_suspension_force(self, BulletWheelself) -> Any: ...
    def get_max_suspension_travel_cm(self, BulletWheelself) -> Any: ...
    def get_node(self, BulletWheelself) -> Any: ...
    def get_raycast_info(self, BulletWheelself) -> Any: ...
    def get_roll_influence(self, BulletWheelself) -> Any: ...
    def get_rotation(self, BulletWheelself) -> Any: ...
    def get_skid_info(self, BulletWheelself) -> Any: ...
    def get_steering(self, BulletWheelself) -> Any: ...
    def get_suspension_relative_velocity(self, BulletWheelself) -> Any: ...
    def get_suspension_rest_length(self, BulletWheelself) -> Any: ...
    def get_suspension_stiffness(self, BulletWheelself) -> Any: ...
    def get_wheel_axle_cs(self, BulletWheelself) -> Any: ...
    def get_wheel_direction_cs(self, BulletWheelself) -> Any: ...
    def get_wheel_radius(self, BulletWheelself) -> Any: ...
    def get_wheels_damping_compression(self, BulletWheelself) -> Any: ...
    def get_wheels_damping_relaxation(self, BulletWheelself) -> Any: ...
    def get_wheels_suspension_force(self, BulletWheelself) -> Any: ...
    def get_world_transform(self, BulletWheelself) -> Any: ...
    def isFrontWheel(self, *args, **kwargs): ...
    def is_front_wheel(self, BulletWheelself) -> Any: ...
    def setBrake(self, *args, **kwargs): ...
    def setChassisConnectionPointCs(self, *args, **kwargs): ...
    def setClippedInvConnectionPointCs(self, *args, **kwargs): ...
    def setDeltaRotation(self, *args, **kwargs): ...
    def setEngineForce(self, *args, **kwargs): ...
    def setFrictionSlip(self, *args, **kwargs): ...
    def setFrontWheel(self, *args, **kwargs): ...
    def setMaxSuspensionForce(self, *args, **kwargs): ...
    def setMaxSuspensionTravelCm(self, *args, **kwargs): ...
    def setNode(self, *args, **kwargs): ...
    def setRollInfluence(self, *args, **kwargs): ...
    def setRotation(self, *args, **kwargs): ...
    def setSkidInfo(self, *args, **kwargs): ...
    def setSteering(self, *args, **kwargs): ...
    def setSuspensionRelativeVelocity(self, *args, **kwargs): ...
    def setSuspensionStiffness(self, *args, **kwargs): ...
    def setWheelAxleCs(self, *args, **kwargs): ...
    def setWheelDirectionCs(self, *args, **kwargs): ...
    def setWheelRadius(self, *args, **kwargs): ...
    def setWheelsDampingCompression(self, *args, **kwargs): ...
    def setWheelsDampingRelaxation(self, *args, **kwargs): ...
    def setWheelsSuspensionForce(self, *args, **kwargs): ...
    def setWorldTransform(self, *args, **kwargs): ...
    def set_brake(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_chassis_connection_point_cs(self, constBulletWheelself, constLPoint3fpos) -> Any: ...
    def set_clipped_inv_connection_point_cs(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_delta_rotation(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_engine_force(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_friction_slip(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_front_wheel(self, constBulletWheelself, boolvalue) -> Any: ...
    def set_max_suspension_force(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_max_suspension_travel_cm(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_node(self, constBulletWheelself, PandaNodenode) -> Any: ...
    def set_roll_influence(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_rotation(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_skid_info(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_steering(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_suspension_relative_velocity(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_suspension_stiffness(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_wheel_axle_cs(self, constBulletWheelself, constLVector3faxle) -> Any: ...
    def set_wheel_direction_cs(self, constBulletWheelself, constLVector3fdir) -> Any: ...
    def set_wheel_radius(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_wheels_damping_compression(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_wheels_damping_relaxation(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_wheels_suspension_force(self, constBulletWheelself, floatvalue) -> Any: ...
    def set_world_transform(self, constBulletWheelself, constLMatrix4fmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletWheelRaycastInfo(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    contact_normal_ws: Incomplete
    contact_point_ws: Incomplete
    ground_object: Incomplete
    hard_point_ws: Incomplete
    in_contact: Incomplete
    suspension_length: Incomplete
    wheel_axle_ws: Incomplete
    wheel_direction_ws: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getContactNormalWs(self, *args, **kwargs): ...
    def getContactPointWs(self, *args, **kwargs): ...
    def getGroundObject(self, *args, **kwargs): ...
    def getHardPointWs(self, *args, **kwargs): ...
    def getSuspensionLength(self, *args, **kwargs): ...
    def getWheelAxleWs(self, *args, **kwargs): ...
    def getWheelDirectionWs(self, *args, **kwargs): ...
    def get_contact_normal_ws(self, BulletWheelRaycastInfoself) -> Any: ...
    def get_contact_point_ws(self, BulletWheelRaycastInfoself) -> Any: ...
    def get_ground_object(self, BulletWheelRaycastInfoself) -> Any: ...
    def get_hard_point_ws(self, BulletWheelRaycastInfoself) -> Any: ...
    def get_suspension_length(self, BulletWheelRaycastInfoself) -> Any: ...
    def get_wheel_axle_ws(self, BulletWheelRaycastInfoself) -> Any: ...
    def get_wheel_direction_ws(self, BulletWheelRaycastInfoself) -> Any: ...
    def isInContact(self, *args, **kwargs): ...
    def is_in_contact(self, BulletWheelRaycastInfoself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BulletWorld(panda3d.core.TypedReferenceCount):
    BADynamicAabbTree: ClassVar[int] = ...
    BASweepAndPrune: ClassVar[int] = ...
    BA_dynamic_aabb_tree: ClassVar[int] = ...
    BA_sweep_and_prune: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    FACallback: ClassVar[int] = ...
    FAGroupsMask: ClassVar[int] = ...
    FAMask: ClassVar[int] = ...
    FA_callback: ClassVar[int] = ...
    FA_groups_mask: ClassVar[int] = ...
    FA_mask: ClassVar[int] = ...
    characters: Incomplete
    constraints: Incomplete
    debug_node: Incomplete
    force_update_all_aabbs: Incomplete
    ghosts: Incomplete
    gravity: Incomplete
    manifolds: Incomplete
    rigid_bodies: Incomplete
    soft_bodies: Incomplete
    vehicles: Incomplete
    world_info: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def attach(self, constBulletWorldself, TypedObjectobject) -> Any: ...
    def attachCharacter(self, *args, **kwargs): ...
    def attachConstraint(self, *args, **kwargs): ...
    def attachGhost(self, *args, **kwargs): ...
    def attachRigidBody(self, *args, **kwargs): ...
    def attachSoftBody(self, *args, **kwargs): ...
    def attachVehicle(self, *args, **kwargs): ...
    def attach_character(self, constBulletWorldself, BulletBaseCharacterControllerNodenode) -> Any: ...
    def attach_constraint(self, constBulletWorldself, BulletConstraintconstraint, boollinked_collision) -> Any: ...
    def attach_ghost(self, constBulletWorldself, BulletGhostNodenode) -> Any: ...
    def attach_rigid_body(self, constBulletWorldself, BulletRigidBodyNodenode) -> Any: ...
    def attach_soft_body(self, constBulletWorldself, BulletSoftBodyNodenode) -> Any: ...
    def attach_vehicle(self, constBulletWorldself, BulletVehiclevehicle) -> Any: ...
    def clearContactAddedCallback(self, *args, **kwargs): ...
    def clearDebugNode(self, *args, **kwargs): ...
    def clearFilterCallback(self, *args, **kwargs): ...
    def clearTickCallback(self, *args, **kwargs): ...
    def clear_contact_added_callback(self, constBulletWorldself) -> Any: ...
    def clear_debug_node(self, constBulletWorldself) -> Any: ...
    def clear_filter_callback(self, constBulletWorldself) -> Any: ...
    def clear_tick_callback(self, constBulletWorldself) -> Any: ...
    def contactTest(self, *args, **kwargs): ...
    def contactTestPair(self, *args, **kwargs): ...
    def contact_test(self, BulletWorldself, PandaNodenode, booluse_filter) -> Any: ...
    def contact_test_pair(self, BulletWorldself, PandaNodenode0, PandaNodenode1) -> Any: ...
    def doPhysics(self, *args, **kwargs): ...
    def do_physics(self, constBulletWorldself, floatdt, intmax_substeps, floatstepsize) -> Any: ...
    def filterTest(self, *args, **kwargs): ...
    def filter_test(self, BulletWorldself, PandaNodenode0, PandaNodenode1) -> Any: ...
    def getCharacter(self, *args, **kwargs): ...
    def getCharacters(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getConstraint(self, *args, **kwargs): ...
    def getConstraints(self, *args, **kwargs): ...
    def getDebugNode(self, *args, **kwargs): ...
    def getForceUpdateAllAabbs(self, *args, **kwargs): ...
    def getGhost(self, *args, **kwargs): ...
    def getGhosts(self, *args, **kwargs): ...
    def getGravity(self, *args, **kwargs): ...
    def getGroupCollisionFlag(self, *args, **kwargs): ...
    def getManifold(self, *args, **kwargs): ...
    def getManifolds(self, *args, **kwargs): ...
    def getNumCharacters(self, *args, **kwargs): ...
    def getNumConstraints(self, *args, **kwargs): ...
    def getNumGhosts(self, *args, **kwargs): ...
    def getNumManifolds(self, *args, **kwargs): ...
    def getNumRigidBodies(self, *args, **kwargs): ...
    def getNumSoftBodies(self, *args, **kwargs): ...
    def getNumVehicles(self, *args, **kwargs): ...
    def getRigidBodies(self, *args, **kwargs): ...
    def getRigidBody(self, *args, **kwargs): ...
    def getSoftBodies(self, *args, **kwargs): ...
    def getSoftBody(self, *args, **kwargs): ...
    def getVehicle(self, *args, **kwargs): ...
    def getVehicles(self, *args, **kwargs): ...
    def getWorldInfo(self, *args, **kwargs): ...
    def get_character(self, BulletWorldself, intidx) -> Any: ...
    def get_characters(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_constraint(self, BulletWorldself, intidx) -> Any: ...
    def get_constraints(self, *args, **kwargs): ...
    def get_debug_node(self, BulletWorldself) -> Any: ...
    def get_force_update_all_aabbs(self, BulletWorldself) -> Any: ...
    def get_ghost(self, BulletWorldself, intidx) -> Any: ...
    def get_ghosts(self, *args, **kwargs): ...
    def get_gravity(self, BulletWorldself) -> Any: ...
    def get_group_collision_flag(self, BulletWorldself, intgroup1, intgroup2) -> Any: ...
    def get_manifold(self, BulletWorldself, intidx) -> Any: ...
    def get_manifolds(self, *args, **kwargs): ...
    def get_num_characters(self, BulletWorldself) -> Any: ...
    def get_num_constraints(self, BulletWorldself) -> Any: ...
    def get_num_ghosts(self, BulletWorldself) -> Any: ...
    def get_num_manifolds(self, BulletWorldself) -> Any: ...
    def get_num_rigid_bodies(self, BulletWorldself) -> Any: ...
    def get_num_soft_bodies(self, BulletWorldself) -> Any: ...
    def get_num_vehicles(self, BulletWorldself) -> Any: ...
    def get_rigid_bodies(self, *args, **kwargs): ...
    def get_rigid_body(self, BulletWorldself, intidx) -> Any: ...
    def get_soft_bodies(self, *args, **kwargs): ...
    def get_soft_body(self, BulletWorldself, intidx) -> Any: ...
    def get_vehicle(self, BulletWorldself, intidx) -> Any: ...
    def get_vehicles(self, *args, **kwargs): ...
    def get_world_info(self, constBulletWorldself) -> Any: ...
    def hasDebugNode(self, *args, **kwargs): ...
    def has_debug_node(self, BulletWorldself) -> Any: ...
    def rayTestAll(self, *args, **kwargs): ...
    def rayTestClosest(self, *args, **kwargs): ...
    def ray_test_all(self, BulletWorldself, constLPoint3ffrom_pos, constLPoint3fto_pos, constBitMaskmask) -> Any: ...
    def ray_test_closest(self, BulletWorldself, constLPoint3ffrom_pos, constLPoint3fto_pos, constBitMaskmask) -> Any: ...
    def remove(self, constBulletWorldself, TypedObjectobject) -> Any: ...
    def removeCharacter(self, *args, **kwargs): ...
    def removeConstraint(self, *args, **kwargs): ...
    def removeGhost(self, *args, **kwargs): ...
    def removeRigidBody(self, *args, **kwargs): ...
    def removeSoftBody(self, *args, **kwargs): ...
    def removeVehicle(self, *args, **kwargs): ...
    def remove_character(self, constBulletWorldself, BulletBaseCharacterControllerNodenode) -> Any: ...
    def remove_constraint(self, constBulletWorldself, BulletConstraintconstraint) -> Any: ...
    def remove_ghost(self, constBulletWorldself, BulletGhostNodenode) -> Any: ...
    def remove_rigid_body(self, constBulletWorldself, BulletRigidBodyNodenode) -> Any: ...
    def remove_soft_body(self, constBulletWorldself, BulletSoftBodyNodenode) -> Any: ...
    def remove_vehicle(self, constBulletWorldself, BulletVehiclevehicle) -> Any: ...
    def setContactAddedCallback(self, *args, **kwargs): ...
    def setDebugNode(self, *args, **kwargs): ...
    def setFilterCallback(self, *args, **kwargs): ...
    def setForceUpdateAllAabbs(self, *args, **kwargs): ...
    def setGravity(self, *args, **kwargs): ...
    def setGroupCollisionFlag(self, *args, **kwargs): ...
    def setTickCallback(self, *args, **kwargs): ...
    def set_contact_added_callback(self, constBulletWorldself, CallbackObjectobj) -> Any: ...
    def set_debug_node(self, constBulletWorldself, BulletDebugNodenode) -> Any: ...
    def set_filter_callback(self, constBulletWorldself, CallbackObjectobj) -> Any: ...
    def set_force_update_all_aabbs(self, constBulletWorldself, boolforce) -> Any: ...
    @overload
    def set_gravity(self, constBulletWorldself, constLVector3fgravity) -> Any: ...
    @overload
    def set_gravity(self, constBulletWorldself, floatgx, floatgy, floatgz) -> Any: ...
    def set_group_collision_flag(self, constBulletWorldself, intgroup1, intgroup2, boolenable) -> Any: ...
    def set_tick_callback(self, constBulletWorldself, CallbackObjectobj, boolis_pretick) -> Any: ...
    def sweepTestClosest(self, *args, **kwargs): ...
    def sweep_test_closest(self, BulletWorldself, BulletShapeshape, constTransformStatefrom_ts, constTransformStateto_ts, constBitMaskmask, floatpenetration) -> Any: ...

def Dtool_BorrowThisReference(*args, **kwargs): ...
def getBulletVersion(*args, **kwargs): ...
def getDefaultUpAxis(*args, **kwargs): ...
def get_bullet_version() -> Any: ...
def get_default_up_axis() -> Any: ...
