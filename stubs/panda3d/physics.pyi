import dtoolconfig
import panda3d.core
from _typeshed import Incomplete
from typing import Any, ClassVar, overload

Dtool_PyNativeInterface: int

class ActorNode(PhysicalNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getContactVector(self, *args, **kwargs): ...
    def getPhysicsObject(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_contact_vector(self, ActorNodeself) -> Any: ...
    def get_physics_object(self, constActorNodeself) -> Any: ...
    def setContactVector(self, *args, **kwargs): ...
    def setTransformLimit(self, *args, **kwargs): ...
    def set_contact_vector(self, constActorNodeself, constLVector3fcontact_vector) -> Any: ...
    def set_transform_limit(self, constActorNodeself, floatlimit) -> Any: ...
    def updateTransform(self, *args, **kwargs): ...
    def update_transform(self, constActorNodeself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class AngularEulerIntegrator(AngularIntegrator):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class AngularForce(BaseForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getQuat(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_quat(self, constAngularForceself, constPhysicsObjectpo) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, AngularForceself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class AngularIntegrator(BaseIntegrator):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class AngularVectorForce(AngularForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLocalQuat(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_local_quat(self, AngularVectorForceself) -> Any: ...
    def setHpr(self, *args, **kwargs): ...
    def setQuat(self, *args, **kwargs): ...
    def set_hpr(self, constAngularVectorForceself, floath, floatp, floatr) -> Any: ...
    def set_quat(self, constAngularVectorForceself, constLRotationfquat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ArcEmitter(RingEmitter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getEndAngle(self, *args, **kwargs): ...
    def getStartAngle(self, *args, **kwargs): ...
    def get_end_angle(self, constArcEmitterself) -> Any: ...
    def get_start_angle(self, constArcEmitterself) -> Any: ...
    def setArc(self, *args, **kwargs): ...
    def setEndAngle(self, *args, **kwargs): ...
    def setStartAngle(self, *args, **kwargs): ...
    def set_arc(self, constArcEmitterself, floatstartAngle, floatendAngle) -> Any: ...
    def set_end_angle(self, constArcEmitterself, floatangle) -> Any: ...
    def set_start_angle(self, constArcEmitterself, floatangle) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BaseForce(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getActive(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getForceNode(self, *args, **kwargs): ...
    def getForceNodePath(self, *args, **kwargs): ...
    def get_active(self, BaseForceself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_force_node(self, BaseForceself) -> Any: ...
    def get_force_node_path(self, BaseForceself) -> Any: ...
    def isLinear(self, *args, **kwargs): ...
    def is_linear(self, BaseForceself) -> Any: ...
    def output(self, BaseForceself, ostreamout) -> Any: ...
    def setActive(self, *args, **kwargs): ...
    def set_active(self, constBaseForceself, boolactive) -> Any: ...
    def write(self, BaseForceself, ostreamout, intindent_level) -> Any: ...

class BaseIntegrator(panda3d.core.ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def output(self, BaseIntegratorself, ostreamout) -> Any: ...
    def write(self, BaseIntegratorself, ostreamout, intindent) -> Any: ...
    def writePrecomputedAngularMatrices(self, *args, **kwargs): ...
    def writePrecomputedLinearMatrices(self, *args, **kwargs): ...
    def write_precomputed_angular_matrices(self, BaseIntegratorself, ostreamout, intindent) -> Any: ...
    def write_precomputed_linear_matrices(self, BaseIntegratorself, ostreamout, intindent) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BaseParticleEmitter(panda3d.core.ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    ETCUSTOM: ClassVar[int] = ...
    ETEXPLICIT: ClassVar[int] = ...
    ETRADIATE: ClassVar[int] = ...
    ET_CUSTOM: ClassVar[int] = ...
    ET_EXPLICIT: ClassVar[int] = ...
    ET_RADIATE: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def generate(self, constBaseParticleEmitterself, LPoint3fpos, LVector3fvel) -> Any: ...
    def getAmplitude(self, *args, **kwargs): ...
    def getAmplitudeSpread(self, *args, **kwargs): ...
    def getEmissionType(self, *args, **kwargs): ...
    def getExplicitLaunchVector(self, *args, **kwargs): ...
    def getOffsetForce(self, *args, **kwargs): ...
    def getRadiateOrigin(self, *args, **kwargs): ...
    def get_amplitude(self, BaseParticleEmitterself) -> Any: ...
    def get_amplitude_spread(self, BaseParticleEmitterself) -> Any: ...
    def get_emission_type(self, BaseParticleEmitterself) -> Any: ...
    def get_explicit_launch_vector(self, BaseParticleEmitterself) -> Any: ...
    def get_offset_force(self, BaseParticleEmitterself) -> Any: ...
    def get_radiate_origin(self, BaseParticleEmitterself) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, constBaseParticleEmitterself) -> Any: ...
    def output(self, BaseParticleEmitterself, ostreamout) -> Any: ...
    def setAmplitude(self, *args, **kwargs): ...
    def setAmplitudeSpread(self, *args, **kwargs): ...
    def setEmissionType(self, *args, **kwargs): ...
    def setExplicitLaunchVector(self, *args, **kwargs): ...
    def setOffsetForce(self, *args, **kwargs): ...
    def setRadiateOrigin(self, *args, **kwargs): ...
    def set_amplitude(self, constBaseParticleEmitterself, floata) -> Any: ...
    def set_amplitude_spread(self, constBaseParticleEmitterself, floatas) -> Any: ...
    def set_emission_type(self, constBaseParticleEmitterself, intet) -> Any: ...
    def set_explicit_launch_vector(self, constBaseParticleEmitterself, constLVector3felv) -> Any: ...
    def set_offset_force(self, constBaseParticleEmitterself, constLVector3fof) -> Any: ...
    def set_radiate_origin(self, constBaseParticleEmitterself, constLPoint3fro) -> Any: ...
    def write(self, BaseParticleEmitterself, ostreamout, intindent) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BaseParticleFactory(panda3d.core.ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getLifespanBase(self, *args, **kwargs): ...
    def getLifespanSpread(self, *args, **kwargs): ...
    def getMassBase(self, *args, **kwargs): ...
    def getMassSpread(self, *args, **kwargs): ...
    def getTerminalVelocityBase(self, *args, **kwargs): ...
    def getTerminalVelocitySpread(self, *args, **kwargs): ...
    def get_lifespan_base(self, BaseParticleFactoryself) -> Any: ...
    def get_lifespan_spread(self, BaseParticleFactoryself) -> Any: ...
    def get_mass_base(self, BaseParticleFactoryself) -> Any: ...
    def get_mass_spread(self, BaseParticleFactoryself) -> Any: ...
    def get_terminal_velocity_base(self, BaseParticleFactoryself) -> Any: ...
    def get_terminal_velocity_spread(self, BaseParticleFactoryself) -> Any: ...
    def output(self, BaseParticleFactoryself, ostreamout) -> Any: ...
    def setLifespanBase(self, *args, **kwargs): ...
    def setLifespanSpread(self, *args, **kwargs): ...
    def setMassBase(self, *args, **kwargs): ...
    def setMassSpread(self, *args, **kwargs): ...
    def setTerminalVelocityBase(self, *args, **kwargs): ...
    def setTerminalVelocitySpread(self, *args, **kwargs): ...
    def set_lifespan_base(self, constBaseParticleFactoryself, floatlb) -> Any: ...
    def set_lifespan_spread(self, constBaseParticleFactoryself, floatls) -> Any: ...
    def set_mass_base(self, constBaseParticleFactoryself, floatmb) -> Any: ...
    def set_mass_spread(self, constBaseParticleFactoryself, floatms) -> Any: ...
    def set_terminal_velocity_base(self, constBaseParticleFactoryself, floattvb) -> Any: ...
    def set_terminal_velocity_spread(self, constBaseParticleFactoryself, floattvs) -> Any: ...
    def write(self, BaseParticleFactoryself, ostreamout, intindent) -> Any: ...

class BaseParticleRenderer(panda3d.core.ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    PPBLENDCUBIC: ClassVar[int] = ...
    PPBLENDLINEAR: ClassVar[int] = ...
    PPNOBLEND: ClassVar[int] = ...
    PP_BLEND_CUBIC: ClassVar[int] = ...
    PP_BLEND_LINEAR: ClassVar[int] = ...
    PP_NO_BLEND: ClassVar[int] = ...
    PRALPHAIN: ClassVar[int] = ...
    PRALPHAINOUT: ClassVar[int] = ...
    PRALPHANONE: ClassVar[int] = ...
    PRALPHAOUT: ClassVar[int] = ...
    PRALPHAUSER: ClassVar[int] = ...
    PRNOTINITIALIZEDYET: ClassVar[int] = ...
    PR_ALPHA_IN: ClassVar[int] = ...
    PR_ALPHA_IN_OUT: ClassVar[int] = ...
    PR_ALPHA_NONE: ClassVar[int] = ...
    PR_ALPHA_OUT: ClassVar[int] = ...
    PR_ALPHA_USER: ClassVar[int] = ...
    PR_NOT_INITIALIZED_YET: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAlphaMode(self, *args, **kwargs): ...
    def getIgnoreScale(self, *args, **kwargs): ...
    def getRenderNode(self, *args, **kwargs): ...
    def getRenderNodePath(self, *args, **kwargs): ...
    def getUserAlpha(self, *args, **kwargs): ...
    def get_alpha_mode(self, BaseParticleRendererself) -> Any: ...
    def get_ignore_scale(self, BaseParticleRendererself) -> Any: ...
    def get_render_node(self, BaseParticleRendererself) -> Any: ...
    def get_render_node_path(self, BaseParticleRendererself) -> Any: ...
    def get_user_alpha(self, BaseParticleRendererself) -> Any: ...
    def output(self, BaseParticleRendererself, ostreamout) -> Any: ...
    def setAlphaMode(self, *args, **kwargs): ...
    def setColorBlendMode(self, *args, **kwargs): ...
    def setIgnoreScale(self, *args, **kwargs): ...
    def setUserAlpha(self, *args, **kwargs): ...
    def set_alpha_mode(self, constBaseParticleRendererself, intam) -> Any: ...
    def set_color_blend_mode(self, constBaseParticleRendererself, intbm, intoa, intob) -> Any: ...
    def set_ignore_scale(self, constBaseParticleRendererself, boolignore_scale) -> Any: ...
    def set_user_alpha(self, constBaseParticleRendererself, floatua) -> Any: ...
    def write(self, BaseParticleRendererself, ostreamout, intindent) -> Any: ...

class BoxEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getMaxBound(self, *args, **kwargs): ...
    def getMinBound(self, *args, **kwargs): ...
    def get_max_bound(self, BoxEmitterself) -> Any: ...
    def get_min_bound(self, BoxEmitterself) -> Any: ...
    def setMaxBound(self, *args, **kwargs): ...
    def setMinBound(self, *args, **kwargs): ...
    def set_max_bound(self, constBoxEmitterself, constLPoint3fvmax) -> Any: ...
    def set_min_bound(self, constBoxEmitterself, constLPoint3fvmin) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ColorInterpolationFunctionConstant(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColorA(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_color_a(self, ColorInterpolationFunctionConstantself) -> Any: ...
    def setColorA(self, *args, **kwargs): ...
    def set_color_a(self, constColorInterpolationFunctionConstantself, constLVecBase4fc) -> Any: ...

class ColorInterpolationFunctionLinear(ColorInterpolationFunctionConstant):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColorB(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_color_b(self, ColorInterpolationFunctionLinearself) -> Any: ...
    def setColorB(self, *args, **kwargs): ...
    def set_color_b(self, constColorInterpolationFunctionLinearself, constLVecBase4fc) -> Any: ...

class ColorInterpolationFunctionSinusoid(ColorInterpolationFunctionLinear):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPeriod(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_period(self, ColorInterpolationFunctionSinusoidself) -> Any: ...
    def setPeriod(self, *args, **kwargs): ...
    def set_period(self, constColorInterpolationFunctionSinusoidself, floatp) -> Any: ...

class ColorInterpolationFunctionStepwave(ColorInterpolationFunctionLinear):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getWidthA(self, *args, **kwargs): ...
    def getWidthB(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_width_a(self, ColorInterpolationFunctionStepwaveself) -> Any: ...
    def get_width_b(self, ColorInterpolationFunctionStepwaveself) -> Any: ...
    def setWidthA(self, *args, **kwargs): ...
    def setWidthB(self, *args, **kwargs): ...
    def set_width_a(self, constColorInterpolationFunctionStepwaveself, floatw) -> Any: ...
    def set_width_b(self, constColorInterpolationFunctionStepwaveself, floatw) -> Any: ...

class ColorInterpolationManager(panda3d.core.ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addConstant(self, *args, **kwargs): ...
    def addLinear(self, *args, **kwargs): ...
    def addSinusoid(self, *args, **kwargs): ...
    def addStepwave(self, *args, **kwargs): ...
    def add_constant(self, constColorInterpolationManagerself, floattime_begin, floattime_end, constLVecBase4fcolor, boolis_modulated) -> Any: ...
    def add_linear(self, constColorInterpolationManagerself, floattime_begin, floattime_end, constLVecBase4fcolor_a, constLVecBase4fcolor_b, boolis_modulated) -> Any: ...
    def add_sinusoid(self, constColorInterpolationManagerself, floattime_begin, floattime_end, constLVecBase4fcolor_a, constLVecBase4fcolor_b, floatperiod, boolis_modulated) -> Any: ...
    def add_stepwave(self, constColorInterpolationManagerself, floattime_begin, floattime_end, constLVecBase4fcolor_a, constLVecBase4fcolor_b, floatwidth_a, floatwidth_b, boolis_modulated) -> Any: ...
    def clearSegment(self, *args, **kwargs): ...
    def clearToInitial(self, *args, **kwargs): ...
    def clear_segment(self, constColorInterpolationManagerself, intseg_id) -> Any: ...
    def clear_to_initial(self, constColorInterpolationManagerself) -> Any: ...
    def getSegment(self, *args, **kwargs): ...
    def getSegmentIdList(self, *args, **kwargs): ...
    def get_segment(self, constColorInterpolationManagerself, intseg_id) -> Any: ...
    def get_segment_id_list(self, constColorInterpolationManagerself) -> Any: ...
    def setDefaultColor(self, *args, **kwargs): ...
    def set_default_color(self, constColorInterpolationManagerself, constLVecBase4fc) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ColorInterpolationSegment(panda3d.core.ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getFunction(self, *args, **kwargs): ...
    def getId(self, *args, **kwargs): ...
    def getTimeBegin(self, *args, **kwargs): ...
    def getTimeEnd(self, *args, **kwargs): ...
    @overload
    def get_function(self, ColorInterpolationSegmentself) -> Any: ...
    @overload
    def get_function(self) -> Any: ...
    def get_id(self, ColorInterpolationSegmentself) -> Any: ...
    def get_time_begin(self, ColorInterpolationSegmentself) -> Any: ...
    def get_time_end(self, ColorInterpolationSegmentself) -> Any: ...
    def isEnabled(self, *args, **kwargs): ...
    def isModulated(self, *args, **kwargs): ...
    def is_enabled(self, ColorInterpolationSegmentself) -> Any: ...
    def is_modulated(self, ColorInterpolationSegmentself) -> Any: ...
    def setEnabled(self, *args, **kwargs): ...
    def setIsModulated(self, *args, **kwargs): ...
    def setTimeBegin(self, *args, **kwargs): ...
    def setTimeEnd(self, *args, **kwargs): ...
    def set_enabled(self, constColorInterpolationSegmentself, boolenabled) -> Any: ...
    def set_is_modulated(self, constColorInterpolationSegmentself, boolflag) -> Any: ...
    def set_time_begin(self, constColorInterpolationSegmentself, floattime) -> Any: ...
    def set_time_end(self, constColorInterpolationSegmentself, floattime) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DiscEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getCubicLerping(self, *args, **kwargs): ...
    def getInnerAngle(self, *args, **kwargs): ...
    def getInnerMagnitude(self, *args, **kwargs): ...
    def getOuterAngle(self, *args, **kwargs): ...
    def getOuterMagnitude(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    def get_cubic_lerping(self, DiscEmitterself) -> Any: ...
    def get_inner_angle(self, DiscEmitterself) -> Any: ...
    def get_inner_magnitude(self, DiscEmitterself) -> Any: ...
    def get_outer_angle(self, DiscEmitterself) -> Any: ...
    def get_outer_magnitude(self, DiscEmitterself) -> Any: ...
    def get_radius(self, DiscEmitterself) -> Any: ...
    def setCubicLerping(self, *args, **kwargs): ...
    def setInnerAngle(self, *args, **kwargs): ...
    def setInnerMagnitude(self, *args, **kwargs): ...
    def setOuterAngle(self, *args, **kwargs): ...
    def setOuterMagnitude(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    def set_cubic_lerping(self, constDiscEmitterself, boolclerp) -> Any: ...
    def set_inner_angle(self, constDiscEmitterself, floati_angle) -> Any: ...
    def set_inner_magnitude(self, constDiscEmitterself, floati_mag) -> Any: ...
    def set_outer_angle(self, constDiscEmitterself, floato_angle) -> Any: ...
    def set_outer_magnitude(self, constDiscEmitterself, floato_mag) -> Any: ...
    def set_radius(self, constDiscEmitterself, floatr) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ForceNode(panda3d.core.PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    forces: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addForce(self, *args, **kwargs): ...
    def addForcesFrom(self, *args, **kwargs): ...
    def add_force(self, constForceNodeself, BaseForceforce) -> Any: ...
    def add_forces_from(self, constForceNodeself, constForceNodeother) -> Any: ...
    def clear(self, constForceNodeself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getForce(self, *args, **kwargs): ...
    def getForces(self, *args, **kwargs): ...
    def getNumForces(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_force(self, ForceNodeself, intindex) -> Any: ...
    def get_forces(self, *args, **kwargs): ...
    def get_num_forces(self, ForceNodeself) -> Any: ...
    def insertForce(self, *args, **kwargs): ...
    def insert_force(self, constForceNodeself, intindex, BaseForceforce) -> Any: ...
    def removeForce(self, *args, **kwargs): ...
    @overload
    def remove_force(self, constForceNodeself, BaseForceforce) -> Any: ...
    @overload
    def remove_force(self, constForceNodeself, intindex) -> Any: ...
    def setForce(self, *args, **kwargs): ...
    def set_force(self, constForceNodeself, intindex, BaseForceforce) -> Any: ...
    def writeForces(self, *args, **kwargs): ...
    def write_forces(self, ForceNodeself, ostreamout, intindent) -> Any: ...

class GeomParticleRenderer(BaseParticleRenderer):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getColorInterpolationManager(self, *args, **kwargs): ...
    def getFinalXScale(self, *args, **kwargs): ...
    def getFinalYScale(self, *args, **kwargs): ...
    def getFinalZScale(self, *args, **kwargs): ...
    def getGeomNode(self, *args, **kwargs): ...
    def getInitialXScale(self, *args, **kwargs): ...
    def getInitialYScale(self, *args, **kwargs): ...
    def getInitialZScale(self, *args, **kwargs): ...
    def getXScaleFlag(self, *args, **kwargs): ...
    def getYScaleFlag(self, *args, **kwargs): ...
    def getZScaleFlag(self, *args, **kwargs): ...
    def get_color_interpolation_manager(self, GeomParticleRendererself) -> Any: ...
    def get_final_x_scale(self, GeomParticleRendererself) -> Any: ...
    def get_final_y_scale(self, GeomParticleRendererself) -> Any: ...
    def get_final_z_scale(self, GeomParticleRendererself) -> Any: ...
    def get_geom_node(self, constGeomParticleRendererself) -> Any: ...
    def get_initial_x_scale(self, GeomParticleRendererself) -> Any: ...
    def get_initial_y_scale(self, GeomParticleRendererself) -> Any: ...
    def get_initial_z_scale(self, GeomParticleRendererself) -> Any: ...
    def get_x_scale_flag(self, GeomParticleRendererself) -> Any: ...
    def get_y_scale_flag(self, GeomParticleRendererself) -> Any: ...
    def get_z_scale_flag(self, GeomParticleRendererself) -> Any: ...
    def setFinalXScale(self, *args, **kwargs): ...
    def setFinalYScale(self, *args, **kwargs): ...
    def setFinalZScale(self, *args, **kwargs): ...
    def setGeomNode(self, *args, **kwargs): ...
    def setInitialXScale(self, *args, **kwargs): ...
    def setInitialYScale(self, *args, **kwargs): ...
    def setInitialZScale(self, *args, **kwargs): ...
    def setXScaleFlag(self, *args, **kwargs): ...
    def setYScaleFlag(self, *args, **kwargs): ...
    def setZScaleFlag(self, *args, **kwargs): ...
    def set_final_x_scale(self, constGeomParticleRendererself, floatfinal_x_scale) -> Any: ...
    def set_final_y_scale(self, constGeomParticleRendererself, floatfinal_y_scale) -> Any: ...
    def set_final_z_scale(self, constGeomParticleRendererself, floatfinal_z_scale) -> Any: ...
    def set_geom_node(self, constGeomParticleRendererself, PandaNodenode) -> Any: ...
    def set_initial_x_scale(self, constGeomParticleRendererself, floatinitial_x_scale) -> Any: ...
    def set_initial_y_scale(self, constGeomParticleRendererself, floatinitial_y_scale) -> Any: ...
    def set_initial_z_scale(self, constGeomParticleRendererself, floatinitial_z_scale) -> Any: ...
    def set_x_scale_flag(self, constGeomParticleRendererself, boolanimate_x_ratio) -> Any: ...
    def set_y_scale_flag(self, constGeomParticleRendererself, boolanimate_y_ratio) -> Any: ...
    def set_z_scale_flag(self, constGeomParticleRendererself, boolanimate_z_ratio) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LineEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getEndpoint1(self, *args, **kwargs): ...
    def getEndpoint2(self, *args, **kwargs): ...
    def get_endpoint1(self, LineEmitterself) -> Any: ...
    def get_endpoint2(self, LineEmitterself) -> Any: ...
    def setEndpoint1(self, *args, **kwargs): ...
    def setEndpoint2(self, *args, **kwargs): ...
    def set_endpoint1(self, constLineEmitterself, constLPoint3fpoint) -> Any: ...
    def set_endpoint2(self, constLineEmitterself, constLPoint3fpoint) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LineParticleRenderer(BaseParticleRenderer):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getHeadColor(self, *args, **kwargs): ...
    def getLineScaleFactor(self, *args, **kwargs): ...
    def getTailColor(self, *args, **kwargs): ...
    def get_head_color(self, LineParticleRendererself) -> Any: ...
    def get_line_scale_factor(self, LineParticleRendererself) -> Any: ...
    def get_tail_color(self, LineParticleRendererself) -> Any: ...
    def setHeadColor(self, *args, **kwargs): ...
    def setLineScaleFactor(self, *args, **kwargs): ...
    def setTailColor(self, *args, **kwargs): ...
    def set_head_color(self, constLineParticleRendererself, constLVecBase4fc) -> Any: ...
    def set_line_scale_factor(self, constLineParticleRendererself, floatsf) -> Any: ...
    def set_tail_color(self, constLineParticleRendererself, constLVecBase4fc) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LinearControlForce(LinearForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearPhysicsObject(self, *args, **kwargs): ...
    def clear_physics_object(self, constLinearControlForceself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLocalVector(self, *args, **kwargs): ...
    def getPhysicsObject(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_local_vector(self, LinearControlForceself) -> Any: ...
    def get_physics_object(self, LinearControlForceself) -> Any: ...
    def setPhysicsObject(self, *args, **kwargs): ...
    def setVector(self, *args, **kwargs): ...
    def set_physics_object(self, constLinearControlForceself, constPhysicsObjectpo) -> Any: ...
    @overload
    def set_vector(self, constLinearControlForceself, constLVector3fv) -> Any: ...
    @overload
    def set_vector(self, constLinearControlForceself, floatx, floaty, floatz) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LinearCylinderVortexForce(LinearForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCoef(self, *args, **kwargs): ...
    def getLength(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_coef(self, LinearCylinderVortexForceself) -> Any: ...
    def get_length(self, LinearCylinderVortexForceself) -> Any: ...
    def get_radius(self, LinearCylinderVortexForceself) -> Any: ...
    def setCoef(self, *args, **kwargs): ...
    def setLength(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    def set_coef(self, constLinearCylinderVortexForceself, floatcoef) -> Any: ...
    def set_length(self, constLinearCylinderVortexForceself, floatlength) -> Any: ...
    def set_radius(self, constLinearCylinderVortexForceself, floatradius) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LinearDistanceForce(LinearForce):
    DtoolClassDict: ClassVar[dict] = ...
    FTONEOVERR: ClassVar[int] = ...
    FTONEOVERRCUBED: ClassVar[int] = ...
    FTONEOVERRSQUARED: ClassVar[int] = ...
    FT_ONE_OVER_R: ClassVar[int] = ...
    FT_ONE_OVER_R_CUBED: ClassVar[int] = ...
    FT_ONE_OVER_R_SQUARED: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFalloffType(self, *args, **kwargs): ...
    def getForceCenter(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    def getScalarTerm(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_falloff_type(self, LinearDistanceForceself) -> Any: ...
    def get_force_center(self, LinearDistanceForceself) -> Any: ...
    def get_radius(self, LinearDistanceForceself) -> Any: ...
    def get_scalar_term(self, LinearDistanceForceself) -> Any: ...
    def setFalloffType(self, *args, **kwargs): ...
    def setForceCenter(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    def set_falloff_type(self, constLinearDistanceForceself, intft) -> Any: ...
    def set_force_center(self, constLinearDistanceForceself, constLPoint3fp) -> Any: ...
    def set_radius(self, constLinearDistanceForceself, floatr) -> Any: ...

class LinearEulerIntegrator(LinearIntegrator):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class LinearForce(BaseForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAmplitude(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMassDependent(self, *args, **kwargs): ...
    def getVector(self, *args, **kwargs): ...
    def getVectorMasks(self, *args, **kwargs): ...
    def get_amplitude(self, LinearForceself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_mass_dependent(self, LinearForceself) -> Any: ...
    def get_vector(self, constLinearForceself, constPhysicsObjectpo) -> Any: ...
    def get_vector_masks(self, constLinearForceself) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, constLinearForceself) -> Any: ...
    def setAmplitude(self, *args, **kwargs): ...
    def setMassDependent(self, *args, **kwargs): ...
    def setVectorMasks(self, *args, **kwargs): ...
    def set_amplitude(self, constLinearForceself, floata) -> Any: ...
    def set_mass_dependent(self, constLinearForceself, boolm) -> Any: ...
    def set_vector_masks(self, constLinearForceself, boolx, booly, boolz) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LinearFrictionForce(LinearForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCoef(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_coef(self, LinearFrictionForceself) -> Any: ...
    def setCoef(self, *args, **kwargs): ...
    def set_coef(self, constLinearFrictionForceself, floatcoef) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LinearIntegrator(BaseIntegrator):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class LinearJitterForce(LinearRandomForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LinearNoiseForce(LinearRandomForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LinearRandomForce(LinearForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class LinearSinkForce(LinearDistanceForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LinearSourceForce(LinearDistanceForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LinearUserDefinedForce(LinearForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LinearVectorForce(LinearForce):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLocalVector(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_local_vector(self, LinearVectorForceself) -> Any: ...
    def setVector(self, *args, **kwargs): ...
    @overload
    def set_vector(self, constLinearVectorForceself, constLVector3fv) -> Any: ...
    @overload
    def set_vector(self, constLinearVectorForceself, floatx, floaty, floatz) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ParticleSystem(Physical):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addSpawnTemplate(self, *args, **kwargs): ...
    def add_spawn_template(self, constParticleSystemself, ParticleSystemps) -> Any: ...
    def birthLitter(self, *args, **kwargs): ...
    def birth_litter(self, constParticleSystemself) -> Any: ...
    def clearFloorZ(self, *args, **kwargs): ...
    def clearSpawnTemplates(self, *args, **kwargs): ...
    def clearToInitial(self, *args, **kwargs): ...
    def clear_floor_z(self, constParticleSystemself) -> Any: ...
    def clear_spawn_templates(self, constParticleSystemself) -> Any: ...
    def clear_to_initial(self, constParticleSystemself) -> Any: ...
    def getActiveSystemFlag(self, *args, **kwargs): ...
    def getBirthRate(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getEmitter(self, *args, **kwargs): ...
    def getFactory(self, *args, **kwargs): ...
    def getFloorZ(self, *args, **kwargs): ...
    def getIWasSpawnedFlag(self, *args, **kwargs): ...
    def getLitterSize(self, *args, **kwargs): ...
    def getLitterSpread(self, *args, **kwargs): ...
    def getLivingParticles(self, *args, **kwargs): ...
    def getLocalVelocityFlag(self, *args, **kwargs): ...
    def getPoolSize(self, *args, **kwargs): ...
    def getRenderParent(self, *args, **kwargs): ...
    def getRenderer(self, *args, **kwargs): ...
    def getSoftBirthRate(self, *args, **kwargs): ...
    def getSpawnOnDeathFlag(self, *args, **kwargs): ...
    def getSpawnRenderNode(self, *args, **kwargs): ...
    def getSpawnRenderNodePath(self, *args, **kwargs): ...
    def getSystemAge(self, *args, **kwargs): ...
    def getSystemGrowsOlderFlag(self, *args, **kwargs): ...
    def getSystemLifespan(self, *args, **kwargs): ...
    def getTicsSinceBirth(self, *args, **kwargs): ...
    def get_active_system_flag(self, ParticleSystemself) -> Any: ...
    def get_birth_rate(self, ParticleSystemself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_emitter(self, ParticleSystemself) -> Any: ...
    def get_factory(self, ParticleSystemself) -> Any: ...
    def get_floor_z(self, ParticleSystemself) -> Any: ...
    def get_i_was_spawned_flag(self, ParticleSystemself) -> Any: ...
    def get_litter_size(self, ParticleSystemself) -> Any: ...
    def get_litter_spread(self, ParticleSystemself) -> Any: ...
    def get_living_particles(self, ParticleSystemself) -> Any: ...
    def get_local_velocity_flag(self, ParticleSystemself) -> Any: ...
    def get_pool_size(self, ParticleSystemself) -> Any: ...
    def get_render_parent(self, ParticleSystemself) -> Any: ...
    def get_renderer(self, ParticleSystemself) -> Any: ...
    def get_soft_birth_rate(self, ParticleSystemself) -> Any: ...
    def get_spawn_on_death_flag(self, ParticleSystemself) -> Any: ...
    def get_spawn_render_node(self, ParticleSystemself) -> Any: ...
    def get_spawn_render_node_path(self, ParticleSystemself) -> Any: ...
    def get_system_age(self, ParticleSystemself) -> Any: ...
    def get_system_grows_older_flag(self, ParticleSystemself) -> Any: ...
    def get_system_lifespan(self, ParticleSystemself) -> Any: ...
    def get_tics_since_birth(self, ParticleSystemself) -> Any: ...
    def induceLabor(self, *args, **kwargs): ...
    def induce_labor(self, constParticleSystemself) -> Any: ...
    def render(self, constParticleSystemself) -> Any: ...
    def setActiveSystemFlag(self, *args, **kwargs): ...
    def setBirthRate(self, *args, **kwargs): ...
    def setEmitter(self, *args, **kwargs): ...
    def setFactory(self, *args, **kwargs): ...
    def setFloorZ(self, *args, **kwargs): ...
    def setLitterSize(self, *args, **kwargs): ...
    def setLitterSpread(self, *args, **kwargs): ...
    def setLocalVelocityFlag(self, *args, **kwargs): ...
    def setPoolSize(self, *args, **kwargs): ...
    def setRenderParent(self, *args, **kwargs): ...
    def setRenderer(self, *args, **kwargs): ...
    def setSoftBirthRate(self, *args, **kwargs): ...
    def setSpawnOnDeathFlag(self, *args, **kwargs): ...
    def setSpawnRenderNode(self, *args, **kwargs): ...
    def setSpawnRenderNodePath(self, *args, **kwargs): ...
    def setSystemAge(self, *args, **kwargs): ...
    def setSystemGrowsOlderFlag(self, *args, **kwargs): ...
    def setSystemLifespan(self, *args, **kwargs): ...
    def setTemplateSystemFlag(self, *args, **kwargs): ...
    def set_active_system_flag(self, constParticleSystemself, boola) -> Any: ...
    def set_birth_rate(self, constParticleSystemself, floatnew_br) -> Any: ...
    def set_emitter(self, constParticleSystemself, BaseParticleEmittere) -> Any: ...
    def set_factory(self, constParticleSystemself, BaseParticleFactoryf) -> Any: ...
    def set_floor_z(self, constParticleSystemself, floatz) -> Any: ...
    def set_litter_size(self, constParticleSystemself, intnew_ls) -> Any: ...
    def set_litter_spread(self, constParticleSystemself, intnew_ls) -> Any: ...
    def set_local_velocity_flag(self, constParticleSystemself, boollv) -> Any: ...
    def set_pool_size(self, constParticleSystemself, intsize) -> Any: ...
    @overload
    def set_render_parent(self, constParticleSystemself, PandaNodenode) -> Any: ...
    @overload
    def set_render_parent(self, constParticleSystemself, constNodePathnode) -> Any: ...
    def set_renderer(self, constParticleSystemself, BaseParticleRendererr) -> Any: ...
    def set_soft_birth_rate(self, constParticleSystemself, floatnew_br) -> Any: ...
    def set_spawn_on_death_flag(self, constParticleSystemself, boolsod) -> Any: ...
    def set_spawn_render_node(self, constParticleSystemself, PandaNodenode) -> Any: ...
    def set_spawn_render_node_path(self, constParticleSystemself, constNodePathnode) -> Any: ...
    def set_system_age(self, constParticleSystemself, floatage) -> Any: ...
    def set_system_grows_older_flag(self, constParticleSystemself, boolsgo) -> Any: ...
    def set_system_lifespan(self, constParticleSystemself, floatsl) -> Any: ...
    def set_template_system_flag(self, constParticleSystemself, booltsf) -> Any: ...
    def softStart(self, *args, **kwargs): ...
    def softStop(self, *args, **kwargs): ...
    def soft_start(self, constParticleSystemself, floatbr, floatfirst_birth_delay) -> Any: ...
    def soft_stop(self, constParticleSystemself, floatbr) -> Any: ...
    def update(self, constParticleSystemself, floatdt) -> Any: ...
    def writeFreeParticleFifo(self, *args, **kwargs): ...
    def writeSpawnTemplates(self, *args, **kwargs): ...
    def write_free_particle_fifo(self, ParticleSystemself, ostreamout, intindent) -> Any: ...
    def write_spawn_templates(self, ParticleSystemself, ostreamout, intindent) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ParticleSystemManager(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def attachParticlesystem(self, *args, **kwargs): ...
    def attach_particlesystem(self, constParticleSystemManagerself, ParticleSystemps) -> Any: ...
    def clear(self, constParticleSystemManagerself) -> Any: ...
    def doParticles(self, *args, **kwargs): ...
    @overload
    def do_particles(self, constParticleSystemManagerself, floatdt) -> Any: ...
    @overload
    def do_particles(self, constParticleSystemManagerself, floatdt, ParticleSystemps, booldo_render) -> Any: ...
    def getFrameStepping(self, *args, **kwargs): ...
    def get_frame_stepping(self, ParticleSystemManagerself) -> Any: ...
    def output(self, ParticleSystemManagerself, ostreamout) -> Any: ...
    def removeParticlesystem(self, *args, **kwargs): ...
    def remove_particlesystem(self, constParticleSystemManagerself, ParticleSystemps) -> Any: ...
    def setFrameStepping(self, *args, **kwargs): ...
    def set_frame_stepping(self, constParticleSystemManagerself, intevery_nth_frame) -> Any: ...
    def write(self, ParticleSystemManagerself, ostreamout, intindent) -> Any: ...
    def writePsList(self, *args, **kwargs): ...
    def write_ps_list(self, ParticleSystemManagerself, ostreamout, intindent) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Physical(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    angular_forces: Incomplete
    linear_forces: Incomplete
    objects: Incomplete
    viscosity: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addAngularForce(self, *args, **kwargs): ...
    def addLinearForce(self, *args, **kwargs): ...
    def addPhysicsObject(self, *args, **kwargs): ...
    def add_angular_force(self, constPhysicalself, AngularForcef) -> Any: ...
    def add_linear_force(self, constPhysicalself, LinearForcef) -> Any: ...
    def add_physics_object(self, constPhysicalself, PhysicsObjectpo) -> Any: ...
    def clearAngularForces(self, *args, **kwargs): ...
    def clearLinearForces(self, *args, **kwargs): ...
    def clearPhysicsObjects(self, *args, **kwargs): ...
    def clear_angular_forces(self, constPhysicalself) -> Any: ...
    def clear_linear_forces(self, constPhysicalself) -> Any: ...
    def clear_physics_objects(self, constPhysicalself) -> Any: ...
    def getAngularForce(self, *args, **kwargs): ...
    def getAngularForces(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLinearForce(self, *args, **kwargs): ...
    def getLinearForces(self, *args, **kwargs): ...
    def getNumAngularForces(self, *args, **kwargs): ...
    def getNumLinearForces(self, *args, **kwargs): ...
    def getObjects(self, *args, **kwargs): ...
    def getPhysBody(self, *args, **kwargs): ...
    def getPhysicalNode(self, *args, **kwargs): ...
    def getPhysicalNodePath(self, *args, **kwargs): ...
    def getPhysicsManager(self, *args, **kwargs): ...
    def getViscosity(self, *args, **kwargs): ...
    def get_angular_force(self, Physicalself, intindex) -> Any: ...
    def get_angular_forces(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_linear_force(self, Physicalself, intindex) -> Any: ...
    def get_linear_forces(self, *args, **kwargs): ...
    def get_num_angular_forces(self, Physicalself) -> Any: ...
    def get_num_linear_forces(self, Physicalself) -> Any: ...
    def get_objects(self, Physicalself) -> Any: ...
    def get_phys_body(self, Physicalself) -> Any: ...
    def get_physical_node(self, Physicalself) -> Any: ...
    def get_physical_node_path(self, Physicalself) -> Any: ...
    def get_physics_manager(self, Physicalself) -> Any: ...
    def get_viscosity(self, Physicalself) -> Any: ...
    def output(self, Physicalself, ostreamout) -> Any: ...
    def removeAngularForce(self, *args, **kwargs): ...
    def removeLinearForce(self, *args, **kwargs): ...
    def remove_angular_force(self, constPhysicalself, AngularForcef) -> Any: ...
    def remove_linear_force(self, constPhysicalself, LinearForcef) -> Any: ...
    def setViscosity(self, *args, **kwargs): ...
    def set_viscosity(self, constPhysicalself, floatviscosity) -> Any: ...
    def write(self, Physicalself, ostreamout, intindent) -> Any: ...
    def writeAngularForces(self, *args, **kwargs): ...
    def writeLinearForces(self, *args, **kwargs): ...
    def writePhysicsObjects(self, *args, **kwargs): ...
    def write_angular_forces(self, Physicalself, ostreamout, intindent) -> Any: ...
    def write_linear_forces(self, Physicalself, ostreamout, intindent) -> Any: ...
    def write_physics_objects(self, Physicalself, ostreamout, intindent) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PhysicalNode(panda3d.core.PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    physicals: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addPhysical(self, *args, **kwargs): ...
    def addPhysicalsFrom(self, *args, **kwargs): ...
    def add_physical(self, constPhysicalNodeself, Physicalphysical) -> Any: ...
    def add_physicals_from(self, constPhysicalNodeself, constPhysicalNodeother) -> Any: ...
    def clear(self, constPhysicalNodeself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumPhysicals(self, *args, **kwargs): ...
    def getPhysical(self, *args, **kwargs): ...
    def getPhysicals(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_physicals(self, PhysicalNodeself) -> Any: ...
    def get_physical(self, PhysicalNodeself, intindex) -> Any: ...
    def get_physicals(self, *args, **kwargs): ...
    def insertPhysical(self, *args, **kwargs): ...
    def insert_physical(self, constPhysicalNodeself, intindex, Physicalphysical) -> Any: ...
    def removePhysical(self, *args, **kwargs): ...
    @overload
    def remove_physical(self, constPhysicalNodeself, Physicalphysical) -> Any: ...
    @overload
    def remove_physical(self, constPhysicalNodeself, intindex) -> Any: ...
    def setPhysical(self, *args, **kwargs): ...
    def set_physical(self, constPhysicalNodeself, intindex, Physicalphysical) -> Any: ...

class PhysicsCollisionHandler(panda3d.core.CollisionHandlerPusher):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAlmostStationarySpeed(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDynamicFrictionCoef(self, *args, **kwargs): ...
    def getStaticFrictionCoef(self, *args, **kwargs): ...
    def get_almost_stationary_speed(self, constPhysicsCollisionHandlerself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_dynamic_friction_coef(self, constPhysicsCollisionHandlerself) -> Any: ...
    def get_static_friction_coef(self, constPhysicsCollisionHandlerself) -> Any: ...
    def setAlmostStationarySpeed(self, *args, **kwargs): ...
    def setDynamicFrictionCoef(self, *args, **kwargs): ...
    def setStaticFrictionCoef(self, *args, **kwargs): ...
    def set_almost_stationary_speed(self, constPhysicsCollisionHandlerself, floatspeed) -> Any: ...
    def set_dynamic_friction_coef(self, constPhysicsCollisionHandlerself, floatcoef) -> Any: ...
    def set_static_friction_coef(self, constPhysicsCollisionHandlerself, floatcoef) -> Any: ...

class PhysicsManager(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addAngularForce(self, *args, **kwargs): ...
    def addLinearForce(self, *args, **kwargs): ...
    def add_angular_force(self, constPhysicsManagerself, AngularForcef) -> Any: ...
    def add_linear_force(self, constPhysicsManagerself, LinearForcef) -> Any: ...
    def attachAngularIntegrator(self, *args, **kwargs): ...
    def attachLinearIntegrator(self, *args, **kwargs): ...
    def attachPhysical(self, *args, **kwargs): ...
    def attachPhysicalNode(self, *args, **kwargs): ...
    def attachPhysicalnode(self, *args, **kwargs): ...
    def attach_angular_integrator(self, constPhysicsManagerself, AngularIntegratori) -> Any: ...
    def attach_linear_integrator(self, constPhysicsManagerself, LinearIntegratori) -> Any: ...
    def attach_physical(self, constPhysicsManagerself, Physicalp) -> Any: ...
    def attach_physical_node(self, constPhysicsManagerself, PhysicalNodep) -> Any: ...
    def attach_physicalnode(self, constPhysicsManagerself, PhysicalNodep) -> Any: ...
    def clearAngularForces(self, *args, **kwargs): ...
    def clearLinearForces(self, *args, **kwargs): ...
    def clearPhysicals(self, *args, **kwargs): ...
    def clear_angular_forces(self, constPhysicsManagerself) -> Any: ...
    def clear_linear_forces(self, constPhysicsManagerself) -> Any: ...
    def clear_physicals(self, constPhysicsManagerself) -> Any: ...
    def debugOutput(self, *args, **kwargs): ...
    def debug_output(self, PhysicsManagerself, ostreamout, intindent) -> Any: ...
    def doPhysics(self, *args, **kwargs): ...
    @overload
    def do_physics(self, constPhysicsManagerself, floatdt) -> Any: ...
    @overload
    def do_physics(self, constPhysicsManagerself, floatdt, Physicalp) -> Any: ...
    def getViscosity(self, *args, **kwargs): ...
    def get_viscosity(self, PhysicsManagerself) -> Any: ...
    def initRandomSeed(self, *args, **kwargs): ...
    def init_random_seed(self, constPhysicsManagerself) -> Any: ...
    def output(self, PhysicsManagerself, ostreamout) -> Any: ...
    def removeAngularForce(self, *args, **kwargs): ...
    def removeLinearForce(self, *args, **kwargs): ...
    def removePhysical(self, *args, **kwargs): ...
    def removePhysicalNode(self, *args, **kwargs): ...
    def remove_angular_force(self, constPhysicsManagerself, AngularForcef) -> Any: ...
    def remove_linear_force(self, constPhysicsManagerself, LinearForcef) -> Any: ...
    def remove_physical(self, constPhysicsManagerself, Physicalp) -> Any: ...
    def remove_physical_node(self, constPhysicsManagerself, PhysicalNodep) -> Any: ...
    def setViscosity(self, *args, **kwargs): ...
    def set_viscosity(self, constPhysicsManagerself, floatviscosity) -> Any: ...
    def write(self, PhysicsManagerself, ostreamout, intindent) -> Any: ...
    def writeAngularForces(self, *args, **kwargs): ...
    def writeLinearForces(self, *args, **kwargs): ...
    def writePhysicals(self, *args, **kwargs): ...
    def write_angular_forces(self, PhysicsManagerself, ostreamout, intindent) -> Any: ...
    def write_linear_forces(self, PhysicsManagerself, ostreamout, intindent) -> Any: ...
    def write_physicals(self, PhysicsManagerself, ostreamout, intindent) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PhysicsObject(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    active: Incomplete
    implicit_velocity: Incomplete
    last_position: Incomplete
    mass: Incomplete
    orientation: Incomplete
    oriented: Incomplete
    position: Incomplete
    rotation: Incomplete
    terminal_velocity: Incomplete
    velocity: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addImpact(self, *args, **kwargs): ...
    def addImpulse(self, *args, **kwargs): ...
    def addLocalImpact(self, *args, **kwargs): ...
    def addLocalImpulse(self, *args, **kwargs): ...
    def addLocalTorque(self, *args, **kwargs): ...
    def addTorque(self, *args, **kwargs): ...
    def add_impact(self, constPhysicsObjectself, constLPoint3foffset_from_center_of_mass, constLVector3fimpulse) -> Any: ...
    def add_impulse(self, constPhysicsObjectself, constLVector3fimpulse) -> Any: ...
    def add_local_impact(self, constPhysicsObjectself, constLPoint3foffset_from_center_of_mass, constLVector3fimpulse) -> Any: ...
    def add_local_impulse(self, constPhysicsObjectself, constLVector3fimpulse) -> Any: ...
    def add_local_torque(self, constPhysicsObjectself, constLRotationftorque) -> Any: ...
    def add_torque(self, constPhysicsObjectself, constLRotationftorque) -> Any: ...
    def assign(self, constPhysicsObjectself, constPhysicsObjectother) -> Any: ...
    def getActive(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getImplicitVelocity(self, *args, **kwargs): ...
    def getInertialTensor(self, *args, **kwargs): ...
    def getLastPosition(self, *args, **kwargs): ...
    def getLcs(self, *args, **kwargs): ...
    def getMass(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getOrientation(self, *args, **kwargs): ...
    def getOriented(self, *args, **kwargs): ...
    def getPosition(self, *args, **kwargs): ...
    def getRotation(self, *args, **kwargs): ...
    def getTerminalVelocity(self, *args, **kwargs): ...
    def getVelocity(self, *args, **kwargs): ...
    def get_active(self, PhysicsObjectself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_implicit_velocity(self, PhysicsObjectself) -> Any: ...
    def get_inertial_tensor(self, PhysicsObjectself) -> Any: ...
    def get_last_position(self, PhysicsObjectself) -> Any: ...
    def get_lcs(self, PhysicsObjectself) -> Any: ...
    def get_mass(self, PhysicsObjectself) -> Any: ...
    def get_name(self, constPhysicsObjectself) -> Any: ...
    def get_orientation(self, PhysicsObjectself) -> Any: ...
    def get_oriented(self, PhysicsObjectself) -> Any: ...
    def get_position(self, PhysicsObjectself) -> Any: ...
    def get_rotation(self, PhysicsObjectself) -> Any: ...
    def get_terminal_velocity(self, PhysicsObjectself) -> Any: ...
    def get_velocity(self, PhysicsObjectself) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, PhysicsObjectself) -> Any: ...
    def output(self, PhysicsObjectself, ostreamout) -> Any: ...
    def resetOrientation(self, *args, **kwargs): ...
    def resetPosition(self, *args, **kwargs): ...
    def reset_orientation(self, constPhysicsObjectself, constLOrientationforientation) -> Any: ...
    def reset_position(self, constPhysicsObjectself, constLPoint3fpos) -> Any: ...
    def setActive(self, *args, **kwargs): ...
    def setLastPosition(self, *args, **kwargs): ...
    def setMass(self, *args, **kwargs): ...
    def setName(self, *args, **kwargs): ...
    def setOrientation(self, *args, **kwargs): ...
    def setOriented(self, *args, **kwargs): ...
    def setPosition(self, *args, **kwargs): ...
    def setRotation(self, *args, **kwargs): ...
    def setTerminalVelocity(self, *args, **kwargs): ...
    def setVelocity(self, *args, **kwargs): ...
    def set_active(self, constPhysicsObjectself, boolflag) -> Any: ...
    def set_last_position(self, constPhysicsObjectself, constLPoint3fpos) -> Any: ...
    def set_mass(self, constPhysicsObjectself, floatparam0) -> Any: ...
    def set_name(self, constPhysicsObjectself, strname) -> Any: ...
    def set_orientation(self, constPhysicsObjectself, constLOrientationforientation) -> Any: ...
    def set_oriented(self, constPhysicsObjectself, boolflag) -> Any: ...
    @overload
    def set_position(self, constPhysicsObjectself, constLPoint3fpos) -> Any: ...
    @overload
    def set_position(self, constPhysicsObjectself, floatx, floaty, floatz) -> Any: ...
    def set_rotation(self, constPhysicsObjectself, constLRotationfrotation) -> Any: ...
    def set_terminal_velocity(self, constPhysicsObjectself, floattv) -> Any: ...
    @overload
    def set_velocity(self, constPhysicsObjectself, constLVector3fvel) -> Any: ...
    @overload
    def set_velocity(self, constPhysicsObjectself, floatx, floaty, floatz) -> Any: ...
    def write(self, PhysicsObjectself, ostreamout, intindent) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PhysicsObjectCollection(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addPhysicsObject(self, *args, **kwargs): ...
    def addPhysicsObjectsFrom(self, *args, **kwargs): ...
    def add_physics_object(self, constPhysicsObjectCollectionself, PhysicsObjectphysics_object) -> Any: ...
    def add_physics_objects_from(self, constPhysicsObjectCollectionself, constPhysicsObjectCollectionother) -> Any: ...
    def assign(self, constPhysicsObjectCollectionself, constPhysicsObjectCollectioncopy) -> Any: ...
    def clear(self, constPhysicsObjectCollectionself) -> Any: ...
    def getNumPhysicsObjects(self, *args, **kwargs): ...
    def getPhysicsObject(self, *args, **kwargs): ...
    def getPhysicsObjects(self, *args, **kwargs): ...
    def get_num_physics_objects(self, PhysicsObjectCollectionself) -> Any: ...
    def get_physics_object(self, PhysicsObjectCollectionself, intindex) -> Any: ...
    def get_physics_objects(self, *args, **kwargs): ...
    def hasPhysicsObject(self, *args, **kwargs): ...
    def has_physics_object(self, PhysicsObjectCollectionself, PhysicsObjectphysics_object) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, PhysicsObjectCollectionself) -> Any: ...
    def output(self, PhysicsObjectCollectionself, ostreamout) -> Any: ...
    def removeDuplicatePhysicsObjects(self, *args, **kwargs): ...
    def removePhysicsObject(self, *args, **kwargs): ...
    def removePhysicsObjectsFrom(self, *args, **kwargs): ...
    def remove_duplicate_physics_objects(self, constPhysicsObjectCollectionself) -> Any: ...
    def remove_physics_object(self, constPhysicsObjectCollectionself, PhysicsObjectphysics_object) -> Any: ...
    def remove_physics_objects_from(self, constPhysicsObjectCollectionself, constPhysicsObjectCollectionother) -> Any: ...
    def write(self, PhysicsObjectCollectionself, ostreamout, intindent_level) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __iadd__(self, other): ...
    def __len__(self) -> int: ...
    def __radd__(self, other): ...

class PointEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getLocation(self, *args, **kwargs): ...
    def get_location(self, PointEmitterself) -> Any: ...
    def setLocation(self, *args, **kwargs): ...
    def set_location(self, constPointEmitterself, constLPoint3fp) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PointParticleFactory(BaseParticleFactory):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PointParticleRenderer(BaseParticleRenderer):
    DtoolClassDict: ClassVar[dict] = ...
    PPBLENDLIFE: ClassVar[int] = ...
    PPBLENDVEL: ClassVar[int] = ...
    PPONECOLOR: ClassVar[int] = ...
    PP_BLEND_LIFE: ClassVar[int] = ...
    PP_BLEND_VEL: ClassVar[int] = ...
    PP_ONE_COLOR: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getBlendMethod(self, *args, **kwargs): ...
    def getBlendType(self, *args, **kwargs): ...
    def getEndColor(self, *args, **kwargs): ...
    def getPointSize(self, *args, **kwargs): ...
    def getStartColor(self, *args, **kwargs): ...
    def get_blend_method(self, PointParticleRendererself) -> Any: ...
    def get_blend_type(self, PointParticleRendererself) -> Any: ...
    def get_end_color(self, PointParticleRendererself) -> Any: ...
    def get_point_size(self, PointParticleRendererself) -> Any: ...
    def get_start_color(self, PointParticleRendererself) -> Any: ...
    def setBlendMethod(self, *args, **kwargs): ...
    def setBlendType(self, *args, **kwargs): ...
    def setEndColor(self, *args, **kwargs): ...
    def setPointSize(self, *args, **kwargs): ...
    def setStartColor(self, *args, **kwargs): ...
    def set_blend_method(self, constPointParticleRendererself, intbm) -> Any: ...
    def set_blend_type(self, constPointParticleRendererself, intbt) -> Any: ...
    def set_end_color(self, constPointParticleRendererself, constLVecBase4fec) -> Any: ...
    def set_point_size(self, constPointParticleRendererself, floatpoint_size) -> Any: ...
    def set_start_color(self, constPointParticleRendererself, constLVecBase4fsc) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class RectangleEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getMaxBound(self, *args, **kwargs): ...
    def getMinBound(self, *args, **kwargs): ...
    def get_max_bound(self, RectangleEmitterself) -> Any: ...
    def get_min_bound(self, RectangleEmitterself) -> Any: ...
    def setMaxBound(self, *args, **kwargs): ...
    def setMinBound(self, *args, **kwargs): ...
    def set_max_bound(self, constRectangleEmitterself, constLPoint2fvmax) -> Any: ...
    def set_min_bound(self, constRectangleEmitterself, constLPoint2fvmin) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class RingEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAngle(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    def getRadiusSpread(self, *args, **kwargs): ...
    def getUniformEmission(self, *args, **kwargs): ...
    def get_angle(self, RingEmitterself) -> Any: ...
    def get_radius(self, RingEmitterself) -> Any: ...
    def get_radius_spread(self, RingEmitterself) -> Any: ...
    def get_uniform_emission(self, RingEmitterself) -> Any: ...
    def setAngle(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    def setRadiusSpread(self, *args, **kwargs): ...
    def setUniformEmission(self, *args, **kwargs): ...
    def set_angle(self, constRingEmitterself, floatangle) -> Any: ...
    def set_radius(self, constRingEmitterself, floatr) -> Any: ...
    def set_radius_spread(self, constRingEmitterself, floatspread) -> Any: ...
    def set_uniform_emission(self, constRingEmitterself, intuniform_emission) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class SparkleParticleRenderer(BaseParticleRenderer):
    DtoolClassDict: ClassVar[dict] = ...
    SPNOSCALE: ClassVar[int] = ...
    SPSCALE: ClassVar[int] = ...
    SP_NO_SCALE: ClassVar[int] = ...
    SP_SCALE: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getBirthRadius(self, *args, **kwargs): ...
    def getCenterColor(self, *args, **kwargs): ...
    def getDeathRadius(self, *args, **kwargs): ...
    def getEdgeColor(self, *args, **kwargs): ...
    def getLifeScale(self, *args, **kwargs): ...
    def get_birth_radius(self, SparkleParticleRendererself) -> Any: ...
    def get_center_color(self, SparkleParticleRendererself) -> Any: ...
    def get_death_radius(self, SparkleParticleRendererself) -> Any: ...
    def get_edge_color(self, SparkleParticleRendererself) -> Any: ...
    def get_life_scale(self, SparkleParticleRendererself) -> Any: ...
    def setBirthRadius(self, *args, **kwargs): ...
    def setCenterColor(self, *args, **kwargs): ...
    def setDeathRadius(self, *args, **kwargs): ...
    def setEdgeColor(self, *args, **kwargs): ...
    def setLifeScale(self, *args, **kwargs): ...
    def set_birth_radius(self, constSparkleParticleRendererself, floatradius) -> Any: ...
    def set_center_color(self, constSparkleParticleRendererself, constLVecBase4fc) -> Any: ...
    def set_death_radius(self, constSparkleParticleRendererself, floatradius) -> Any: ...
    def set_edge_color(self, constSparkleParticleRendererself, constLVecBase4fc) -> Any: ...
    def set_life_scale(self, constSparkleParticleRendererself, intparam0) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class SphereSurfaceEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getRadius(self, *args, **kwargs): ...
    def get_radius(self, SphereSurfaceEmitterself) -> Any: ...
    def setRadius(self, *args, **kwargs): ...
    def set_radius(self, constSphereSurfaceEmitterself, floatr) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class SphereVolumeEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getRadius(self, *args, **kwargs): ...
    def get_radius(self, SphereVolumeEmitterself) -> Any: ...
    def setRadius(self, *args, **kwargs): ...
    def set_radius(self, constSphereVolumeEmitterself, floatr) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class SpriteAnim(panda3d.core.ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    STFromNode: ClassVar[int] = ...
    STTexture: ClassVar[int] = ...
    ST_from_node: ClassVar[int] = ...
    ST_texture: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getModelSource(self, *args, **kwargs): ...
    def getNodeSource(self, *args, **kwargs): ...
    def getNumFrames(self, *args, **kwargs): ...
    def getSourceType(self, *args, **kwargs): ...
    def getTexSource(self, *args, **kwargs): ...
    def get_model_source(self, SpriteAnimself) -> Any: ...
    def get_node_source(self, SpriteAnimself) -> Any: ...
    def get_num_frames(self, SpriteAnimself) -> Any: ...
    def get_source_type(self, SpriteAnimself) -> Any: ...
    def get_tex_source(self, SpriteAnimself) -> Any: ...
    def setSourceInfo(self, *args, **kwargs): ...
    @overload
    def set_source_info(self, constSpriteAnimself, strtex) -> Any: ...
    @overload
    def set_source_info(self, constSpriteAnimself, strmodel, strnode) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class SpriteParticleRenderer(BaseParticleRenderer):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addFromNode(self, *args, **kwargs): ...
    def addTexture(self, *args, **kwargs): ...
    @overload
    def add_from_node(self, constSpriteParticleRendererself, constNodePathnode_path) -> Any: ...
    @overload
    def add_from_node(self, constSpriteParticleRendererself, constNodePathnode_path, boolsize_from_texels) -> Any: ...
    @overload
    def add_from_node(self, constSpriteParticleRendererself, constNodePathnode_path, strmodel, strnode, boolsize_from_texels, boolresize) -> Any: ...
    @overload
    def add_from_node(self, constSpriteParticleRendererself, constNodePathnode_path, boolsize_from_texels, boolresize) -> Any: ...
    def add_texture(self, constSpriteParticleRendererself, Texturetex, floattexels_per_unit, boolresize) -> Any: ...
    def getAlphaBlendMethod(self, *args, **kwargs): ...
    def getAlphaDisable(self, *args, **kwargs): ...
    def getAnim(self, *args, **kwargs): ...
    def getAnimAngleFlag(self, *args, **kwargs): ...
    def getAnimateFramesEnable(self, *args, **kwargs): ...
    def getAnimateFramesIndex(self, *args, **kwargs): ...
    def getAnimateFramesRate(self, *args, **kwargs): ...
    def getAnims(self, *args, **kwargs): ...
    def getColor(self, *args, **kwargs): ...
    def getColorInterpolationManager(self, *args, **kwargs): ...
    def getFinalXScale(self, *args, **kwargs): ...
    def getFinalYScale(self, *args, **kwargs): ...
    def getHeight(self, *args, **kwargs): ...
    def getInitialXScale(self, *args, **kwargs): ...
    def getInitialYScale(self, *args, **kwargs): ...
    def getLastAnim(self, *args, **kwargs): ...
    def getLlUv(self, *args, **kwargs): ...
    def getNonanimatedTheta(self, *args, **kwargs): ...
    def getNumAnims(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    def getUrUv(self, *args, **kwargs): ...
    def getWidth(self, *args, **kwargs): ...
    def getXScaleFlag(self, *args, **kwargs): ...
    def getYScaleFlag(self, *args, **kwargs): ...
    def get_alpha_blend_method(self, SpriteParticleRendererself) -> Any: ...
    def get_alpha_disable(self, SpriteParticleRendererself) -> Any: ...
    def get_anim(self, SpriteParticleRendererself, intn) -> Any: ...
    def get_anim_angle_flag(self, SpriteParticleRendererself) -> Any: ...
    def get_animate_frames_enable(self, SpriteParticleRendererself) -> Any: ...
    def get_animate_frames_index(self, SpriteParticleRendererself) -> Any: ...
    def get_animate_frames_rate(self, SpriteParticleRendererself) -> Any: ...
    def get_anims(self, *args, **kwargs): ...
    def get_color(self, SpriteParticleRendererself) -> Any: ...
    def get_color_interpolation_manager(self, SpriteParticleRendererself) -> Any: ...
    def get_final_x_scale(self, SpriteParticleRendererself) -> Any: ...
    def get_final_y_scale(self, SpriteParticleRendererself) -> Any: ...
    def get_height(self, SpriteParticleRendererself) -> Any: ...
    def get_initial_x_scale(self, SpriteParticleRendererself) -> Any: ...
    def get_initial_y_scale(self, SpriteParticleRendererself) -> Any: ...
    def get_last_anim(self, SpriteParticleRendererself) -> Any: ...
    @overload
    def get_ll_uv(self, SpriteParticleRendererself) -> Any: ...
    @overload
    def get_ll_uv(self, SpriteParticleRendererself, intanim, intframe) -> Any: ...
    def get_nonanimated_theta(self, SpriteParticleRendererself) -> Any: ...
    def get_num_anims(self, SpriteParticleRendererself) -> Any: ...
    @overload
    def get_texture(self, SpriteParticleRendererself) -> Any: ...
    @overload
    def get_texture(self, SpriteParticleRendererself, intanim, intframe) -> Any: ...
    @overload
    def get_ur_uv(self, SpriteParticleRendererself) -> Any: ...
    @overload
    def get_ur_uv(self, SpriteParticleRendererself, intanim, intframe) -> Any: ...
    def get_width(self, SpriteParticleRendererself) -> Any: ...
    def get_x_scale_flag(self, SpriteParticleRendererself) -> Any: ...
    def get_y_scale_flag(self, SpriteParticleRendererself) -> Any: ...
    def removeAnimation(self, *args, **kwargs): ...
    def remove_animation(self, constSpriteParticleRendererself, intn) -> Any: ...
    def setAlphaBlendMethod(self, *args, **kwargs): ...
    def setAlphaDisable(self, *args, **kwargs): ...
    def setAnimAngleFlag(self, *args, **kwargs): ...
    def setAnimateFramesEnable(self, *args, **kwargs): ...
    def setAnimateFramesIndex(self, *args, **kwargs): ...
    def setAnimateFramesRate(self, *args, **kwargs): ...
    def setColor(self, *args, **kwargs): ...
    def setFinalXScale(self, *args, **kwargs): ...
    def setFinalYScale(self, *args, **kwargs): ...
    def setFromNode(self, *args, **kwargs): ...
    def setInitialXScale(self, *args, **kwargs): ...
    def setInitialYScale(self, *args, **kwargs): ...
    def setLlUv(self, *args, **kwargs): ...
    def setNonanimatedTheta(self, *args, **kwargs): ...
    def setSize(self, *args, **kwargs): ...
    def setTexture(self, *args, **kwargs): ...
    def setUrUv(self, *args, **kwargs): ...
    def setXScaleFlag(self, *args, **kwargs): ...
    def setYScaleFlag(self, *args, **kwargs): ...
    def set_alpha_blend_method(self, constSpriteParticleRendererself, intbm) -> Any: ...
    def set_alpha_disable(self, constSpriteParticleRendererself, boolad) -> Any: ...
    def set_anim_angle_flag(self, constSpriteParticleRendererself, boolanimate_theta) -> Any: ...
    def set_animate_frames_enable(self, constSpriteParticleRendererself, boolan) -> Any: ...
    def set_animate_frames_index(self, constSpriteParticleRendererself, inti) -> Any: ...
    def set_animate_frames_rate(self, constSpriteParticleRendererself, floatr) -> Any: ...
    def set_color(self, constSpriteParticleRendererself, constLVecBase4fcolor) -> Any: ...
    def set_final_x_scale(self, constSpriteParticleRendererself, floatfinal_x_scale) -> Any: ...
    def set_final_y_scale(self, constSpriteParticleRendererself, floatfinal_y_scale) -> Any: ...
    @overload
    def set_from_node(self, constSpriteParticleRendererself, constNodePathnode_path) -> Any: ...
    @overload
    def set_from_node(self, constSpriteParticleRendererself, constNodePathnode_path, boolsize_from_texels) -> Any: ...
    @overload
    def set_from_node(self, constSpriteParticleRendererself, constNodePathnode_path, strmodel, strnode, boolsize_from_texels) -> Any: ...
    def set_initial_x_scale(self, constSpriteParticleRendererself, floatinitial_x_scale) -> Any: ...
    def set_initial_y_scale(self, constSpriteParticleRendererself, floatinitial_y_scale) -> Any: ...
    @overload
    def set_ll_uv(self, constSpriteParticleRendererself, constLPoint2fll_uv) -> Any: ...
    @overload
    def set_ll_uv(self, constSpriteParticleRendererself, constLPoint2fll_uv, intanim, intframe) -> Any: ...
    def set_nonanimated_theta(self, constSpriteParticleRendererself, floattheta) -> Any: ...
    def set_size(self, constSpriteParticleRendererself, floatwidth, floatheight) -> Any: ...
    def set_texture(self, constSpriteParticleRendererself, Texturetex, floattexels_per_unit) -> Any: ...
    @overload
    def set_ur_uv(self, constSpriteParticleRendererself, constLPoint2fur_uv) -> Any: ...
    @overload
    def set_ur_uv(self, constSpriteParticleRendererself, constLPoint2fur_uv, intanim, intframe) -> Any: ...
    def set_x_scale_flag(self, constSpriteParticleRendererself, boolanimate_x_ratio) -> Any: ...
    def set_y_scale_flag(self, constSpriteParticleRendererself, boolanimate_y_ratio) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TangentRingEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getRadius(self, *args, **kwargs): ...
    def getRadiusSpread(self, *args, **kwargs): ...
    def get_radius(self, TangentRingEmitterself) -> Any: ...
    def get_radius_spread(self, TangentRingEmitterself) -> Any: ...
    def setRadius(self, *args, **kwargs): ...
    def setRadiusSpread(self, *args, **kwargs): ...
    def set_radius(self, constTangentRingEmitterself, floatr) -> Any: ...
    def set_radius_spread(self, constTangentRingEmitterself, floatspread) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ZSpinParticleFactory(BaseParticleFactory):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def enableAngularVelocity(self, *args, **kwargs): ...
    def enable_angular_velocity(self, constZSpinParticleFactoryself, boolbEnabled) -> Any: ...
    def getAngularVelocity(self, *args, **kwargs): ...
    def getAngularVelocityEnabled(self, *args, **kwargs): ...
    def getAngularVelocitySpread(self, *args, **kwargs): ...
    def getFinalAngle(self, *args, **kwargs): ...
    def getFinalAngleSpread(self, *args, **kwargs): ...
    def getInitialAngle(self, *args, **kwargs): ...
    def getInitialAngleSpread(self, *args, **kwargs): ...
    def get_angular_velocity(self, ZSpinParticleFactoryself) -> Any: ...
    def get_angular_velocity_enabled(self, ZSpinParticleFactoryself) -> Any: ...
    def get_angular_velocity_spread(self, ZSpinParticleFactoryself) -> Any: ...
    def get_final_angle(self, ZSpinParticleFactoryself) -> Any: ...
    def get_final_angle_spread(self, ZSpinParticleFactoryself) -> Any: ...
    def get_initial_angle(self, ZSpinParticleFactoryself) -> Any: ...
    def get_initial_angle_spread(self, ZSpinParticleFactoryself) -> Any: ...
    def setAngularVelocity(self, *args, **kwargs): ...
    def setAngularVelocitySpread(self, *args, **kwargs): ...
    def setFinalAngle(self, *args, **kwargs): ...
    def setFinalAngleSpread(self, *args, **kwargs): ...
    def setInitialAngle(self, *args, **kwargs): ...
    def setInitialAngleSpread(self, *args, **kwargs): ...
    def set_angular_velocity(self, constZSpinParticleFactoryself, floatv) -> Any: ...
    def set_angular_velocity_spread(self, constZSpinParticleFactoryself, floatspread) -> Any: ...
    def set_final_angle(self, constZSpinParticleFactoryself, floatangle) -> Any: ...
    def set_final_angle_spread(self, constZSpinParticleFactoryself, floatspread) -> Any: ...
    def set_initial_angle(self, constZSpinParticleFactoryself, floatangle) -> Any: ...
    def set_initial_angle_spread(self, constZSpinParticleFactoryself, floatspread) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

def Dtool_BorrowThisReference(*args, **kwargs): ...
