import dtoolconfig
import enum
from _typeshed import Incomplete
from panda3d.net import (
    BufferedDatagramConnection as BufferedDatagramConnection,
    Buffered_DatagramConnection as Buffered_DatagramConnection,
    Connection as Connection,
    ConnectionListener as ConnectionListener,
    ConnectionManager as ConnectionManager,
    ConnectionReader as ConnectionReader,
    ConnectionWriter as ConnectionWriter,
    DatagramGeneratorNet as DatagramGeneratorNet,
    DatagramSinkNet as DatagramSinkNet,
    NetAddress as NetAddress,
    NetDatagram as NetDatagram,
    PointerToBaseConnection as PointerToBaseConnection,
    PointerToBase_Connection as PointerToBase_Connection,
    PointerToConnection as PointerToConnection,
    PointerTo_Connection as PointerTo_Connection,
    QueuedConnectionListener as QueuedConnectionListener,
    QueuedConnectionManager as QueuedConnectionManager,
    QueuedConnectionReader as QueuedConnectionReader,
    QueuedReturnConnectionListenerData as QueuedReturnConnectionListenerData,
    QueuedReturnDatagram as QueuedReturnDatagram,
    QueuedReturnNetDatagram as QueuedReturnNetDatagram,
    QueuedReturnPointerToConnection as QueuedReturnPointerToConnection,
    QueuedReturn_ConnectionListenerData as QueuedReturn_ConnectionListenerData,
    QueuedReturn_Datagram as QueuedReturn_Datagram,
    QueuedReturn_NetDatagram as QueuedReturn_NetDatagram,
    QueuedReturn_PointerTo_Connection as QueuedReturn_PointerTo_Connection,
    RecentConnectionReader as RecentConnectionReader,
    SocketAddress as SocketAddress,
    SocketFdset as SocketFdset,
    SocketIP as SocketIP,
    SocketTCP as SocketTCP,
    SocketTCPListen as SocketTCPListen,
    SocketUDP as SocketUDP,
    SocketUDPIncoming as SocketUDPIncoming,
    SocketUDPOutgoing as SocketUDPOutgoing,
    Socket_Address as Socket_Address,
    Socket_IP as Socket_IP,
    Socket_TCP as Socket_TCP,
    Socket_TCP_Listen as Socket_TCP_Listen,
    Socket_UDP as Socket_UDP,
    Socket_UDP_Incoming as Socket_UDP_Incoming,
    Socket_UDP_Outgoing as Socket_UDP_Outgoing,
    Socket_fdset as Socket_fdset,
)
from typing import Any, Callable, ClassVar, overload

ATSDown: int
ATSNone: int
ATSPad: int
ATSUnspecified: int
ATSUp: int
ATS_down: int
ATS_none: int
ATS_pad: int
ATS_unspecified: int
ATS_up: int
CSDefault: int
CSInvalid: int
CSLinear: int
CSSRGB: int
CSScRGB: int
CSUnspecified: int
CSYupLeft: int
CSYupRight: int
CSZupLeft: int
CSZupRight: int
CS_default: int
CS_invalid: int
CS_linear: int
CS_sRGB: int
CS_scRGB: int
CS_unspecified: int
CS_yup_left: int
CS_yup_right: int
CS_zup_left: int
CS_zup_right: int
Dtool_PyNativeInterface: int
ENDPUBLISH: str
END_PUBLISH: str
EUEof: int
EUErrorAbort: int
EUErrorFileEmpty: int
EUErrorFileInvalid: int
EUErrorHttpGatewayTimeout: int
EUErrorHttpProxyAuthentication: int
EUErrorHttpServerTimeout: int
EUErrorHttpServiceUnavailable: int
EUErrorInvalidChecksum: int
EUErrorNetworkBufferOverflow: int
EUErrorNetworkDead: int
EUErrorNetworkDisconnected: int
EUErrorNetworkDisconnectedLocally: int
EUErrorNetworkDiskQuotaExceeded: int
EUErrorNetworkNoData: int
EUErrorNetworkRemoteHostDisconnected: int
EUErrorNetworkRemoteHostDown: int
EUErrorNetworkRemoteHostNoResponse: int
EUErrorNetworkRemoteHostNotFound: int
EUErrorNetworkRemoteHostUnreachable: int
EUErrorNetworkTimeout: int
EUErrorNetworkUnreachable: int
EUErrorWriteDiskFault: int
EUErrorWriteDiskFull: int
EUErrorWriteDiskNotFound: int
EUErrorWriteDiskSectorNotFound: int
EUErrorWriteFileRename: int
EUErrorWriteOutOfFiles: int
EUErrorWriteOutOfMemory: int
EUErrorWriteSharingViolation: int
EUErrorZlib: int
EUHttpRedirect: int
EUNetworkNoData: int
EUOk: int
EUSuccess: int
EUWrite: int
EUWriteRam: int
EU_eof: int
EU_error_abort: int
EU_error_file_empty: int
EU_error_file_invalid: int
EU_error_http_gateway_timeout: int
EU_error_http_proxy_authentication: int
EU_error_http_server_timeout: int
EU_error_http_service_unavailable: int
EU_error_invalid_checksum: int
EU_error_network_buffer_overflow: int
EU_error_network_dead: int
EU_error_network_disconnected: int
EU_error_network_disconnected_locally: int
EU_error_network_disk_quota_exceeded: int
EU_error_network_no_data: int
EU_error_network_remote_host_disconnected: int
EU_error_network_remote_host_down: int
EU_error_network_remote_host_no_response: int
EU_error_network_remote_host_not_found: int
EU_error_network_remote_host_unreachable: int
EU_error_network_timeout: int
EU_error_network_unreachable: int
EU_error_write_disk_fault: int
EU_error_write_disk_full: int
EU_error_write_disk_not_found: int
EU_error_write_disk_sector_not_found: int
EU_error_write_file_rename: int
EU_error_write_out_of_files: int
EU_error_write_out_of_memory: int
EU_error_write_sharing_violation: int
EU_error_zlib: int
EU_http_redirect: int
EU_network_no_data: int
EU_ok: int
EU_success: int
EU_write: int
EU_write_ram: int
HCCUT: int
HCFREE: int
HCG1: int
HCSMOOTH: int
HC_CUT: int
HC_FREE: int
HC_G1: int
HC_SMOOTH: int
LNTFade: int
LNTPop: int
LNT_fade: int
LNT_pop: int
NSDebug: int
NSError: int
NSFatal: int
NSInfo: int
NSSpam: int
NSUnspecified: int
NSWarning: int
NS_debug: int
NS_error: int
NS_fatal: int
NS_info: int
NS_spam: int
NS_unspecified: int
NS_warning: int
PCTHPR: int
PCTNONE: int
PCTT: int
PCTXYZ: int
PCT_HPR: int
PCT_NONE: int
PCT_T: int
PCT_XYZ: int
TPHigh: int
TPLow: int
TPNormal: int
TPUrgent: int
TP_high: int
TP_low: int
TP_normal: int
TP_urgent: int

class AdaptiveLru(Namable):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def beginEpoch(self, *args, **kwargs): ...
    def begin_epoch(self, constAdaptiveLruself) -> Any: ...
    def considerEvict(self, *args, **kwargs): ...
    def consider_evict(self, constAdaptiveLruself) -> Any: ...
    def countActiveSize(self, *args, **kwargs): ...
    def count_active_size(self, AdaptiveLruself) -> Any: ...
    def evictTo(self, *args, **kwargs): ...
    def evict_to(self, constAdaptiveLruself, inttarget_size) -> Any: ...
    def getMaxSize(self, *args, **kwargs): ...
    def getMaxUpdatesPerFrame(self, *args, **kwargs): ...
    def getTotalSize(self, *args, **kwargs): ...
    def getWeight(self, *args, **kwargs): ...
    def get_max_size(self, AdaptiveLruself) -> Any: ...
    def get_max_updates_per_frame(self, AdaptiveLruself) -> Any: ...
    def get_total_size(self, AdaptiveLruself) -> Any: ...
    def get_weight(self, AdaptiveLruself) -> Any: ...
    def output(self, AdaptiveLruself, ostreamout) -> Any: ...
    def setMaxSize(self, *args, **kwargs): ...
    def setMaxUpdatesPerFrame(self, *args, **kwargs): ...
    def setWeight(self, *args, **kwargs): ...
    def set_max_size(self, constAdaptiveLruself, intmax_size) -> Any: ...
    def set_max_updates_per_frame(self, constAdaptiveLruself, intmax_updates_per_frame) -> Any: ...
    def set_weight(self, constAdaptiveLruself, floatweight) -> Any: ...
    def validate(self, constAdaptiveLruself) -> Any: ...
    def write(self, AdaptiveLruself, ostreamout, intindent_level) -> Any: ...

class AdaptiveLruPage(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constAdaptiveLruPageself, constAdaptiveLruPagecopy) -> Any: ...
    def dequeueLru(self, *args, **kwargs): ...
    def dequeue_lru(self, constAdaptiveLruPageself) -> Any: ...
    def enqueueLru(self, *args, **kwargs): ...
    def enqueue_lru(self, constAdaptiveLruPageself, AdaptiveLrulru) -> Any: ...
    def evictLru(self, *args, **kwargs): ...
    def evict_lru(self, constAdaptiveLruPageself) -> Any: ...
    def getLru(self, *args, **kwargs): ...
    def getLruSize(self, *args, **kwargs): ...
    def getNumFrames(self, *args, **kwargs): ...
    def getNumInactiveFrames(self, *args, **kwargs): ...
    def get_lru(self, AdaptiveLruPageself) -> Any: ...
    def get_lru_size(self, AdaptiveLruPageself) -> Any: ...
    def get_num_frames(self, AdaptiveLruPageself) -> Any: ...
    def get_num_inactive_frames(self, AdaptiveLruPageself) -> Any: ...
    def markUsedLru(self, *args, **kwargs): ...
    @overload
    def mark_used_lru(self, AdaptiveLruPageself) -> Any: ...
    @overload
    def mark_used_lru(self, constAdaptiveLruPageself, AdaptiveLrulru) -> Any: ...
    def output(self, AdaptiveLruPageself, ostreamout) -> Any: ...
    def setLruSize(self, *args, **kwargs): ...
    def set_lru_size(self, constAdaptiveLruPageself, intlru_size) -> Any: ...
    def write(self, AdaptiveLruPageself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class AlphaTestAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    class_slot: Incomplete
    mode: Incomplete
    reference_alpha: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    def getReferenceAlpha(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_mode(self, AlphaTestAttribself) -> Any: ...
    def get_reference_alpha(self, AlphaTestAttribself) -> Any: ...
    @staticmethod
    def make(intmode, floatreference_alpha) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class AmbientLight(LightNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class AnalogNode(DataNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearOutput(self, *args, **kwargs): ...
    def clear_output(self, constAnalogNodeself, intchannel) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getControlState(self, *args, **kwargs): ...
    def getNumControls(self, *args, **kwargs): ...
    def getOutput(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_control_state(self, AnalogNodeself, intindex) -> Any: ...
    def get_num_controls(self, AnalogNodeself) -> Any: ...
    def get_output(self, AnalogNodeself, intchannel) -> Any: ...
    def isControlKnown(self, *args, **kwargs): ...
    def isOutputFlipped(self, *args, **kwargs): ...
    def isValid(self, *args, **kwargs): ...
    def is_control_known(self, AnalogNodeself, intindex) -> Any: ...
    def is_output_flipped(self, AnalogNodeself, intchannel) -> Any: ...
    def is_valid(self, AnalogNodeself) -> Any: ...
    def setOutput(self, *args, **kwargs): ...
    def set_output(self, constAnalogNodeself, intchannel, intindex, boolflip) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class AnimBundle(AnimGroup):
    DtoolClassDict: ClassVar[dict] = ...
    base_frame_rate: Incomplete
    num_frames: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def copyBundle(self, *args, **kwargs): ...
    def copy_bundle(self, AnimBundleself) -> Any: ...
    def getBaseFrameRate(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumFrames(self, *args, **kwargs): ...
    def get_base_frame_rate(self, AnimBundleself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_frames(self, AnimBundleself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class AnimBundleNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    bundle: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def findAnimBundle(*args, **kwargs): ...
    @staticmethod
    def find_anim_bundle(PandaNoderoot) -> Any: ...
    def getBundle(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_bundle(self, AnimBundleNodeself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...

class AnimChannelACMatrixSwitchType(AnimChannelBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getQuat(self, *args, **kwargs): ...
    def getScale(self, *args, **kwargs): ...
    def getShear(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def getValueNoScaleShear(self, *args, **kwargs): ...
    def getValueType(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_hpr(self, constAnimChannelself, intframe, LVecBase3fhpr) -> Any: ...
    def get_pos(self, constAnimChannelself, intframe, LVecBase3fpos) -> Any: ...
    def get_quat(self, constAnimChannelself, intframe, LQuaternionfquat) -> Any: ...
    def get_scale(self, constAnimChannelself, intframe, LVecBase3fscale) -> Any: ...
    def get_shear(self, constAnimChannelself, intframe, LVecBase3fshear) -> Any: ...
    def get_value(self, constAnimChannelself, intframe, LMatrix4fvalue) -> Any: ...
    def get_value_no_scale_shear(self, constAnimChannelself, intframe, LMatrix4fvalue) -> Any: ...
    def get_value_type(self, AnimChannelself) -> Any: ...

class AnimChannelACScalarSwitchType(AnimChannelBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getQuat(self, *args, **kwargs): ...
    def getScale(self, *args, **kwargs): ...
    def getShear(self, *args, **kwargs): ...
    def getValueType(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_hpr(self, constAnimChannelself, intframe, LVecBase3fhpr) -> Any: ...
    def get_pos(self, constAnimChannelself, intframe, LVecBase3fpos) -> Any: ...
    def get_quat(self, constAnimChannelself, intframe, LQuaternionfquat) -> Any: ...
    def get_scale(self, constAnimChannelself, intframe, LVecBase3fscale) -> Any: ...
    def get_shear(self, constAnimChannelself, intframe, LVecBase3fshear) -> Any: ...
    def get_value_type(self, AnimChannelself) -> Any: ...

class AnimChannelBase(AnimGroup):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getType(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_type(self, AnimChannelBaseself) -> Any: ...

class AnimChannelMatrix(AnimChannelBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getQuat(self, *args, **kwargs): ...
    def getScale(self, *args, **kwargs): ...
    def getShear(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def getValueNoScaleShear(self, *args, **kwargs): ...
    def getValueType(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_hpr(self, constAnimChannelself, intframe, LVecBase3fhpr) -> Any: ...
    def get_pos(self, constAnimChannelself, intframe, LVecBase3fpos) -> Any: ...
    def get_quat(self, constAnimChannelself, intframe, LQuaternionfquat) -> Any: ...
    def get_scale(self, constAnimChannelself, intframe, LVecBase3fscale) -> Any: ...
    def get_shear(self, constAnimChannelself, intframe, LVecBase3fshear) -> Any: ...
    def get_value(self, constAnimChannelself, intframe, LMatrix4fvalue) -> Any: ...
    def get_value_no_scale_shear(self, constAnimChannelself, intframe, LMatrix4fvalue) -> Any: ...
    def get_value_type(self, AnimChannelself) -> Any: ...

class AnimChannelMatrixDynamic(AnimChannel_ACMatrixSwitchType):
    DtoolClassDict: ClassVar[dict] = ...
    value_node: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValueNode(self, *args, **kwargs): ...
    def getValueTransform(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value_node(self, AnimChannelMatrixDynamicself) -> Any: ...
    def get_value_transform(self, AnimChannelMatrixDynamicself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def setValueNode(self, *args, **kwargs): ...
    def set_value(self, constAnimChannelMatrixDynamicself, constTransformStatevalue) -> Any: ...
    def set_value_node(self, constAnimChannelMatrixDynamicself, PandaNodenode) -> Any: ...

class AnimChannelMatrixXfmTable(AnimChannel_ACMatrixSwitchType):
    DtoolClassDict: ClassVar[dict] = ...
    tables: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearAllTables(self, *args, **kwargs): ...
    def clearTable(self, *args, **kwargs): ...
    def clear_all_tables(self, constAnimChannelMatrixXfmTableself) -> Any: ...
    def clear_table(self, constAnimChannelMatrixXfmTableself, chartable_id) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getTable(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_table(self, AnimChannelMatrixXfmTableself, chartable_id) -> Any: ...
    def hasTable(self, *args, **kwargs): ...
    def has_table(self, AnimChannelMatrixXfmTableself, chartable_id) -> Any: ...
    @staticmethod
    def isValidId(*args, **kwargs): ...
    @staticmethod
    def is_valid_id(chartable_id) -> Any: ...
    def setTable(self, *args, **kwargs): ...
    def set_table(self, constAnimChannelMatrixXfmTableself, chartable_id, constConstPointerToArraytable) -> Any: ...

class AnimChannelScalar(AnimChannelBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getQuat(self, *args, **kwargs): ...
    def getScale(self, *args, **kwargs): ...
    def getShear(self, *args, **kwargs): ...
    def getValueType(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_hpr(self, constAnimChannelself, intframe, LVecBase3fhpr) -> Any: ...
    def get_pos(self, constAnimChannelself, intframe, LVecBase3fpos) -> Any: ...
    def get_quat(self, constAnimChannelself, intframe, LQuaternionfquat) -> Any: ...
    def get_scale(self, constAnimChannelself, intframe, LVecBase3fscale) -> Any: ...
    def get_shear(self, constAnimChannelself, intframe, LVecBase3fshear) -> Any: ...
    def get_value_type(self, AnimChannelself) -> Any: ...

class AnimChannelScalarDynamic(AnimChannel_ACScalarSwitchType):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    value_node: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def setValueNode(self, *args, **kwargs): ...
    def set_value(self, constAnimChannelScalarDynamicself, floatvalue) -> Any: ...
    def set_value_node(self, constAnimChannelScalarDynamicself, PandaNodenode) -> Any: ...

class AnimChannelScalarTable(AnimChannel_ACScalarSwitchType):
    DtoolClassDict: ClassVar[dict] = ...
    table: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearTable(self, *args, **kwargs): ...
    def clear_table(self, constAnimChannelScalarTableself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getTable(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_table(self, AnimChannelScalarTableself) -> Any: ...
    def hasTable(self, *args, **kwargs): ...
    def has_table(self, AnimChannelScalarTableself) -> Any: ...
    def setTable(self, *args, **kwargs): ...
    def set_table(self, constAnimChannelScalarTableself, constConstPointerToArraytable) -> Any: ...

class AnimChannel_ACMatrixSwitchType(AnimChannelBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getQuat(self, *args, **kwargs): ...
    def getScale(self, *args, **kwargs): ...
    def getShear(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def getValueNoScaleShear(self, *args, **kwargs): ...
    def getValueType(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_hpr(self, constAnimChannelself, intframe, LVecBase3fhpr) -> Any: ...
    def get_pos(self, constAnimChannelself, intframe, LVecBase3fpos) -> Any: ...
    def get_quat(self, constAnimChannelself, intframe, LQuaternionfquat) -> Any: ...
    def get_scale(self, constAnimChannelself, intframe, LVecBase3fscale) -> Any: ...
    def get_shear(self, constAnimChannelself, intframe, LVecBase3fshear) -> Any: ...
    def get_value(self, constAnimChannelself, intframe, LMatrix4fvalue) -> Any: ...
    def get_value_no_scale_shear(self, constAnimChannelself, intframe, LMatrix4fvalue) -> Any: ...
    def get_value_type(self, AnimChannelself) -> Any: ...

class AnimChannel_ACScalarSwitchType(AnimChannelBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getQuat(self, *args, **kwargs): ...
    def getScale(self, *args, **kwargs): ...
    def getShear(self, *args, **kwargs): ...
    def getValueType(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_hpr(self, constAnimChannelself, intframe, LVecBase3fhpr) -> Any: ...
    def get_pos(self, constAnimChannelself, intframe, LVecBase3fpos) -> Any: ...
    def get_quat(self, constAnimChannelself, intframe, LQuaternionfquat) -> Any: ...
    def get_scale(self, constAnimChannelself, intframe, LVecBase3fscale) -> Any: ...
    def get_shear(self, constAnimChannelself, intframe, LVecBase3fshear) -> Any: ...
    def get_value_type(self, AnimChannelself) -> Any: ...

class AnimControl(TypedReferenceCount, AnimInterface, Namable):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAnim(self, *args, **kwargs): ...
    def getAnimModel(self, *args, **kwargs): ...
    def getBoundJoints(self, *args, **kwargs): ...
    def getChannelIndex(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPart(self, *args, **kwargs): ...
    def getPendingDoneEvent(self, *args, **kwargs): ...
    def get_anim(self, AnimControlself) -> Any: ...
    def get_anim_model(self, AnimControlself) -> Any: ...
    def get_bound_joints(self, AnimControlself) -> Any: ...
    def get_channel_index(self, AnimControlself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_part(self, AnimControlself) -> Any: ...
    def get_pending_done_event(self, AnimControlself) -> Any: ...
    def hasAnim(self, *args, **kwargs): ...
    def has_anim(self, AnimControlself) -> Any: ...
    def isPending(self, *args, **kwargs): ...
    def is_pending(self, AnimControlself) -> Any: ...
    def output(self, AnimControlself, ostreamout) -> Any: ...
    def setAnimModel(self, *args, **kwargs): ...
    def setPendingDoneEvent(self, *args, **kwargs): ...
    def set_anim_model(self, constAnimControlself, PandaNodemodel) -> Any: ...
    def set_pending_done_event(self, constAnimControlself, strdone_event) -> Any: ...
    def upcastToAnimInterface(self, *args, **kwargs): ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedReferenceCount(self, *args, **kwargs): ...
    def upcast_to_AnimInterface(self, constAnimControlself) -> Any: ...
    def upcast_to_Namable(self, constAnimControlself) -> Any: ...
    def upcast_to_TypedReferenceCount(self, constAnimControlself) -> Any: ...
    def waitPending(self, *args, **kwargs): ...
    def wait_pending(self, constAnimControlself) -> Any: ...

class AnimControlCollection(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearAnims(self, *args, **kwargs): ...
    def clear_anims(self, constAnimControlCollectionself) -> Any: ...
    def findAnim(self, *args, **kwargs): ...
    def find_anim(self, AnimControlCollectionself, strname) -> Any: ...
    def getAnim(self, *args, **kwargs): ...
    def getAnimName(self, *args, **kwargs): ...
    def getAnimNames(self, *args, **kwargs): ...
    def getAnims(self, *args, **kwargs): ...
    def getFrame(self, *args, **kwargs): ...
    def getNumAnims(self, *args, **kwargs): ...
    def getNumFrames(self, *args, **kwargs): ...
    def get_anim(self, AnimControlCollectionself, intn) -> Any: ...
    def get_anim_name(self, AnimControlCollectionself, intn) -> Any: ...
    def get_anim_names(self, *args, **kwargs): ...
    def get_anims(self, *args, **kwargs): ...
    @overload
    def get_frame(self, AnimControlCollectionself) -> Any: ...
    @overload
    def get_frame(self, AnimControlCollectionself, stranim_name) -> Any: ...
    def get_num_anims(self, AnimControlCollectionself) -> Any: ...
    @overload
    def get_num_frames(self, AnimControlCollectionself) -> Any: ...
    @overload
    def get_num_frames(self, AnimControlCollectionself, stranim_name) -> Any: ...
    def isPlaying(self, *args, **kwargs): ...
    @overload
    def is_playing(self, AnimControlCollectionself) -> Any: ...
    @overload
    def is_playing(self, AnimControlCollectionself, stranim_name) -> Any: ...
    @overload
    def loop(self, constAnimControlCollectionself, stranim_name, boolrestart) -> Any: ...
    @overload
    def loop(self, constAnimControlCollectionself, stranim_name, boolrestart, doublefrom, doubleto) -> Any: ...
    def loopAll(self, *args, **kwargs): ...
    @overload
    def loop_all(self, constAnimControlCollectionself, boolrestart) -> Any: ...
    @overload
    def loop_all(self, constAnimControlCollectionself, boolrestart, doublefrom, doubleto) -> Any: ...
    def output(self, AnimControlCollectionself, ostreamout) -> Any: ...
    @overload
    def play(self, constAnimControlCollectionself, stranim_name) -> Any: ...
    @overload
    def play(self, constAnimControlCollectionself, stranim_name, doublefrom, doubleto) -> Any: ...
    def playAll(self, *args, **kwargs): ...
    @overload
    def play_all(self, constAnimControlCollectionself) -> Any: ...
    @overload
    def play_all(self, constAnimControlCollectionself, doublefrom, doubleto) -> Any: ...
    def pose(self, constAnimControlCollectionself, stranim_name, doubleframe) -> Any: ...
    def poseAll(self, *args, **kwargs): ...
    def pose_all(self, constAnimControlCollectionself, doubleframe) -> Any: ...
    def stop(self, constAnimControlCollectionself, stranim_name) -> Any: ...
    def stopAll(self, *args, **kwargs): ...
    def stop_all(self, constAnimControlCollectionself) -> Any: ...
    def storeAnim(self, *args, **kwargs): ...
    def store_anim(self, constAnimControlCollectionself, AnimControlcontrol, strname) -> Any: ...
    def unbindAnim(self, *args, **kwargs): ...
    def unbind_anim(self, constAnimControlCollectionself, strname) -> Any: ...
    def whichAnimPlaying(self, *args, **kwargs): ...
    def which_anim_playing(self, AnimControlCollectionself) -> Any: ...
    def write(self, AnimControlCollectionself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class AnimGroup(TypedWritableReferenceCount, Namable):
    DtoolClassDict: ClassVar[dict] = ...
    children: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def findChild(self, *args, **kwargs): ...
    def find_child(self, AnimGroupself, strname) -> Any: ...
    def getChild(self, *args, **kwargs): ...
    def getChildNamed(self, *args, **kwargs): ...
    def getChildren(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumChildren(self, *args, **kwargs): ...
    def get_child(self, AnimGroupself, intn) -> Any: ...
    def get_child_named(self, AnimGroupself, strname) -> Any: ...
    def get_children(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_children(self, AnimGroupself) -> Any: ...
    def output(self, AnimGroupself, ostreamout) -> Any: ...
    def sortDescendants(self, *args, **kwargs): ...
    def sort_descendants(self, constAnimGroupself) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constAnimGroupself) -> Any: ...
    def upcast_to_TypedWritableReferenceCount(self, constAnimGroupself) -> Any: ...
    def write(self, AnimGroupself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class AnimInterface(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    PMLoop: ClassVar[int] = ...
    PMPingpong: ClassVar[int] = ...
    PMPlay: ClassVar[int] = ...
    PMPose: ClassVar[int] = ...
    PM_loop: ClassVar[int] = ...
    PM_pingpong: ClassVar[int] = ...
    PM_play: ClassVar[int] = ...
    PM_pose: ClassVar[int] = ...
    frac: Incomplete
    frame: Incomplete
    frame_rate: Incomplete
    full_fframe: Incomplete
    full_frame: Incomplete
    next_frame: Incomplete
    num_frames: Incomplete
    play_mode: Incomplete
    play_rate: Incomplete
    playing: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFrac(self, *args, **kwargs): ...
    def getFrame(self, *args, **kwargs): ...
    def getFrameRate(self, *args, **kwargs): ...
    def getFullFframe(self, *args, **kwargs): ...
    def getFullFrame(self, *args, **kwargs): ...
    def getNextFrame(self, *args, **kwargs): ...
    def getNumFrames(self, *args, **kwargs): ...
    def getPlayMode(self, *args, **kwargs): ...
    def getPlayRate(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_frac(self, AnimInterfaceself) -> Any: ...
    @overload
    def get_frac(self) -> Any: ...
    def get_frame(self, AnimInterfaceself) -> Any: ...
    def get_frame_rate(self, AnimInterfaceself) -> Any: ...
    def get_full_fframe(self, AnimInterfaceself) -> Any: ...
    def get_full_frame(self, AnimInterfaceself) -> Any: ...
    def get_next_frame(self, AnimInterfaceself) -> Any: ...
    def get_num_frames(self, AnimInterfaceself) -> Any: ...
    def get_play_mode(self, AnimInterfaceself) -> Any: ...
    def get_play_rate(self, AnimInterfaceself) -> Any: ...
    def isPlaying(self, *args, **kwargs): ...
    def is_playing(self, AnimInterfaceself) -> Any: ...
    @overload
    def loop(self, constAnimInterfaceself, boolrestart) -> Any: ...
    @overload
    def loop(self, constAnimInterfaceself, boolrestart, doublefrom, doubleto) -> Any: ...
    def output(self, AnimInterfaceself, ostreamout) -> Any: ...
    @overload
    def pingpong(self, constAnimInterfaceself, boolrestart) -> Any: ...
    @overload
    def pingpong(self, constAnimInterfaceself, boolrestart, doublefrom, doubleto) -> Any: ...
    @overload
    def play(self, constAnimInterfaceself) -> Any: ...
    @overload
    def play(self, constAnimInterfaceself, doublefrom, doubleto) -> Any: ...
    def pose(self, constAnimInterfaceself, doubleframe) -> Any: ...
    def setPlayRate(self, *args, **kwargs): ...
    def set_play_rate(self, constAnimInterfaceself, doubleplay_rate) -> Any: ...
    def stop(self, constAnimInterfaceself) -> Any: ...

class AnimPreloadTable(CopyOnWriteObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addAnim(self, *args, **kwargs): ...
    def addAnimsFrom(self, *args, **kwargs): ...
    def add_anim(self, constAnimPreloadTableself, strbasename, floatbase_frame_rate, intnum_frames) -> Any: ...
    def add_anims_from(self, constAnimPreloadTableself, constAnimPreloadTableother) -> Any: ...
    def clearAnims(self, *args, **kwargs): ...
    def clear_anims(self, constAnimPreloadTableself) -> Any: ...
    def findAnim(self, *args, **kwargs): ...
    def find_anim(self, AnimPreloadTableself, strbasename) -> Any: ...
    def getBaseFrameRate(self, *args, **kwargs): ...
    def getBasename(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumAnims(self, *args, **kwargs): ...
    def getNumFrames(self, *args, **kwargs): ...
    def get_base_frame_rate(self, AnimPreloadTableself, intn) -> Any: ...
    def get_basename(self, AnimPreloadTableself, intn) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_anims(self, AnimPreloadTableself) -> Any: ...
    def get_num_frames(self, AnimPreloadTableself, intn) -> Any: ...
    def output(self, AnimPreloadTableself, ostreamout) -> Any: ...
    def removeAnim(self, *args, **kwargs): ...
    def remove_anim(self, constAnimPreloadTableself, intn) -> Any: ...
    def write(self, AnimPreloadTableself, ostreamout, intindent_level) -> Any: ...

class AnimateVerticesRequest(AsyncTask):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def isReady(self, *args, **kwargs): ...
    def is_ready(self, AnimateVerticesRequestself) -> Any: ...

class AntialiasAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    MAuto: ClassVar[int] = ...
    MBetter: ClassVar[int] = ...
    MDontCare: ClassVar[int] = ...
    MFaster: ClassVar[int] = ...
    MLine: ClassVar[int] = ...
    MMultisample: ClassVar[int] = ...
    MNone: ClassVar[int] = ...
    MPoint: ClassVar[int] = ...
    MPolygon: ClassVar[int] = ...
    MTypeMask: ClassVar[int] = ...
    M_auto: ClassVar[int] = ...
    M_better: ClassVar[int] = ...
    M_dont_care: ClassVar[int] = ...
    M_faster: ClassVar[int] = ...
    M_line: ClassVar[int] = ...
    M_multisample: ClassVar[int] = ...
    M_none: ClassVar[int] = ...
    M_point: ClassVar[int] = ...
    M_polygon: ClassVar[int] = ...
    M_type_mask: ClassVar[int] = ...
    class_slot: Incomplete
    mode: Incomplete
    mode_quality: Incomplete
    mode_type: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    def getModeQuality(self, *args, **kwargs): ...
    def getModeType(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_mode(self, AntialiasAttribself) -> Any: ...
    def get_mode_quality(self, AntialiasAttribself) -> Any: ...
    def get_mode_type(self, AntialiasAttribself) -> Any: ...
    @staticmethod
    def make(intmode) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class AsyncFuture(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    done_event: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addDoneCallback(self, *args, **kwargs): ...
    def add_done_callback(self, constAsyncFutureself, objectfn) -> Any: ...
    def cancel(self, constAsyncFutureself) -> Any: ...
    def cancelled(self, AsyncFutureself) -> Any: ...
    def done(self, AsyncFutureself) -> Any: ...
    @staticmethod
    def gather(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDoneEvent(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_done_event(self, AsyncFutureself) -> Any: ...
    def output(self, AsyncFutureself, ostreamout) -> Any: ...
    def result(self, AsyncFutureself, objecttimeout) -> Any: ...
    def setDoneEvent(self, *args, **kwargs): ...
    def setResult(self, *args, **kwargs): ...
    def set_done_event(self, constAsyncFutureself, strdone_event) -> Any: ...
    def set_result(self, constAsyncFutureself, objectparam0) -> Any: ...
    @staticmethod
    def shield(AsyncFuturefuture) -> Any: ...
    def upcastToTypedReferenceCount(self, *args, **kwargs): ...
    def upcast_to_TypedReferenceCount(self, constAsyncFutureself) -> Any: ...
    @overload
    def wait(self, constAsyncFutureself) -> Any: ...
    @overload
    def wait(self, constAsyncFutureself, doubletimeout) -> Any: ...
    @overload
    def wait(self) -> Any: ...
    def __await__(self, *args, **kwargs): ...
    def __iter__(self): ...

class AsyncTask(AsyncFuture, Namable):
    DSAgain: ClassVar[int] = ...
    DSAwait: ClassVar[int] = ...
    DSCont: ClassVar[int] = ...
    DSDone: ClassVar[int] = ...
    DSExit: ClassVar[int] = ...
    DSInterrupt: ClassVar[int] = ...
    DSPause: ClassVar[int] = ...
    DSPickup: ClassVar[int] = ...
    DS_again: ClassVar[int] = ...
    DS_await: ClassVar[int] = ...
    DS_cont: ClassVar[int] = ...
    DS_done: ClassVar[int] = ...
    DS_exit: ClassVar[int] = ...
    DS_interrupt: ClassVar[int] = ...
    DS_pause: ClassVar[int] = ...
    DS_pickup: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    SActive: ClassVar[int] = ...
    SActiveNested: ClassVar[int] = ...
    SAwaiting: ClassVar[int] = ...
    SInactive: ClassVar[int] = ...
    SServicing: ClassVar[int] = ...
    SServicingRemoved: ClassVar[int] = ...
    SSleeping: ClassVar[int] = ...
    S_active: ClassVar[int] = ...
    S_active_nested: ClassVar[int] = ...
    S_awaiting: ClassVar[int] = ...
    S_inactive: ClassVar[int] = ...
    S_servicing: ClassVar[int] = ...
    S_servicing_removed: ClassVar[int] = ...
    S_sleeping: ClassVar[int] = ...
    alive: Incomplete
    average_dt: Incomplete
    done_event: Incomplete
    dt: Incomplete
    id: Incomplete
    manager: Incomplete
    max_dt: Incomplete
    name: Incomplete
    priority: Incomplete
    sort: Incomplete
    state: Incomplete
    task_chain: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearDelay(self, *args, **kwargs): ...
    def clearName(self, *args, **kwargs): ...
    def clear_delay(self, constAsyncTaskself) -> Any: ...
    def clear_name(self, constAsyncTaskself) -> Any: ...
    def getAverageDt(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDelay(self, *args, **kwargs): ...
    def getDt(self, *args, **kwargs): ...
    def getElapsedFrames(self, *args, **kwargs): ...
    def getElapsedTime(self, *args, **kwargs): ...
    def getManager(self, *args, **kwargs): ...
    def getMaxDt(self, *args, **kwargs): ...
    def getNamePrefix(self, *args, **kwargs): ...
    def getPriority(self, *args, **kwargs): ...
    def getSort(self, *args, **kwargs): ...
    def getStartFrame(self, *args, **kwargs): ...
    def getStartTime(self, *args, **kwargs): ...
    def getState(self, *args, **kwargs): ...
    def getTaskChain(self, *args, **kwargs): ...
    def getTaskId(self, *args, **kwargs): ...
    def getWakeTime(self, *args, **kwargs): ...
    def get_average_dt(self, AsyncTaskself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_delay(self, AsyncTaskself) -> Any: ...
    def get_dt(self, AsyncTaskself) -> Any: ...
    def get_elapsed_frames(self, AsyncTaskself) -> Any: ...
    def get_elapsed_time(self, AsyncTaskself) -> Any: ...
    def get_manager(self, AsyncTaskself) -> Any: ...
    def get_max_dt(self, AsyncTaskself) -> Any: ...
    def get_name_prefix(self, AsyncTaskself) -> Any: ...
    def get_priority(self, AsyncTaskself) -> Any: ...
    def get_sort(self, AsyncTaskself) -> Any: ...
    def get_start_frame(self, AsyncTaskself) -> Any: ...
    def get_start_time(self, AsyncTaskself) -> Any: ...
    def get_state(self, AsyncTaskself) -> Any: ...
    def get_task_chain(self, AsyncTaskself) -> Any: ...
    def get_task_id(self, AsyncTaskself) -> Any: ...
    def get_wake_time(self, AsyncTaskself) -> Any: ...
    def hasDelay(self, *args, **kwargs): ...
    def has_delay(self, AsyncTaskself) -> Any: ...
    def isAlive(self, *args, **kwargs): ...
    def is_alive(self, AsyncTaskself) -> Any: ...
    def output(self, AsyncTaskself, ostreamout) -> Any: ...
    def recalcWakeTime(self, *args, **kwargs): ...
    def recalc_wake_time(self, constAsyncTaskself) -> Any: ...
    def remove(self, constAsyncTaskself) -> Any: ...
    def setDelay(self, *args, **kwargs): ...
    def setDoneEvent(self, *args, **kwargs): ...
    def setName(self, *args, **kwargs): ...
    def setPriority(self, *args, **kwargs): ...
    def setSort(self, *args, **kwargs): ...
    def setTaskChain(self, *args, **kwargs): ...
    def set_delay(self, constAsyncTaskself, doubledelay) -> Any: ...
    def set_done_event(self, constAsyncTaskself, strdone_event) -> Any: ...
    def set_name(self, constAsyncTaskself, strname) -> Any: ...
    def set_priority(self, constAsyncTaskself, intpriority) -> Any: ...
    def set_sort(self, constAsyncTaskself, intsort) -> Any: ...
    def set_task_chain(self, constAsyncTaskself, strchain_name) -> Any: ...
    def upcastToAsyncFuture(self, *args, **kwargs): ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcast_to_AsyncFuture(self, constAsyncTaskself) -> Any: ...
    def upcast_to_Namable(self, constAsyncTaskself) -> Any: ...

class AsyncTaskChain(TypedReferenceCount, Namable):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, constAsyncTaskChainself, AsyncTasktask) -> Any: ...
    def getActiveTasks(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFrameBudget(self, *args, **kwargs): ...
    def getFrameSync(self, *args, **kwargs): ...
    def getNextWakeTime(self, *args, **kwargs): ...
    def getNumRunningThreads(self, *args, **kwargs): ...
    def getNumTasks(self, *args, **kwargs): ...
    def getNumThreads(self, *args, **kwargs): ...
    def getSleepingTasks(self, *args, **kwargs): ...
    def getTasks(self, *args, **kwargs): ...
    def getThreadPriority(self, *args, **kwargs): ...
    def getTickClock(self, *args, **kwargs): ...
    def getTimeslicePriority(self, *args, **kwargs): ...
    def get_active_tasks(self, AsyncTaskChainself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_frame_budget(self, AsyncTaskChainself) -> Any: ...
    def get_frame_sync(self, AsyncTaskChainself) -> Any: ...
    def get_next_wake_time(self, AsyncTaskChainself) -> Any: ...
    def get_num_running_threads(self, AsyncTaskChainself) -> Any: ...
    def get_num_tasks(self, AsyncTaskChainself) -> Any: ...
    def get_num_threads(self, AsyncTaskChainself) -> Any: ...
    def get_sleeping_tasks(self, AsyncTaskChainself) -> Any: ...
    def get_tasks(self, AsyncTaskChainself) -> Any: ...
    def get_thread_priority(self, AsyncTaskChainself) -> Any: ...
    def get_tick_clock(self, AsyncTaskChainself) -> Any: ...
    def get_timeslice_priority(self, AsyncTaskChainself) -> Any: ...
    def hasTask(self, *args, **kwargs): ...
    def has_task(self, AsyncTaskChainself, AsyncTasktask) -> Any: ...
    def isStarted(self, *args, **kwargs): ...
    def is_started(self, AsyncTaskChainself) -> Any: ...
    def output(self, AsyncTaskChainself, ostreamout) -> Any: ...
    @overload
    def poll(self, constAsyncTaskChainself) -> Any: ...
    @overload
    def poll(self) -> Any: ...
    def setFrameBudget(self, *args, **kwargs): ...
    def setFrameSync(self, *args, **kwargs): ...
    def setNumThreads(self, *args, **kwargs): ...
    def setThreadPriority(self, *args, **kwargs): ...
    def setTickClock(self, *args, **kwargs): ...
    def setTimeslicePriority(self, *args, **kwargs): ...
    def set_frame_budget(self, constAsyncTaskChainself, doubleframe_budget) -> Any: ...
    def set_frame_sync(self, constAsyncTaskChainself, boolframe_sync) -> Any: ...
    def set_num_threads(self, constAsyncTaskChainself, intnum_threads) -> Any: ...
    def set_thread_priority(self, constAsyncTaskChainself, intpriority) -> Any: ...
    def set_tick_clock(self, constAsyncTaskChainself, booltick_clock) -> Any: ...
    def set_timeslice_priority(self, constAsyncTaskChainself, booltimeslice_priority) -> Any: ...
    def startThreads(self, *args, **kwargs): ...
    def start_threads(self, constAsyncTaskChainself) -> Any: ...
    def stopThreads(self, *args, **kwargs): ...
    def stop_threads(self, constAsyncTaskChainself) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constAsyncTaskChainself) -> Any: ...
    def upcast_to_TypedReferenceCount(self, constAsyncTaskChainself) -> Any: ...
    def waitForTasks(self, *args, **kwargs): ...
    def wait_for_tasks(self, constAsyncTaskChainself) -> Any: ...
    def write(self, AsyncTaskChainself, ostreamout, intindent_level) -> Any: ...

class AsyncTaskCollection(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addTask(self, *args, **kwargs): ...
    def addTasksFrom(self, *args, **kwargs): ...
    def add_task(self, constAsyncTaskCollectionself, AsyncTasktask) -> Any: ...
    def add_tasks_from(self, constAsyncTaskCollectionself, constAsyncTaskCollectionother) -> Any: ...
    def assign(self, constAsyncTaskCollectionself, constAsyncTaskCollectioncopy) -> Any: ...
    def clear(self, constAsyncTaskCollectionself) -> Any: ...
    def findTask(self, *args, **kwargs): ...
    def find_task(self, AsyncTaskCollectionself, strname) -> Any: ...
    def getNumTasks(self, *args, **kwargs): ...
    def getTask(self, *args, **kwargs): ...
    def getTasks(self, *args, **kwargs): ...
    def get_num_tasks(self, AsyncTaskCollectionself) -> Any: ...
    def get_task(self, AsyncTaskCollectionself, intindex) -> Any: ...
    def get_tasks(self, *args, **kwargs): ...
    def hasTask(self, *args, **kwargs): ...
    def has_task(self, AsyncTaskCollectionself, AsyncTasktask) -> Any: ...
    def output(self, AsyncTaskCollectionself, ostreamout) -> Any: ...
    def removeDuplicateTasks(self, *args, **kwargs): ...
    def removeTask(self, *args, **kwargs): ...
    def removeTasksFrom(self, *args, **kwargs): ...
    def remove_duplicate_tasks(self, constAsyncTaskCollectionself) -> Any: ...
    @overload
    def remove_task(self, constAsyncTaskCollectionself, AsyncTasktask) -> Any: ...
    @overload
    def remove_task(self, constAsyncTaskCollectionself, intindex) -> Any: ...
    def remove_tasks_from(self, constAsyncTaskCollectionself, constAsyncTaskCollectionother) -> Any: ...
    def write(self, AsyncTaskCollectionself, ostreamout, intindent_level) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __iadd__(self, other): ...
    def __len__(self) -> int: ...
    def __radd__(self, other): ...

class AsyncTaskManager(TypedReferenceCount, Namable):
    DtoolClassDict: ClassVar[dict] = ...
    active_tasks: Incomplete
    clock: Incomplete
    next_wake_time: Incomplete
    sleeping_tasks: Incomplete
    tasks: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, constAsyncTaskManagerself, AsyncTasktask) -> Any: ...
    def cleanup(self, constAsyncTaskManagerself) -> Any: ...
    def findTask(self, *args, **kwargs): ...
    def findTaskChain(self, *args, **kwargs): ...
    def findTasks(self, *args, **kwargs): ...
    def findTasksMatching(self, *args, **kwargs): ...
    def find_task(self, AsyncTaskManagerself, strname) -> Any: ...
    def find_task_chain(self, constAsyncTaskManagerself, strname) -> Any: ...
    def find_tasks(self, AsyncTaskManagerself, strname) -> Any: ...
    def find_tasks_matching(self, AsyncTaskManagerself, constGlobPatternpattern) -> Any: ...
    def getActiveTasks(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getClock(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getNextWakeTime(self, *args, **kwargs): ...
    def getNumTaskChains(self, *args, **kwargs): ...
    def getNumTasks(self, *args, **kwargs): ...
    def getSleepingTasks(self, *args, **kwargs): ...
    def getTaskChain(self, *args, **kwargs): ...
    def getTaskChains(self, *args, **kwargs): ...
    def getTasks(self, *args, **kwargs): ...
    def get_active_tasks(self, AsyncTaskManagerself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_clock(self, constAsyncTaskManagerself) -> Any: ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_next_wake_time(self, AsyncTaskManagerself) -> Any: ...
    def get_num_task_chains(self, AsyncTaskManagerself) -> Any: ...
    def get_num_tasks(self, AsyncTaskManagerself) -> Any: ...
    def get_sleeping_tasks(self, AsyncTaskManagerself) -> Any: ...
    def get_task_chain(self, AsyncTaskManagerself, intn) -> Any: ...
    def get_task_chains(self, *args, **kwargs): ...
    def get_tasks(self, AsyncTaskManagerself) -> Any: ...
    def hasTask(self, *args, **kwargs): ...
    def has_task(self, AsyncTaskManagerself, AsyncTasktask) -> Any: ...
    def makeTaskChain(self, *args, **kwargs): ...
    @overload
    def make_task_chain(self, constAsyncTaskManagerself, strname) -> Any: ...
    @overload
    def make_task_chain(self, constAsyncTaskManagerself, strname, intnum_threads, intthread_priority) -> Any: ...
    def output(self, AsyncTaskManagerself, ostreamout) -> Any: ...
    def poll(self, constAsyncTaskManagerself) -> Any: ...
    @overload
    def remove(self, constAsyncTaskManagerself, AsyncTasktask) -> Any: ...
    @overload
    def remove(self, constAsyncTaskManagerself, constAsyncTaskCollectiontasks) -> Any: ...
    def removeTaskChain(self, *args, **kwargs): ...
    def remove_task_chain(self, constAsyncTaskManagerself, strname) -> Any: ...
    def setClock(self, *args, **kwargs): ...
    def set_clock(self, constAsyncTaskManagerself, ClockObjectclock) -> Any: ...
    def startThreads(self, *args, **kwargs): ...
    def start_threads(self, constAsyncTaskManagerself) -> Any: ...
    def stopThreads(self, *args, **kwargs): ...
    def stop_threads(self, constAsyncTaskManagerself) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constAsyncTaskManagerself) -> Any: ...
    def upcast_to_TypedReferenceCount(self, constAsyncTaskManagerself) -> Any: ...
    def waitForTasks(self, *args, **kwargs): ...
    def wait_for_tasks(self, constAsyncTaskManagerself) -> Any: ...
    def write(self, AsyncTaskManagerself, ostreamout, intindent_level) -> Any: ...

class AsyncTaskPause(AsyncTask):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class AsyncTaskSequence(AsyncTask, AsyncTaskCollection):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCurrentTaskIndex(self, *args, **kwargs): ...
    def getRepeatCount(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_current_task_index(self, AsyncTaskSequenceself) -> Any: ...
    def get_repeat_count(self, AsyncTaskSequenceself) -> Any: ...
    def setRepeatCount(self, *args, **kwargs): ...
    def set_repeat_count(self, constAsyncTaskSequenceself, intrepeat_count) -> Any: ...
    def upcastToAsyncTask(self, *args, **kwargs): ...
    def upcastToAsyncTaskCollection(self, *args, **kwargs): ...
    def upcast_to_AsyncTask(self, constAsyncTaskSequenceself) -> Any: ...
    def upcast_to_AsyncTaskCollection(self, constAsyncTaskSequenceself) -> Any: ...

class AttribNodeRegistry(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addNode(self, *args, **kwargs): ...
    def add_node(self, constAttribNodeRegistryself, constNodePathattrib_node) -> Any: ...
    def clear(self, constAttribNodeRegistryself) -> Any: ...
    def findNode(self, *args, **kwargs): ...
    @overload
    def find_node(self, AttribNodeRegistryself, constNodePathattrib_node) -> Any: ...
    @overload
    def find_node(self, AttribNodeRegistryself, TypeHandletype, strname) -> Any: ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getNodeName(self, *args, **kwargs): ...
    def getNodeType(self, *args, **kwargs): ...
    def getNodes(self, *args, **kwargs): ...
    def getNumNodes(self, *args, **kwargs): ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_node(self, AttribNodeRegistryself, intn) -> Any: ...
    def get_node_name(self, AttribNodeRegistryself, intn) -> Any: ...
    def get_node_type(self, AttribNodeRegistryself, intn) -> Any: ...
    def get_nodes(self, *args, **kwargs): ...
    def get_num_nodes(self, AttribNodeRegistryself) -> Any: ...
    def lookupNode(self, *args, **kwargs): ...
    def lookup_node(self, AttribNodeRegistryself, constNodePathorig_node) -> Any: ...
    def output(self, AttribNodeRegistryself, ostreamout) -> Any: ...
    def removeNode(self, *args, **kwargs): ...
    @overload
    def remove_node(self, constAttribNodeRegistryself, constNodePathattrib_node) -> Any: ...
    @overload
    def remove_node(self, constAttribNodeRegistryself, intn) -> Any: ...
    def write(self, AttribNodeRegistryself, ostreamout) -> Any: ...

class AudioLoadRequest(AsyncTask):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAudioManager(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getPositional(self, *args, **kwargs): ...
    def getSound(self, *args, **kwargs): ...
    def get_audio_manager(self, AudioLoadRequestself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_filename(self, AudioLoadRequestself) -> Any: ...
    def get_positional(self, AudioLoadRequestself) -> Any: ...
    def get_sound(self, AudioLoadRequestself) -> Any: ...
    def isReady(self, *args, **kwargs): ...
    def is_ready(self, AudioLoadRequestself) -> Any: ...

class AudioManager(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    SMHeuristic: ClassVar[int] = ...
    SMSample: ClassVar[int] = ...
    SMStream: ClassVar[int] = ...
    SM_heuristic: ClassVar[int] = ...
    SM_sample: ClassVar[int] = ...
    SM_stream: ClassVar[int] = ...
    SPEAKERMODE5point1: ClassVar[int] = ...
    SPEAKERMODE7point1: ClassVar[int] = ...
    SPEAKERMODECOUNT: ClassVar[int] = ...
    SPEAKERMODEMax: ClassVar[int] = ...
    SPEAKERMODEMono: ClassVar[int] = ...
    SPEAKERMODEQuad: ClassVar[int] = ...
    SPEAKERMODERaw: ClassVar[int] = ...
    SPEAKERMODEStereo: ClassVar[int] = ...
    SPEAKERMODESurround: ClassVar[int] = ...
    SPEAKERMODE_5point1: ClassVar[int] = ...
    SPEAKERMODE_7point1: ClassVar[int] = ...
    SPEAKERMODE_COUNT: ClassVar[int] = ...
    SPEAKERMODE_max: ClassVar[int] = ...
    SPEAKERMODE_mono: ClassVar[int] = ...
    SPEAKERMODE_quad: ClassVar[int] = ...
    SPEAKERMODE_raw: ClassVar[int] = ...
    SPEAKERMODE_stereo: ClassVar[int] = ...
    SPEAKERMODE_surround: ClassVar[int] = ...
    SPKBackleft: ClassVar[int] = ...
    SPKBackright: ClassVar[int] = ...
    SPKCOUNT: ClassVar[int] = ...
    SPKCenter: ClassVar[int] = ...
    SPKFrontleft: ClassVar[int] = ...
    SPKFrontright: ClassVar[int] = ...
    SPKNone: ClassVar[int] = ...
    SPKSideleft: ClassVar[int] = ...
    SPKSideright: ClassVar[int] = ...
    SPKSub: ClassVar[int] = ...
    SPK_COUNT: ClassVar[int] = ...
    SPK_backleft: ClassVar[int] = ...
    SPK_backright: ClassVar[int] = ...
    SPK_center: ClassVar[int] = ...
    SPK_frontleft: ClassVar[int] = ...
    SPK_frontright: ClassVar[int] = ...
    SPK_none: ClassVar[int] = ...
    SPK_sideleft: ClassVar[int] = ...
    SPK_sideright: ClassVar[int] = ...
    SPK_sub: ClassVar[int] = ...
    dls_pathname: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def audio3dGetDistanceFactor(self, *args, **kwargs): ...
    def audio3dGetDopplerFactor(self, *args, **kwargs): ...
    def audio3dGetDropOffFactor(self, *args, **kwargs): ...
    def audio3dSetDistanceFactor(self, *args, **kwargs): ...
    def audio3dSetDopplerFactor(self, *args, **kwargs): ...
    def audio3dSetDropOffFactor(self, *args, **kwargs): ...
    def audio3dSetListenerAttributes(self, *args, **kwargs): ...
    def audio_3d_get_distance_factor(self, AudioManagerself) -> Any: ...
    def audio_3d_get_doppler_factor(self, AudioManagerself) -> Any: ...
    def audio_3d_get_drop_off_factor(self, AudioManagerself) -> Any: ...
    def audio_3d_set_distance_factor(self, constAudioManagerself, floatfactor) -> Any: ...
    def audio_3d_set_doppler_factor(self, constAudioManagerself, floatfactor) -> Any: ...
    def audio_3d_set_drop_off_factor(self, constAudioManagerself, floatfactor) -> Any: ...
    def audio_3d_set_listener_attributes(
        self,
        constAudioManagerself,
        floatpx,
        floatpy,
        floatpz,
        floatvx,
        floatvy,
        floatvz,
        floatfx,
        floatfy,
        floatfz,
        floatux,
        floatuy,
        floatuz,
    ) -> Any: ...
    def clearCache(self, *args, **kwargs): ...
    def clear_cache(self, constAudioManagerself) -> Any: ...
    def configureFilters(self, *args, **kwargs): ...
    def configure_filters(self, constAudioManagerself, FilterPropertiesconfig) -> Any: ...
    @staticmethod
    def createAudioManager(*args, **kwargs): ...
    @staticmethod
    def create_AudioManager() -> Any: ...
    def getActive(self, *args, **kwargs): ...
    def getCacheLimit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getConcurrentSoundLimit(self, *args, **kwargs): ...
    @staticmethod
    def getDlsPathname(*args, **kwargs): ...
    def getNullSound(self, *args, **kwargs): ...
    def getSound(self, *args, **kwargs): ...
    def getSpeakerSetup(self, *args, **kwargs): ...
    def getVolume(self, *args, **kwargs): ...
    def get_active(self, AudioManagerself) -> Any: ...
    def get_cache_limit(self, AudioManagerself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_concurrent_sound_limit(self, AudioManagerself) -> Any: ...
    @staticmethod
    def get_dls_pathname() -> Any: ...
    def get_null_sound(self, constAudioManagerself) -> Any: ...
    def get_sound(self, constAudioManagerself, MovieAudiosource, boolpositional, intmode) -> Any: ...
    def get_speaker_setup(self, constAudioManagerself) -> Any: ...
    def get_volume(self, AudioManagerself) -> Any: ...
    def isValid(self, *args, **kwargs): ...
    def is_valid(self, constAudioManagerself) -> Any: ...
    def output(self, AudioManagerself, ostreamout) -> Any: ...
    def reduceSoundsPlayingTo(self, *args, **kwargs): ...
    def reduce_sounds_playing_to(self, constAudioManagerself, intcount) -> Any: ...
    def setActive(self, *args, **kwargs): ...
    def setCacheLimit(self, *args, **kwargs): ...
    def setConcurrentSoundLimit(self, *args, **kwargs): ...
    def setSpeakerSetup(self, *args, **kwargs): ...
    def setVolume(self, *args, **kwargs): ...
    def set_active(self, constAudioManagerself, boolflag) -> Any: ...
    def set_cache_limit(self, constAudioManagerself, intcount) -> Any: ...
    def set_concurrent_sound_limit(self, constAudioManagerself, intlimit) -> Any: ...
    def set_speaker_setup(self, constAudioManagerself, intcat) -> Any: ...
    def set_volume(self, constAudioManagerself, floatvolume) -> Any: ...
    def shutdown(self, constAudioManagerself) -> Any: ...
    def stopAllSounds(self, *args, **kwargs): ...
    def stop_all_sounds(self, constAudioManagerself) -> Any: ...
    def uncacheSound(self, *args, **kwargs): ...
    def uncache_sound(self, constAudioManagerself, constFilenamefile_name) -> Any: ...
    def update(self, constAudioManagerself) -> Any: ...
    def write(self, AudioManagerself, ostreamout) -> Any: ...

class AudioSound(TypedReferenceCount):
    BAD: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    PLAYING: ClassVar[int] = ...
    READY: ClassVar[int] = ...
    active: Incomplete
    balance: Incomplete
    name: Incomplete
    play_rate: Incomplete
    positional: Incomplete
    time: Incomplete
    volume: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def configureFilters(self, *args, **kwargs): ...
    def configure_filters(self, constAudioSoundself, FilterPropertiesconfig) -> Any: ...
    def get3dConeInnerAngle(self, *args, **kwargs): ...
    def get3dConeOuterAngle(self, *args, **kwargs): ...
    def get3dConeOuterGain(self, *args, **kwargs): ...
    def get3dDirection(self, *args, **kwargs): ...
    def get3dMaxDistance(self, *args, **kwargs): ...
    def get3dMinDistance(self, *args, **kwargs): ...
    def getActive(self, *args, **kwargs): ...
    def getBalance(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFinishedEvent(self, *args, **kwargs): ...
    def getLoop(self, *args, **kwargs): ...
    def getLoopCount(self, *args, **kwargs): ...
    def getLoopStart(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getPlayRate(self, *args, **kwargs): ...
    def getPriority(self, *args, **kwargs): ...
    def getSpeakerMix(self, *args, **kwargs): ...
    def getTime(self, *args, **kwargs): ...
    def getVolume(self, *args, **kwargs): ...
    def get_3d_cone_inner_angle(self, AudioSoundself) -> Any: ...
    def get_3d_cone_outer_angle(self, AudioSoundself) -> Any: ...
    def get_3d_cone_outer_gain(self, AudioSoundself) -> Any: ...
    def get_3d_direction(self, AudioSoundself) -> Any: ...
    def get_3d_max_distance(self, AudioSoundself) -> Any: ...
    def get_3d_min_distance(self, AudioSoundself) -> Any: ...
    def get_active(self, AudioSoundself) -> Any: ...
    def get_balance(self, AudioSoundself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_finished_event(self, AudioSoundself) -> Any: ...
    def get_loop(self, AudioSoundself) -> Any: ...
    def get_loop_count(self, AudioSoundself) -> Any: ...
    def get_loop_start(self, AudioSoundself) -> Any: ...
    def get_name(self, AudioSoundself) -> Any: ...
    def get_play_rate(self, AudioSoundself) -> Any: ...
    def get_priority(self, constAudioSoundself) -> Any: ...
    def get_speaker_mix(self, constAudioSoundself, intspeaker) -> Any: ...
    def get_time(self, AudioSoundself) -> Any: ...
    def get_volume(self, AudioSoundself) -> Any: ...
    def isPositional(self, *args, **kwargs): ...
    def is_positional(self, AudioSoundself) -> Any: ...
    def length(self, AudioSoundself) -> Any: ...
    def output(self, AudioSoundself, ostreamout) -> Any: ...
    @overload
    def play(self, constAudioSoundself) -> Any: ...
    @overload
    def play(self) -> Any: ...
    @overload
    def play(self) -> Any: ...
    def set3dAttributes(self, *args, **kwargs): ...
    def set3dConeInnerAngle(self, *args, **kwargs): ...
    def set3dConeOuterAngle(self, *args, **kwargs): ...
    def set3dConeOuterGain(self, *args, **kwargs): ...
    def set3dDirection(self, *args, **kwargs): ...
    def set3dMaxDistance(self, *args, **kwargs): ...
    def set3dMinDistance(self, *args, **kwargs): ...
    def setActive(self, *args, **kwargs): ...
    def setBalance(self, *args, **kwargs): ...
    def setFinishedEvent(self, *args, **kwargs): ...
    def setLoop(self, *args, **kwargs): ...
    def setLoopCount(self, *args, **kwargs): ...
    def setLoopStart(self, *args, **kwargs): ...
    def setPlayRate(self, *args, **kwargs): ...
    def setPriority(self, *args, **kwargs): ...
    def setSpeakerMix(self, *args, **kwargs): ...
    def setTime(self, *args, **kwargs): ...
    def setVolume(self, *args, **kwargs): ...
    def set_3d_attributes(self, constAudioSoundself, floatpx, floatpy, floatpz, floatvx, floatvy, floatvz) -> Any: ...
    def set_3d_cone_inner_angle(self, constAudioSoundself, floatangle) -> Any: ...
    def set_3d_cone_outer_angle(self, constAudioSoundself, floatangle) -> Any: ...
    def set_3d_cone_outer_gain(self, constAudioSoundself, floatgain) -> Any: ...
    def set_3d_direction(self, constAudioSoundself, LVector3fd) -> Any: ...
    def set_3d_max_distance(self, constAudioSoundself, floatdist) -> Any: ...
    def set_3d_min_distance(self, constAudioSoundself, floatdist) -> Any: ...
    def set_active(self, constAudioSoundself, boolflag) -> Any: ...
    def set_balance(self, constAudioSoundself, floatbalance_right) -> Any: ...
    def set_finished_event(self, constAudioSoundself, strevent) -> Any: ...
    def set_loop(self, constAudioSoundself, boolloop) -> Any: ...
    def set_loop_count(self, constAudioSoundself, intloop_count) -> Any: ...
    def set_loop_start(self, constAudioSoundself, floatloop_start) -> Any: ...
    def set_play_rate(self, constAudioSoundself, floatplay_rate) -> Any: ...
    def set_priority(self, constAudioSoundself, intpriority) -> Any: ...
    def set_speaker_mix(
        self,
        constAudioSoundself,
        floatfrontleft,
        floatfrontright,
        floatcenter,
        floatsub,
        floatbackleft,
        floatbackright,
        floatsideleft,
        floatsideright,
    ) -> Any: ...
    def set_time(self, constAudioSoundself, floatstart_time) -> Any: ...
    def set_volume(self, constAudioSoundself, floatvolume) -> Any: ...
    def status(self, AudioSoundself) -> Any: ...
    def stop(self, constAudioSoundself) -> Any: ...
    def write(self, AudioSoundself, ostreamout) -> Any: ...

class AudioVolumeAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    class_slot: Incomplete
    volume: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getVolume(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_volume(self, AudioVolumeAttribself) -> Any: ...
    def hasVolume(self, *args, **kwargs): ...
    def has_volume(self, AudioVolumeAttribself) -> Any: ...
    def isOff(self, *args, **kwargs): ...
    def is_off(self, AudioVolumeAttribself) -> Any: ...
    @staticmethod
    def make(floatvolume) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeIdentity(*args, **kwargs): ...
    @staticmethod
    def makeOff(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_identity() -> Any: ...
    @staticmethod
    def make_off() -> Any: ...
    def setVolume(self, *args, **kwargs): ...
    def set_volume(self, AudioVolumeAttribself, floatvolume) -> Any: ...

class AuxBitplaneAttrib(RenderAttrib):
    ABOAuxGlow: ClassVar[int] = ...
    ABOAuxNormal: ClassVar[int] = ...
    ABOGlow: ClassVar[int] = ...
    ABO_aux_glow: ClassVar[int] = ...
    ABO_aux_normal: ClassVar[int] = ...
    ABO_glow: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    class_slot: Incomplete
    outputs: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getOutputs(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_outputs(self, AuxBitplaneAttribself) -> Any: ...
    @overload
    @staticmethod
    def make() -> Any: ...
    @overload
    @staticmethod
    def make(intoutputs) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class AuxSceneData(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDuration(self, *args, **kwargs): ...
    def getExpirationTime(self, *args, **kwargs): ...
    def getLastRenderTime(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_duration(self, AuxSceneDataself) -> Any: ...
    def get_expiration_time(self, AuxSceneDataself) -> Any: ...
    def get_last_render_time(self, AuxSceneDataself) -> Any: ...
    def output(self, AuxSceneDataself, ostreamout) -> Any: ...
    def setDuration(self, *args, **kwargs): ...
    def setLastRenderTime(self, *args, **kwargs): ...
    def set_duration(self, constAuxSceneDataself, doubleduration) -> Any: ...
    def set_last_render_time(self, constAuxSceneDataself, doublerender_time) -> Any: ...
    def write(self, AuxSceneDataself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BamCache(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    active: Incomplete
    cache_compiled_shaders: Incomplete
    cache_compressed_textures: Incomplete
    cache_max_kbytes: Incomplete
    cache_models: Incomplete
    cache_textures: Incomplete
    flush_time: Incomplete
    read_only: Incomplete
    root: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def considerFlushGlobalIndex(*args, **kwargs): ...
    def considerFlushIndex(self, *args, **kwargs): ...
    @staticmethod
    def consider_flush_global_index() -> Any: ...
    def consider_flush_index(self, constBamCacheself) -> Any: ...
    @staticmethod
    def flushGlobalIndex(*args, **kwargs): ...
    def flushIndex(self, *args, **kwargs): ...
    @staticmethod
    def flush_global_index() -> Any: ...
    def flush_index(self, constBamCacheself) -> Any: ...
    def getActive(self, *args, **kwargs): ...
    def getCacheCompiledShaders(self, *args, **kwargs): ...
    def getCacheCompressedTextures(self, *args, **kwargs): ...
    def getCacheMaxKbytes(self, *args, **kwargs): ...
    def getCacheModels(self, *args, **kwargs): ...
    def getCacheTextures(self, *args, **kwargs): ...
    def getFlushTime(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getReadOnly(self, *args, **kwargs): ...
    def getRoot(self, *args, **kwargs): ...
    def get_active(self, BamCacheself) -> Any: ...
    def get_cache_compiled_shaders(self, BamCacheself) -> Any: ...
    def get_cache_compressed_textures(self, BamCacheself) -> Any: ...
    def get_cache_max_kbytes(self, BamCacheself) -> Any: ...
    def get_cache_models(self, BamCacheself) -> Any: ...
    def get_cache_textures(self, BamCacheself) -> Any: ...
    def get_flush_time(self, BamCacheself) -> Any: ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_read_only(self, BamCacheself) -> Any: ...
    def get_root(self, BamCacheself) -> Any: ...
    def listIndex(self, *args, **kwargs): ...
    def list_index(self, BamCacheself, ostreamout, intindent_level) -> Any: ...
    def lookup(self, constBamCacheself, constFilenamesource_filename, strcache_extension) -> Any: ...
    def setActive(self, *args, **kwargs): ...
    def setCacheCompiledShaders(self, *args, **kwargs): ...
    def setCacheCompressedTextures(self, *args, **kwargs): ...
    def setCacheMaxKbytes(self, *args, **kwargs): ...
    def setCacheModels(self, *args, **kwargs): ...
    def setCacheTextures(self, *args, **kwargs): ...
    def setFlushTime(self, *args, **kwargs): ...
    def setReadOnly(self, *args, **kwargs): ...
    def setRoot(self, *args, **kwargs): ...
    def set_active(self, constBamCacheself, boolflag) -> Any: ...
    def set_cache_compiled_shaders(self, constBamCacheself, boolflag) -> Any: ...
    def set_cache_compressed_textures(self, constBamCacheself, boolflag) -> Any: ...
    def set_cache_max_kbytes(self, constBamCacheself, intmax_kbytes) -> Any: ...
    def set_cache_models(self, constBamCacheself, boolflag) -> Any: ...
    def set_cache_textures(self, constBamCacheself, boolflag) -> Any: ...
    def set_flush_time(self, constBamCacheself, intflush_time) -> Any: ...
    def set_read_only(self, constBamCacheself, boolro) -> Any: ...
    def set_root(self, constBamCacheself, constFilenameroot) -> Any: ...
    def store(self, constBamCacheself, BamCacheRecordrecord) -> Any: ...

class BamCacheRecord(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    cache_filename: Incomplete
    data: Incomplete
    recorded_time: Incomplete
    source_pathname: Incomplete
    source_timestamp: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addDependentFile(self, *args, **kwargs): ...
    def add_dependent_file(self, constBamCacheRecordself, constVirtualFilefile) -> Any: ...
    def clearData(self, *args, **kwargs): ...
    def clearDependentFiles(self, *args, **kwargs): ...
    def clear_data(self, constBamCacheRecordself) -> Any: ...
    def clear_dependent_files(self, constBamCacheRecordself) -> Any: ...
    def dependentsUnchanged(self, *args, **kwargs): ...
    def dependents_unchanged(self, BamCacheRecordself) -> Any: ...
    def getCacheFilename(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getData(self, *args, **kwargs): ...
    def getDependentPathname(self, *args, **kwargs): ...
    def getNumDependentFiles(self, *args, **kwargs): ...
    def getRecordedTime(self, *args, **kwargs): ...
    def getSourcePathname(self, *args, **kwargs): ...
    def getSourceTimestamp(self, *args, **kwargs): ...
    def get_cache_filename(self, BamCacheRecordself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_data(self, BamCacheRecordself) -> Any: ...
    def get_dependent_pathname(self, BamCacheRecordself, intn) -> Any: ...
    def get_num_dependent_files(self, BamCacheRecordself) -> Any: ...
    def get_recorded_time(self, BamCacheRecordself) -> Any: ...
    def get_source_pathname(self, BamCacheRecordself) -> Any: ...
    def get_source_timestamp(self, BamCacheRecordself) -> Any: ...
    def hasData(self, *args, **kwargs): ...
    def has_data(self, BamCacheRecordself) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, BamCacheRecordself) -> Any: ...
    def output(self, BamCacheRecordself, ostreamout) -> Any: ...
    def setData(self, *args, **kwargs): ...
    @overload
    def set_data(self, constBamCacheRecordself, TypedWritableReferenceCountptr) -> Any: ...
    @overload
    def set_data(self, constBamCacheRecordself, TypedWritableptr) -> Any: ...
    @overload
    def set_data(self, constBamCacheRecordself, TypedWritableptr, ReferenceCountref_ptr) -> Any: ...
    @overload
    def set_data(self, constBamCacheRecordself, TypedWritableptr, intdummy) -> Any: ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_TypedWritableReferenceCount(self, constBamCacheRecordself) -> Any: ...
    def write(self, BamCacheRecordself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class BamEnums(dtoolconfig.DTOOL_SUPER_BASE):
    BEBigendian: ClassVar[int] = ...
    BELittleendian: ClassVar[int] = ...
    BENative: ClassVar[int] = ...
    BE_bigendian: ClassVar[int] = ...
    BE_littleendian: ClassVar[int] = ...
    BE_native: ClassVar[int] = ...
    BOCAdjunct: ClassVar[int] = ...
    BOCFileData: ClassVar[int] = ...
    BOCPop: ClassVar[int] = ...
    BOCPush: ClassVar[int] = ...
    BOCRemove: ClassVar[int] = ...
    BOC_adjunct: ClassVar[int] = ...
    BOC_file_data: ClassVar[int] = ...
    BOC_pop: ClassVar[int] = ...
    BOC_push: ClassVar[int] = ...
    BOC_remove: ClassVar[int] = ...
    BTMBasename: ClassVar[int] = ...
    BTMFullpath: ClassVar[int] = ...
    BTMRawdata: ClassVar[int] = ...
    BTMRelative: ClassVar[int] = ...
    BTMUnchanged: ClassVar[int] = ...
    BTM_basename: ClassVar[int] = ...
    BTM_fullpath: ClassVar[int] = ...
    BTM_rawdata: ClassVar[int] = ...
    BTM_relative: ClassVar[int] = ...
    BTM_unchanged: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BamFile(BamEnums):
    DtoolClassDict: ClassVar[dict] = ...
    file_endian: Incomplete
    file_stdfloat_double: Incomplete
    file_version: Incomplete
    reader: Incomplete
    writer: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constBamFileself) -> Any: ...
    def getCurrentMajorVer(self, *args, **kwargs): ...
    def getCurrentMinorVer(self, *args, **kwargs): ...
    def getFileEndian(self, *args, **kwargs): ...
    def getFileMajorVer(self, *args, **kwargs): ...
    def getFileMinorVer(self, *args, **kwargs): ...
    def getFileStdfloatDouble(self, *args, **kwargs): ...
    def getReader(self, *args, **kwargs): ...
    def getWriter(self, *args, **kwargs): ...
    def get_current_major_ver(self, constBamFileself) -> Any: ...
    def get_current_minor_ver(self, constBamFileself) -> Any: ...
    def get_file_endian(self, BamFileself) -> Any: ...
    def get_file_major_ver(self, constBamFileself) -> Any: ...
    def get_file_minor_ver(self, constBamFileself) -> Any: ...
    def get_file_stdfloat_double(self, BamFileself) -> Any: ...
    def get_reader(self, constBamFileself) -> Any: ...
    def get_writer(self, constBamFileself) -> Any: ...
    def isEof(self, *args, **kwargs): ...
    def isValidRead(self, *args, **kwargs): ...
    def isValidWrite(self, *args, **kwargs): ...
    def is_eof(self, BamFileself) -> Any: ...
    def is_valid_read(self, BamFileself) -> Any: ...
    def is_valid_write(self, BamFileself) -> Any: ...
    def openRead(self, *args, **kwargs): ...
    def openWrite(self, *args, **kwargs): ...
    def open_read(self, constBamFileself, istreamin, strbam_filename, boolreport_errors) -> Any: ...
    def open_write(self, constBamFileself, ostreamout, strbam_filename, boolreport_errors) -> Any: ...
    def readNode(self, *args, **kwargs): ...
    def readObject(self, *args, **kwargs): ...
    def read_node(self, constBamFileself, boolreport_errors) -> Any: ...
    def read_object(self, constBamFileself) -> Any: ...
    @overload
    def resolve(self, constBamFileself) -> Any: ...
    @overload
    def resolve(self) -> Any: ...
    def writeObject(self, *args, **kwargs): ...
    def write_object(self, constBamFileself, constTypedWritableobject) -> Any: ...

class BamReader(BamEnums):
    DtoolClassDict: ClassVar[dict] = ...
    file_endian: Incomplete
    file_stdfloat_double: Incomplete
    file_version: Incomplete
    filename: Incomplete
    loader_options: Incomplete
    source: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def changePointer(self, *args, **kwargs): ...
    def change_pointer(
        self, constBamReaderself, constTypedWritableorig_pointer, constTypedWritablenew_pointer
    ) -> Any: ...
    def getCurrentMajorVer(self, *args, **kwargs): ...
    def getCurrentMinorVer(self, *args, **kwargs): ...
    def getFileEndian(self, *args, **kwargs): ...
    def getFileMajorVer(self, *args, **kwargs): ...
    def getFileMinorVer(self, *args, **kwargs): ...
    def getFileStdfloatDouble(self, *args, **kwargs): ...
    def getFileVersion(self, *args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getLoaderOptions(self, *args, **kwargs): ...
    def getSource(self, *args, **kwargs): ...
    def get_current_major_ver(self, BamReaderself) -> Any: ...
    def get_current_minor_ver(self, BamReaderself) -> Any: ...
    def get_file_endian(self, BamReaderself) -> Any: ...
    def get_file_major_ver(self, BamReaderself) -> Any: ...
    def get_file_minor_ver(self, BamReaderself) -> Any: ...
    def get_file_stdfloat_double(self, BamReaderself) -> Any: ...
    def get_file_version(self, BamReaderself) -> Any: ...
    def get_filename(self, BamReaderself) -> Any: ...
    def get_loader_options(self, BamReaderself) -> Any: ...
    def get_source(self, constBamReaderself) -> Any: ...
    def init(self, constBamReaderself) -> Any: ...
    def isEof(self, *args, **kwargs): ...
    def is_eof(self, BamReaderself) -> Any: ...
    def readObject(self, *args, **kwargs): ...
    @overload
    def read_object(self, constBamReaderself) -> Any: ...
    @overload
    def read_object(self) -> Any: ...
    @overload
    def read_object(self) -> Any: ...
    @overload
    def read_object(self) -> Any: ...
    @staticmethod
    def registerFactory(*args, **kwargs): ...
    @staticmethod
    def register_factory(TypeHandlehandle, objectfunc) -> Any: ...
    @overload
    def resolve(self, constBamReaderself) -> Any: ...
    @overload
    def resolve(self) -> Any: ...
    def setLoaderOptions(self, *args, **kwargs): ...
    def setSource(self, *args, **kwargs): ...
    def set_loader_options(self, constBamReaderself, constLoaderOptionsoptions) -> Any: ...
    def set_source(self, constBamReaderself, DatagramGeneratorsource) -> Any: ...

class BamWriter(BamEnums):
    DtoolClassDict: ClassVar[dict] = ...
    file_endian: Incomplete
    file_stdfloat_double: Incomplete
    file_texture_mode: Incomplete
    file_version: Incomplete
    filename: Incomplete
    root_node: Incomplete
    target: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def flush(self, constBamWriterself) -> Any: ...
    def getFileEndian(self, *args, **kwargs): ...
    def getFileMajorVer(self, *args, **kwargs): ...
    def getFileMinorVer(self, *args, **kwargs): ...
    def getFileStdfloatDouble(self, *args, **kwargs): ...
    def getFileTextureMode(self, *args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getRootNode(self, *args, **kwargs): ...
    def getTarget(self, *args, **kwargs): ...
    def get_file_endian(self, BamWriterself) -> Any: ...
    def get_file_major_ver(self, BamWriterself) -> Any: ...
    def get_file_minor_ver(self, BamWriterself) -> Any: ...
    def get_file_stdfloat_double(self, BamWriterself) -> Any: ...
    def get_file_texture_mode(self, BamWriterself) -> Any: ...
    def get_filename(self, BamWriterself) -> Any: ...
    def get_root_node(self, BamWriterself) -> Any: ...
    def get_target(self, constBamWriterself) -> Any: ...
    def hasObject(self, *args, **kwargs): ...
    def has_object(self, BamWriterself, constTypedWritableobj) -> Any: ...
    def init(self, constBamWriterself) -> Any: ...
    def setFileMinorVer(self, *args, **kwargs): ...
    def setFileTextureMode(self, *args, **kwargs): ...
    def setRootNode(self, *args, **kwargs): ...
    def setTarget(self, *args, **kwargs): ...
    def set_file_minor_ver(self, constBamWriterself, intminor_ver) -> Any: ...
    def set_file_texture_mode(self, constBamWriterself, intfile_texture_mode) -> Any: ...
    def set_root_node(self, constBamWriterself, TypedWritableroot_node) -> Any: ...
    def set_target(self, constBamWriterself, DatagramSinktarget) -> Any: ...
    def writeObject(self, *args, **kwargs): ...
    def write_object(self, constBamWriterself, constTypedWritableobj) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BasicIosChar(ios_base):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bad(self, basic_iosself) -> Any: ...
    def clear(self, constbasic_iosself) -> Any: ...
    def eof(self, basic_iosself) -> Any: ...
    def fail(self, basic_iosself) -> Any: ...
    def good(self, basic_iosself) -> Any: ...

class BillboardEffect(RenderEffect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAxialRotate(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getEyeRelative(self, *args, **kwargs): ...
    def getFixedDepth(self, *args, **kwargs): ...
    def getLookAt(self, *args, **kwargs): ...
    def getLookAtPoint(self, *args, **kwargs): ...
    def getOffset(self, *args, **kwargs): ...
    def getUpVector(self, *args, **kwargs): ...
    def get_axial_rotate(self, BillboardEffectself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_eye_relative(self, BillboardEffectself) -> Any: ...
    def get_fixed_depth(self, BillboardEffectself) -> Any: ...
    def get_look_at(self, BillboardEffectself) -> Any: ...
    def get_look_at_point(self, BillboardEffectself) -> Any: ...
    def get_offset(self, BillboardEffectself) -> Any: ...
    def get_up_vector(self, BillboardEffectself) -> Any: ...
    def isOff(self, *args, **kwargs): ...
    def is_off(self, BillboardEffectself) -> Any: ...
    @staticmethod
    def make(
        constLVector3fup_vector,
        booleye_relative,
        boolaxial_rotate,
        floatoffset,
        constNodePathlook_at,
        constLPoint3flook_at_point,
        boolfixed_depth,
    ) -> Any: ...
    @staticmethod
    def makeAxis(*args, **kwargs): ...
    @staticmethod
    def makePointEye(*args, **kwargs): ...
    @staticmethod
    def makePointWorld(*args, **kwargs): ...
    @staticmethod
    def make_axis() -> Any: ...
    @staticmethod
    def make_point_eye() -> Any: ...
    @staticmethod
    def make_point_world() -> Any: ...

class BindAnimRequest(ModelLoadRequest):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class BitArray(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    num_bits_per_word: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitArrayself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitArrayself, intindex) -> Any: ...
    def clear_range(self, constBitArrayself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitArrayself, constBitArrayother) -> Any: ...
    def extract(self, BitArrayself, intlow_bit, intsize) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestBits(self, *args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    @staticmethod
    def getNumBitsPerWord(*args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getNumWords(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitArrayself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_bits(self, BitArrayself) -> Any: ...
    def get_highest_off_bit(self, BitArrayself) -> Any: ...
    def get_highest_on_bit(self, BitArrayself) -> Any: ...
    def get_lowest_off_bit(self, BitArrayself) -> Any: ...
    def get_lowest_on_bit(self, BitArrayself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitArrayself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitArrayself) -> Any: ...
    @staticmethod
    def get_num_bits_per_word() -> Any: ...
    def get_num_off_bits(self, BitArrayself) -> Any: ...
    def get_num_on_bits(self, BitArrayself) -> Any: ...
    def get_num_words(self, BitArrayself) -> Any: ...
    def get_word(self, BitArrayself, intn) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitArrayself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitArrayself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitArrayself, constBitArrayother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitArrayself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitArrayself) -> Any: ...
    def is_zero(self, BitArrayself) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitArrayself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitArrayself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitArrayself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitArrayself, intindex) -> Any: ...
    def set_bit_to(self, constBitArrayself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitArrayself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitArrayself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitArrayself, intn, longvalue) -> Any: ...
    def store(self, constBitArrayself, longvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitArrayself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class BitMask16(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitMaskself, intindex) -> Any: ...
    def clear_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitMaskself, constBitMaskother) -> Any: ...
    def extract(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def floodBitsDown(self, *args, **kwargs): ...
    def floodBitsUp(self, *args, **kwargs): ...
    def floodDownInPlace(self, *args, **kwargs): ...
    def floodUpInPlace(self, *args, **kwargs): ...
    def flood_bits_down(self, BitMaskself) -> Any: ...
    def flood_bits_up(self, BitMaskself) -> Any: ...
    def flood_down_in_place(self, constBitMaskself) -> Any: ...
    def flood_up_in_place(self, constBitMaskself) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, BitMaskself) -> Any: ...
    def get_highest_on_bit(self, BitMaskself) -> Any: ...
    def get_key(self, BitMaskself) -> Any: ...
    def get_lowest_off_bit(self, BitMaskself) -> Any: ...
    def get_lowest_on_bit(self, BitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitMaskself) -> Any: ...
    def get_num_off_bits(self, BitMaskself) -> Any: ...
    def get_num_on_bits(self, BitMaskself) -> Any: ...
    def get_word(self, BitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitMaskself, constBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitMaskself) -> Any: ...
    def is_zero(self, BitMaskself) -> Any: ...
    def keepNextHighestBit(self, *args, **kwargs): ...
    def keepNextLowestBit(self, *args, **kwargs): ...
    @overload
    def keep_next_highest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, intindex) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitMaskself, intvalue) -> Any: ...
    def store(self, constBitMaskself, intvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, BitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class BitMask32(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitMaskself, intindex) -> Any: ...
    def clear_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitMaskself, constBitMaskother) -> Any: ...
    def extract(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def floodBitsDown(self, *args, **kwargs): ...
    def floodBitsUp(self, *args, **kwargs): ...
    def floodDownInPlace(self, *args, **kwargs): ...
    def floodUpInPlace(self, *args, **kwargs): ...
    def flood_bits_down(self, BitMaskself) -> Any: ...
    def flood_bits_up(self, BitMaskself) -> Any: ...
    def flood_down_in_place(self, constBitMaskself) -> Any: ...
    def flood_up_in_place(self, constBitMaskself) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, BitMaskself) -> Any: ...
    def get_highest_on_bit(self, BitMaskself) -> Any: ...
    def get_key(self, BitMaskself) -> Any: ...
    def get_lowest_off_bit(self, BitMaskself) -> Any: ...
    def get_lowest_on_bit(self, BitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitMaskself) -> Any: ...
    def get_num_off_bits(self, BitMaskself) -> Any: ...
    def get_num_on_bits(self, BitMaskself) -> Any: ...
    def get_word(self, BitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitMaskself, constBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitMaskself) -> Any: ...
    def is_zero(self, BitMaskself) -> Any: ...
    def keepNextHighestBit(self, *args, **kwargs): ...
    def keepNextLowestBit(self, *args, **kwargs): ...
    @overload
    def keep_next_highest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, intindex) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitMaskself, intvalue) -> Any: ...
    def store(self, constBitMaskself, intvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, BitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class BitMask64(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitMaskself, intindex) -> Any: ...
    def clear_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitMaskself, constBitMaskother) -> Any: ...
    def extract(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def floodBitsDown(self, *args, **kwargs): ...
    def floodBitsUp(self, *args, **kwargs): ...
    def floodDownInPlace(self, *args, **kwargs): ...
    def floodUpInPlace(self, *args, **kwargs): ...
    def flood_bits_down(self, BitMaskself) -> Any: ...
    def flood_bits_up(self, BitMaskself) -> Any: ...
    def flood_down_in_place(self, constBitMaskself) -> Any: ...
    def flood_up_in_place(self, constBitMaskself) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, BitMaskself) -> Any: ...
    def get_highest_on_bit(self, BitMaskself) -> Any: ...
    def get_key(self, BitMaskself) -> Any: ...
    def get_lowest_off_bit(self, BitMaskself) -> Any: ...
    def get_lowest_on_bit(self, BitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitMaskself) -> Any: ...
    def get_num_off_bits(self, BitMaskself) -> Any: ...
    def get_num_on_bits(self, BitMaskself) -> Any: ...
    def get_word(self, BitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitMaskself, constBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitMaskself) -> Any: ...
    def is_zero(self, BitMaskself) -> Any: ...
    def keepNextHighestBit(self, *args, **kwargs): ...
    def keepNextLowestBit(self, *args, **kwargs): ...
    @overload
    def keep_next_highest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, intindex) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitMaskself, longvalue) -> Any: ...
    def store(self, constBitMaskself, longvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, BitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class BitMaskUint16T16(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitMaskself, intindex) -> Any: ...
    def clear_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitMaskself, constBitMaskother) -> Any: ...
    def extract(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def floodBitsDown(self, *args, **kwargs): ...
    def floodBitsUp(self, *args, **kwargs): ...
    def floodDownInPlace(self, *args, **kwargs): ...
    def floodUpInPlace(self, *args, **kwargs): ...
    def flood_bits_down(self, BitMaskself) -> Any: ...
    def flood_bits_up(self, BitMaskself) -> Any: ...
    def flood_down_in_place(self, constBitMaskself) -> Any: ...
    def flood_up_in_place(self, constBitMaskself) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, BitMaskself) -> Any: ...
    def get_highest_on_bit(self, BitMaskself) -> Any: ...
    def get_key(self, BitMaskself) -> Any: ...
    def get_lowest_off_bit(self, BitMaskself) -> Any: ...
    def get_lowest_on_bit(self, BitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitMaskself) -> Any: ...
    def get_num_off_bits(self, BitMaskself) -> Any: ...
    def get_num_on_bits(self, BitMaskself) -> Any: ...
    def get_word(self, BitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitMaskself, constBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitMaskself) -> Any: ...
    def is_zero(self, BitMaskself) -> Any: ...
    def keepNextHighestBit(self, *args, **kwargs): ...
    def keepNextLowestBit(self, *args, **kwargs): ...
    @overload
    def keep_next_highest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, intindex) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitMaskself, intvalue) -> Any: ...
    def store(self, constBitMaskself, intvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, BitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class BitMaskUint32T32(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitMaskself, intindex) -> Any: ...
    def clear_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitMaskself, constBitMaskother) -> Any: ...
    def extract(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def floodBitsDown(self, *args, **kwargs): ...
    def floodBitsUp(self, *args, **kwargs): ...
    def floodDownInPlace(self, *args, **kwargs): ...
    def floodUpInPlace(self, *args, **kwargs): ...
    def flood_bits_down(self, BitMaskself) -> Any: ...
    def flood_bits_up(self, BitMaskself) -> Any: ...
    def flood_down_in_place(self, constBitMaskself) -> Any: ...
    def flood_up_in_place(self, constBitMaskself) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, BitMaskself) -> Any: ...
    def get_highest_on_bit(self, BitMaskself) -> Any: ...
    def get_key(self, BitMaskself) -> Any: ...
    def get_lowest_off_bit(self, BitMaskself) -> Any: ...
    def get_lowest_on_bit(self, BitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitMaskself) -> Any: ...
    def get_num_off_bits(self, BitMaskself) -> Any: ...
    def get_num_on_bits(self, BitMaskself) -> Any: ...
    def get_word(self, BitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitMaskself, constBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitMaskself) -> Any: ...
    def is_zero(self, BitMaskself) -> Any: ...
    def keepNextHighestBit(self, *args, **kwargs): ...
    def keepNextLowestBit(self, *args, **kwargs): ...
    @overload
    def keep_next_highest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, intindex) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitMaskself, intvalue) -> Any: ...
    def store(self, constBitMaskself, intvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, BitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class BitMaskUint64T64(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitMaskself, intindex) -> Any: ...
    def clear_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitMaskself, constBitMaskother) -> Any: ...
    def extract(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def floodBitsDown(self, *args, **kwargs): ...
    def floodBitsUp(self, *args, **kwargs): ...
    def floodDownInPlace(self, *args, **kwargs): ...
    def floodUpInPlace(self, *args, **kwargs): ...
    def flood_bits_down(self, BitMaskself) -> Any: ...
    def flood_bits_up(self, BitMaskself) -> Any: ...
    def flood_down_in_place(self, constBitMaskself) -> Any: ...
    def flood_up_in_place(self, constBitMaskself) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, BitMaskself) -> Any: ...
    def get_highest_on_bit(self, BitMaskself) -> Any: ...
    def get_key(self, BitMaskself) -> Any: ...
    def get_lowest_off_bit(self, BitMaskself) -> Any: ...
    def get_lowest_on_bit(self, BitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitMaskself) -> Any: ...
    def get_num_off_bits(self, BitMaskself) -> Any: ...
    def get_num_on_bits(self, BitMaskself) -> Any: ...
    def get_word(self, BitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitMaskself, constBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitMaskself) -> Any: ...
    def is_zero(self, BitMaskself) -> Any: ...
    def keepNextHighestBit(self, *args, **kwargs): ...
    def keepNextLowestBit(self, *args, **kwargs): ...
    @overload
    def keep_next_highest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, intindex) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitMaskself, longvalue) -> Any: ...
    def store(self, constBitMaskself, longvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, BitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class BitMask_uint16_t_16(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitMaskself, intindex) -> Any: ...
    def clear_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitMaskself, constBitMaskother) -> Any: ...
    def extract(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def floodBitsDown(self, *args, **kwargs): ...
    def floodBitsUp(self, *args, **kwargs): ...
    def floodDownInPlace(self, *args, **kwargs): ...
    def floodUpInPlace(self, *args, **kwargs): ...
    def flood_bits_down(self, BitMaskself) -> Any: ...
    def flood_bits_up(self, BitMaskself) -> Any: ...
    def flood_down_in_place(self, constBitMaskself) -> Any: ...
    def flood_up_in_place(self, constBitMaskself) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, BitMaskself) -> Any: ...
    def get_highest_on_bit(self, BitMaskself) -> Any: ...
    def get_key(self, BitMaskself) -> Any: ...
    def get_lowest_off_bit(self, BitMaskself) -> Any: ...
    def get_lowest_on_bit(self, BitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitMaskself) -> Any: ...
    def get_num_off_bits(self, BitMaskself) -> Any: ...
    def get_num_on_bits(self, BitMaskself) -> Any: ...
    def get_word(self, BitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitMaskself, constBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitMaskself) -> Any: ...
    def is_zero(self, BitMaskself) -> Any: ...
    def keepNextHighestBit(self, *args, **kwargs): ...
    def keepNextLowestBit(self, *args, **kwargs): ...
    @overload
    def keep_next_highest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, intindex) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitMaskself, intvalue) -> Any: ...
    def store(self, constBitMaskself, intvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, BitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class BitMask_uint32_t_32(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitMaskself, intindex) -> Any: ...
    def clear_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitMaskself, constBitMaskother) -> Any: ...
    def extract(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def floodBitsDown(self, *args, **kwargs): ...
    def floodBitsUp(self, *args, **kwargs): ...
    def floodDownInPlace(self, *args, **kwargs): ...
    def floodUpInPlace(self, *args, **kwargs): ...
    def flood_bits_down(self, BitMaskself) -> Any: ...
    def flood_bits_up(self, BitMaskself) -> Any: ...
    def flood_down_in_place(self, constBitMaskself) -> Any: ...
    def flood_up_in_place(self, constBitMaskself) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, BitMaskself) -> Any: ...
    def get_highest_on_bit(self, BitMaskself) -> Any: ...
    def get_key(self, BitMaskself) -> Any: ...
    def get_lowest_off_bit(self, BitMaskself) -> Any: ...
    def get_lowest_on_bit(self, BitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitMaskself) -> Any: ...
    def get_num_off_bits(self, BitMaskself) -> Any: ...
    def get_num_on_bits(self, BitMaskself) -> Any: ...
    def get_word(self, BitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitMaskself, constBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitMaskself) -> Any: ...
    def is_zero(self, BitMaskself) -> Any: ...
    def keepNextHighestBit(self, *args, **kwargs): ...
    def keepNextLowestBit(self, *args, **kwargs): ...
    @overload
    def keep_next_highest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, intindex) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitMaskself, intvalue) -> Any: ...
    def store(self, constBitMaskself, intvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, BitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class BitMask_uint64_t_64(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitMaskself, intindex) -> Any: ...
    def clear_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitMaskself, constBitMaskother) -> Any: ...
    def extract(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def floodBitsDown(self, *args, **kwargs): ...
    def floodBitsUp(self, *args, **kwargs): ...
    def floodDownInPlace(self, *args, **kwargs): ...
    def floodUpInPlace(self, *args, **kwargs): ...
    def flood_bits_down(self, BitMaskself) -> Any: ...
    def flood_bits_up(self, BitMaskself) -> Any: ...
    def flood_down_in_place(self, constBitMaskself) -> Any: ...
    def flood_up_in_place(self, constBitMaskself) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, BitMaskself) -> Any: ...
    def get_highest_on_bit(self, BitMaskself) -> Any: ...
    def get_key(self, BitMaskself) -> Any: ...
    def get_lowest_off_bit(self, BitMaskself) -> Any: ...
    def get_lowest_on_bit(self, BitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitMaskself) -> Any: ...
    def get_num_off_bits(self, BitMaskself) -> Any: ...
    def get_num_on_bits(self, BitMaskself) -> Any: ...
    def get_word(self, BitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitMaskself, constBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitMaskself) -> Any: ...
    def is_zero(self, BitMaskself) -> Any: ...
    def keepNextHighestBit(self, *args, **kwargs): ...
    def keepNextLowestBit(self, *args, **kwargs): ...
    @overload
    def keep_next_highest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, intindex) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitMaskself, longvalue) -> Any: ...
    def store(self, constBitMaskself, longvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, BitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class BoundingBox(FiniteBoundingVolume):
    DtoolClassDict: ClassVar[dict] = ...
    planes: Incomplete
    points: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumPlanes(self, *args, **kwargs): ...
    def getNumPoints(self, *args, **kwargs): ...
    def getPlane(self, *args, **kwargs): ...
    def getPlanes(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getPoints(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_planes(self, BoundingBoxself) -> Any: ...
    def get_num_points(self, BoundingBoxself) -> Any: ...
    def get_plane(self, BoundingBoxself, intn) -> Any: ...
    def get_planes(self, *args, **kwargs): ...
    def get_point(self, BoundingBoxself, intn) -> Any: ...
    def get_points(self, *args, **kwargs): ...
    def setMinMax(self, *args, **kwargs): ...
    def set_min_max(self, constBoundingBoxself, constLPoint3fmin, constLPoint3fmax) -> Any: ...

class BoundingHexahedron(FiniteBoundingVolume):
    DtoolClassDict: ClassVar[dict] = ...
    planes: Incomplete
    points: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumPlanes(self, *args, **kwargs): ...
    def getNumPoints(self, *args, **kwargs): ...
    def getPlane(self, *args, **kwargs): ...
    def getPlanes(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getPoints(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_planes(self, BoundingHexahedronself) -> Any: ...
    def get_num_points(self, BoundingHexahedronself) -> Any: ...
    def get_plane(self, BoundingHexahedronself, intn) -> Any: ...
    def get_planes(self, *args, **kwargs): ...
    def get_point(self, BoundingHexahedronself, intn) -> Any: ...
    def get_points(self, *args, **kwargs): ...

class BoundingLine(GeometricBoundingVolume):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPointA(self, *args, **kwargs): ...
    def getPointB(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_point_a(self, BoundingLineself) -> Any: ...
    def get_point_b(self, BoundingLineself) -> Any: ...

class BoundingPlane(GeometricBoundingVolume):
    DtoolClassDict: ClassVar[dict] = ...
    plane: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPlane(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_plane(self, BoundingPlaneself) -> Any: ...

class BoundingSphere(FiniteBoundingVolume):
    DtoolClassDict: ClassVar[dict] = ...
    center: Incomplete
    radius: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getCenter(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    def get_center(self, BoundingSphereself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_radius(self, BoundingSphereself) -> Any: ...
    def setCenter(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    def set_center(self, constBoundingSphereself, constLPoint3fcenter) -> Any: ...
    def set_radius(self, constBoundingSphereself, floatradius) -> Any: ...

class BoundingVolume(TypedReferenceCount):
    BTBest: ClassVar[int] = ...
    BTBox: ClassVar[int] = ...
    BTDefault: ClassVar[int] = ...
    BTFastest: ClassVar[int] = ...
    BTSphere: ClassVar[int] = ...
    BT_best: ClassVar[int] = ...
    BT_box: ClassVar[int] = ...
    BT_default: ClassVar[int] = ...
    BT_fastest: ClassVar[int] = ...
    BT_sphere: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    IFAll: ClassVar[int] = ...
    IFDontUnderstand: ClassVar[int] = ...
    IFNoIntersection: ClassVar[int] = ...
    IFPossible: ClassVar[int] = ...
    IFSome: ClassVar[int] = ...
    IF_all: ClassVar[int] = ...
    IF_dont_understand: ClassVar[int] = ...
    IF_no_intersection: ClassVar[int] = ...
    IF_possible: ClassVar[int] = ...
    IF_some: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def contains(self, BoundingVolumeself, constBoundingVolumevol) -> Any: ...
    def extendBy(self, *args, **kwargs): ...
    def extend_by(self, constBoundingVolumeself, constBoundingVolumevol) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def isInfinite(self, *args, **kwargs): ...
    def is_empty(self, BoundingVolumeself) -> Any: ...
    @overload
    def is_infinite(self, BoundingVolumeself) -> Any: ...
    @overload
    def is_infinite(self) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, BoundingVolumeself) -> Any: ...
    def output(self, BoundingVolumeself, ostreamout) -> Any: ...
    def setInfinite(self, *args, **kwargs): ...
    def set_infinite(self, constBoundingVolumeself) -> Any: ...
    def write(self, BoundingVolumeself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Buffer(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getLength(self, *args, **kwargs): ...
    def get_length(self, Bufferself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class BufferContext(SavedContext):
    DtoolClassDict: ClassVar[dict] = ...
    active: Incomplete
    data_size_bytes: Incomplete
    modified: Incomplete
    object: Incomplete
    resident: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getActive(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDataSizeBytes(self, *args, **kwargs): ...
    def getModified(self, *args, **kwargs): ...
    def getResident(self, *args, **kwargs): ...
    def get_active(self, BufferContextself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_data_size_bytes(self, BufferContextself) -> Any: ...
    def get_modified(self, BufferContextself) -> Any: ...
    def get_resident(self, BufferContextself) -> Any: ...
    def upcastToSavedContext(self, *args, **kwargs): ...
    def upcast_to_SavedContext(self, constBufferContextself) -> Any: ...

class ButtonEvent(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    TCandidate: ClassVar[int] = ...
    TDown: ClassVar[int] = ...
    TKeystroke: ClassVar[int] = ...
    TMove: ClassVar[int] = ...
    TRawDown: ClassVar[int] = ...
    TRawUp: ClassVar[int] = ...
    TRepeat: ClassVar[int] = ...
    TResumeDown: ClassVar[int] = ...
    TUp: ClassVar[int] = ...
    T_candidate: ClassVar[int] = ...
    T_down: ClassVar[int] = ...
    T_keystroke: ClassVar[int] = ...
    T_move: ClassVar[int] = ...
    T_raw_down: ClassVar[int] = ...
    T_raw_up: ClassVar[int] = ...
    T_repeat: ClassVar[int] = ...
    T_resume_down: ClassVar[int] = ...
    T_up: ClassVar[int] = ...
    button: Incomplete
    keycode: Incomplete
    time: Incomplete
    type: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class ButtonEventList(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    events: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addEvent(self, *args, **kwargs): ...
    def addEvents(self, *args, **kwargs): ...
    def add_event(self, constButtonEventListself, ButtonEventevent) -> Any: ...
    def add_events(self, constButtonEventListself, constButtonEventListother) -> Any: ...
    def assign(self, constButtonEventListself, constButtonEventListcopy) -> Any: ...
    def clear(self, constButtonEventListself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getEvent(self, *args, **kwargs): ...
    def getNumEvents(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_event(self, ButtonEventListself, intn) -> Any: ...
    def get_num_events(self, ButtonEventListself) -> Any: ...
    def updateMods(self, *args, **kwargs): ...
    def update_mods(self, ButtonEventListself, ModifierButtonsmods) -> Any: ...
    def write(self, ButtonEventListself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ButtonHandle(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    alias: Incomplete
    ascii_equivalent: Incomplete
    index: Incomplete
    name: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, ButtonHandleself, constButtonHandleother) -> Any: ...
    def getAlias(self, *args, **kwargs): ...
    def getAsciiEquivalent(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getIndex(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def get_alias(self, ButtonHandleself) -> Any: ...
    def get_ascii_equivalent(self, ButtonHandleself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_hash(self, ButtonHandleself) -> Any: ...
    def get_index(self, ButtonHandleself) -> Any: ...
    def get_name(self, ButtonHandleself) -> Any: ...
    def hasAsciiEquivalent(self, *args, **kwargs): ...
    def has_ascii_equivalent(self, ButtonHandleself) -> Any: ...
    def matches(self, ButtonHandleself, constButtonHandleother) -> Any: ...
    @staticmethod
    def none() -> Any: ...
    def output(self, ButtonHandleself, ostreamout) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class ButtonMap(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMappedButton(self, *args, **kwargs): ...
    def getMappedButtonLabel(self, *args, **kwargs): ...
    def getNumButtons(self, *args, **kwargs): ...
    def getRawButton(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_mapped_button(self, ButtonMapself, ButtonHandleraw) -> Any: ...
    @overload
    def get_mapped_button(self, ButtonMapself, strraw_name) -> Any: ...
    @overload
    def get_mapped_button(self, ButtonMapself, inti) -> Any: ...
    @overload
    def get_mapped_button_label(self, ButtonMapself, ButtonHandleraw) -> Any: ...
    @overload
    def get_mapped_button_label(self, ButtonMapself, strraw_name) -> Any: ...
    @overload
    def get_mapped_button_label(self, ButtonMapself, inti) -> Any: ...
    def get_num_buttons(self, ButtonMapself) -> Any: ...
    def get_raw_button(self, ButtonMapself, inti) -> Any: ...
    def output(self, ButtonMapself, ostreamout) -> Any: ...
    def write(self, ButtonMapself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ButtonNode(DataNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getButtonMap(self, *args, **kwargs): ...
    def getButtonState(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumButtons(self, *args, **kwargs): ...
    def get_button_map(self, ButtonNodeself, intindex) -> Any: ...
    def get_button_state(self, ButtonNodeself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_buttons(self, ButtonNodeself) -> Any: ...
    def isButtonKnown(self, *args, **kwargs): ...
    def isValid(self, *args, **kwargs): ...
    def is_button_known(self, ButtonNodeself, intindex) -> Any: ...
    def is_valid(self, ButtonNodeself) -> Any: ...
    def setButtonMap(self, *args, **kwargs): ...
    def set_button_map(self, constButtonNodeself, intindex, ButtonHandlebutton) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ButtonRegistry(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def findAsciiButton(self, *args, **kwargs): ...
    def findButton(self, *args, **kwargs): ...
    def find_ascii_button(self, ButtonRegistryself, charascii_equivalent) -> Any: ...
    def find_button(self, constButtonRegistryself, strname) -> Any: ...
    def getButton(self, *args, **kwargs): ...
    def get_button(self, constButtonRegistryself, strname) -> Any: ...
    @overload
    @staticmethod
    def ptr() -> Any: ...
    @overload
    @staticmethod
    def ptr() -> Any: ...
    def write(self, ButtonRegistryself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ButtonThrower(DataNode):
    DtoolClassDict: ClassVar[dict] = ...
    button_down_event: Incomplete
    button_repeat_event: Incomplete
    button_up_event: Incomplete
    candidate_event: Incomplete
    keystroke_event: Incomplete
    modifier_buttons: Incomplete
    move_event: Incomplete
    parameters: Incomplete
    prefix: Incomplete
    raw_button_down_event: Incomplete
    raw_button_up_event: Incomplete
    specific_flag: Incomplete
    throw_buttons_active: Incomplete
    time_flag: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addParameter(self, *args, **kwargs): ...
    def addThrowButton(self, *args, **kwargs): ...
    def add_parameter(self, constButtonThrowerself, constEventParameterobj) -> Any: ...
    def add_throw_button(self, constButtonThrowerself, constModifierButtonsmods, constButtonHandlebutton) -> Any: ...
    def clearThrowButtons(self, *args, **kwargs): ...
    def clear_throw_buttons(self, constButtonThrowerself) -> Any: ...
    def getButtonDownEvent(self, *args, **kwargs): ...
    def getButtonRepeatEvent(self, *args, **kwargs): ...
    def getButtonUpEvent(self, *args, **kwargs): ...
    def getCandidateEvent(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getKeystrokeEvent(self, *args, **kwargs): ...
    def getModifierButtons(self, *args, **kwargs): ...
    def getMoveEvent(self, *args, **kwargs): ...
    def getNumParameters(self, *args, **kwargs): ...
    def getParameter(self, *args, **kwargs): ...
    def getParameters(self, *args, **kwargs): ...
    def getPrefix(self, *args, **kwargs): ...
    def getRawButtonDownEvent(self, *args, **kwargs): ...
    def getRawButtonUpEvent(self, *args, **kwargs): ...
    def getSpecificFlag(self, *args, **kwargs): ...
    def getThrowButtonsActive(self, *args, **kwargs): ...
    def getTimeFlag(self, *args, **kwargs): ...
    def get_button_down_event(self, ButtonThrowerself) -> Any: ...
    def get_button_repeat_event(self, ButtonThrowerself) -> Any: ...
    def get_button_up_event(self, ButtonThrowerself) -> Any: ...
    def get_candidate_event(self, ButtonThrowerself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_keystroke_event(self, ButtonThrowerself) -> Any: ...
    def get_modifier_buttons(self, ButtonThrowerself) -> Any: ...
    def get_move_event(self, ButtonThrowerself) -> Any: ...
    def get_num_parameters(self, ButtonThrowerself) -> Any: ...
    def get_parameter(self, ButtonThrowerself, intn) -> Any: ...
    def get_parameters(self, *args, **kwargs): ...
    def get_prefix(self, ButtonThrowerself) -> Any: ...
    def get_raw_button_down_event(self, ButtonThrowerself) -> Any: ...
    def get_raw_button_up_event(self, ButtonThrowerself) -> Any: ...
    def get_specific_flag(self, ButtonThrowerself) -> Any: ...
    def get_throw_buttons_active(self, ButtonThrowerself) -> Any: ...
    def get_time_flag(self, ButtonThrowerself) -> Any: ...
    def hasThrowButton(self, *args, **kwargs): ...
    @overload
    def has_throw_button(self, ButtonThrowerself, constButtonHandlebutton) -> Any: ...
    @overload
    def has_throw_button(self, ButtonThrowerself, constModifierButtonsmods, constButtonHandlebutton) -> Any: ...
    def removeThrowButton(self, *args, **kwargs): ...
    def remove_throw_button(self, constButtonThrowerself, constModifierButtonsmods, constButtonHandlebutton) -> Any: ...
    def setButtonDownEvent(self, *args, **kwargs): ...
    def setButtonRepeatEvent(self, *args, **kwargs): ...
    def setButtonUpEvent(self, *args, **kwargs): ...
    def setCandidateEvent(self, *args, **kwargs): ...
    def setKeystrokeEvent(self, *args, **kwargs): ...
    def setModifierButtons(self, *args, **kwargs): ...
    def setMoveEvent(self, *args, **kwargs): ...
    def setPrefix(self, *args, **kwargs): ...
    def setRawButtonDownEvent(self, *args, **kwargs): ...
    def setRawButtonUpEvent(self, *args, **kwargs): ...
    def setSpecificFlag(self, *args, **kwargs): ...
    def setThrowButtonsActive(self, *args, **kwargs): ...
    def setTimeFlag(self, *args, **kwargs): ...
    def set_button_down_event(self, constButtonThrowerself, strbutton_down_event) -> Any: ...
    def set_button_repeat_event(self, constButtonThrowerself, strbutton_repeat_event) -> Any: ...
    def set_button_up_event(self, constButtonThrowerself, strbutton_up_event) -> Any: ...
    def set_candidate_event(self, constButtonThrowerself, strcandidate_event) -> Any: ...
    def set_keystroke_event(self, constButtonThrowerself, strkeystroke_event) -> Any: ...
    @overload
    def set_modifier_buttons(self, constButtonThrowerself, constModifierButtonsmods) -> Any: ...
    @overload
    def set_modifier_buttons(self) -> Any: ...
    def set_move_event(self, constButtonThrowerself, strmove_event) -> Any: ...
    def set_prefix(self, constButtonThrowerself, strprefix) -> Any: ...
    def set_raw_button_down_event(self, constButtonThrowerself, strraw_button_down_event) -> Any: ...
    def set_raw_button_up_event(self, constButtonThrowerself, strraw_button_up_event) -> Any: ...
    def set_specific_flag(self, constButtonThrowerself, boolspecific_flag) -> Any: ...
    def set_throw_buttons_active(self, constButtonThrowerself, boolflag) -> Any: ...
    def set_time_flag(self, constButtonThrowerself, booltime_flag) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CPTADouble(PointerToArrayBase_double):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, doubleparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAFloat(PointerToArrayBase_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, floatparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAInt(PointerToArrayBase_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, intparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALMatrix3(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALMatrix3d(PointerToArrayBase_LMatrix3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix3dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALMatrix3f(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALMatrix4(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALMatrix4d(PointerToArrayBase_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix4dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALMatrix4f(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALVecBase2(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALVecBase2d(PointerToArrayBase_LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALVecBase2f(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALVecBase2i(PointerToArrayBase_LVecBase2i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2iparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALVecBase3(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALVecBase3d(PointerToArrayBase_LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALVecBase3f(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALVecBase3i(PointerToArrayBase_LVecBase3i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3iparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALVecBase4(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALVecBase4d(PointerToArrayBase_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALVecBase4f(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTALVecBase4i(PointerToArrayBase_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4iparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAMat3(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAMat3d(PointerToArrayBase_LMatrix3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix3dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAMat4(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAMat4d(PointerToArrayBase_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix4dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAStdfloat(PointerToArrayBase_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, floatparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAUchar(PointerToArrayBase_unsigned_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, intparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAUshort(PointerToArrayBase_unsigned_short_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, intparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAVecBase2d(PointerToArrayBase_LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAVecBase2f(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAVecBase3d(PointerToArrayBase_LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAVecBase3f(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAVecBase4d(PointerToArrayBase_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTAVecBase4f(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LMatrix3(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LMatrix3d(PointerToArrayBase_LMatrix3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix3dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LMatrix3f(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LMatrix4(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LMatrix4d(PointerToArrayBase_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix4dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LMatrix4f(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LVecBase2(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LVecBase2d(PointerToArrayBase_LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LVecBase2f(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LVecBase2i(PointerToArrayBase_LVecBase2i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2iparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LVecBase3(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LVecBase3d(PointerToArrayBase_LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LVecBase3f(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LVecBase3i(PointerToArrayBase_LVecBase3i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3iparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LVecBase4(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LVecBase4d(PointerToArrayBase_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LVecBase4f(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_LVecBase4i(PointerToArrayBase_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4iparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_double(PointerToArrayBase_double):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, doubleparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_float(PointerToArrayBase_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, floatparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_int(PointerToArrayBase_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, intparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_stdfloat(PointerToArrayBase_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, floatparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_uchar(PointerToArrayBase_unsigned_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, intparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CPTA_ushort(PointerToArrayBase_unsigned_short_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, intparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CachedTypedWritableReferenceCount(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    cache_ref_count: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cacheRef(self, *args, **kwargs): ...
    def cacheUnref(self, *args, **kwargs): ...
    def cache_ref(self, CachedTypedWritableReferenceCountself) -> Any: ...
    def cache_unref(self, CachedTypedWritableReferenceCountself) -> Any: ...
    def getCacheRefCount(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_cache_ref_count(self, CachedTypedWritableReferenceCountself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def testRefCountIntegrity(self, *args, **kwargs): ...
    def test_ref_count_integrity(self, CachedTypedWritableReferenceCountself) -> Any: ...

class CallbackData(TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def output(self, CallbackDataself, ostreamout) -> Any: ...
    def upcall(self, constCallbackDataself) -> Any: ...

class CallbackGraphicsWindow(GraphicsWindow):
    class EventsCallbackData(WindowCallbackData):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def getClassType(*args, **kwargs): ...
        @staticmethod
        def get_class_type() -> Any: ...

    class PropertiesCallbackData(WindowCallbackData):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def getClassType(*args, **kwargs): ...
        def getProperties(self, *args, **kwargs): ...
        @staticmethod
        def get_class_type() -> Any: ...
        def get_properties(self, PropertiesCallbackDataself) -> Any: ...

    class RenderCallbackData(WindowCallbackData):
        DtoolClassDict: ClassVar[dict] = ...
        callback_type: Incomplete
        frame_mode: Incomplete
        render_flag: Incomplete
        def __init__(self, *args, **kwargs) -> None: ...
        def getCallbackType(self, *args, **kwargs): ...
        @staticmethod
        def getClassType(*args, **kwargs): ...
        def getFrameMode(self, *args, **kwargs): ...
        def getRenderFlag(self, *args, **kwargs): ...
        def get_callback_type(self, RenderCallbackDataself) -> Any: ...
        @staticmethod
        def get_class_type() -> Any: ...
        def get_frame_mode(self, RenderCallbackDataself) -> Any: ...
        def get_render_flag(self, RenderCallbackDataself) -> Any: ...
        def setRenderFlag(self, *args, **kwargs): ...
        def set_render_flag(self, constRenderCallbackDataself, boolrender_flag) -> Any: ...

    class WindowCallbackData(CallbackData):
        DtoolClassDict: ClassVar[dict] = ...
        window: Incomplete
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def getClassType(*args, **kwargs): ...
        def getWindow(self, *args, **kwargs): ...
        @staticmethod
        def get_class_type() -> Any: ...
        def get_window(self, WindowCallbackDataself) -> Any: ...

    DtoolClassDict: ClassVar[dict] = ...
    RCTBeginFlip: ClassVar[int] = ...
    RCTBeginFrame: ClassVar[int] = ...
    RCTEndFlip: ClassVar[int] = ...
    RCTEndFrame: ClassVar[int] = ...
    RCT_begin_flip: ClassVar[int] = ...
    RCT_begin_frame: ClassVar[int] = ...
    RCT_end_flip: ClassVar[int] = ...
    RCT_end_frame: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearEventsCallback(self, *args, **kwargs): ...
    def clearPropertiesCallback(self, *args, **kwargs): ...
    def clearRenderCallback(self, *args, **kwargs): ...
    def clear_events_callback(self, constCallbackGraphicsWindowself) -> Any: ...
    def clear_properties_callback(self, constCallbackGraphicsWindowself) -> Any: ...
    def clear_render_callback(self, constCallbackGraphicsWindowself) -> Any: ...
    def createInputDevice(self, *args, **kwargs): ...
    def create_input_device(self, constCallbackGraphicsWindowself, strname) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getEventsCallback(self, *args, **kwargs): ...
    def getPropertiesCallback(self, *args, **kwargs): ...
    def getRenderCallback(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_events_callback(self, CallbackGraphicsWindowself) -> Any: ...
    def get_properties_callback(self, CallbackGraphicsWindowself) -> Any: ...
    def get_render_callback(self, CallbackGraphicsWindowself) -> Any: ...
    def setEventsCallback(self, *args, **kwargs): ...
    def setPropertiesCallback(self, *args, **kwargs): ...
    def setRenderCallback(self, *args, **kwargs): ...
    def set_events_callback(self, constCallbackGraphicsWindowself, CallbackObjectobject) -> Any: ...
    def set_properties_callback(self, constCallbackGraphicsWindowself, CallbackObjectobject) -> Any: ...
    def set_render_callback(self, constCallbackGraphicsWindowself, CallbackObjectobject) -> Any: ...

class CallbackNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    cull_callback: Incomplete
    draw_callback: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearCullCallback(self, *args, **kwargs): ...
    def clearDrawCallback(self, *args, **kwargs): ...
    def clear_cull_callback(self, constCallbackNodeself) -> Any: ...
    def clear_draw_callback(self, constCallbackNodeself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCullCallback(self, *args, **kwargs): ...
    def getDrawCallback(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_cull_callback(self, CallbackNodeself) -> Any: ...
    def get_draw_callback(self, CallbackNodeself) -> Any: ...
    def setCullCallback(self, *args, **kwargs): ...
    def setDrawCallback(self, *args, **kwargs): ...
    def set_cull_callback(self, constCallbackNodeself, CallbackObjectobject) -> Any: ...
    def set_draw_callback(self, constCallbackNodeself, CallbackObjectobject) -> Any: ...

class CallbackObject(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def make(objectfunction) -> Any: ...
    def output(self, CallbackObjectself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Camera(LensNode):
    DtoolClassDict: ClassVar[dict] = ...
    active: Incomplete
    aux_scene_data: Incomplete
    camera_mask: Incomplete
    cull_bounds: Incomplete
    cull_center: Incomplete
    display_regions: Incomplete
    initial_state: Incomplete
    lod_center: Incomplete
    lod_scale: Incomplete
    scene: Incomplete
    tag_state_key: Incomplete
    tag_states: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cleanupAuxSceneData(self, *args, **kwargs): ...
    def cleanup_aux_scene_data(self, constCameraself, Threadcurrent_thread) -> Any: ...
    def clearAuxSceneData(self, *args, **kwargs): ...
    def clearTagState(self, *args, **kwargs): ...
    def clearTagStates(self, *args, **kwargs): ...
    def clear_aux_scene_data(self, constCameraself, constNodePathnode_path) -> Any: ...
    def clear_tag_state(self, constCameraself, strtag_state) -> Any: ...
    def clear_tag_states(self, constCameraself) -> Any: ...
    def getAuxSceneData(self, *args, **kwargs): ...
    def getCameraMask(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCullBounds(self, *args, **kwargs): ...
    def getCullCenter(self, *args, **kwargs): ...
    def getDisplayRegion(self, *args, **kwargs): ...
    def getDisplayRegions(self, *args, **kwargs): ...
    def getInitialState(self, *args, **kwargs): ...
    def getLodCenter(self, *args, **kwargs): ...
    def getLodScale(self, *args, **kwargs): ...
    def getNumDisplayRegions(self, *args, **kwargs): ...
    def getScene(self, *args, **kwargs): ...
    def getTagState(self, *args, **kwargs): ...
    def getTagStateKey(self, *args, **kwargs): ...
    def get_aux_scene_data(self, Cameraself, constNodePathnode_path) -> Any: ...
    def get_camera_mask(self, Cameraself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_cull_bounds(self, Cameraself) -> Any: ...
    def get_cull_center(self, Cameraself) -> Any: ...
    def get_display_region(self, Cameraself, intn) -> Any: ...
    def get_display_regions(self, *args, **kwargs): ...
    def get_initial_state(self, Cameraself) -> Any: ...
    def get_lod_center(self, Cameraself) -> Any: ...
    def get_lod_scale(self, Cameraself) -> Any: ...
    def get_num_display_regions(self, Cameraself) -> Any: ...
    def get_scene(self, Cameraself) -> Any: ...
    def get_tag_state(self, Cameraself, strtag_state) -> Any: ...
    def get_tag_state_key(self, Cameraself) -> Any: ...
    def hasTagState(self, *args, **kwargs): ...
    def has_tag_state(self, Cameraself, strtag_state) -> Any: ...
    def isActive(self, *args, **kwargs): ...
    def is_active(self, Cameraself) -> Any: ...
    def listAuxSceneData(self, *args, **kwargs): ...
    def list_aux_scene_data(self, Cameraself, ostreamout) -> Any: ...
    def setActive(self, *args, **kwargs): ...
    def setAuxSceneData(self, *args, **kwargs): ...
    def setCameraMask(self, *args, **kwargs): ...
    def setCullBounds(self, *args, **kwargs): ...
    def setCullCenter(self, *args, **kwargs): ...
    def setInitialState(self, *args, **kwargs): ...
    def setLodCenter(self, *args, **kwargs): ...
    def setLodScale(self, *args, **kwargs): ...
    def setScene(self, *args, **kwargs): ...
    def setTagState(self, *args, **kwargs): ...
    def setTagStateKey(self, *args, **kwargs): ...
    def set_active(self, constCameraself, boolactive) -> Any: ...
    def set_aux_scene_data(self, constCameraself, constNodePathnode_path, AuxSceneDatadata) -> Any: ...
    def set_camera_mask(self, constCameraself, BitMaskmask) -> Any: ...
    def set_cull_bounds(self, constCameraself, BoundingVolumecull_bounds) -> Any: ...
    def set_cull_center(self, constCameraself, constNodePathcull_center) -> Any: ...
    def set_initial_state(self, constCameraself, constRenderStatestate) -> Any: ...
    def set_lod_center(self, constCameraself, constNodePathlod_center) -> Any: ...
    def set_lod_scale(self, constCameraself, floatvalue) -> Any: ...
    def set_scene(self, constCameraself, constNodePathscene) -> Any: ...
    def set_tag_state(self, constCameraself, strtag_state, constRenderStatestate) -> Any: ...
    def set_tag_state_key(self, constCameraself, strtag_state_key) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CardMaker(Namable):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearColor(self, *args, **kwargs): ...
    def clearSourceGeometry(self, *args, **kwargs): ...
    def clear_color(self, constCardMakerself) -> Any: ...
    def clear_source_geometry(self, constCardMakerself) -> Any: ...
    def generate(self, constCardMakerself) -> Any: ...
    def reset(self, constCardMakerself) -> Any: ...
    def setColor(self, *args, **kwargs): ...
    def setFrame(self, *args, **kwargs): ...
    def setFrameFullscreenQuad(self, *args, **kwargs): ...
    def setHas3dUvs(self, *args, **kwargs): ...
    def setHasNormals(self, *args, **kwargs): ...
    def setHasUvs(self, *args, **kwargs): ...
    def setSourceGeometry(self, *args, **kwargs): ...
    def setUvRange(self, *args, **kwargs): ...
    def setUvRangeCube(self, *args, **kwargs): ...
    @overload
    def set_color(self, constCardMakerself, constLVecBase4fcolor) -> Any: ...
    @overload
    def set_color(self, constCardMakerself, floatr, floatg, floatb, floata) -> Any: ...
    @overload
    def set_frame(self, constCardMakerself, constLVecBase4fframe) -> Any: ...
    @overload
    def set_frame(
        self, constCardMakerself, constLPoint3fll, constLPoint3flr, constLPoint3fur, constLPoint3ful
    ) -> Any: ...
    @overload
    def set_frame(self, constCardMakerself, floatleft, floatright, floatbottom, floattop) -> Any: ...
    def set_frame_fullscreen_quad(self, constCardMakerself) -> Any: ...
    def set_has_3d_uvs(self, constCardMakerself, boolflag) -> Any: ...
    def set_has_normals(self, constCardMakerself, boolflag) -> Any: ...
    def set_has_uvs(self, constCardMakerself, boolflag) -> Any: ...
    def set_source_geometry(self, constCardMakerself, PandaNodenode, constLVecBase4fframe) -> Any: ...
    @overload
    def set_uv_range(self, constCardMakerself, constTexturetex) -> Any: ...
    @overload
    def set_uv_range(self, constCardMakerself, constLPoint2fll, constLPoint2fur) -> Any: ...
    @overload
    def set_uv_range(self, constCardMakerself, constLVector4fx, constLVector4fy, constLVector4fz) -> Any: ...
    @overload
    def set_uv_range(
        self, constCardMakerself, constLPoint2fll, constLPoint2flr, constLPoint2fur, constLPoint2ful
    ) -> Any: ...
    @overload
    def set_uv_range(
        self, constCardMakerself, constLPoint3fll, constLPoint3flr, constLPoint3fur, constLPoint3ful
    ) -> Any: ...
    def set_uv_range_cube(self, constCardMakerself, intface) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Character(PartBundleNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearLodAnimation(self, *args, **kwargs): ...
    def clear_lod_animation(self, constCharacterself) -> Any: ...
    def findJoint(self, *args, **kwargs): ...
    def findSlider(self, *args, **kwargs): ...
    def find_joint(self, Characterself, strname) -> Any: ...
    def find_slider(self, Characterself, strname) -> Any: ...
    def forceUpdate(self, *args, **kwargs): ...
    def force_update(self, constCharacterself) -> Any: ...
    def getBundle(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_bundle(self, Characterself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def mergeBundles(self, *args, **kwargs): ...
    def merge_bundles(
        self, constCharacterself, PartBundleHandleold_bundle_handle, PartBundleHandleother_bundle_handle
    ) -> Any: ...
    def setLodAnimation(self, *args, **kwargs): ...
    def set_lod_animation(
        self, constCharacterself, constLPoint3fcenter, floatfar_distance, floatnear_distance, floatdelay_factor
    ) -> Any: ...
    def update(self, constCharacterself) -> Any: ...
    def updateToNow(self, *args, **kwargs): ...
    def update_to_now(self, constCharacterself) -> Any: ...
    def writePartValues(self, *args, **kwargs): ...
    def writeParts(self, *args, **kwargs): ...
    def write_part_values(self, Characterself, ostreamout) -> Any: ...
    def write_parts(self, Characterself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CharacterJoint(MovingPartMatrix):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addLocalTransform(self, *args, **kwargs): ...
    def addNetTransform(self, *args, **kwargs): ...
    def add_local_transform(self, constCharacterJointself, PandaNodenode) -> Any: ...
    def add_net_transform(self, constCharacterJointself, PandaNodenode) -> Any: ...
    def clearLocalTransforms(self, *args, **kwargs): ...
    def clearNetTransforms(self, *args, **kwargs): ...
    def clear_local_transforms(self, constCharacterJointself) -> Any: ...
    def clear_net_transforms(self, constCharacterJointself) -> Any: ...
    def getCharacter(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLocalTransforms(self, *args, **kwargs): ...
    def getNetTransform(self, *args, **kwargs): ...
    def getNetTransforms(self, *args, **kwargs): ...
    def getTransform(self, *args, **kwargs): ...
    def getTransformState(self, *args, **kwargs): ...
    def get_character(self, CharacterJointself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_local_transforms(self, constCharacterJointself) -> Any: ...
    def get_net_transform(self, CharacterJointself, LMatrix4ftransform) -> Any: ...
    def get_net_transforms(self, constCharacterJointself) -> Any: ...
    @overload
    def get_transform(self, CharacterJointself) -> Any: ...
    @overload
    def get_transform(self, CharacterJointself, LMatrix4ftransform) -> Any: ...
    def get_transform_state(self, CharacterJointself) -> Any: ...
    def hasLocalTransform(self, *args, **kwargs): ...
    def hasNetTransform(self, *args, **kwargs): ...
    def has_local_transform(self, CharacterJointself, PandaNodenode) -> Any: ...
    def has_net_transform(self, CharacterJointself, PandaNodenode) -> Any: ...
    def removeLocalTransform(self, *args, **kwargs): ...
    def removeNetTransform(self, *args, **kwargs): ...
    def remove_local_transform(self, constCharacterJointself, PandaNodenode) -> Any: ...
    def remove_net_transform(self, constCharacterJointself, PandaNodenode) -> Any: ...

class CharacterJointBundle(PartBundle):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_node(self, CharacterJointBundleself, intn) -> Any: ...

class CharacterJointEffect(RenderEffect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getCharacter(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_character(self, CharacterJointEffectself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def make(Charactercharacter) -> Any: ...

class CharacterSlider(MovingPartScalar):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class CharacterVertexSlider(VertexSlider):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getCharSlider(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_char_slider(self, CharacterVertexSliderself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...

class ClientBase(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def forkAsynchronousThread(self, *args, **kwargs): ...
    def fork_asynchronous_thread(self, constClientBaseself, doublepoll_time) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCoordinateSystem(self, *args, **kwargs): ...
    def getLastPollTime(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_coordinate_system(self, ClientBaseself) -> Any: ...
    def get_last_poll_time(self, ClientBaseself) -> Any: ...
    def isForked(self, *args, **kwargs): ...
    def is_forked(self, ClientBaseself) -> Any: ...
    def poll(self, constClientBaseself) -> Any: ...
    def setCoordinateSystem(self, *args, **kwargs): ...
    def set_coordinate_system(self, constClientBaseself, intcs) -> Any: ...

class ClipPlaneAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    OAdd: ClassVar[int] = ...
    ORemove: ClassVar[int] = ...
    OSet: ClassVar[int] = ...
    O_add: ClassVar[int] = ...
    O_remove: ClassVar[int] = ...
    O_set: ClassVar[int] = ...
    class_slot: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addOffPlane(self, *args, **kwargs): ...
    def addOnPlane(self, *args, **kwargs): ...
    def addPlane(self, *args, **kwargs): ...
    def add_off_plane(self, ClipPlaneAttribself, constNodePathplane) -> Any: ...
    def add_on_plane(self, ClipPlaneAttribself, constNodePathplane) -> Any: ...
    def add_plane(self, ClipPlaneAttribself, PlaneNodeplane) -> Any: ...
    def filterToMax(self, *args, **kwargs): ...
    def filter_to_max(self, ClipPlaneAttribself, intmax_clip_planes) -> Any: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumOffPlanes(self, *args, **kwargs): ...
    def getNumOnPlanes(self, *args, **kwargs): ...
    def getNumPlanes(self, *args, **kwargs): ...
    def getOffPlane(self, *args, **kwargs): ...
    def getOffPlanes(self, *args, **kwargs): ...
    def getOnPlane(self, *args, **kwargs): ...
    def getOnPlanes(self, *args, **kwargs): ...
    def getOperation(self, *args, **kwargs): ...
    def getPlane(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_off_planes(self, ClipPlaneAttribself) -> Any: ...
    def get_num_on_planes(self, ClipPlaneAttribself) -> Any: ...
    def get_num_planes(self, ClipPlaneAttribself) -> Any: ...
    def get_off_plane(self, ClipPlaneAttribself, intn) -> Any: ...
    def get_off_planes(self, *args, **kwargs): ...
    def get_on_plane(self, ClipPlaneAttribself, intn) -> Any: ...
    def get_on_planes(self, *args, **kwargs): ...
    def get_operation(self, ClipPlaneAttribself) -> Any: ...
    def get_plane(self, ClipPlaneAttribself, intn) -> Any: ...
    def hasAllOff(self, *args, **kwargs): ...
    def hasOffPlane(self, *args, **kwargs): ...
    def hasOnPlane(self, *args, **kwargs): ...
    def hasPlane(self, *args, **kwargs): ...
    def has_all_off(self, ClipPlaneAttribself) -> Any: ...
    def has_off_plane(self, ClipPlaneAttribself, constNodePathplane) -> Any: ...
    def has_on_plane(self, ClipPlaneAttribself, constNodePathplane) -> Any: ...
    def has_plane(self, ClipPlaneAttribself, PlaneNodeplane) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def is_identity(self, ClipPlaneAttribself) -> Any: ...
    @overload
    @staticmethod
    def make() -> Any: ...
    @overload
    @staticmethod
    def make(intop, PlaneNodeplane) -> Any: ...
    @overload
    @staticmethod
    def make(intop, PlaneNodeplane1, PlaneNodeplane2) -> Any: ...
    @overload
    @staticmethod
    def make(intop, PlaneNodeplane1, PlaneNodeplane2, PlaneNodeplane3) -> Any: ...
    @overload
    @staticmethod
    def make(intop, PlaneNodeplane1, PlaneNodeplane2, PlaneNodeplane3, PlaneNodeplane4) -> Any: ...
    @staticmethod
    def makeAllOff(*args, **kwargs): ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_all_off() -> Any: ...
    @staticmethod
    def make_default() -> Any: ...
    def removeOffPlane(self, *args, **kwargs): ...
    def removeOnPlane(self, *args, **kwargs): ...
    def removePlane(self, *args, **kwargs): ...
    def remove_off_plane(self, ClipPlaneAttribself, constNodePathplane) -> Any: ...
    def remove_on_plane(self, ClipPlaneAttribself, constNodePathplane) -> Any: ...
    def remove_plane(self, ClipPlaneAttribself, PlaneNodeplane) -> Any: ...

class ClockObject(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    MDegrade: ClassVar[int] = ...
    MForced: ClassVar[int] = ...
    MInteger: ClassVar[int] = ...
    MIntegerLimited: ClassVar[int] = ...
    MLimited: ClassVar[int] = ...
    MNonRealTime: ClassVar[int] = ...
    MNormal: ClassVar[int] = ...
    MSlave: ClassVar[int] = ...
    M_degrade: ClassVar[int] = ...
    M_forced: ClassVar[int] = ...
    M_integer: ClassVar[int] = ...
    M_integer_limited: ClassVar[int] = ...
    M_limited: ClassVar[int] = ...
    M_non_real_time: ClassVar[int] = ...
    M_normal: ClassVar[int] = ...
    M_slave: ClassVar[int] = ...
    average_frame_rate: Incomplete
    average_frame_rate_interval: Incomplete
    degrade_factor: Incomplete
    dt: Incomplete
    frame_count: Incomplete
    frame_time: Incomplete
    long_time: Incomplete
    max_dt: Incomplete
    max_frame_duration: Incomplete
    mode: Incomplete
    real_time: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def calcFrameRateDeviation(self, *args, **kwargs): ...
    def calc_frame_rate_deviation(self, ClockObjectself, Threadcurrent_thread) -> Any: ...
    def checkErrors(self, *args, **kwargs): ...
    @overload
    def check_errors(self, constClockObjectself, Threadcurrent_thread) -> Any: ...
    @overload
    def check_errors(self) -> Any: ...
    def getAverageFrameRate(self, *args, **kwargs): ...
    def getAverageFrameRateInterval(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDegradeFactor(self, *args, **kwargs): ...
    def getDt(self, *args, **kwargs): ...
    def getFrameCount(self, *args, **kwargs): ...
    def getFrameTime(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalClock(*args, **kwargs): ...
    def getLongTime(self, *args, **kwargs): ...
    def getMaxDt(self, *args, **kwargs): ...
    def getMaxFrameDuration(self, *args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    def getNetFrameRate(self, *args, **kwargs): ...
    def getRealTime(self, *args, **kwargs): ...
    def get_average_frame_rate(self, ClockObjectself, Threadcurrent_thread) -> Any: ...
    def get_average_frame_rate_interval(self, ClockObjectself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_degrade_factor(self, ClockObjectself) -> Any: ...
    def get_dt(self, ClockObjectself, Threadcurrent_thread) -> Any: ...
    def get_frame_count(self, ClockObjectself, Threadcurrent_thread) -> Any: ...
    def get_frame_time(self, ClockObjectself, Threadcurrent_thread) -> Any: ...
    @staticmethod
    def get_global_clock() -> Any: ...
    def get_long_time(self, ClockObjectself) -> Any: ...
    def get_max_dt(self, ClockObjectself) -> Any: ...
    def get_max_frame_duration(self, ClockObjectself, Threadcurrent_thread) -> Any: ...
    def get_mode(self, ClockObjectself) -> Any: ...
    def get_net_frame_rate(self, ClockObjectself, Threadcurrent_thread) -> Any: ...
    def get_real_time(self, ClockObjectself) -> Any: ...
    def reset(self, constClockObjectself) -> Any: ...
    def setAverageFrameRateInterval(self, *args, **kwargs): ...
    def setDegradeFactor(self, *args, **kwargs): ...
    def setDt(self, *args, **kwargs): ...
    def setFrameCount(self, *args, **kwargs): ...
    def setFrameRate(self, *args, **kwargs): ...
    def setFrameTime(self, *args, **kwargs): ...
    def setMaxDt(self, *args, **kwargs): ...
    def setMode(self, *args, **kwargs): ...
    def setRealTime(self, *args, **kwargs): ...
    def set_average_frame_rate_interval(self, constClockObjectself, doubletime) -> Any: ...
    def set_degrade_factor(self, constClockObjectself, doubledegrade_factor) -> Any: ...
    def set_dt(self, constClockObjectself, doubledt) -> Any: ...
    def set_frame_count(self, constClockObjectself, intframe_count, Threadcurrent_thread) -> Any: ...
    def set_frame_rate(self, constClockObjectself, doubleframe_rate) -> Any: ...
    def set_frame_time(self, constClockObjectself, doubletime, Threadcurrent_thread) -> Any: ...
    def set_max_dt(self, constClockObjectself, doublemax_dt) -> Any: ...
    def set_mode(self, constClockObjectself, intmode) -> Any: ...
    def set_real_time(self, constClockObjectself, doubletime) -> Any: ...
    def syncFrameTime(self, *args, **kwargs): ...
    def sync_frame_time(self, constClockObjectself, Threadcurrent_thread) -> Any: ...
    def tick(self, constClockObjectself, Threadcurrent_thread) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CollideMask(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitMaskself, intindex) -> Any: ...
    def clear_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitMaskself, constBitMaskother) -> Any: ...
    def extract(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def floodBitsDown(self, *args, **kwargs): ...
    def floodBitsUp(self, *args, **kwargs): ...
    def floodDownInPlace(self, *args, **kwargs): ...
    def floodUpInPlace(self, *args, **kwargs): ...
    def flood_bits_down(self, BitMaskself) -> Any: ...
    def flood_bits_up(self, BitMaskself) -> Any: ...
    def flood_down_in_place(self, constBitMaskself) -> Any: ...
    def flood_up_in_place(self, constBitMaskself) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, BitMaskself) -> Any: ...
    def get_highest_on_bit(self, BitMaskself) -> Any: ...
    def get_key(self, BitMaskself) -> Any: ...
    def get_lowest_off_bit(self, BitMaskself) -> Any: ...
    def get_lowest_on_bit(self, BitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitMaskself) -> Any: ...
    def get_num_off_bits(self, BitMaskself) -> Any: ...
    def get_num_on_bits(self, BitMaskself) -> Any: ...
    def get_word(self, BitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitMaskself, constBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitMaskself) -> Any: ...
    def is_zero(self, BitMaskself) -> Any: ...
    def keepNextHighestBit(self, *args, **kwargs): ...
    def keepNextLowestBit(self, *args, **kwargs): ...
    @overload
    def keep_next_highest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, intindex) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitMaskself, intvalue) -> Any: ...
    def store(self, constBitMaskself, intvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, BitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class CollisionBox(CollisionSolid):
    DtoolClassDict: ClassVar[dict] = ...
    center: Incomplete
    dimensions: Incomplete
    max: Incomplete
    min: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getCenter(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDimensions(self, *args, **kwargs): ...
    def getMax(self, *args, **kwargs): ...
    def getMin(self, *args, **kwargs): ...
    def getNumPlanes(self, *args, **kwargs): ...
    def getNumPoints(self, *args, **kwargs): ...
    def getPlane(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getPointAabb(self, *args, **kwargs): ...
    def get_center(self, CollisionBoxself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_dimensions(self, CollisionBoxself) -> Any: ...
    def get_max(self, CollisionBoxself) -> Any: ...
    def get_min(self, CollisionBoxself) -> Any: ...
    def get_num_planes(self, CollisionBoxself) -> Any: ...
    def get_num_points(self, CollisionBoxself) -> Any: ...
    def get_plane(self, CollisionBoxself, intn) -> Any: ...
    def get_point(self, CollisionBoxself, intn) -> Any: ...
    def get_point_aabb(self, CollisionBoxself, intn) -> Any: ...
    def setCenter(self, *args, **kwargs): ...
    def setPlane(self, *args, **kwargs): ...
    @overload
    def set_center(self, constCollisionBoxself, constLPoint3fcenter) -> Any: ...
    @overload
    def set_center(self, constCollisionBoxself, floatx, floaty, floatz) -> Any: ...
    def set_plane(self, CollisionBoxself, intn) -> Any: ...

class CollisionCapsule(CollisionSolid):
    DtoolClassDict: ClassVar[dict] = ...
    point_a: Incomplete
    point_b: Incomplete
    radius: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPointA(self, *args, **kwargs): ...
    def getPointB(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_point_a(self, CollisionCapsuleself) -> Any: ...
    def get_point_b(self, CollisionCapsuleself) -> Any: ...
    def get_radius(self, CollisionCapsuleself) -> Any: ...
    def setPointA(self, *args, **kwargs): ...
    def setPointB(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    @overload
    def set_point_a(self, constCollisionCapsuleself, constLPoint3fa) -> Any: ...
    @overload
    def set_point_a(self, constCollisionCapsuleself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_point_b(self, constCollisionCapsuleself, constLPoint3fb) -> Any: ...
    @overload
    def set_point_b(self, constCollisionCapsuleself, floatx, floaty, floatz) -> Any: ...
    def set_radius(self, constCollisionCapsuleself, floatradius) -> Any: ...

class CollisionEntry(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    from_node: Incomplete
    from_node_path: Incomplete
    from_solid: Incomplete
    into_node: Incomplete
    into_node_path: Incomplete
    into_solid: Incomplete
    respect_prev_transform: Incomplete
    t: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def collided(self, CollisionEntryself) -> Any: ...
    def getAll(self, *args, **kwargs): ...
    def getAllContactInfo(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getContactNormal(self, *args, **kwargs): ...
    def getContactPos(self, *args, **kwargs): ...
    def getFrom(self, *args, **kwargs): ...
    def getFromNode(self, *args, **kwargs): ...
    def getFromNodePath(self, *args, **kwargs): ...
    def getInteriorPoint(self, *args, **kwargs): ...
    def getInto(self, *args, **kwargs): ...
    def getIntoNode(self, *args, **kwargs): ...
    def getIntoNodePath(self, *args, **kwargs): ...
    def getRespectPrevTransform(self, *args, **kwargs): ...
    def getSurfaceNormal(self, *args, **kwargs): ...
    def getSurfacePoint(self, *args, **kwargs): ...
    def getT(self, *args, **kwargs): ...
    def get_all(
        self,
        CollisionEntryself,
        constNodePathspace,
        LPoint3fsurface_point,
        LVector3fsurface_normal,
        LPoint3finterior_point,
    ) -> Any: ...
    def get_all_contact_info(
        self, CollisionEntryself, constNodePathspace, LPoint3fcontact_pos, LVector3fcontact_normal
    ) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_contact_normal(self, CollisionEntryself, constNodePathspace) -> Any: ...
    def get_contact_pos(self, CollisionEntryself, constNodePathspace) -> Any: ...
    def get_from(self, CollisionEntryself) -> Any: ...
    def get_from_node(self, CollisionEntryself) -> Any: ...
    def get_from_node_path(self, CollisionEntryself) -> Any: ...
    def get_interior_point(self, CollisionEntryself, constNodePathspace) -> Any: ...
    def get_into(self, CollisionEntryself) -> Any: ...
    def get_into_node(self, CollisionEntryself) -> Any: ...
    def get_into_node_path(self, CollisionEntryself) -> Any: ...
    def get_respect_prev_transform(self, CollisionEntryself) -> Any: ...
    def get_surface_normal(self, CollisionEntryself, constNodePathspace) -> Any: ...
    def get_surface_point(self, CollisionEntryself, constNodePathspace) -> Any: ...
    def get_t(self, CollisionEntryself) -> Any: ...
    def hasContactNormal(self, *args, **kwargs): ...
    def hasContactPos(self, *args, **kwargs): ...
    def hasInteriorPoint(self, *args, **kwargs): ...
    def hasInto(self, *args, **kwargs): ...
    def hasSurfaceNormal(self, *args, **kwargs): ...
    def hasSurfacePoint(self, *args, **kwargs): ...
    def has_contact_normal(self, CollisionEntryself) -> Any: ...
    def has_contact_pos(self, CollisionEntryself) -> Any: ...
    def has_interior_point(self, CollisionEntryself) -> Any: ...
    def has_into(self, CollisionEntryself) -> Any: ...
    def has_surface_normal(self, CollisionEntryself) -> Any: ...
    def has_surface_point(self, CollisionEntryself) -> Any: ...
    def output(self, CollisionEntryself, ostreamout) -> Any: ...
    def resetCollided(self, *args, **kwargs): ...
    def reset_collided(self, constCollisionEntryself) -> Any: ...
    def setContactNormal(self, *args, **kwargs): ...
    def setContactPos(self, *args, **kwargs): ...
    def setInteriorPoint(self, *args, **kwargs): ...
    def setSurfaceNormal(self, *args, **kwargs): ...
    def setSurfacePoint(self, *args, **kwargs): ...
    def setT(self, *args, **kwargs): ...
    def set_contact_normal(self, constCollisionEntryself, constLVector3fnormal) -> Any: ...
    def set_contact_pos(self, constCollisionEntryself, constLPoint3fpos) -> Any: ...
    def set_interior_point(self, constCollisionEntryself, constLPoint3fpoint) -> Any: ...
    def set_surface_normal(self, constCollisionEntryself, constLVector3fnormal) -> Any: ...
    def set_surface_point(self, constCollisionEntryself, constLPoint3fpoint) -> Any: ...
    def set_t(self, constCollisionEntryself, floatt) -> Any: ...
    def write(self, CollisionEntryself, ostreamout, intindent_level) -> Any: ...

class CollisionFloorMesh(CollisionSolid):
    DtoolClassDict: ClassVar[dict] = ...
    triangles: Incomplete
    vertices: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addTriangle(self, *args, **kwargs): ...
    def addVertex(self, *args, **kwargs): ...
    def add_triangle(self, constCollisionFloorMeshself, intpointA, intpointB, intpointC) -> Any: ...
    def add_vertex(self, constCollisionFloorMeshself, constLPoint3fvert) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumTriangles(self, *args, **kwargs): ...
    def getNumVertices(self, *args, **kwargs): ...
    def getTriangle(self, *args, **kwargs): ...
    def getTriangles(self, *args, **kwargs): ...
    def getVertex(self, *args, **kwargs): ...
    def getVertices(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_triangles(self, CollisionFloorMeshself) -> Any: ...
    def get_num_vertices(self, CollisionFloorMeshself) -> Any: ...
    def get_triangle(self, CollisionFloorMeshself, intindex) -> Any: ...
    def get_triangles(self, *args, **kwargs): ...
    def get_vertex(self, CollisionFloorMeshself, intindex) -> Any: ...
    def get_vertices(self, *args, **kwargs): ...

class CollisionHandler(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CollisionHandlerEvent(CollisionHandler):
    DtoolClassDict: ClassVar[dict] = ...
    again_patterns: Incomplete
    in_patterns: Incomplete
    out_patterns: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addAgainPattern(self, *args, **kwargs): ...
    def addInPattern(self, *args, **kwargs): ...
    def addOutPattern(self, *args, **kwargs): ...
    def add_again_pattern(self, constCollisionHandlerEventself, stragain_pattern) -> Any: ...
    def add_in_pattern(self, constCollisionHandlerEventself, strin_pattern) -> Any: ...
    def add_out_pattern(self, constCollisionHandlerEventself, strout_pattern) -> Any: ...
    def clear(self, constCollisionHandlerEventself) -> Any: ...
    def clearAgainPatterns(self, *args, **kwargs): ...
    def clearInPatterns(self, *args, **kwargs): ...
    def clearOutPatterns(self, *args, **kwargs): ...
    def clear_again_patterns(self, constCollisionHandlerEventself) -> Any: ...
    def clear_in_patterns(self, constCollisionHandlerEventself) -> Any: ...
    def clear_out_patterns(self, constCollisionHandlerEventself) -> Any: ...
    def flush(self, constCollisionHandlerEventself) -> Any: ...
    def getAgainPattern(self, *args, **kwargs): ...
    def getAgainPatterns(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getInPattern(self, *args, **kwargs): ...
    def getInPatterns(self, *args, **kwargs): ...
    def getNumAgainPatterns(self, *args, **kwargs): ...
    def getNumInPatterns(self, *args, **kwargs): ...
    def getNumOutPatterns(self, *args, **kwargs): ...
    def getOutPattern(self, *args, **kwargs): ...
    def getOutPatterns(self, *args, **kwargs): ...
    def get_again_pattern(self, CollisionHandlerEventself, intn) -> Any: ...
    def get_again_patterns(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_in_pattern(self, CollisionHandlerEventself, intn) -> Any: ...
    def get_in_patterns(self, *args, **kwargs): ...
    def get_num_again_patterns(self, CollisionHandlerEventself) -> Any: ...
    def get_num_in_patterns(self, CollisionHandlerEventself) -> Any: ...
    def get_num_out_patterns(self, CollisionHandlerEventself) -> Any: ...
    def get_out_pattern(self, CollisionHandlerEventself, intn) -> Any: ...
    def get_out_patterns(self, *args, **kwargs): ...
    def readDatagram(self, *args, **kwargs): ...
    def read_datagram(self, constCollisionHandlerEventself, DatagramIteratorsource) -> Any: ...
    def setAgainPattern(self, *args, **kwargs): ...
    def setInPattern(self, *args, **kwargs): ...
    def setOutPattern(self, *args, **kwargs): ...
    def set_again_pattern(self, constCollisionHandlerEventself, stragain_pattern) -> Any: ...
    def set_in_pattern(self, constCollisionHandlerEventself, strin_pattern) -> Any: ...
    def set_out_pattern(self, constCollisionHandlerEventself, strout_pattern) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def write_datagram(self, CollisionHandlerEventself, Datagramdestination) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __reduce__(self, CollisionHandlerEventself) -> Any: ...

class CollisionHandlerFloor(CollisionHandlerPhysical):
    DtoolClassDict: ClassVar[dict] = ...
    max_velocity: Incomplete
    offset: Incomplete
    reach: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMaxVelocity(self, *args, **kwargs): ...
    def getOffset(self, *args, **kwargs): ...
    def getReach(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_max_velocity(self, CollisionHandlerFloorself) -> Any: ...
    def get_offset(self, CollisionHandlerFloorself) -> Any: ...
    def get_reach(self, CollisionHandlerFloorself) -> Any: ...
    def setMaxVelocity(self, *args, **kwargs): ...
    def setOffset(self, *args, **kwargs): ...
    def setReach(self, *args, **kwargs): ...
    def set_max_velocity(self, constCollisionHandlerFloorself, floatmax_vel) -> Any: ...
    def set_offset(self, constCollisionHandlerFloorself, floatoffset) -> Any: ...
    def set_reach(self, constCollisionHandlerFloorself, floatreach) -> Any: ...

class CollisionHandlerFluidPusher(CollisionHandlerPusher):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class CollisionHandlerGravity(CollisionHandlerPhysical):
    DtoolClassDict: ClassVar[dict] = ...
    airborne_height: Incomplete
    contact_normal: Incomplete
    gravity: Incomplete
    impact_velocity: Incomplete
    max_velocity: Incomplete
    offset: Incomplete
    on_ground: Incomplete
    reach: Incomplete
    velocity: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addVelocity(self, *args, **kwargs): ...
    def add_velocity(self, constCollisionHandlerGravityself, floatvelocity) -> Any: ...
    def getAirborneHeight(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getContactNormal(self, *args, **kwargs): ...
    def getGravity(self, *args, **kwargs): ...
    def getImpactVelocity(self, *args, **kwargs): ...
    def getLegacyMode(self, *args, **kwargs): ...
    def getMaxVelocity(self, *args, **kwargs): ...
    def getOffset(self, *args, **kwargs): ...
    def getReach(self, *args, **kwargs): ...
    def getVelocity(self, *args, **kwargs): ...
    def get_airborne_height(self, CollisionHandlerGravityself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_contact_normal(self, CollisionHandlerGravityself) -> Any: ...
    def get_gravity(self, CollisionHandlerGravityself) -> Any: ...
    @overload
    def get_impact_velocity(self, CollisionHandlerGravityself) -> Any: ...
    @overload
    def get_impact_velocity(self) -> Any: ...
    def get_legacy_mode(self, CollisionHandlerGravityself) -> Any: ...
    def get_max_velocity(self, CollisionHandlerGravityself) -> Any: ...
    def get_offset(self, CollisionHandlerGravityself) -> Any: ...
    def get_reach(self, CollisionHandlerGravityself) -> Any: ...
    def get_velocity(self, CollisionHandlerGravityself) -> Any: ...
    def isOnGround(self, *args, **kwargs): ...
    def is_on_ground(self, CollisionHandlerGravityself) -> Any: ...
    def setGravity(self, *args, **kwargs): ...
    def setLegacyMode(self, *args, **kwargs): ...
    def setMaxVelocity(self, *args, **kwargs): ...
    def setOffset(self, *args, **kwargs): ...
    def setReach(self, *args, **kwargs): ...
    def setVelocity(self, *args, **kwargs): ...
    def set_gravity(self, constCollisionHandlerGravityself, floatgravity) -> Any: ...
    def set_legacy_mode(self, constCollisionHandlerGravityself, boollegacy_mode) -> Any: ...
    def set_max_velocity(self, constCollisionHandlerGravityself, floatmax_vel) -> Any: ...
    def set_offset(self, constCollisionHandlerGravityself, floatoffset) -> Any: ...
    def set_reach(self, constCollisionHandlerGravityself, floatreach) -> Any: ...
    def set_velocity(self, constCollisionHandlerGravityself, floatvelocity) -> Any: ...

class CollisionHandlerHighestEvent(CollisionHandlerEvent):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CollisionHandlerPhysical(CollisionHandlerEvent):
    DtoolClassDict: ClassVar[dict] = ...
    center: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addCollider(self, *args, **kwargs): ...
    @overload
    def add_collider(self, constCollisionHandlerPhysicalself, constNodePathcollider, constNodePathtarget) -> Any: ...
    @overload
    def add_collider(
        self,
        constCollisionHandlerPhysicalself,
        constNodePathcollider,
        constNodePathtarget,
        DriveInterfacedrive_interface,
    ) -> Any: ...
    def clearCenter(self, *args, **kwargs): ...
    def clearColliders(self, *args, **kwargs): ...
    def clear_center(self, constCollisionHandlerPhysicalself) -> Any: ...
    def clear_colliders(self, constCollisionHandlerPhysicalself) -> Any: ...
    def getCenter(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_center(self, CollisionHandlerPhysicalself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def hasCenter(self, *args, **kwargs): ...
    def hasCollider(self, *args, **kwargs): ...
    def hasContact(self, *args, **kwargs): ...
    def has_center(self, CollisionHandlerPhysicalself) -> Any: ...
    def has_collider(self, CollisionHandlerPhysicalself, constNodePathcollider) -> Any: ...
    def has_contact(self, CollisionHandlerPhysicalself) -> Any: ...
    def removeCollider(self, *args, **kwargs): ...
    def remove_collider(self, constCollisionHandlerPhysicalself, constNodePathcollider) -> Any: ...
    def setCenter(self, *args, **kwargs): ...
    def set_center(self, constCollisionHandlerPhysicalself, constNodePathcenter) -> Any: ...
    def __reduce__(self, CollisionHandlerPhysicalself) -> Any: ...

class CollisionHandlerPusher(CollisionHandlerPhysical):
    DtoolClassDict: ClassVar[dict] = ...
    horizontal: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHorizontal(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_horizontal(self, CollisionHandlerPusherself) -> Any: ...
    def setHorizontal(self, *args, **kwargs): ...
    def set_horizontal(self, constCollisionHandlerPusherself, boolflag) -> Any: ...

class CollisionHandlerQueue(CollisionHandler):
    DtoolClassDict: ClassVar[dict] = ...
    entries: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearEntries(self, *args, **kwargs): ...
    def clear_entries(self, constCollisionHandlerQueueself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getEntries(self, *args, **kwargs): ...
    def getEntry(self, *args, **kwargs): ...
    def getNumEntries(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_entries(self, *args, **kwargs): ...
    def get_entry(self, CollisionHandlerQueueself, intn) -> Any: ...
    def get_num_entries(self, CollisionHandlerQueueself) -> Any: ...
    def output(self, CollisionHandlerQueueself, ostreamout) -> Any: ...
    def sortEntries(self, *args, **kwargs): ...
    def sort_entries(self, constCollisionHandlerQueueself) -> Any: ...
    def write(self, CollisionHandlerQueueself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __reduce__(self, CollisionHandlerQueueself) -> Any: ...

class CollisionHeightfield(CollisionSolid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHeight(self, *args, **kwargs): ...
    def getHeightfield(self, *args, **kwargs): ...
    def getMaxHeight(self, *args, **kwargs): ...
    def getNumSubdivisions(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_height(self, CollisionHeightfieldself, intx, inty) -> Any: ...
    def get_heightfield(self, constCollisionHeightfieldself) -> Any: ...
    def get_max_height(self, constCollisionHeightfieldself) -> Any: ...
    def get_num_subdivisions(self, constCollisionHeightfieldself) -> Any: ...
    def setHeightfield(self, *args, **kwargs): ...
    def setMaxHeight(self, *args, **kwargs): ...
    def setNumSubdivisions(self, *args, **kwargs): ...
    def set_heightfield(self, constCollisionHeightfieldself, PNMImageheightfield) -> Any: ...
    def set_max_height(self, constCollisionHeightfieldself, floatmax_height) -> Any: ...
    def set_num_subdivisions(self, constCollisionHeightfieldself, intnum_subdivisions) -> Any: ...

class CollisionInvSphere(CollisionSphere):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class CollisionLine(CollisionRay):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class CollisionNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    collider_sort: Incomplete
    default_collide_mask: Incomplete
    from_collide_mask: Incomplete
    into_collide_mask: Incomplete
    owner: Incomplete
    solids: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addSolid(self, *args, **kwargs): ...
    def add_solid(self, constCollisionNodeself, constCollisionSolidsolid) -> Any: ...
    def clearSolids(self, *args, **kwargs): ...
    def clear_solids(self, constCollisionNodeself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColliderSort(self, *args, **kwargs): ...
    @staticmethod
    def getDefaultCollideMask(*args, **kwargs): ...
    def getFromCollideMask(self, *args, **kwargs): ...
    def getIntoCollideMask(self, *args, **kwargs): ...
    def getNumSolids(self, *args, **kwargs): ...
    def getSolid(self, *args, **kwargs): ...
    def getSolids(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_collider_sort(self, CollisionNodeself) -> Any: ...
    @staticmethod
    def get_default_collide_mask() -> Any: ...
    def get_from_collide_mask(self, CollisionNodeself) -> Any: ...
    def get_into_collide_mask(self, CollisionNodeself) -> Any: ...
    def get_num_solids(self, CollisionNodeself) -> Any: ...
    def get_solid(self, CollisionNodeself, intn) -> Any: ...
    def get_solids(self, *args, **kwargs): ...
    def insertSolid(self, *args, **kwargs): ...
    def insert_solid(self, constCollisionNodeself, intn, constCollisionSolidsolid) -> Any: ...
    def modifySolid(self, *args, **kwargs): ...
    def modify_solid(self, constCollisionNodeself, intn) -> Any: ...
    def removeSolid(self, *args, **kwargs): ...
    def remove_solid(self, constCollisionNodeself, intn) -> Any: ...
    def setCollideMask(self, *args, **kwargs): ...
    def setColliderSort(self, *args, **kwargs): ...
    def setFromCollideMask(self, *args, **kwargs): ...
    def setIntoCollideMask(self, *args, **kwargs): ...
    def setSolid(self, *args, **kwargs): ...
    def set_collide_mask(self, constCollisionNodeself, BitMaskmask) -> Any: ...
    def set_collider_sort(self, constCollisionNodeself, intsort) -> Any: ...
    def set_from_collide_mask(self, constCollisionNodeself, BitMaskmask) -> Any: ...
    def set_into_collide_mask(self, constCollisionNodeself, BitMaskmask) -> Any: ...
    def set_solid(self, constCollisionNodeself, intn, CollisionSolidsolid) -> Any: ...

class CollisionParabola(CollisionSolid):
    DtoolClassDict: ClassVar[dict] = ...
    parabola: Incomplete
    t1: Incomplete
    t2: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getParabola(self, *args, **kwargs): ...
    def getT1(self, *args, **kwargs): ...
    def getT2(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_parabola(self, CollisionParabolaself) -> Any: ...
    def get_t1(self, CollisionParabolaself) -> Any: ...
    def get_t2(self, CollisionParabolaself) -> Any: ...
    def setParabola(self, *args, **kwargs): ...
    def setT1(self, *args, **kwargs): ...
    def setT2(self, *args, **kwargs): ...
    def set_parabola(self, constCollisionParabolaself, constLParabolafparabola) -> Any: ...
    def set_t1(self, constCollisionParabolaself, floatt1) -> Any: ...
    def set_t2(self, constCollisionParabolaself, floatt2) -> Any: ...

class CollisionPlane(CollisionSolid):
    DtoolClassDict: ClassVar[dict] = ...
    normal: Incomplete
    plane: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def distToPlane(self, *args, **kwargs): ...
    def dist_to_plane(self, CollisionPlaneself, constLPoint3fpoint) -> Any: ...
    def flip(self, constCollisionPlaneself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNormal(self, *args, **kwargs): ...
    def getPlane(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_normal(self, CollisionPlaneself) -> Any: ...
    def get_plane(self, CollisionPlaneself) -> Any: ...
    def setPlane(self, *args, **kwargs): ...
    def set_plane(self, constCollisionPlaneself, constLPlanefplane) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CollisionPolygon(CollisionPlane):
    DtoolClassDict: ClassVar[dict] = ...
    concave: Incomplete
    points: Incomplete
    valid: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumPoints(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getPoints(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_points(self, CollisionPolygonself) -> Any: ...
    def get_point(self, CollisionPolygonself, intn) -> Any: ...
    def get_points(self, *args, **kwargs): ...
    def isConcave(self, *args, **kwargs): ...
    def isValid(self, *args, **kwargs): ...
    def is_concave(self, CollisionPolygonself) -> Any: ...
    def is_valid(self, CollisionPolygonself) -> Any: ...
    def setupPoints(self, *args, **kwargs): ...
    def setup_points(self, constCollisionPolygonself, objectpoints) -> Any: ...
    @staticmethod
    def verifyPoints(*args, **kwargs): ...
    @overload
    @staticmethod
    def verify_points(objectpoints) -> Any: ...
    @overload
    @staticmethod
    def verify_points(constLPoint3fa, constLPoint3fb, constLPoint3fc) -> Any: ...
    @overload
    @staticmethod
    def verify_points(constLPoint3fa, constLPoint3fb, constLPoint3fc, constLPoint3fd) -> Any: ...

class CollisionRay(CollisionSolid):
    DtoolClassDict: ClassVar[dict] = ...
    direction: Incomplete
    origin: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDirection(self, *args, **kwargs): ...
    def getOrigin(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_direction(self, CollisionRayself) -> Any: ...
    def get_origin(self, CollisionRayself) -> Any: ...
    def setDirection(self, *args, **kwargs): ...
    def setFromLens(self, *args, **kwargs): ...
    def setOrigin(self, *args, **kwargs): ...
    @overload
    def set_direction(self, constCollisionRayself, constLVector3fdirection) -> Any: ...
    @overload
    def set_direction(self, constCollisionRayself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_from_lens(self, constCollisionRayself, LensNodecamera, constLPoint2fpoint) -> Any: ...
    @overload
    def set_from_lens(self, constCollisionRayself, LensNodecamera, floatpx, floatpy) -> Any: ...
    @overload
    def set_origin(self, constCollisionRayself, constLPoint3forigin) -> Any: ...
    @overload
    def set_origin(self, constCollisionRayself, floatx, floaty, floatz) -> Any: ...

class CollisionRecorder(TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def output(self, CollisionRecorderself, ostreamout) -> Any: ...

class CollisionSegment(CollisionSolid):
    DtoolClassDict: ClassVar[dict] = ...
    point_a: Incomplete
    point_b: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPointA(self, *args, **kwargs): ...
    def getPointB(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_point_a(self, CollisionSegmentself) -> Any: ...
    def get_point_b(self, CollisionSegmentself) -> Any: ...
    def setFromLens(self, *args, **kwargs): ...
    def setPointA(self, *args, **kwargs): ...
    def setPointB(self, *args, **kwargs): ...
    @overload
    def set_from_lens(self, constCollisionSegmentself, LensNodecamera, constLPoint2fpoint) -> Any: ...
    @overload
    def set_from_lens(self, constCollisionSegmentself, LensNodecamera, floatpx, floatpy) -> Any: ...
    @overload
    def set_point_a(self, constCollisionSegmentself, constLPoint3fa) -> Any: ...
    @overload
    def set_point_a(self, constCollisionSegmentself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_point_b(self, constCollisionSegmentself, constLPoint3fb) -> Any: ...
    @overload
    def set_point_b(self, constCollisionSegmentself, floatx, floaty, floatz) -> Any: ...

class CollisionSolid(CopyOnWriteObject):
    DtoolClassDict: ClassVar[dict] = ...
    bounds: Incomplete
    collision_origin: Incomplete
    respect_effective_normal: Incomplete
    tangible: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearEffectiveNormal(self, *args, **kwargs): ...
    def clear_effective_normal(self, constCollisionSolidself) -> Any: ...
    def getBounds(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCollisionOrigin(self, *args, **kwargs): ...
    def getEffectiveNormal(self, *args, **kwargs): ...
    def getRespectEffectiveNormal(self, *args, **kwargs): ...
    def get_bounds(self, CollisionSolidself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_collision_origin(self, CollisionSolidself) -> Any: ...
    def get_effective_normal(self, CollisionSolidself) -> Any: ...
    def get_respect_effective_normal(self, CollisionSolidself) -> Any: ...
    def hasEffectiveNormal(self, *args, **kwargs): ...
    def has_effective_normal(self, CollisionSolidself) -> Any: ...
    def isTangible(self, *args, **kwargs): ...
    def is_tangible(self, CollisionSolidself) -> Any: ...
    def output(self, CollisionSolidself, ostreamout) -> Any: ...
    def setBounds(self, *args, **kwargs): ...
    def setEffectiveNormal(self, *args, **kwargs): ...
    def setRespectEffectiveNormal(self, *args, **kwargs): ...
    def setTangible(self, *args, **kwargs): ...
    def set_bounds(self, constCollisionSolidself, constBoundingVolumebounding_volume) -> Any: ...
    def set_effective_normal(self, constCollisionSolidself, constLVector3feffective_normal) -> Any: ...
    def set_respect_effective_normal(self, constCollisionSolidself, boolrespect_effective_normal) -> Any: ...
    def set_tangible(self, constCollisionSolidself, booltangible) -> Any: ...
    def write(self, CollisionSolidself, ostreamout, intindent_level) -> Any: ...

class CollisionSphere(CollisionSolid):
    DtoolClassDict: ClassVar[dict] = ...
    center: Incomplete
    radius: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getCenter(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    def get_center(self, CollisionSphereself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_radius(self, CollisionSphereself) -> Any: ...
    def setCenter(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    @overload
    def set_center(self, constCollisionSphereself, constLPoint3fcenter) -> Any: ...
    @overload
    def set_center(self, constCollisionSphereself, floatx, floaty, floatz) -> Any: ...
    def set_radius(self, constCollisionSphereself, floatradius) -> Any: ...

class CollisionTraverser(Namable):
    DtoolClassDict: ClassVar[dict] = ...
    colliders: Incomplete
    recorder: Incomplete
    respect_prev_transform: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addCollider(self, *args, **kwargs): ...
    @overload
    def add_collider(self, constCollisionTraverserself, constNodePathcollider, CollisionHandlerhandler) -> Any: ...
    @overload
    def add_collider(self) -> Any: ...
    def clearColliders(self, *args, **kwargs): ...
    def clearRecorder(self, *args, **kwargs): ...
    def clear_colliders(self, constCollisionTraverserself) -> Any: ...
    def clear_recorder(self, constCollisionTraverserself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCollider(self, *args, **kwargs): ...
    def getColliders(self, *args, **kwargs): ...
    def getHandler(self, *args, **kwargs): ...
    def getNumColliders(self, *args, **kwargs): ...
    def getRecorder(self, *args, **kwargs): ...
    def getRespectPrevTransform(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_collider(self, CollisionTraverserself, intn) -> Any: ...
    def get_colliders(self, *args, **kwargs): ...
    def get_handler(self, CollisionTraverserself, constNodePathcollider) -> Any: ...
    def get_num_colliders(self, CollisionTraverserself) -> Any: ...
    def get_recorder(self, CollisionTraverserself) -> Any: ...
    def get_respect_prev_transform(self, CollisionTraverserself) -> Any: ...
    def hasCollider(self, *args, **kwargs): ...
    def hasRecorder(self, *args, **kwargs): ...
    def has_collider(self, CollisionTraverserself, constNodePathcollider) -> Any: ...
    def has_recorder(self, CollisionTraverserself) -> Any: ...
    def hideCollisions(self, *args, **kwargs): ...
    def hide_collisions(self, constCollisionTraverserself) -> Any: ...
    def output(self, CollisionTraverserself, ostreamout) -> Any: ...
    def removeCollider(self, *args, **kwargs): ...
    def remove_collider(self, constCollisionTraverserself, constNodePathcollider) -> Any: ...
    def setRecorder(self, *args, **kwargs): ...
    def setRespectPrevTransform(self, *args, **kwargs): ...
    def set_recorder(self, constCollisionTraverserself, CollisionRecorderrecorder) -> Any: ...
    def set_respect_prev_transform(self, constCollisionTraverserself, boolflag) -> Any: ...
    def showCollisions(self, *args, **kwargs): ...
    def show_collisions(self, constCollisionTraverserself, constNodePathroot) -> Any: ...
    def traverse(self, constCollisionTraverserself, constNodePathroot) -> Any: ...
    def write(self, CollisionTraverserself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CollisionTube(CollisionSolid):
    DtoolClassDict: ClassVar[dict] = ...
    point_a: Incomplete
    point_b: Incomplete
    radius: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPointA(self, *args, **kwargs): ...
    def getPointB(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_point_a(self, CollisionCapsuleself) -> Any: ...
    def get_point_b(self, CollisionCapsuleself) -> Any: ...
    def get_radius(self, CollisionCapsuleself) -> Any: ...
    def setPointA(self, *args, **kwargs): ...
    def setPointB(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    @overload
    def set_point_a(self, constCollisionCapsuleself, constLPoint3fa) -> Any: ...
    @overload
    def set_point_a(self, constCollisionCapsuleself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_point_b(self, constCollisionCapsuleself, constLPoint3fb) -> Any: ...
    @overload
    def set_point_b(self, constCollisionCapsuleself, floatx, floaty, floatz) -> Any: ...
    def set_radius(self, constCollisionCapsuleself, floatradius) -> Any: ...

class ColorAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    TFlat: ClassVar[int] = ...
    TOff: ClassVar[int] = ...
    TVertex: ClassVar[int] = ...
    T_flat: ClassVar[int] = ...
    T_off: ClassVar[int] = ...
    T_vertex: ClassVar[int] = ...
    class_slot: Incomplete
    color: Incomplete
    color_type: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColor(self, *args, **kwargs): ...
    def getColorType(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_color(self, ColorAttribself) -> Any: ...
    def get_color_type(self, ColorAttribself) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeFlat(*args, **kwargs): ...
    @staticmethod
    def makeOff(*args, **kwargs): ...
    @staticmethod
    def makeVertex(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_flat(constLVecBase4fcolor) -> Any: ...
    @staticmethod
    def make_off() -> Any: ...
    @staticmethod
    def make_vertex() -> Any: ...

class ColorBlendAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    MAdd: ClassVar[int] = ...
    MInvSubtract: ClassVar[int] = ...
    MMax: ClassVar[int] = ...
    MMin: ClassVar[int] = ...
    MNone: ClassVar[int] = ...
    MSubtract: ClassVar[int] = ...
    M_add: ClassVar[int] = ...
    M_inv_subtract: ClassVar[int] = ...
    M_max: ClassVar[int] = ...
    M_min: ClassVar[int] = ...
    M_none: ClassVar[int] = ...
    M_subtract: ClassVar[int] = ...
    OAlphaScale: ClassVar[int] = ...
    OColorScale: ClassVar[int] = ...
    OConstantAlpha: ClassVar[int] = ...
    OConstantColor: ClassVar[int] = ...
    OFbufferAlpha: ClassVar[int] = ...
    OFbufferColor: ClassVar[int] = ...
    OIncoming1Alpha: ClassVar[int] = ...
    OIncoming1Color: ClassVar[int] = ...
    OIncomingAlpha: ClassVar[int] = ...
    OIncomingColor: ClassVar[int] = ...
    OIncomingColorSaturate: ClassVar[int] = ...
    OOne: ClassVar[int] = ...
    OOneMinusAlphaScale: ClassVar[int] = ...
    OOneMinusColorScale: ClassVar[int] = ...
    OOneMinusConstantAlpha: ClassVar[int] = ...
    OOneMinusConstantColor: ClassVar[int] = ...
    OOneMinusFbufferAlpha: ClassVar[int] = ...
    OOneMinusFbufferColor: ClassVar[int] = ...
    OOneMinusIncoming1Alpha: ClassVar[int] = ...
    OOneMinusIncoming1Color: ClassVar[int] = ...
    OOneMinusIncomingAlpha: ClassVar[int] = ...
    OOneMinusIncomingColor: ClassVar[int] = ...
    OZero: ClassVar[int] = ...
    O_alpha_scale: ClassVar[int] = ...
    O_color_scale: ClassVar[int] = ...
    O_constant_alpha: ClassVar[int] = ...
    O_constant_color: ClassVar[int] = ...
    O_fbuffer_alpha: ClassVar[int] = ...
    O_fbuffer_color: ClassVar[int] = ...
    O_incoming1_alpha: ClassVar[int] = ...
    O_incoming1_color: ClassVar[int] = ...
    O_incoming_alpha: ClassVar[int] = ...
    O_incoming_color: ClassVar[int] = ...
    O_incoming_color_saturate: ClassVar[int] = ...
    O_one: ClassVar[int] = ...
    O_one_minus_alpha_scale: ClassVar[int] = ...
    O_one_minus_color_scale: ClassVar[int] = ...
    O_one_minus_constant_alpha: ClassVar[int] = ...
    O_one_minus_constant_color: ClassVar[int] = ...
    O_one_minus_fbuffer_alpha: ClassVar[int] = ...
    O_one_minus_fbuffer_color: ClassVar[int] = ...
    O_one_minus_incoming1_alpha: ClassVar[int] = ...
    O_one_minus_incoming1_color: ClassVar[int] = ...
    O_one_minus_incoming_alpha: ClassVar[int] = ...
    O_one_minus_incoming_color: ClassVar[int] = ...
    O_zero: ClassVar[int] = ...
    alpha_mode: Incomplete
    alpha_operand_a: Incomplete
    alpha_operand_b: Incomplete
    class_slot: Incomplete
    color: Incomplete
    rgb_mode: Incomplete
    rgb_operand_a: Incomplete
    rgb_operand_b: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getAlphaMode(self, *args, **kwargs): ...
    def getAlphaOperandA(self, *args, **kwargs): ...
    def getAlphaOperandB(self, *args, **kwargs): ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColor(self, *args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    def getOperandA(self, *args, **kwargs): ...
    def getOperandB(self, *args, **kwargs): ...
    def get_alpha_mode(self, ColorBlendAttribself) -> Any: ...
    def get_alpha_operand_a(self, ColorBlendAttribself) -> Any: ...
    def get_alpha_operand_b(self, ColorBlendAttribself) -> Any: ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_color(self, ColorBlendAttribself) -> Any: ...
    def get_mode(self, ColorBlendAttribself) -> Any: ...
    def get_operand_a(self, ColorBlendAttribself) -> Any: ...
    def get_operand_b(self, ColorBlendAttribself) -> Any: ...
    def involvesColorScale(self, *args, **kwargs): ...
    def involvesConstantColor(self, *args, **kwargs): ...
    @overload
    def involves_color_scale(self, ColorBlendAttribself) -> Any: ...
    @overload
    def involves_color_scale(self, intoperand) -> Any: ...
    @overload
    def involves_constant_color(self, ColorBlendAttribself) -> Any: ...
    @overload
    def involves_constant_color(self, intoperand) -> Any: ...
    @overload
    @staticmethod
    def make(intmode) -> Any: ...
    @overload
    @staticmethod
    def make(intmode, inta, intb) -> Any: ...
    @overload
    @staticmethod
    def make(intmode, inta, intb, constLVecBase4fcolor) -> Any: ...
    @overload
    @staticmethod
    def make(intrgb_mode, intrgb_a, intrgb_b, intalpha_mode, intalpha_a, intalpha_b, constLVecBase4fcolor) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeOff(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_off() -> Any: ...

class ColorScaleAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    class_slot: Incomplete
    scale: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getScale(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_scale(self, ColorScaleAttribself) -> Any: ...
    def hasAlphaScale(self, *args, **kwargs): ...
    def hasRgbScale(self, *args, **kwargs): ...
    def hasScale(self, *args, **kwargs): ...
    def has_alpha_scale(self, ColorScaleAttribself) -> Any: ...
    def has_rgb_scale(self, ColorScaleAttribself) -> Any: ...
    def has_scale(self, ColorScaleAttribself) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isOff(self, *args, **kwargs): ...
    def is_identity(self, ColorScaleAttribself) -> Any: ...
    def is_off(self, ColorScaleAttribself) -> Any: ...
    @staticmethod
    def make(constLVecBase4fscale) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeIdentity(*args, **kwargs): ...
    @staticmethod
    def makeOff(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_identity() -> Any: ...
    @staticmethod
    def make_off() -> Any: ...
    def setScale(self, *args, **kwargs): ...
    def set_scale(self, ColorScaleAttribself, constLVecBase4fscale) -> Any: ...

class ColorWriteAttrib(RenderAttrib):
    CAll: ClassVar[int] = ...
    CAlpha: ClassVar[int] = ...
    CBlue: ClassVar[int] = ...
    CGreen: ClassVar[int] = ...
    COff: ClassVar[int] = ...
    CRed: ClassVar[int] = ...
    CRgb: ClassVar[int] = ...
    C_all: ClassVar[int] = ...
    C_alpha: ClassVar[int] = ...
    C_blue: ClassVar[int] = ...
    C_green: ClassVar[int] = ...
    C_off: ClassVar[int] = ...
    C_red: ClassVar[int] = ...
    C_rgb: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    channels: Incomplete
    class_slot: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getChannels(self, *args, **kwargs): ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_channels(self, ColorWriteAttribself) -> Any: ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def make(intchannels) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class CompassEffect(RenderEffect):
    DtoolClassDict: ClassVar[dict] = ...
    PAll: ClassVar[int] = ...
    PPos: ClassVar[int] = ...
    PRot: ClassVar[int] = ...
    PScale: ClassVar[int] = ...
    PSx: ClassVar[int] = ...
    PSy: ClassVar[int] = ...
    PSz: ClassVar[int] = ...
    PX: ClassVar[int] = ...
    PY: ClassVar[int] = ...
    PZ: ClassVar[int] = ...
    P_all: ClassVar[int] = ...
    P_pos: ClassVar[int] = ...
    P_rot: ClassVar[int] = ...
    P_scale: ClassVar[int] = ...
    P_sx: ClassVar[int] = ...
    P_sy: ClassVar[int] = ...
    P_sz: ClassVar[int] = ...
    P_x: ClassVar[int] = ...
    P_y: ClassVar[int] = ...
    P_z: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getProperties(self, *args, **kwargs): ...
    def getReference(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_properties(self, CompassEffectself) -> Any: ...
    def get_reference(self, CompassEffectself) -> Any: ...
    @staticmethod
    def make(constNodePathreference, intproperties) -> Any: ...

class ComputeNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    dispatches: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addDispatch(self, *args, **kwargs): ...
    @overload
    def add_dispatch(self, constComputeNodeself, constLVecBase3inum_groups) -> Any: ...
    @overload
    def add_dispatch(self, constComputeNodeself, intnum_groups_x, intnum_groups_y, intnum_groups_z) -> Any: ...
    def clearDispatches(self, *args, **kwargs): ...
    def clear_dispatches(self, constComputeNodeself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDispatch(self, *args, **kwargs): ...
    def getDispatches(self, *args, **kwargs): ...
    def getNumDispatches(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_dispatch(self, ComputeNodeself, inti) -> Any: ...
    def get_dispatches(self, *args, **kwargs): ...
    def get_num_dispatches(self, ComputeNodeself) -> Any: ...
    def insertDispatch(self, *args, **kwargs): ...
    def insert_dispatch(self, constComputeNodeself, inti, constLVecBase3inum_groups) -> Any: ...
    def removeDispatch(self, *args, **kwargs): ...
    def remove_dispatch(self, constComputeNodeself, inti) -> Any: ...
    def setDispatch(self, *args, **kwargs): ...
    def set_dispatch(self, constComputeNodeself, inti, constLVecBase3inum_groups) -> Any: ...

class ConditionVar(ConditionVarDirect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getMutex(self, *args, **kwargs): ...
    def get_mutex(self, ConditionVarself) -> Any: ...

class ConditionVarDirect(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getMutex(self, *args, **kwargs): ...
    def get_mutex(self, ConditionVarDirectself) -> Any: ...
    def notify(self, constConditionVarDirectself) -> Any: ...
    def notifyAll(self, *args, **kwargs): ...
    def notify_all(self, constConditionVarDirectself) -> Any: ...
    def output(self, ConditionVarDirectself, ostreamout) -> Any: ...
    @overload
    def wait(self, constConditionVarDirectself) -> Any: ...
    @overload
    def wait(self, constConditionVarDirectself, doubletimeout) -> Any: ...
    @overload
    def wait(self) -> Any: ...
    @overload
    def wait(self) -> Any: ...
    @overload
    def wait(self) -> Any: ...
    @overload
    def wait(self) -> Any: ...
    @overload
    def wait(self) -> Any: ...
    @overload
    def wait(self) -> Any: ...

class ConditionVarFull(ConditionVarDirect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getMutex(self, *args, **kwargs): ...
    def get_mutex(self, ConditionVarself) -> Any: ...

class ConfigDeclaration(ConfigFlags):
    DtoolClassDict: ClassVar[dict] = ...
    page: Incomplete
    variable: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getBoolWord(self, *args, **kwargs): ...
    def getDeclSeq(self, *args, **kwargs): ...
    def getDoubleWord(self, *args, **kwargs): ...
    def getFilenameValue(self, *args, **kwargs): ...
    def getInt64Word(self, *args, **kwargs): ...
    def getIntWord(self, *args, **kwargs): ...
    def getNumWords(self, *args, **kwargs): ...
    def getPage(self, *args, **kwargs): ...
    def getStringValue(self, *args, **kwargs): ...
    def getStringWord(self, *args, **kwargs): ...
    def getVariable(self, *args, **kwargs): ...
    def get_bool_word(self, ConfigDeclarationself, intn) -> Any: ...
    def get_decl_seq(self, ConfigDeclarationself) -> Any: ...
    def get_double_word(self, ConfigDeclarationself, intn) -> Any: ...
    def get_filename_value(self, ConfigDeclarationself) -> Any: ...
    def get_int64_word(self, ConfigDeclarationself, intn) -> Any: ...
    def get_int_word(self, ConfigDeclarationself, intn) -> Any: ...
    def get_num_words(self, ConfigDeclarationself) -> Any: ...
    def get_page(self, ConfigDeclarationself) -> Any: ...
    def get_string_value(self, ConfigDeclarationself) -> Any: ...
    def get_string_word(self, ConfigDeclarationself, intn) -> Any: ...
    def get_variable(self, ConfigDeclarationself) -> Any: ...
    def hasBoolWord(self, *args, **kwargs): ...
    def hasDoubleWord(self, *args, **kwargs): ...
    def hasInt64Word(self, *args, **kwargs): ...
    def hasIntWord(self, *args, **kwargs): ...
    def hasStringWord(self, *args, **kwargs): ...
    def has_bool_word(self, ConfigDeclarationself, intn) -> Any: ...
    def has_double_word(self, ConfigDeclarationself, intn) -> Any: ...
    def has_int64_word(self, ConfigDeclarationself, intn) -> Any: ...
    def has_int_word(self, ConfigDeclarationself, intn) -> Any: ...
    def has_string_word(self, ConfigDeclarationself, intn) -> Any: ...
    def output(self, ConfigDeclarationself, ostreamout) -> Any: ...
    def setBoolWord(self, *args, **kwargs): ...
    def setDoubleWord(self, *args, **kwargs): ...
    def setInt64Word(self, *args, **kwargs): ...
    def setIntWord(self, *args, **kwargs): ...
    def setStringValue(self, *args, **kwargs): ...
    def setStringWord(self, *args, **kwargs): ...
    def set_bool_word(self, constConfigDeclarationself, intn, boolvalue) -> Any: ...
    def set_double_word(self, constConfigDeclarationself, intn, doublevalue) -> Any: ...
    def set_int64_word(self, constConfigDeclarationself, intn, longvalue) -> Any: ...
    def set_int_word(self, constConfigDeclarationself, intn, intvalue) -> Any: ...
    def set_string_value(self, constConfigDeclarationself, strvalue) -> Any: ...
    def set_string_word(self, constConfigDeclarationself, intn, strvalue) -> Any: ...
    def write(self, ConfigDeclarationself, ostreamout) -> Any: ...

class ConfigFlags(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    FClosed: ClassVar[int] = ...
    FDconfig: ClassVar[int] = ...
    FDynamic: ClassVar[int] = ...
    FOpen: ClassVar[int] = ...
    FTrustLevelMask: ClassVar[int] = ...
    F_closed: ClassVar[int] = ...
    F_dconfig: ClassVar[int] = ...
    F_dynamic: ClassVar[int] = ...
    F_open: ClassVar[int] = ...
    F_trust_level_mask: ClassVar[int] = ...
    VTBool: ClassVar[int] = ...
    VTColor: ClassVar[int] = ...
    VTDouble: ClassVar[int] = ...
    VTEnum: ClassVar[int] = ...
    VTFilename: ClassVar[int] = ...
    VTInt: ClassVar[int] = ...
    VTInt64: ClassVar[int] = ...
    VTList: ClassVar[int] = ...
    VTSearchPath: ClassVar[int] = ...
    VTString: ClassVar[int] = ...
    VTUndefined: ClassVar[int] = ...
    VT_bool: ClassVar[int] = ...
    VT_color: ClassVar[int] = ...
    VT_double: ClassVar[int] = ...
    VT_enum: ClassVar[int] = ...
    VT_filename: ClassVar[int] = ...
    VT_int: ClassVar[int] = ...
    VT_int64: ClassVar[int] = ...
    VT_list: ClassVar[int] = ...
    VT_search_path: ClassVar[int] = ...
    VT_string: ClassVar[int] = ...
    VT_undefined: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ConfigPage(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    declarations: Incomplete
    implicit: Incomplete
    name: Incomplete
    page_seq: Incomplete
    signature: Incomplete
    sort: Incomplete
    special: Incomplete
    trust_level: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConfigPageself) -> Any: ...
    def deleteDeclaration(self, *args, **kwargs): ...
    def delete_declaration(self, constConfigPageself, ConfigDeclarationdecl) -> Any: ...
    def getDeclaration(self, *args, **kwargs): ...
    @staticmethod
    def getDefaultPage(*args, **kwargs): ...
    @staticmethod
    def getLocalPage(*args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumDeclarations(self, *args, **kwargs): ...
    def getPageSeq(self, *args, **kwargs): ...
    def getSignature(self, *args, **kwargs): ...
    def getSort(self, *args, **kwargs): ...
    def getStringValue(self, *args, **kwargs): ...
    def getTrustLevel(self, *args, **kwargs): ...
    def getVariableName(self, *args, **kwargs): ...
    def get_declaration(self, ConfigPageself, intn) -> Any: ...
    @staticmethod
    def get_default_page() -> Any: ...
    @staticmethod
    def get_local_page() -> Any: ...
    def get_name(self, ConfigPageself) -> Any: ...
    def get_num_declarations(self, ConfigPageself) -> Any: ...
    def get_page_seq(self, ConfigPageself) -> Any: ...
    def get_signature(self, ConfigPageself) -> Any: ...
    def get_sort(self, ConfigPageself) -> Any: ...
    def get_string_value(self, ConfigPageself, intn) -> Any: ...
    def get_trust_level(self, ConfigPageself) -> Any: ...
    def get_variable_name(self, ConfigPageself, intn) -> Any: ...
    def isImplicit(self, *args, **kwargs): ...
    def isSpecial(self, *args, **kwargs): ...
    def isVariableUsed(self, *args, **kwargs): ...
    def is_implicit(self, ConfigPageself) -> Any: ...
    def is_special(self, ConfigPageself) -> Any: ...
    def is_variable_used(self, ConfigPageself, intn) -> Any: ...
    def makeDeclaration(self, *args, **kwargs): ...
    @overload
    def make_declaration(self, constConfigPageself, ConfigVariableCorevariable, strvalue) -> Any: ...
    @overload
    def make_declaration(self, constConfigPageself, strvariable, strvalue) -> Any: ...
    def modifyDeclaration(self, *args, **kwargs): ...
    def modify_declaration(self, constConfigPageself, intn) -> Any: ...
    def output(self, ConfigPageself, ostreamout) -> Any: ...
    def outputBriefSignature(self, *args, **kwargs): ...
    def output_brief_signature(self, ConfigPageself, ostreamout) -> Any: ...
    def readEncryptedPrc(self, *args, **kwargs): ...
    def readPrc(self, *args, **kwargs): ...
    def read_encrypted_prc(self, constConfigPageself, istreamin, strpassword) -> Any: ...
    def read_prc(self, constConfigPageself, istreamin) -> Any: ...
    def setSort(self, *args, **kwargs): ...
    def setTrustLevel(self, *args, **kwargs): ...
    def set_sort(self, constConfigPageself, intsort) -> Any: ...
    def set_trust_level(self, constConfigPageself, inttrust_level) -> Any: ...
    def write(self, ConfigPageself, ostreamout) -> Any: ...

class ConfigPageManager(ConfigFlags):
    DtoolClassDict: ClassVar[dict] = ...
    explicit_pages: Incomplete
    implicit_pages: Incomplete
    prc_encrypted_patterns: Incomplete
    prc_executable_patterns: Incomplete
    prc_patterns: Incomplete
    search_path: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def deleteExplicitPage(self, *args, **kwargs): ...
    def delete_explicit_page(self, constConfigPageManagerself, ConfigPagepage) -> Any: ...
    def getExplicitPage(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getImplicitPage(self, *args, **kwargs): ...
    def getNumExplicitPages(self, *args, **kwargs): ...
    def getNumImplicitPages(self, *args, **kwargs): ...
    def getNumPrcEncryptedPatterns(self, *args, **kwargs): ...
    def getNumPrcExecutablePatterns(self, *args, **kwargs): ...
    def getNumPrcPatterns(self, *args, **kwargs): ...
    def getPrcEncryptedPattern(self, *args, **kwargs): ...
    def getPrcExecutablePattern(self, *args, **kwargs): ...
    def getPrcPattern(self, *args, **kwargs): ...
    def getSearchPath(self, *args, **kwargs): ...
    def get_explicit_page(self, ConfigPageManagerself, intn) -> Any: ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_implicit_page(self, ConfigPageManagerself, intn) -> Any: ...
    def get_num_explicit_pages(self, ConfigPageManagerself) -> Any: ...
    def get_num_implicit_pages(self, ConfigPageManagerself) -> Any: ...
    def get_num_prc_encrypted_patterns(self, ConfigPageManagerself) -> Any: ...
    def get_num_prc_executable_patterns(self, ConfigPageManagerself) -> Any: ...
    def get_num_prc_patterns(self, ConfigPageManagerself) -> Any: ...
    def get_prc_encrypted_pattern(self, ConfigPageManagerself, intn) -> Any: ...
    def get_prc_executable_pattern(self, ConfigPageManagerself, intn) -> Any: ...
    def get_prc_pattern(self, ConfigPageManagerself, intn) -> Any: ...
    def get_search_path(self, constConfigPageManagerself) -> Any: ...
    def loadImplicitPages(self, *args, **kwargs): ...
    def load_implicit_pages(self, constConfigPageManagerself) -> Any: ...
    def loadedImplicitPages(self, *args, **kwargs): ...
    def loaded_implicit_pages(self, ConfigPageManagerself) -> Any: ...
    def makeExplicitPage(self, *args, **kwargs): ...
    def make_explicit_page(self, constConfigPageManagerself, strname) -> Any: ...
    def output(self, ConfigPageManagerself, ostreamout) -> Any: ...
    def reloadImplicitPages(self, *args, **kwargs): ...
    def reload_implicit_pages(self, constConfigPageManagerself) -> Any: ...
    def write(self, ConfigPageManagerself, ostreamout) -> Any: ...

class ConfigVariable(ConfigVariableBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearValue(self, *args, **kwargs): ...
    def clear_value(self, constConfigVariableself) -> Any: ...
    def getNumWords(self, *args, **kwargs): ...
    def getStringValue(self, *args, **kwargs): ...
    def get_num_words(self, ConfigVariableself) -> Any: ...
    def get_string_value(self, ConfigVariableself) -> Any: ...
    def setStringValue(self, *args, **kwargs): ...
    def set_string_value(self, constConfigVariableself, strvalue) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __reduce__(self, ConfigVariableself) -> Any: ...

class ConfigVariableBase(ConfigFlags):
    DtoolClassDict: ClassVar[dict] = ...
    closed: Incomplete
    description: Incomplete
    dynamic: Incomplete
    name: Incomplete
    trust_level: Incomplete
    value_type: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearLocalValue(self, *args, **kwargs): ...
    def clear_local_value(self, constConfigVariableBaseself) -> Any: ...
    def getDescription(self, *args, **kwargs): ...
    def getFlags(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getTrustLevel(self, *args, **kwargs): ...
    def getValueType(self, *args, **kwargs): ...
    def get_description(self, ConfigVariableBaseself) -> Any: ...
    def get_flags(self, ConfigVariableBaseself) -> Any: ...
    def get_name(self, ConfigVariableBaseself) -> Any: ...
    def get_trust_level(self, ConfigVariableBaseself) -> Any: ...
    def get_value_type(self, ConfigVariableBaseself) -> Any: ...
    def hasLocalValue(self, *args, **kwargs): ...
    def hasValue(self, *args, **kwargs): ...
    def has_local_value(self, ConfigVariableBaseself) -> Any: ...
    def has_value(self, ConfigVariableBaseself) -> Any: ...
    def isClosed(self, *args, **kwargs): ...
    def isDynamic(self, *args, **kwargs): ...
    def is_closed(self, ConfigVariableBaseself) -> Any: ...
    def is_dynamic(self, ConfigVariableBaseself) -> Any: ...
    def output(self, ConfigVariableBaseself, ostreamout) -> Any: ...
    def upcastToConfigFlags(self, *args, **kwargs): ...
    def upcast_to_ConfigFlags(self, constConfigVariableBaseself) -> Any: ...
    def write(self, ConfigVariableBaseself, ostreamout) -> Any: ...

class ConfigVariableBool(ConfigVariable):
    DtoolClassDict: ClassVar[dict] = ...
    default_value: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constConfigVariableBoolself, boolvalue) -> Any: ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_default_value(self, ConfigVariableBoolself) -> Any: ...
    def get_value(self, ConfigVariableBoolself) -> Any: ...
    def get_word(self, ConfigVariableBoolself, intn) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_value(self, constConfigVariableBoolself, boolvalue) -> Any: ...
    def set_word(self, constConfigVariableBoolself, intn, boolvalue) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...

class ConfigVariableColor(ConfigVariable):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constConfigVariableColorself, constLVecBase4fvalue) -> Any: ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def get_default_value(self, ConfigVariableColorself) -> Any: ...
    def get_value(self, ConfigVariableColorself) -> Any: ...
    def operatorTypecast(self, *args, **kwargs): ...
    def operator_typecast(self, ConfigVariableColorself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constConfigVariableColorself, constLVecBase4fvalue) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...

class ConfigVariableCore(ConfigFlags):
    DtoolClassDict: ClassVar[dict] = ...
    closed: Incomplete
    declarations: Incomplete
    default_value: Incomplete
    description: Incomplete
    dynamic: Incomplete
    name: Incomplete
    references: Incomplete
    trust_level: Incomplete
    trusted_references: Incomplete
    unique_references: Incomplete
    used: Incomplete
    value_type: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearLocalValue(self, *args, **kwargs): ...
    def clear_local_value(self, constConfigVariableCoreself) -> Any: ...
    def getDeclaration(self, *args, **kwargs): ...
    def getDeclarations(self, *args, **kwargs): ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getDescription(self, *args, **kwargs): ...
    def getFlags(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumDeclarations(self, *args, **kwargs): ...
    def getNumReferences(self, *args, **kwargs): ...
    def getNumTrustedReferences(self, *args, **kwargs): ...
    def getNumUniqueReferences(self, *args, **kwargs): ...
    def getReference(self, *args, **kwargs): ...
    def getReferences(self, *args, **kwargs): ...
    def getTrustLevel(self, *args, **kwargs): ...
    def getTrustedReference(self, *args, **kwargs): ...
    def getTrustedReferences(self, *args, **kwargs): ...
    def getUniqueReference(self, *args, **kwargs): ...
    def getUniqueReferences(self, *args, **kwargs): ...
    def getValueType(self, *args, **kwargs): ...
    def get_declaration(self, ConfigVariableCoreself, intn) -> Any: ...
    def get_declarations(self, *args, **kwargs): ...
    def get_default_value(self, ConfigVariableCoreself) -> Any: ...
    def get_description(self, ConfigVariableCoreself) -> Any: ...
    def get_flags(self, ConfigVariableCoreself) -> Any: ...
    def get_name(self, ConfigVariableCoreself) -> Any: ...
    def get_num_declarations(self, ConfigVariableCoreself) -> Any: ...
    def get_num_references(self, ConfigVariableCoreself) -> Any: ...
    def get_num_trusted_references(self, ConfigVariableCoreself) -> Any: ...
    def get_num_unique_references(self, ConfigVariableCoreself) -> Any: ...
    def get_reference(self, ConfigVariableCoreself, intn) -> Any: ...
    def get_references(self, *args, **kwargs): ...
    def get_trust_level(self, ConfigVariableCoreself) -> Any: ...
    def get_trusted_reference(self, ConfigVariableCoreself, intn) -> Any: ...
    def get_trusted_references(self, *args, **kwargs): ...
    def get_unique_reference(self, ConfigVariableCoreself, intn) -> Any: ...
    def get_unique_references(self, *args, **kwargs): ...
    def get_value_type(self, ConfigVariableCoreself) -> Any: ...
    def hasLocalValue(self, *args, **kwargs): ...
    def hasValue(self, *args, **kwargs): ...
    def has_local_value(self, ConfigVariableCoreself) -> Any: ...
    def has_value(self, ConfigVariableCoreself) -> Any: ...
    def isClosed(self, *args, **kwargs): ...
    def isDynamic(self, *args, **kwargs): ...
    def isUsed(self, *args, **kwargs): ...
    def is_closed(self, ConfigVariableCoreself) -> Any: ...
    def is_dynamic(self, ConfigVariableCoreself) -> Any: ...
    def is_used(self, ConfigVariableCoreself) -> Any: ...
    def makeLocalValue(self, *args, **kwargs): ...
    def make_local_value(self, constConfigVariableCoreself) -> Any: ...
    def output(self, ConfigVariableCoreself, ostreamout) -> Any: ...
    def setDefaultValue(self, *args, **kwargs): ...
    def setDescription(self, *args, **kwargs): ...
    def setFlags(self, *args, **kwargs): ...
    def setUsed(self, *args, **kwargs): ...
    def setValueType(self, *args, **kwargs): ...
    def set_default_value(self, constConfigVariableCoreself, strdefault_value) -> Any: ...
    def set_description(self, constConfigVariableCoreself, strdescription) -> Any: ...
    def set_flags(self, constConfigVariableCoreself, intflags) -> Any: ...
    def set_used(self, constConfigVariableCoreself) -> Any: ...
    def set_value_type(self, constConfigVariableCoreself, intvalue_type) -> Any: ...
    def upcastToConfigFlags(self, *args, **kwargs): ...
    def upcast_to_ConfigFlags(self, constConfigVariableCoreself) -> Any: ...
    def write(self, ConfigVariableCoreself, ostreamout) -> Any: ...

class ConfigVariableDouble(ConfigVariable):
    DtoolClassDict: ClassVar[dict] = ...
    default_value: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constConfigVariableDoubleself, doublevalue) -> Any: ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_default_value(self, ConfigVariableDoubleself) -> Any: ...
    def get_value(self, ConfigVariableDoubleself) -> Any: ...
    def get_word(self, ConfigVariableDoubleself, intn) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_value(self, constConfigVariableDoubleself, doublevalue) -> Any: ...
    def set_word(self, constConfigVariableDoubleself, intn, doublevalue) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __float__(self) -> float: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...

class ConfigVariableFilename(ConfigVariable):
    DtoolClassDict: ClassVar[dict] = ...
    default_value: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Fspath(self, *args, **kwargs): ...
    def assign(self, constConfigVariableFilenameself, constFilenamevalue) -> Any: ...
    def cStr(self, *args, **kwargs): ...
    def c_str(self, ConfigVariableFilenameself) -> Any: ...
    def empty(self, ConfigVariableFilenameself) -> Any: ...
    def getBasename(self, *args, **kwargs): ...
    def getBasenameWoExtension(self, *args, **kwargs): ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getDirname(self, *args, **kwargs): ...
    def getExtension(self, *args, **kwargs): ...
    def getFullpath(self, *args, **kwargs): ...
    def getFullpathWoExtension(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_basename(self, ConfigVariableFilenameself) -> Any: ...
    def get_basename_wo_extension(self, ConfigVariableFilenameself) -> Any: ...
    def get_default_value(self, ConfigVariableFilenameself) -> Any: ...
    def get_dirname(self, ConfigVariableFilenameself) -> Any: ...
    def get_extension(self, ConfigVariableFilenameself) -> Any: ...
    def get_fullpath(self, ConfigVariableFilenameself) -> Any: ...
    def get_fullpath_wo_extension(self, ConfigVariableFilenameself) -> Any: ...
    def get_value(self, ConfigVariableFilenameself) -> Any: ...
    def get_word(self, ConfigVariableFilenameself, intn) -> Any: ...
    def length(self, ConfigVariableFilenameself) -> Any: ...
    def operatorTypecast(self, *args, **kwargs): ...
    def operator_typecast(self, ConfigVariableFilenameself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_value(self, constConfigVariableFilenameself, constFilenamevalue) -> Any: ...
    def set_word(self, constConfigVariableFilenameself, intn, constFilenamevalue) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __fspath__(self, ConfigVariableFilenameself) -> Any: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class ConfigVariableInt(ConfigVariable):
    DtoolClassDict: ClassVar[dict] = ...
    default_value: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constConfigVariableIntself, intvalue) -> Any: ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_default_value(self, ConfigVariableIntself) -> Any: ...
    def get_value(self, ConfigVariableIntself) -> Any: ...
    def get_word(self, ConfigVariableIntself, intn) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_value(self, constConfigVariableIntself, intvalue) -> Any: ...
    def set_word(self, constConfigVariableIntself, intn, intvalue) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __int__(self) -> int: ...
    def __len__(self) -> int: ...

class ConfigVariableInt64(ConfigVariable):
    DtoolClassDict: ClassVar[dict] = ...
    default_value: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constConfigVariableInt64self, longvalue) -> Any: ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_default_value(self, ConfigVariableInt64self) -> Any: ...
    def get_value(self, ConfigVariableInt64self) -> Any: ...
    def get_word(self, ConfigVariableInt64self, intn) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_value(self, constConfigVariableInt64self, longvalue) -> Any: ...
    def set_word(self, constConfigVariableInt64self, intn, longvalue) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __int__(self) -> int: ...
    def __len__(self) -> int: ...

class ConfigVariableList(ConfigVariableBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getNumUniqueValues(self, *args, **kwargs): ...
    def getNumValues(self, *args, **kwargs): ...
    def getStringValue(self, *args, **kwargs): ...
    def getUniqueValue(self, *args, **kwargs): ...
    def get_num_unique_values(self, ConfigVariableListself) -> Any: ...
    def get_num_values(self, ConfigVariableListself) -> Any: ...
    def get_string_value(self, ConfigVariableListself, intn) -> Any: ...
    def get_unique_value(self, ConfigVariableListself, intn) -> Any: ...
    def output(self, ConfigVariableListself, ostreamout) -> Any: ...
    def write(self, ConfigVariableListself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...

class ConfigVariableManager(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    variables: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getNumVariables(self, *args, **kwargs): ...
    def getVariable(self, *args, **kwargs): ...
    def getVariableName(self, *args, **kwargs): ...
    def getVariables(self, *args, **kwargs): ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_num_variables(self, ConfigVariableManagerself) -> Any: ...
    def get_variable(self, ConfigVariableManagerself, intn) -> Any: ...
    def get_variable_name(self, ConfigVariableManagerself, intn) -> Any: ...
    def get_variables(self, *args, **kwargs): ...
    def isVariableUsed(self, *args, **kwargs): ...
    def is_variable_used(self, ConfigVariableManagerself, intn) -> Any: ...
    def listDynamicVariables(self, *args, **kwargs): ...
    def listUnusedVariables(self, *args, **kwargs): ...
    def listVariables(self, *args, **kwargs): ...
    def list_dynamic_variables(self, ConfigVariableManagerself) -> Any: ...
    def list_unused_variables(self, ConfigVariableManagerself) -> Any: ...
    def list_variables(self, ConfigVariableManagerself) -> Any: ...
    def makeVariable(self, *args, **kwargs): ...
    def makeVariableTemplate(self, *args, **kwargs): ...
    def make_variable(self, constConfigVariableManagerself, strname) -> Any: ...
    def make_variable_template(
        self, constConfigVariableManagerself, strpattern, inttype, strdefault_value, strdescription, intflags
    ) -> Any: ...
    def output(self, ConfigVariableManagerself, ostreamout) -> Any: ...
    def write(self, ConfigVariableManagerself, ostreamout) -> Any: ...
    def writePrcVariables(self, *args, **kwargs): ...
    def write_prc_variables(self, ConfigVariableManagerself, ostreamout) -> Any: ...

class ConfigVariableSearchPath(ConfigVariableBase):
    DtoolClassDict: ClassVar[dict] = ...
    default_value: Incomplete
    directories: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def appendDirectory(self, *args, **kwargs): ...
    def appendPath(self, *args, **kwargs): ...
    def append_directory(self, constConfigVariableSearchPathself, constFilenamedirectory) -> Any: ...
    @overload
    def append_path(self, constConfigVariableSearchPathself, strpath, strseparator) -> Any: ...
    @overload
    def append_path(self, constConfigVariableSearchPathself, constDSearchPathpath) -> Any: ...
    def clear(self, constConfigVariableSearchPathself) -> Any: ...
    def clearLocalValue(self, *args, **kwargs): ...
    def clear_local_value(self, constConfigVariableSearchPathself) -> Any: ...
    def findAllFiles(self, *args, **kwargs): ...
    def findFile(self, *args, **kwargs): ...
    @overload
    def find_all_files(self, ConfigVariableSearchPathself, constFilenamefilename) -> Any: ...
    @overload
    def find_all_files(self, ConfigVariableSearchPathself, constFilenamefilename, Resultsresults) -> Any: ...
    @overload
    def find_all_files(self) -> Any: ...
    def find_file(self, ConfigVariableSearchPathself, constFilenamefilename) -> Any: ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getDirectories(self, *args, **kwargs): ...
    def getDirectory(self, *args, **kwargs): ...
    def getNumDirectories(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def get_default_value(self, ConfigVariableSearchPathself) -> Any: ...
    def get_directories(self, *args, **kwargs): ...
    def get_directory(self, ConfigVariableSearchPathself, intn) -> Any: ...
    def get_num_directories(self, ConfigVariableSearchPathself) -> Any: ...
    def get_value(self, ConfigVariableSearchPathself) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, ConfigVariableSearchPathself) -> Any: ...
    def operatorTypecastDSearchPath(self, *args, **kwargs): ...
    def operator_typecast_DSearchPath(self, ConfigVariableSearchPathself) -> Any: ...
    def output(self, ConfigVariableSearchPathself, ostreamout) -> Any: ...
    def prependDirectory(self, *args, **kwargs): ...
    def prependPath(self, *args, **kwargs): ...
    def prepend_directory(self, constConfigVariableSearchPathself, constFilenamedirectory) -> Any: ...
    def prepend_path(self, constConfigVariableSearchPathself, constDSearchPathpath) -> Any: ...
    def write(self, ConfigVariableSearchPathself, ostreamout) -> Any: ...

class ConfigVariableString(ConfigVariable):
    DtoolClassDict: ClassVar[dict] = ...
    default_value: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constConfigVariableStringself, strvalue) -> Any: ...
    def cStr(self, *args, **kwargs): ...
    def c_str(self, ConfigVariableStringself) -> Any: ...
    def empty(self, ConfigVariableStringself) -> Any: ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_default_value(self, ConfigVariableStringself) -> Any: ...
    def get_value(self, ConfigVariableStringself) -> Any: ...
    def get_word(self, ConfigVariableStringself, intn) -> Any: ...
    def length(self, ConfigVariableStringself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_value(self, constConfigVariableStringself, strvalue) -> Any: ...
    def set_word(self, constConfigVariableStringself, intn, strvalue) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class ConstPointerToArrayDouble(PointerToArrayBase_double):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, doubleparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayFloat(PointerToArrayBase_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, floatparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayInt(PointerToArrayBase_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, intparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayLMatrix3d(PointerToArrayBase_LMatrix3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix3dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayLMatrix3f(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayLVecBase2d(PointerToArrayBase_LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayLVecBase2f(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayLVecBase2i(PointerToArrayBase_LVecBase2i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2iparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayLVecBase3d(PointerToArrayBase_LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayLVecBase3f(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayLVecBase3i(PointerToArrayBase_LVecBase3i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3iparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayUnalignedLMatrix4d(PointerToArrayBase_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix4dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayUnalignedLMatrix4f(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayUnalignedLVecBase4d(PointerToArrayBase_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayUnalignedLVecBase4f(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayUnalignedLVecBase4i(PointerToArrayBase_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4iparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayUnsignedChar(PointerToArrayBase_unsigned_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, intparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArrayUnsignedShortInt(PointerToArrayBase_unsigned_short_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, intparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_LMatrix3d(PointerToArrayBase_LMatrix3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix3dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_LMatrix3f(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_LVecBase2d(PointerToArrayBase_LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_LVecBase2f(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_LVecBase2i(PointerToArrayBase_LVecBase2i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase2iparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_LVecBase3d(PointerToArrayBase_LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_LVecBase3f(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_LVecBase3i(PointerToArrayBase_LVecBase3i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase3iparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_UnalignedLMatrix4d(PointerToArrayBase_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix4dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_UnalignedLMatrix4f(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLMatrix4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_UnalignedLVecBase4d(PointerToArrayBase_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4dparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_UnalignedLVecBase4f(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4fparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_UnalignedLVecBase4i(PointerToArrayBase_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, constLVecBase4iparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_double(PointerToArrayBase_double):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, doubleparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_float(PointerToArrayBase_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, floatparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_int(PointerToArrayBase_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, intparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_unsigned_char(PointerToArrayBase_unsigned_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, intparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class ConstPointerToArray_unsigned_short_int(PointerToArrayBase_unsigned_short_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constConstPointerToArrayself) -> Any: ...
    def count(self, ConstPointerToArrayself, intparam0) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, ConstPointerToArrayself) -> Any: ...
    def get_element(self, ConstPointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_ref_count(self, ConstPointerToArrayself) -> Any: ...
    def get_subdata(self, ConstPointerToArrayself, intn, intcount) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, ConstPointerToArrayself, objectmemo) -> Any: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, ConstPointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...

class CopyOnWriteObject(CachedTypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def cacheRef(self, *args, **kwargs): ...
    def cacheUnref(self, *args, **kwargs): ...
    @overload
    def cache_ref(self, CopyOnWriteObjectself) -> Any: ...
    @overload
    def cache_ref(self) -> Any: ...
    @overload
    def cache_unref(self, CopyOnWriteObjectself) -> Any: ...
    @overload
    def cache_unref(self) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class CubicCurveseg(ParametricCurve):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class CullBinAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    bin_name: Incomplete
    class_slot: Incomplete
    draw_order: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getBinName(self, *args, **kwargs): ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDrawOrder(self, *args, **kwargs): ...
    def get_bin_name(self, CullBinAttribself) -> Any: ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_draw_order(self, CullBinAttribself) -> Any: ...
    @staticmethod
    def make(strbin_name, intdraw_order) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class CullBinEnums(dtoolconfig.DTOOL_SUPER_BASE):
    BTBackToFront: ClassVar[int] = ...
    BTFixed: ClassVar[int] = ...
    BTFrontToBack: ClassVar[int] = ...
    BTInvalid: ClassVar[int] = ...
    BTStateSorted: ClassVar[int] = ...
    BTUnsorted: ClassVar[int] = ...
    BT_back_to_front: ClassVar[int] = ...
    BT_fixed: ClassVar[int] = ...
    BT_front_to_back: ClassVar[int] = ...
    BT_invalid: ClassVar[int] = ...
    BT_state_sorted: ClassVar[int] = ...
    BT_unsorted: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CullBinManager(CullBinEnums):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addBin(self, *args, **kwargs): ...
    def add_bin(self, constCullBinManagerself, strname, inttype, intsort) -> Any: ...
    def findBin(self, *args, **kwargs): ...
    def find_bin(self, CullBinManagerself, strname) -> Any: ...
    def getBin(self, *args, **kwargs): ...
    def getBinActive(self, *args, **kwargs): ...
    def getBinFlashActive(self, *args, **kwargs): ...
    def getBinFlashColor(self, *args, **kwargs): ...
    def getBinName(self, *args, **kwargs): ...
    def getBinSort(self, *args, **kwargs): ...
    def getBinType(self, *args, **kwargs): ...
    def getBins(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getNumBins(self, *args, **kwargs): ...
    def get_bin(self, CullBinManagerself, intn) -> Any: ...
    @overload
    def get_bin_active(self, CullBinManagerself, strname) -> Any: ...
    @overload
    def get_bin_active(self, CullBinManagerself, intbin_index) -> Any: ...
    def get_bin_flash_active(self, CullBinManagerself, intbin_index) -> Any: ...
    def get_bin_flash_color(self, CullBinManagerself, intbin_index) -> Any: ...
    def get_bin_name(self, CullBinManagerself, intbin_index) -> Any: ...
    @overload
    def get_bin_sort(self, CullBinManagerself, strname) -> Any: ...
    @overload
    def get_bin_sort(self, CullBinManagerself, intbin_index) -> Any: ...
    @overload
    def get_bin_type(self, CullBinManagerself, strname) -> Any: ...
    @overload
    def get_bin_type(self, CullBinManagerself, intbin_index) -> Any: ...
    def get_bins(self, *args, **kwargs): ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_num_bins(self, CullBinManagerself) -> Any: ...
    def removeBin(self, *args, **kwargs): ...
    def remove_bin(self, constCullBinManagerself, intbin_index) -> Any: ...
    def setBinActive(self, *args, **kwargs): ...
    def setBinFlashActive(self, *args, **kwargs): ...
    def setBinFlashColor(self, *args, **kwargs): ...
    def setBinSort(self, *args, **kwargs): ...
    def setBinType(self, *args, **kwargs): ...
    @overload
    def set_bin_active(self, constCullBinManagerself, strname, boolactive) -> Any: ...
    @overload
    def set_bin_active(self, constCullBinManagerself, intbin_index, boolactive) -> Any: ...
    def set_bin_flash_active(self, constCullBinManagerself, intbin_index, boolactive) -> Any: ...
    def set_bin_flash_color(self, constCullBinManagerself, intbin_index, constLVecBase4fcolor) -> Any: ...
    @overload
    def set_bin_sort(self, constCullBinManagerself, strname, intsort) -> Any: ...
    @overload
    def set_bin_sort(self, constCullBinManagerself, intbin_index, intsort) -> Any: ...
    @overload
    def set_bin_type(self, constCullBinManagerself, strname, inttype) -> Any: ...
    @overload
    def set_bin_type(self, constCullBinManagerself, intbin_index, inttype) -> Any: ...
    def write(self, CullBinManagerself, ostreamout) -> Any: ...

class CullFaceAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    MCullClockwise: ClassVar[int] = ...
    MCullCounterClockwise: ClassVar[int] = ...
    MCullNone: ClassVar[int] = ...
    MCullUnchanged: ClassVar[int] = ...
    M_cull_clockwise: ClassVar[int] = ...
    M_cull_counter_clockwise: ClassVar[int] = ...
    M_cull_none: ClassVar[int] = ...
    M_cull_unchanged: ClassVar[int] = ...
    class_slot: Incomplete
    effective_mode: Incomplete
    mode: Incomplete
    reverse: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getActualMode(self, *args, **kwargs): ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getEffectiveMode(self, *args, **kwargs): ...
    def getReverse(self, *args, **kwargs): ...
    def get_actual_mode(self, CullFaceAttribself) -> Any: ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_effective_mode(self, CullFaceAttribself) -> Any: ...
    def get_reverse(self, CullFaceAttribself) -> Any: ...
    @staticmethod
    def make(intmode) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeReverse(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_reverse() -> Any: ...

class CullResult(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def draw(self, constCullResultself, Threadcurrent_thread) -> Any: ...
    def finishCull(self, *args, **kwargs): ...
    def finish_cull(self, constCullResultself, SceneSetupscene_setup, Threadcurrent_thread) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def makeNext(self, *args, **kwargs): ...
    def makeResultGraph(self, *args, **kwargs): ...
    def make_next(self, CullResultself) -> Any: ...
    def make_result_graph(self, constCullResultself) -> Any: ...

class CullTraverser(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def doTraverse(self, *args, **kwargs): ...
    def do_traverse(self, constCullTraverserself, CullTraverserDatadata) -> Any: ...
    def drawBoundingVolume(self, *args, **kwargs): ...
    def draw_bounding_volume(
        self, CullTraverserself, constBoundingVolumevol, constTransformStateinternal_transform
    ) -> Any: ...
    def endTraverse(self, *args, **kwargs): ...
    def end_traverse(self, constCullTraverserself) -> Any: ...
    @staticmethod
    def flushLevel(*args, **kwargs): ...
    @staticmethod
    def flush_level() -> Any: ...
    def getCameraMask(self, *args, **kwargs): ...
    def getCameraTransform(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCurrentThread(self, *args, **kwargs): ...
    def getDepthOffsetDecals(self, *args, **kwargs): ...
    def getEffectiveIncompleteRender(self, *args, **kwargs): ...
    def getFakeViewFrustumCull(self, *args, **kwargs): ...
    def getGsg(self, *args, **kwargs): ...
    def getInitialState(self, *args, **kwargs): ...
    def getScene(self, *args, **kwargs): ...
    def getTagStateKey(self, *args, **kwargs): ...
    def getViewFrustum(self, *args, **kwargs): ...
    def getWorldTransform(self, *args, **kwargs): ...
    def get_camera_mask(self, CullTraverserself) -> Any: ...
    def get_camera_transform(self, CullTraverserself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_current_thread(self, CullTraverserself) -> Any: ...
    def get_depth_offset_decals(self, CullTraverserself) -> Any: ...
    def get_effective_incomplete_render(self, CullTraverserself) -> Any: ...
    def get_fake_view_frustum_cull(self, CullTraverserself) -> Any: ...
    def get_gsg(self, CullTraverserself) -> Any: ...
    def get_initial_state(self, CullTraverserself) -> Any: ...
    def get_scene(self, CullTraverserself) -> Any: ...
    def get_tag_state_key(self, CullTraverserself) -> Any: ...
    def get_view_frustum(self, CullTraverserself) -> Any: ...
    def get_world_transform(self, CullTraverserself) -> Any: ...
    def hasTagStateKey(self, *args, **kwargs): ...
    def has_tag_state_key(self, CullTraverserself) -> Any: ...
    def setCameraMask(self, *args, **kwargs): ...
    def setScene(self, *args, **kwargs): ...
    def setViewFrustum(self, *args, **kwargs): ...
    def set_camera_mask(self, constCullTraverserself, constBitMaskcamera_mask) -> Any: ...
    def set_scene(
        self, constCullTraverserself, SceneSetupscene_setup, GraphicsStateGuardianBasegsg, booldr_incomplete_render
    ) -> Any: ...
    def set_view_frustum(self, constCullTraverserself, GeometricBoundingVolumeview_frustum) -> Any: ...
    def traverse(self, constCullTraverserself, constNodePathroot) -> Any: ...
    def traverseBelow(self, *args, **kwargs): ...
    def traverse_below(self, constCullTraverserself, CullTraverserDatadata) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CullTraverserData(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    node_path: Incomplete
    view_frustum: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def applyTransform(self, *args, **kwargs): ...
    def applyTransformAndState(self, *args, **kwargs): ...
    def apply_transform(self, constCullTraverserDataself, constTransformStatenode_transform) -> Any: ...
    def apply_transform_and_state(self, constCullTraverserDataself, CullTraversertrav) -> Any: ...
    def getInternalTransform(self, *args, **kwargs): ...
    def getModelviewTransform(self, *args, **kwargs): ...
    def getNetTransform(self, *args, **kwargs): ...
    def get_internal_transform(self, CullTraverserDataself, constCullTraversertrav) -> Any: ...
    def get_modelview_transform(self, CullTraverserDataself, constCullTraversertrav) -> Any: ...
    def get_net_transform(self, CullTraverserDataself, constCullTraversertrav) -> Any: ...
    def isInView(self, *args, **kwargs): ...
    def isThisNodeHidden(self, *args, **kwargs): ...
    def is_in_view(self, CullTraverserDataself, constBitMaskcamera_mask) -> Any: ...
    def is_this_node_hidden(self, CullTraverserDataself, constBitMaskcamera_mask) -> Any: ...
    def node(self, CullTraverserDataself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CurveFitter(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addHpr(self, *args, **kwargs): ...
    def addXyz(self, *args, **kwargs): ...
    def addXyzHpr(self, *args, **kwargs): ...
    def add_hpr(self, constCurveFitterself, floatt, constLVecBase3fhpr) -> Any: ...
    def add_xyz(self, constCurveFitterself, floatt, constLVecBase3fxyz) -> Any: ...
    def add_xyz_hpr(self, constCurveFitterself, floatt, constLVecBase3fxyz, constLVecBase3fhpr) -> Any: ...
    def computeTangents(self, *args, **kwargs): ...
    def compute_tangents(self, constCurveFitterself, floatscale) -> Any: ...
    def desample(self, constCurveFitterself, floatfactor) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumSamples(self, *args, **kwargs): ...
    def getSampleHpr(self, *args, **kwargs): ...
    def getSampleT(self, *args, **kwargs): ...
    def getSampleTangent(self, *args, **kwargs): ...
    def getSampleXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_samples(self, CurveFitterself) -> Any: ...
    def get_sample_hpr(self, CurveFitterself, intn) -> Any: ...
    def get_sample_t(self, CurveFitterself, intn) -> Any: ...
    def get_sample_tangent(self, CurveFitterself, intn) -> Any: ...
    def get_sample_xyz(self, CurveFitterself, intn) -> Any: ...
    def makeHermite(self, *args, **kwargs): ...
    def makeNurbs(self, *args, **kwargs): ...
    def make_hermite(self, CurveFitterself) -> Any: ...
    def make_nurbs(self, CurveFitterself) -> Any: ...
    def output(self, CurveFitterself, ostreamout) -> Any: ...
    def removeSamples(self, *args, **kwargs): ...
    def remove_samples(self, constCurveFitterself, intbegin, intend) -> Any: ...
    def reset(self, constCurveFitterself) -> Any: ...
    def sample(self, constCurveFitterself, ParametricCurveCollectioncurves, intcount) -> Any: ...
    def sortPoints(self, *args, **kwargs): ...
    def sort_points(self, constCurveFitterself) -> Any: ...
    def wrapHpr(self, *args, **kwargs): ...
    def wrap_hpr(self, constCurveFitterself) -> Any: ...
    def write(self, CurveFitterself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DSearchPath(dtoolconfig.DTOOL_SUPER_BASE):
    class Results(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def assign(self, constResultsself, constResultscopy) -> Any: ...
        def clear(self, constResultsself) -> Any: ...
        def getFile(self, *args, **kwargs): ...
        def getNumFiles(self, *args, **kwargs): ...
        def get_file(self, Resultsself, intn) -> Any: ...
        def get_num_files(self, Resultsself) -> Any: ...
        def output(self, Resultsself, ostreamout) -> Any: ...
        def write(self, Resultsself, ostreamout, intindent_level) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    DtoolClassDict: ClassVar[dict] = ...
    directories: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def appendDirectory(self, *args, **kwargs): ...
    def appendPath(self, *args, **kwargs): ...
    def append_directory(self, constDSearchPathself, constFilenamedirectory) -> Any: ...
    @overload
    def append_path(self, constDSearchPathself, strpath, strseparator) -> Any: ...
    @overload
    def append_path(self, constDSearchPathself, constDSearchPathpath) -> Any: ...
    def assign(self, constDSearchPathself, constDSearchPathcopy) -> Any: ...
    def clear(self, constDSearchPathself) -> Any: ...
    def findAllFiles(self, *args, **kwargs): ...
    def findFile(self, *args, **kwargs): ...
    @overload
    def find_all_files(self, DSearchPathself, constFilenamefilename) -> Any: ...
    @overload
    def find_all_files(self, DSearchPathself, constFilenamefilename, Resultsresults) -> Any: ...
    @overload
    def find_all_files(self) -> Any: ...
    def find_file(self, DSearchPathself, constFilenamefilename) -> Any: ...
    def getDirectories(self, *args, **kwargs): ...
    def getDirectory(self, *args, **kwargs): ...
    def getNumDirectories(self, *args, **kwargs): ...
    def get_directories(self, *args, **kwargs): ...
    def get_directory(self, DSearchPathself, intn) -> Any: ...
    def get_num_directories(self, DSearchPathself) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, DSearchPathself) -> Any: ...
    def output(self, DSearchPathself, ostreamout, strseparator) -> Any: ...
    def prependDirectory(self, *args, **kwargs): ...
    def prependPath(self, *args, **kwargs): ...
    def prepend_directory(self, constDSearchPathself, constFilenamedirectory) -> Any: ...
    def prepend_path(self, constDSearchPathself, constDSearchPathpath) -> Any: ...
    @staticmethod
    def searchPath(*args, **kwargs): ...
    @staticmethod
    def search_path(constFilenamefilename, strpath, strseparator) -> Any: ...
    def write(self, DSearchPathself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DataGraphTraverser(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def collectLeftovers(self, *args, **kwargs): ...
    def collect_leftovers(self, constDataGraphTraverserself) -> Any: ...
    def getCurrentThread(self, *args, **kwargs): ...
    def get_current_thread(self, DataGraphTraverserself) -> Any: ...
    def traverse(self, constDataGraphTraverserself, PandaNodenode) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DataNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def writeConnections(self, *args, **kwargs): ...
    def writeInputs(self, *args, **kwargs): ...
    def writeOutputs(self, *args, **kwargs): ...
    def write_connections(self, DataNodeself, ostreamout) -> Any: ...
    def write_inputs(self, DataNodeself, ostreamout) -> Any: ...
    def write_outputs(self, DataNodeself, ostreamout) -> Any: ...

class Datagram(TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Bytes(self, *args, **kwargs): ...
    def addBeFloat32(self, *args, **kwargs): ...
    def addBeFloat64(self, *args, **kwargs): ...
    def addBeInt16(self, *args, **kwargs): ...
    def addBeInt32(self, *args, **kwargs): ...
    def addBeInt64(self, *args, **kwargs): ...
    def addBeUint16(self, *args, **kwargs): ...
    def addBeUint32(self, *args, **kwargs): ...
    def addBeUint64(self, *args, **kwargs): ...
    def addBlob(self, *args, **kwargs): ...
    def addBlob32(self, *args, **kwargs): ...
    def addBool(self, *args, **kwargs): ...
    def addFixedString(self, *args, **kwargs): ...
    def addFloat32(self, *args, **kwargs): ...
    def addFloat64(self, *args, **kwargs): ...
    def addInt16(self, *args, **kwargs): ...
    def addInt32(self, *args, **kwargs): ...
    def addInt64(self, *args, **kwargs): ...
    def addInt8(self, *args, **kwargs): ...
    def addStdfloat(self, *args, **kwargs): ...
    def addString(self, *args, **kwargs): ...
    def addString32(self, *args, **kwargs): ...
    def addUint16(self, *args, **kwargs): ...
    def addUint32(self, *args, **kwargs): ...
    def addUint64(self, *args, **kwargs): ...
    def addUint8(self, *args, **kwargs): ...
    def addWstring(self, *args, **kwargs): ...
    def addZString(self, *args, **kwargs): ...
    def add_be_float32(self, constDatagramself, floatvalue) -> Any: ...
    def add_be_float64(self, constDatagramself, doublevalue) -> Any: ...
    def add_be_int16(self, constDatagramself, intvalue) -> Any: ...
    def add_be_int32(self, constDatagramself, intvalue) -> Any: ...
    def add_be_int64(self, constDatagramself, longvalue) -> Any: ...
    def add_be_uint16(self, constDatagramself, intvalue) -> Any: ...
    def add_be_uint32(self, constDatagramself, intvalue) -> Any: ...
    def add_be_uint64(self, constDatagramself, longvalue) -> Any: ...
    def add_blob(self, constDatagramself, bytesparam0) -> Any: ...
    def add_blob32(self, constDatagramself, bytesparam0) -> Any: ...
    def add_bool(self, constDatagramself, boolvalue) -> Any: ...
    def add_fixed_string(self, constDatagramself, strstr, intsize) -> Any: ...
    def add_float32(self, constDatagramself, floatvalue) -> Any: ...
    def add_float64(self, constDatagramself, doublevalue) -> Any: ...
    def add_int16(self, constDatagramself, intvalue) -> Any: ...
    def add_int32(self, constDatagramself, intvalue) -> Any: ...
    def add_int64(self, constDatagramself, longvalue) -> Any: ...
    def add_int8(self, constDatagramself, intvalue) -> Any: ...
    def add_stdfloat(self, constDatagramself, floatvalue) -> Any: ...
    def add_string(self, constDatagramself, strstr) -> Any: ...
    def add_string32(self, constDatagramself, strstr) -> Any: ...
    def add_uint16(self, constDatagramself, intvalue) -> Any: ...
    def add_uint32(self, constDatagramself, intvalue) -> Any: ...
    def add_uint64(self, constDatagramself, longvalue) -> Any: ...
    def add_uint8(self, constDatagramself, intvalue) -> Any: ...
    def add_wstring(self, constDatagramself, unicodestr) -> Any: ...
    def add_z_string(self, constDatagramself, strstr) -> Any: ...
    def appendData(self, *args, **kwargs): ...
    def append_data(self, constDatagramself, bytesdata) -> Any: ...
    def assign(self, constDatagramself, constDatagramcopy) -> Any: ...
    def clear(self, constDatagramself) -> Any: ...
    def copyArray(self, *args, **kwargs): ...
    def copy_array(self, constDatagramself, ConstPointerToArraydata) -> Any: ...
    def dumpHex(self, *args, **kwargs): ...
    def dump_hex(self, Datagramself, ostreamout, intindent) -> Any: ...
    def getArray(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLength(self, *args, **kwargs): ...
    def getMessage(self, *args, **kwargs): ...
    def getStdfloatDouble(self, *args, **kwargs): ...
    def get_array(self, Datagramself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_length(self, Datagramself) -> Any: ...
    def get_message(self, Datagramself) -> Any: ...
    def get_stdfloat_double(self, Datagramself) -> Any: ...
    def modifyArray(self, *args, **kwargs): ...
    def modify_array(self, constDatagramself) -> Any: ...
    def output(self, Datagramself, ostreamout) -> Any: ...
    def padBytes(self, *args, **kwargs): ...
    def pad_bytes(self, constDatagramself, intsize) -> Any: ...
    def setArray(self, *args, **kwargs): ...
    def setStdfloatDouble(self, *args, **kwargs): ...
    def set_array(self, constDatagramself, PointerToArraydata) -> Any: ...
    def set_stdfloat_double(self, constDatagramself, boolstdfloat_double) -> Any: ...
    def write(self, Datagramself, ostreamout, intindent) -> Any: ...
    def __bytes__(self, Datagramself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, Datagramself) -> Any: ...

class DatagramBuffer(DatagramSink, DatagramGenerator):
    DtoolClassDict: ClassVar[dict] = ...
    data: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constDatagramBufferself) -> Any: ...
    def upcastToDatagramGenerator(self, *args, **kwargs): ...
    def upcastToDatagramSink(self, *args, **kwargs): ...
    def upcast_to_DatagramGenerator(self, constDatagramBufferself) -> Any: ...
    def upcast_to_DatagramSink(self, constDatagramBufferself) -> Any: ...

class DatagramGenerator(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getDatagram(self, *args, **kwargs): ...
    def getFile(self, *args, **kwargs): ...
    def getFilePos(self, *args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getTimestamp(self, *args, **kwargs): ...
    def getVfile(self, *args, **kwargs): ...
    def get_datagram(self, constDatagramGeneratorself, Datagramdata) -> Any: ...
    def get_file(self, constDatagramGeneratorself) -> Any: ...
    def get_file_pos(self, constDatagramGeneratorself) -> Any: ...
    def get_filename(self, constDatagramGeneratorself) -> Any: ...
    def get_timestamp(self, DatagramGeneratorself) -> Any: ...
    def get_vfile(self, constDatagramGeneratorself) -> Any: ...
    def isEof(self, *args, **kwargs): ...
    def isError(self, *args, **kwargs): ...
    def is_eof(self, constDatagramGeneratorself) -> Any: ...
    def is_error(self, constDatagramGeneratorself) -> Any: ...
    def saveDatagram(self, *args, **kwargs): ...
    def save_datagram(self, constDatagramGeneratorself, SubfileInfoinfo) -> Any: ...

class DatagramInputFile(DatagramGenerator):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constDatagramInputFileself) -> Any: ...
    def getStream(self, *args, **kwargs): ...
    def get_stream(self, constDatagramInputFileself) -> Any: ...
    @overload
    def open(self, constDatagramInputFileself, istreamin, constFilenamefilename) -> Any: ...
    @overload
    def open(self, constDatagramInputFileself, constFileReferencefile) -> Any: ...
    @overload
    def open(self, constDatagramInputFileself, constFilenamefilename) -> Any: ...

class DatagramIterator(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def extractBytes(self, *args, **kwargs): ...
    def extract_bytes(self, constDatagramIteratorself, intsize) -> Any: ...
    def getBeFloat32(self, *args, **kwargs): ...
    def getBeFloat64(self, *args, **kwargs): ...
    def getBeInt16(self, *args, **kwargs): ...
    def getBeInt32(self, *args, **kwargs): ...
    def getBeInt64(self, *args, **kwargs): ...
    def getBeUint16(self, *args, **kwargs): ...
    def getBeUint32(self, *args, **kwargs): ...
    def getBeUint64(self, *args, **kwargs): ...
    def getBlob(self, *args, **kwargs): ...
    def getBlob32(self, *args, **kwargs): ...
    def getBool(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCurrentIndex(self, *args, **kwargs): ...
    def getDatagram(self, *args, **kwargs): ...
    def getFixedString(self, *args, **kwargs): ...
    def getFloat32(self, *args, **kwargs): ...
    def getFloat64(self, *args, **kwargs): ...
    def getInt16(self, *args, **kwargs): ...
    def getInt32(self, *args, **kwargs): ...
    def getInt64(self, *args, **kwargs): ...
    def getInt8(self, *args, **kwargs): ...
    def getRemainingBytes(self, *args, **kwargs): ...
    def getRemainingSize(self, *args, **kwargs): ...
    def getStdfloat(self, *args, **kwargs): ...
    def getString(self, *args, **kwargs): ...
    def getString32(self, *args, **kwargs): ...
    def getUint16(self, *args, **kwargs): ...
    def getUint32(self, *args, **kwargs): ...
    def getUint64(self, *args, **kwargs): ...
    def getUint8(self, *args, **kwargs): ...
    def getWstring(self, *args, **kwargs): ...
    def getZString(self, *args, **kwargs): ...
    def get_be_float32(self, constDatagramIteratorself) -> Any: ...
    def get_be_float64(self, constDatagramIteratorself) -> Any: ...
    def get_be_int16(self, constDatagramIteratorself) -> Any: ...
    def get_be_int32(self, constDatagramIteratorself) -> Any: ...
    def get_be_int64(self, constDatagramIteratorself) -> Any: ...
    def get_be_uint16(self, constDatagramIteratorself) -> Any: ...
    def get_be_uint32(self, constDatagramIteratorself) -> Any: ...
    def get_be_uint64(self, constDatagramIteratorself) -> Any: ...
    def get_blob(self, constDatagramIteratorself) -> Any: ...
    def get_blob32(self, constDatagramIteratorself) -> Any: ...
    def get_bool(self, constDatagramIteratorself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_current_index(self, DatagramIteratorself) -> Any: ...
    def get_datagram(self, DatagramIteratorself) -> Any: ...
    def get_fixed_string(self, constDatagramIteratorself, intsize) -> Any: ...
    def get_float32(self, constDatagramIteratorself) -> Any: ...
    def get_float64(self, constDatagramIteratorself) -> Any: ...
    def get_int16(self, constDatagramIteratorself) -> Any: ...
    def get_int32(self, constDatagramIteratorself) -> Any: ...
    def get_int64(self, constDatagramIteratorself) -> Any: ...
    def get_int8(self, constDatagramIteratorself) -> Any: ...
    def get_remaining_bytes(self, DatagramIteratorself) -> Any: ...
    def get_remaining_size(self, DatagramIteratorself) -> Any: ...
    def get_stdfloat(self, constDatagramIteratorself) -> Any: ...
    def get_string(self, constDatagramIteratorself) -> Any: ...
    def get_string32(self, constDatagramIteratorself) -> Any: ...
    def get_uint16(self, constDatagramIteratorself) -> Any: ...
    def get_uint32(self, constDatagramIteratorself) -> Any: ...
    def get_uint64(self, constDatagramIteratorself) -> Any: ...
    def get_uint8(self, constDatagramIteratorself) -> Any: ...
    def get_wstring(self, constDatagramIteratorself) -> Any: ...
    def get_z_string(self, constDatagramIteratorself) -> Any: ...
    def output(self, DatagramIteratorself, ostreamout) -> Any: ...
    def peekInt16(self, *args, **kwargs): ...
    def peekUint16(self, *args, **kwargs): ...
    def peek_int16(self, constDatagramIteratorself) -> Any: ...
    def peek_uint16(self, constDatagramIteratorself) -> Any: ...
    def skipBytes(self, *args, **kwargs): ...
    def skip_bytes(self, constDatagramIteratorself, intsize) -> Any: ...
    def write(self, DatagramIteratorself, ostreamout, intindent) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DatagramOutputFile(DatagramSink):
    DtoolClassDict: ClassVar[dict] = ...
    stream: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constDatagramOutputFileself) -> Any: ...
    @overload
    def open(self, constDatagramOutputFileself, ostreamout, constFilenamefilename) -> Any: ...
    @overload
    def open(self, constDatagramOutputFileself, constFileReferencefile) -> Any: ...
    @overload
    def open(self, constDatagramOutputFileself, constFilenamefilename) -> Any: ...
    def writeHeader(self, *args, **kwargs): ...
    @overload
    def write_header(self, constDatagramOutputFileself, bytesheader) -> Any: ...
    @overload
    def write_header(self, constDatagramOutputFileself, strheader) -> Any: ...

class DatagramSink(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    file: Incomplete
    file_pos: Incomplete
    filename: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def copyDatagram(self, *args, **kwargs): ...
    @overload
    def copy_datagram(self, constDatagramSinkself, SubfileInforesult, constFilenamefilename) -> Any: ...
    @overload
    def copy_datagram(self, constDatagramSinkself, SubfileInforesult, constSubfileInfosource) -> Any: ...
    def flush(self, constDatagramSinkself) -> Any: ...
    def getFile(self, *args, **kwargs): ...
    def getFilePos(self, *args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def get_file(self, constDatagramSinkself) -> Any: ...
    def get_file_pos(self, constDatagramSinkself) -> Any: ...
    def get_filename(self, constDatagramSinkself) -> Any: ...
    def isError(self, *args, **kwargs): ...
    def is_error(self, constDatagramSinkself) -> Any: ...
    def putDatagram(self, *args, **kwargs): ...
    def put_datagram(self, constDatagramSinkself, constDatagramdata) -> Any: ...

class DecalEffect(RenderEffect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def make() -> Any: ...

class Decompressor(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    progress: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def decompress(self, constDecompressorself, constFilenamesource_file) -> Any: ...
    @overload
    def decompress(self, constDecompressorself, Ramfilesource_and_dest_file) -> Any: ...
    def getProgress(self, *args, **kwargs): ...
    def get_progress(self, Decompressorself) -> Any: ...
    @overload
    def initiate(self, constDecompressorself, constFilenamesource_file) -> Any: ...
    @overload
    def initiate(self, constDecompressorself, constFilenamesource_file, constFilenamedest_file) -> Any: ...
    def run(self, constDecompressorself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DepthBiasAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    clamp: Incomplete
    class_slot: Incomplete
    constant_factor: Incomplete
    slope_factor: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def make(floatslope_factor, floatconstant_factor, floatclamp) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class DepthOffsetAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    class_slot: Incomplete
    max_value: Incomplete
    min_value: Incomplete
    offset: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMaxValue(self, *args, **kwargs): ...
    def getMinValue(self, *args, **kwargs): ...
    def getOffset(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_max_value(self, DepthOffsetAttribself) -> Any: ...
    def get_min_value(self, DepthOffsetAttribself) -> Any: ...
    def get_offset(self, DepthOffsetAttribself) -> Any: ...
    @overload
    @staticmethod
    def make() -> Any: ...
    @overload
    @staticmethod
    def make(intoffset) -> Any: ...
    @overload
    @staticmethod
    def make(intoffset, floatmin_value, floatmax_value) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class DepthTestAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    class_slot: Incomplete
    mode: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_mode(self, DepthTestAttribself) -> Any: ...
    @staticmethod
    def make(intmode) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class DepthWriteAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    MOff: ClassVar[int] = ...
    MOn: ClassVar[int] = ...
    M_off: ClassVar[int] = ...
    M_on: ClassVar[int] = ...
    class_slot: Incomplete
    mode: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_mode(self, DepthWriteAttribself) -> Any: ...
    @staticmethod
    def make(intmode) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class DialNode(DataNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumDials(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_dials(self, DialNodeself) -> Any: ...
    def isDialKnown(self, *args, **kwargs): ...
    def isValid(self, *args, **kwargs): ...
    def is_dial_known(self, DialNodeself, intindex) -> Any: ...
    def is_valid(self, DialNodeself) -> Any: ...
    def readDial(self, *args, **kwargs): ...
    @overload
    def read_dial(self, constDialNodeself, intindex) -> Any: ...
    @overload
    def read_dial(self) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DirectionalLight(LightLensNode):
    DtoolClassDict: ClassVar[dict] = ...
    direction: Incomplete
    point: Incomplete
    specular_color: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearSpecularColor(self, *args, **kwargs): ...
    def clear_specular_color(self, constDirectionalLightself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDirection(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_direction(self, DirectionalLightself) -> Any: ...
    def get_point(self, DirectionalLightself) -> Any: ...
    def setDirection(self, *args, **kwargs): ...
    def setPoint(self, *args, **kwargs): ...
    def setSpecularColor(self, *args, **kwargs): ...
    def set_direction(self, constDirectionalLightself, constLVector3fdirection) -> Any: ...
    def set_point(self, constDirectionalLightself, constLPoint3fpoint) -> Any: ...
    def set_specular_color(self, constDirectionalLightself, constLVecBase4fcolor) -> Any: ...

class DisplayInformation(dtoolconfig.DTOOL_SUPER_BASE):
    DSCreateDeviceError: ClassVar[int] = ...
    DSCreateWindowError: ClassVar[int] = ...
    DSDirect3dCreateError: ClassVar[int] = ...
    DSSuccess: ClassVar[int] = ...
    DSUnknown: ClassVar[int] = ...
    DS_create_device_error: ClassVar[int] = ...
    DS_create_window_error: ClassVar[int] = ...
    DS_direct_3d_create_error: ClassVar[int] = ...
    DS_success: ClassVar[int] = ...
    DS_unknown: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAvailablePageFileSize(self, *args, **kwargs): ...
    def getAvailablePhysicalMemory(self, *args, **kwargs): ...
    def getAvailableProcessVirtualMemory(self, *args, **kwargs): ...
    def getCpuBrandIndex(self, *args, **kwargs): ...
    def getCpuBrandString(self, *args, **kwargs): ...
    def getCpuFrequency(self, *args, **kwargs): ...
    @staticmethod
    def getCpuTime(*args, **kwargs): ...
    def getCpuVendorString(self, *args, **kwargs): ...
    def getCpuVersionInformation(self, *args, **kwargs): ...
    def getCurrentCpuFrequency(self, *args, **kwargs): ...
    def getCurrentDisplayModeIndex(self, *args, **kwargs): ...
    def getDeviceId(self, *args, **kwargs): ...
    def getDisplayMode(self, *args, **kwargs): ...
    def getDisplayModeBitsPerPixel(self, *args, **kwargs): ...
    def getDisplayModeFullscreenOnly(self, *args, **kwargs): ...
    def getDisplayModeHeight(self, *args, **kwargs): ...
    def getDisplayModeRefreshRate(self, *args, **kwargs): ...
    def getDisplayModeWidth(self, *args, **kwargs): ...
    def getDisplayModes(self, *args, **kwargs): ...
    def getDisplayState(self, *args, **kwargs): ...
    def getDriverBuild(self, *args, **kwargs): ...
    def getDriverDateDay(self, *args, **kwargs): ...
    def getDriverDateMonth(self, *args, **kwargs): ...
    def getDriverDateYear(self, *args, **kwargs): ...
    def getDriverProduct(self, *args, **kwargs): ...
    def getDriverSubVersion(self, *args, **kwargs): ...
    def getDriverVersion(self, *args, **kwargs): ...
    def getMaximumCpuFrequency(self, *args, **kwargs): ...
    def getMaximumWindowHeight(self, *args, **kwargs): ...
    def getMaximumWindowWidth(self, *args, **kwargs): ...
    def getMemoryLoad(self, *args, **kwargs): ...
    def getNumCpuCores(self, *args, **kwargs): ...
    def getNumLogicalCpus(self, *args, **kwargs): ...
    def getOsPlatformId(self, *args, **kwargs): ...
    def getOsVersionBuild(self, *args, **kwargs): ...
    def getOsVersionMajor(self, *args, **kwargs): ...
    def getOsVersionMinor(self, *args, **kwargs): ...
    def getPageFaultCount(self, *args, **kwargs): ...
    def getPageFileSize(self, *args, **kwargs): ...
    def getPageFileUsage(self, *args, **kwargs): ...
    def getPeakPageFileUsage(self, *args, **kwargs): ...
    def getPeakProcessMemory(self, *args, **kwargs): ...
    def getPhysicalMemory(self, *args, **kwargs): ...
    def getProcessMemory(self, *args, **kwargs): ...
    def getProcessVirtualMemory(self, *args, **kwargs): ...
    def getShaderModel(self, *args, **kwargs): ...
    def getTextureMemory(self, *args, **kwargs): ...
    def getTotalDisplayModes(self, *args, **kwargs): ...
    def getVendorId(self, *args, **kwargs): ...
    def getVideoMemory(self, *args, **kwargs): ...
    def getWindowBitsPerPixel(self, *args, **kwargs): ...
    def get_available_page_file_size(self, constDisplayInformationself) -> Any: ...
    def get_available_physical_memory(self, constDisplayInformationself) -> Any: ...
    def get_available_process_virtual_memory(self, constDisplayInformationself) -> Any: ...
    def get_cpu_brand_index(self, constDisplayInformationself) -> Any: ...
    def get_cpu_brand_string(self, DisplayInformationself) -> Any: ...
    def get_cpu_frequency(self, constDisplayInformationself) -> Any: ...
    @staticmethod
    def get_cpu_time() -> Any: ...
    def get_cpu_vendor_string(self, DisplayInformationself) -> Any: ...
    def get_cpu_version_information(self, constDisplayInformationself) -> Any: ...
    def get_current_cpu_frequency(self, constDisplayInformationself) -> Any: ...
    def get_current_display_mode_index(self, DisplayInformationself) -> Any: ...
    def get_device_id(self, constDisplayInformationself) -> Any: ...
    def get_display_mode(self, constDisplayInformationself, intdisplay_index) -> Any: ...
    def get_display_mode_bits_per_pixel(self, constDisplayInformationself, intdisplay_index) -> Any: ...
    def get_display_mode_fullscreen_only(self, constDisplayInformationself, intdisplay_index) -> Any: ...
    def get_display_mode_height(self, constDisplayInformationself, intdisplay_index) -> Any: ...
    def get_display_mode_refresh_rate(self, constDisplayInformationself, intdisplay_index) -> Any: ...
    def get_display_mode_width(self, constDisplayInformationself, intdisplay_index) -> Any: ...
    def get_display_modes(self, *args, **kwargs): ...
    def get_display_state(self, constDisplayInformationself) -> Any: ...
    def get_driver_build(self, constDisplayInformationself) -> Any: ...
    def get_driver_date_day(self, constDisplayInformationself) -> Any: ...
    def get_driver_date_month(self, constDisplayInformationself) -> Any: ...
    def get_driver_date_year(self, constDisplayInformationself) -> Any: ...
    def get_driver_product(self, constDisplayInformationself) -> Any: ...
    def get_driver_sub_version(self, constDisplayInformationself) -> Any: ...
    def get_driver_version(self, constDisplayInformationself) -> Any: ...
    def get_maximum_cpu_frequency(self, constDisplayInformationself) -> Any: ...
    def get_maximum_window_height(self, constDisplayInformationself) -> Any: ...
    def get_maximum_window_width(self, constDisplayInformationself) -> Any: ...
    def get_memory_load(self, constDisplayInformationself) -> Any: ...
    def get_num_cpu_cores(self, constDisplayInformationself) -> Any: ...
    def get_num_logical_cpus(self, constDisplayInformationself) -> Any: ...
    def get_os_platform_id(self, constDisplayInformationself) -> Any: ...
    def get_os_version_build(self, constDisplayInformationself) -> Any: ...
    def get_os_version_major(self, constDisplayInformationself) -> Any: ...
    def get_os_version_minor(self, constDisplayInformationself) -> Any: ...
    def get_page_fault_count(self, constDisplayInformationself) -> Any: ...
    def get_page_file_size(self, constDisplayInformationself) -> Any: ...
    def get_page_file_usage(self, constDisplayInformationself) -> Any: ...
    def get_peak_page_file_usage(self, constDisplayInformationself) -> Any: ...
    def get_peak_process_memory(self, constDisplayInformationself) -> Any: ...
    def get_physical_memory(self, constDisplayInformationself) -> Any: ...
    def get_process_memory(self, constDisplayInformationself) -> Any: ...
    def get_process_virtual_memory(self, constDisplayInformationself) -> Any: ...
    def get_shader_model(self, constDisplayInformationself) -> Any: ...
    def get_texture_memory(self, constDisplayInformationself) -> Any: ...
    def get_total_display_modes(self, constDisplayInformationself) -> Any: ...
    def get_vendor_id(self, constDisplayInformationself) -> Any: ...
    def get_video_memory(self, constDisplayInformationself) -> Any: ...
    def get_window_bits_per_pixel(self, constDisplayInformationself) -> Any: ...
    def updateCpuFrequency(self, *args, **kwargs): ...
    def updateMemoryInformation(self, *args, **kwargs): ...
    def update_cpu_frequency(self, constDisplayInformationself, intprocessor_number) -> Any: ...
    def update_memory_information(self, constDisplayInformationself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DisplayMode(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    bits_per_pixel: Incomplete
    fullscreen_only: Incomplete
    height: Incomplete
    refresh_rate: Incomplete
    width: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def output(self, DisplayModeself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class DisplayRegion(TypedReferenceCount, DrawableRegion):
    DtoolClassDict: ClassVar[dict] = ...
    active: Incomplete
    camera: Incomplete
    cull_callback: Incomplete
    cull_traverser: Incomplete
    dimensions: Incomplete
    draw_callback: Incomplete
    incomplete_render: Incomplete
    lens_index: Incomplete
    pipe: Incomplete
    pixel_size: Incomplete
    scissor_enabled: Incomplete
    sort: Incomplete
    stereo: Incomplete
    stereo_channel: Incomplete
    target_tex_page: Incomplete
    tex_view_offset: Incomplete
    texture_reload_priority: Incomplete
    window: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearCullCallback(self, *args, **kwargs): ...
    def clearCullResult(self, *args, **kwargs): ...
    def clearDrawCallback(self, *args, **kwargs): ...
    def clear_cull_callback(self, constDisplayRegionself) -> Any: ...
    def clear_cull_result(self, constDisplayRegionself) -> Any: ...
    def clear_draw_callback(self, constDisplayRegionself) -> Any: ...
    def getBottom(self, *args, **kwargs): ...
    def getCamera(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCullCallback(self, *args, **kwargs): ...
    def getCullTraverser(self, *args, **kwargs): ...
    def getDimensions(self, *args, **kwargs): ...
    def getDrawCallback(self, *args, **kwargs): ...
    def getIncompleteRender(self, *args, **kwargs): ...
    def getLeft(self, *args, **kwargs): ...
    def getLensIndex(self, *args, **kwargs): ...
    def getNumRegions(self, *args, **kwargs): ...
    def getPipe(self, *args, **kwargs): ...
    def getPixelHeight(self, *args, **kwargs): ...
    def getPixelSize(self, *args, **kwargs): ...
    def getPixelWidth(self, *args, **kwargs): ...
    def getRight(self, *args, **kwargs): ...
    def getScissorEnabled(self, *args, **kwargs): ...
    def getScreenshot(self, *args, **kwargs): ...
    def getSort(self, *args, **kwargs): ...
    def getStereoChannel(self, *args, **kwargs): ...
    def getTargetTexPage(self, *args, **kwargs): ...
    def getTexViewOffset(self, *args, **kwargs): ...
    def getTextureReloadPriority(self, *args, **kwargs): ...
    def getTop(self, *args, **kwargs): ...
    def getWindow(self, *args, **kwargs): ...
    def get_bottom(self, DisplayRegionself, inti) -> Any: ...
    def get_camera(self, DisplayRegionself, Threadcurrent_thread) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_cull_callback(self, DisplayRegionself) -> Any: ...
    def get_cull_traverser(self, constDisplayRegionself) -> Any: ...
    def get_dimensions(self, DisplayRegionself, inti) -> Any: ...
    def get_draw_callback(self, DisplayRegionself) -> Any: ...
    def get_incomplete_render(self, DisplayRegionself) -> Any: ...
    def get_left(self, DisplayRegionself, inti) -> Any: ...
    def get_lens_index(self, DisplayRegionself) -> Any: ...
    def get_num_regions(self, DisplayRegionself) -> Any: ...
    def get_pipe(self, DisplayRegionself) -> Any: ...
    def get_pixel_height(self, DisplayRegionself, inti) -> Any: ...
    def get_pixel_size(self, DisplayRegionself, inti) -> Any: ...
    def get_pixel_width(self, DisplayRegionself, inti) -> Any: ...
    def get_right(self, DisplayRegionself, inti) -> Any: ...
    def get_scissor_enabled(self, DisplayRegionself) -> Any: ...
    @overload
    def get_screenshot(self, constDisplayRegionself) -> Any: ...
    @overload
    def get_screenshot(self, constDisplayRegionself, PNMImageimage) -> Any: ...
    def get_sort(self, DisplayRegionself) -> Any: ...
    def get_stereo_channel(self, DisplayRegionself) -> Any: ...
    def get_target_tex_page(self, DisplayRegionself) -> Any: ...
    def get_tex_view_offset(self, DisplayRegionself) -> Any: ...
    def get_texture_reload_priority(self, DisplayRegionself) -> Any: ...
    def get_top(self, DisplayRegionself, inti) -> Any: ...
    def get_window(self, DisplayRegionself) -> Any: ...
    def isActive(self, *args, **kwargs): ...
    def isStereo(self, *args, **kwargs): ...
    def is_active(self, DisplayRegionself) -> Any: ...
    def is_stereo(self, DisplayRegionself) -> Any: ...
    def makeCullResultGraph(self, *args, **kwargs): ...
    @staticmethod
    def makeScreenshotFilename(*args, **kwargs): ...
    def make_cull_result_graph(self, constDisplayRegionself) -> Any: ...
    @staticmethod
    def make_screenshot_filename(strprefix) -> Any: ...
    def output(self, DisplayRegionself, ostreamout) -> Any: ...
    def saveScreenshot(self, *args, **kwargs): ...
    def saveScreenshotDefault(self, *args, **kwargs): ...
    def save_screenshot(self, constDisplayRegionself, constFilenamefilename, strimage_comment) -> Any: ...
    def save_screenshot_default(self, constDisplayRegionself, strprefix) -> Any: ...
    def setActive(self, *args, **kwargs): ...
    def setCamera(self, *args, **kwargs): ...
    def setCubeMapIndex(self, *args, **kwargs): ...
    def setCullCallback(self, *args, **kwargs): ...
    def setCullTraverser(self, *args, **kwargs): ...
    def setDepthRange(self, *args, **kwargs): ...
    def setDimensions(self, *args, **kwargs): ...
    def setDrawCallback(self, *args, **kwargs): ...
    def setIncompleteRender(self, *args, **kwargs): ...
    def setLensIndex(self, *args, **kwargs): ...
    def setNumRegions(self, *args, **kwargs): ...
    def setScissorEnabled(self, *args, **kwargs): ...
    def setSort(self, *args, **kwargs): ...
    def setStereoChannel(self, *args, **kwargs): ...
    def setTargetTexPage(self, *args, **kwargs): ...
    def setTexViewOffset(self, *args, **kwargs): ...
    def setTextureReloadPriority(self, *args, **kwargs): ...
    def set_active(self, constDisplayRegionself, boolactive) -> Any: ...
    def set_camera(self, constDisplayRegionself, constNodePathcamera) -> Any: ...
    def set_cube_map_index(self, constDisplayRegionself, intcube_map_index) -> Any: ...
    def set_cull_callback(self, constDisplayRegionself, CallbackObjectobject) -> Any: ...
    def set_cull_traverser(self, constDisplayRegionself, CullTraversertrav) -> Any: ...
    def set_depth_range(self, constDisplayRegionself, floatnear, floatfar) -> Any: ...
    @overload
    def set_dimensions(self, constDisplayRegionself, constLVecBase4fdimensions) -> Any: ...
    @overload
    def set_dimensions(self, constDisplayRegionself, inti, constLVecBase4fdimensions) -> Any: ...
    @overload
    def set_dimensions(self, constDisplayRegionself, floatl, floatr, floatb, floatt) -> Any: ...
    @overload
    def set_dimensions(self, constDisplayRegionself, inti, floatl, floatr, floatb, floatt) -> Any: ...
    def set_draw_callback(self, constDisplayRegionself, CallbackObjectobject) -> Any: ...
    @overload
    def set_incomplete_render(self, constDisplayRegionself, boolincomplete_render) -> Any: ...
    @overload
    def set_incomplete_render(self) -> Any: ...
    def set_lens_index(self, constDisplayRegionself, intindex) -> Any: ...
    def set_num_regions(self, constDisplayRegionself, inti) -> Any: ...
    def set_scissor_enabled(self, constDisplayRegionself, boolscissor_enabled) -> Any: ...
    def set_sort(self, constDisplayRegionself, intsort) -> Any: ...
    def set_stereo_channel(self, constDisplayRegionself, intstereo_channel) -> Any: ...
    def set_target_tex_page(self, constDisplayRegionself, intpage) -> Any: ...
    def set_tex_view_offset(self, constDisplayRegionself, inttex_view_offset) -> Any: ...
    def set_texture_reload_priority(self, constDisplayRegionself, inttexture_reload_priority) -> Any: ...
    def upcastToDrawableRegion(self, *args, **kwargs): ...
    def upcastToTypedReferenceCount(self, *args, **kwargs): ...
    def upcast_to_DrawableRegion(self, constDisplayRegionself) -> Any: ...
    def upcast_to_TypedReferenceCount(self, constDisplayRegionself) -> Any: ...

class DisplayRegionCullCallbackData(CallbackData):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getSceneSetup(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_scene_setup(self, DisplayRegionCullCallbackDataself) -> Any: ...

class DisplayRegionDrawCallbackData(CallbackData):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCullResult(self, *args, **kwargs): ...
    def getSceneSetup(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_cull_result(self, DisplayRegionDrawCallbackDataself) -> Any: ...
    def get_scene_setup(self, DisplayRegionDrawCallbackDataself) -> Any: ...

class DisplaySearchParameters(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def setMaximumBitsPerPixel(self, *args, **kwargs): ...
    def setMaximumHeight(self, *args, **kwargs): ...
    def setMaximumWidth(self, *args, **kwargs): ...
    def setMinimumBitsPerPixel(self, *args, **kwargs): ...
    def setMinimumHeight(self, *args, **kwargs): ...
    def setMinimumWidth(self, *args, **kwargs): ...
    def set_maximum_bits_per_pixel(self, constDisplaySearchParametersself, intmaximum_bits_per_pixel) -> Any: ...
    def set_maximum_height(self, constDisplaySearchParametersself, intmaximum_height) -> Any: ...
    def set_maximum_width(self, constDisplaySearchParametersself, intmaximum_width) -> Any: ...
    def set_minimum_bits_per_pixel(self, constDisplaySearchParametersself, intminimum_bits_per_pixel) -> Any: ...
    def set_minimum_height(self, constDisplaySearchParametersself, intminimum_height) -> Any: ...
    def set_minimum_width(self, constDisplaySearchParametersself, intminimum_width) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DocumentSpec(dtoolconfig.DTOOL_SUPER_BASE):
    CCAllowCache: ClassVar[int] = ...
    CCNoCache: ClassVar[int] = ...
    CCRevalidate: ClassVar[int] = ...
    CC_allow_cache: ClassVar[int] = ...
    CC_no_cache: ClassVar[int] = ...
    CC_revalidate: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    RMAny: ClassVar[int] = ...
    RMEqual: ClassVar[int] = ...
    RMEqualOrNewer: ClassVar[int] = ...
    RMNewer: ClassVar[int] = ...
    RM_any: ClassVar[int] = ...
    RM_equal: ClassVar[int] = ...
    RM_equal_or_newer: ClassVar[int] = ...
    RM_newer: ClassVar[int] = ...
    cache_control: Incomplete
    date: Incomplete
    request_mode: Incomplete
    tag: Incomplete
    url: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constDocumentSpecself, constDocumentSpeccopy) -> Any: ...
    def clearDate(self, *args, **kwargs): ...
    def clearTag(self, *args, **kwargs): ...
    def clear_date(self, constDocumentSpecself) -> Any: ...
    def clear_tag(self, constDocumentSpecself) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, DocumentSpecself, constDocumentSpecother) -> Any: ...
    def getCacheControl(self, *args, **kwargs): ...
    def getDate(self, *args, **kwargs): ...
    def getRequestMode(self, *args, **kwargs): ...
    def getTag(self, *args, **kwargs): ...
    def getUrl(self, *args, **kwargs): ...
    def get_cache_control(self, DocumentSpecself) -> Any: ...
    def get_date(self, DocumentSpecself) -> Any: ...
    def get_request_mode(self, DocumentSpecself) -> Any: ...
    def get_tag(self, DocumentSpecself) -> Any: ...
    def get_url(self, DocumentSpecself) -> Any: ...
    def hasDate(self, *args, **kwargs): ...
    def hasTag(self, *args, **kwargs): ...
    def has_date(self, DocumentSpecself) -> Any: ...
    def has_tag(self, DocumentSpecself) -> Any: ...
    def input(self, constDocumentSpecself, istreamin) -> Any: ...
    def output(self, DocumentSpecself, ostreamout) -> Any: ...
    def setCacheControl(self, *args, **kwargs): ...
    def setDate(self, *args, **kwargs): ...
    def setRequestMode(self, *args, **kwargs): ...
    def setTag(self, *args, **kwargs): ...
    def setUrl(self, *args, **kwargs): ...
    def set_cache_control(self, constDocumentSpecself, intcache_control) -> Any: ...
    def set_date(self, constDocumentSpecself, constHTTPDatedate) -> Any: ...
    def set_request_mode(self, constDocumentSpecself, intrequest_mode) -> Any: ...
    def set_tag(self, constDocumentSpecself, constHTTPEntityTagtag) -> Any: ...
    def set_url(self, constDocumentSpecself, constURLSpecurl) -> Any: ...
    def write(self, DocumentSpecself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class DoubleBitMaskBitMaskNative(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constDoubleBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constDoubleBitMaskself, intindex) -> Any: ...
    def clear_range(self, constDoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, DoubleBitMaskself, constDoubleBitMaskother) -> Any: ...
    def extract(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def get_bit(self, DoubleBitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, DoubleBitMaskself) -> Any: ...
    def get_highest_on_bit(self, DoubleBitMaskself) -> Any: ...
    def get_lowest_off_bit(self, DoubleBitMaskself) -> Any: ...
    def get_lowest_on_bit(self, DoubleBitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, DoubleBitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, DoubleBitMaskself) -> Any: ...
    def get_num_off_bits(self, DoubleBitMaskself) -> Any: ...
    def get_num_on_bits(self, DoubleBitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, DoubleBitMaskself, constDoubleBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constDoubleBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, DoubleBitMaskself) -> Any: ...
    def is_zero(self, DoubleBitMaskself) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, DoubleBitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, DoubleBitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, DoubleBitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def set_bit(self, constDoubleBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constDoubleBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constDoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constDoubleBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def store(self, constDoubleBitMaskself, longvalue, intlow_bit, intsize) -> Any: ...
    def write(self, DoubleBitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, DoubleBitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class DoubleBitMaskDoubleBitMaskNative(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constDoubleBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constDoubleBitMaskself, intindex) -> Any: ...
    def clear_range(self, constDoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, DoubleBitMaskself, constDoubleBitMaskother) -> Any: ...
    def extract(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def get_bit(self, DoubleBitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, DoubleBitMaskself) -> Any: ...
    def get_highest_on_bit(self, DoubleBitMaskself) -> Any: ...
    def get_lowest_off_bit(self, DoubleBitMaskself) -> Any: ...
    def get_lowest_on_bit(self, DoubleBitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, DoubleBitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, DoubleBitMaskself) -> Any: ...
    def get_num_off_bits(self, DoubleBitMaskself) -> Any: ...
    def get_num_on_bits(self, DoubleBitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, DoubleBitMaskself, constDoubleBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constDoubleBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, DoubleBitMaskself) -> Any: ...
    def is_zero(self, DoubleBitMaskself) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, DoubleBitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, DoubleBitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, DoubleBitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def set_bit(self, constDoubleBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constDoubleBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constDoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constDoubleBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def store(self, constDoubleBitMaskself, longvalue, intlow_bit, intsize) -> Any: ...
    def write(self, DoubleBitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, DoubleBitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class DoubleBitMaskNative(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constDoubleBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constDoubleBitMaskself, intindex) -> Any: ...
    def clear_range(self, constDoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, DoubleBitMaskself, constDoubleBitMaskother) -> Any: ...
    def extract(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def get_bit(self, DoubleBitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, DoubleBitMaskself) -> Any: ...
    def get_highest_on_bit(self, DoubleBitMaskself) -> Any: ...
    def get_lowest_off_bit(self, DoubleBitMaskself) -> Any: ...
    def get_lowest_on_bit(self, DoubleBitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, DoubleBitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, DoubleBitMaskself) -> Any: ...
    def get_num_off_bits(self, DoubleBitMaskself) -> Any: ...
    def get_num_on_bits(self, DoubleBitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, DoubleBitMaskself, constDoubleBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constDoubleBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, DoubleBitMaskself) -> Any: ...
    def is_zero(self, DoubleBitMaskself) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, DoubleBitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, DoubleBitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, DoubleBitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def set_bit(self, constDoubleBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constDoubleBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constDoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constDoubleBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def store(self, constDoubleBitMaskself, longvalue, intlow_bit, intsize) -> Any: ...
    def write(self, DoubleBitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, DoubleBitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class DoubleBitMask_BitMaskNative(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constDoubleBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constDoubleBitMaskself, intindex) -> Any: ...
    def clear_range(self, constDoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, DoubleBitMaskself, constDoubleBitMaskother) -> Any: ...
    def extract(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def get_bit(self, DoubleBitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, DoubleBitMaskself) -> Any: ...
    def get_highest_on_bit(self, DoubleBitMaskself) -> Any: ...
    def get_lowest_off_bit(self, DoubleBitMaskself) -> Any: ...
    def get_lowest_on_bit(self, DoubleBitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, DoubleBitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, DoubleBitMaskself) -> Any: ...
    def get_num_off_bits(self, DoubleBitMaskself) -> Any: ...
    def get_num_on_bits(self, DoubleBitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, DoubleBitMaskself, constDoubleBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constDoubleBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, DoubleBitMaskself) -> Any: ...
    def is_zero(self, DoubleBitMaskself) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, DoubleBitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, DoubleBitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, DoubleBitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def set_bit(self, constDoubleBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constDoubleBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constDoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constDoubleBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def store(self, constDoubleBitMaskself, longvalue, intlow_bit, intsize) -> Any: ...
    def write(self, DoubleBitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, DoubleBitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class DoubleBitMask_DoubleBitMaskNative(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constDoubleBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constDoubleBitMaskself, intindex) -> Any: ...
    def clear_range(self, constDoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, DoubleBitMaskself, constDoubleBitMaskother) -> Any: ...
    def extract(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def get_bit(self, DoubleBitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, DoubleBitMaskself) -> Any: ...
    def get_highest_on_bit(self, DoubleBitMaskself) -> Any: ...
    def get_lowest_off_bit(self, DoubleBitMaskself) -> Any: ...
    def get_lowest_on_bit(self, DoubleBitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, DoubleBitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, DoubleBitMaskself) -> Any: ...
    def get_num_off_bits(self, DoubleBitMaskself) -> Any: ...
    def get_num_on_bits(self, DoubleBitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, DoubleBitMaskself, constDoubleBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constDoubleBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, DoubleBitMaskself) -> Any: ...
    def is_zero(self, DoubleBitMaskself) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, DoubleBitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, DoubleBitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, DoubleBitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def set_bit(self, constDoubleBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constDoubleBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constDoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constDoubleBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def store(self, constDoubleBitMaskself, longvalue, intlow_bit, intsize) -> Any: ...
    def write(self, DoubleBitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, DoubleBitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class DownloadDb(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    StatusComplete: ClassVar[int] = ...
    StatusDecompressed: ClassVar[int] = ...
    StatusExtracted: ClassVar[int] = ...
    StatusIncomplete: ClassVar[int] = ...
    Status_complete: ClassVar[int] = ...
    Status_decompressed: ClassVar[int] = ...
    Status_extracted: ClassVar[int] = ...
    Status_incomplete: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addClientMultifile(self, *args, **kwargs): ...
    def addVersion(self, *args, **kwargs): ...
    def add_client_multifile(self, constDownloadDbself, strserver_mfname) -> Any: ...
    def add_version(self, constDownloadDbself, constFilenamename, constHashValhash, intversion) -> Any: ...
    def clientMultifileComplete(self, *args, **kwargs): ...
    def clientMultifileDecompressed(self, *args, **kwargs): ...
    def clientMultifileExists(self, *args, **kwargs): ...
    def clientMultifileExtracted(self, *args, **kwargs): ...
    def client_multifile_complete(self, DownloadDbself, strmfname) -> Any: ...
    def client_multifile_decompressed(self, DownloadDbself, strmfname) -> Any: ...
    def client_multifile_exists(self, DownloadDbself, strmfname) -> Any: ...
    def client_multifile_extracted(self, DownloadDbself, strmfname) -> Any: ...
    def createNewServerDb(self, *args, **kwargs): ...
    def create_new_server_db(self, constDownloadDbself) -> Any: ...
    def deleteClientMultifile(self, *args, **kwargs): ...
    def delete_client_multifile(self, constDownloadDbself, strmfname) -> Any: ...
    def expandClientMultifile(self, *args, **kwargs): ...
    def expand_client_multifile(self, constDownloadDbself, strmfname) -> Any: ...
    def getClientMultifileHash(self, *args, **kwargs): ...
    def getClientMultifileName(self, *args, **kwargs): ...
    def getClientMultifilePhase(self, *args, **kwargs): ...
    def getClientMultifileSize(self, *args, **kwargs): ...
    def getClientNumMultifiles(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumVersions(self, *args, **kwargs): ...
    def getServerFileName(self, *args, **kwargs): ...
    def getServerMultifileHash(self, *args, **kwargs): ...
    def getServerMultifileName(self, *args, **kwargs): ...
    def getServerMultifilePhase(self, *args, **kwargs): ...
    def getServerMultifileSize(self, *args, **kwargs): ...
    def getServerNumFiles(self, *args, **kwargs): ...
    def getServerNumMultifiles(self, *args, **kwargs): ...
    def getVersion(self, *args, **kwargs): ...
    def get_client_multifile_hash(self, DownloadDbself, strmfname) -> Any: ...
    def get_client_multifile_name(self, DownloadDbself, intindex) -> Any: ...
    def get_client_multifile_phase(self, DownloadDbself, strmfname) -> Any: ...
    def get_client_multifile_size(self, DownloadDbself, strmfname) -> Any: ...
    def get_client_num_multifiles(self, DownloadDbself) -> Any: ...
    def get_hash(self, DownloadDbself, constFilenamename, intversion) -> Any: ...
    def get_num_versions(self, DownloadDbself, constFilenamename) -> Any: ...
    def get_server_file_name(self, DownloadDbself, strmfname, intindex) -> Any: ...
    def get_server_multifile_hash(self, DownloadDbself, strmfname) -> Any: ...
    def get_server_multifile_name(self, DownloadDbself, intindex) -> Any: ...
    def get_server_multifile_phase(self, DownloadDbself, strmfname) -> Any: ...
    def get_server_multifile_size(self, DownloadDbself, strmfname) -> Any: ...
    def get_server_num_files(self, DownloadDbself, strmfname) -> Any: ...
    def get_server_num_multifiles(self, DownloadDbself) -> Any: ...
    def get_version(self, DownloadDbself, constFilenamename, constHashValhash) -> Any: ...
    def hasVersion(self, *args, **kwargs): ...
    def has_version(self, DownloadDbself, constFilenamename) -> Any: ...
    def insertNewVersion(self, *args, **kwargs): ...
    def insert_new_version(self, constDownloadDbself, constFilenamename, constHashValhash) -> Any: ...
    def output(self, DownloadDbself, ostreamout) -> Any: ...
    def serverAddFile(self, *args, **kwargs): ...
    def serverAddMultifile(self, *args, **kwargs): ...
    def server_add_file(self, constDownloadDbself, strmfname, strfname) -> Any: ...
    def server_add_multifile(self, constDownloadDbself, strmfname, floatphase, intsize, intstatus) -> Any: ...
    def setClientMultifileComplete(self, *args, **kwargs): ...
    def setClientMultifileDecompressed(self, *args, **kwargs): ...
    def setClientMultifileDeltaSize(self, *args, **kwargs): ...
    def setClientMultifileExtracted(self, *args, **kwargs): ...
    def setClientMultifileHash(self, *args, **kwargs): ...
    def setClientMultifileIncomplete(self, *args, **kwargs): ...
    def setClientMultifileSize(self, *args, **kwargs): ...
    def setNumVersions(self, *args, **kwargs): ...
    def setServerMultifileHash(self, *args, **kwargs): ...
    def setServerMultifileSize(self, *args, **kwargs): ...
    def set_client_multifile_complete(self, constDownloadDbself, strmfname) -> Any: ...
    def set_client_multifile_decompressed(self, constDownloadDbself, strmfname) -> Any: ...
    def set_client_multifile_delta_size(self, constDownloadDbself, strmfname, intsize) -> Any: ...
    def set_client_multifile_extracted(self, constDownloadDbself, strmfname) -> Any: ...
    def set_client_multifile_hash(self, constDownloadDbself, strmfname, HashValval) -> Any: ...
    def set_client_multifile_incomplete(self, constDownloadDbself, strmfname) -> Any: ...
    def set_client_multifile_size(self, constDownloadDbself, strmfname, intsize) -> Any: ...
    def set_num_versions(self, constDownloadDbself, constFilenamename, intnum_versions) -> Any: ...
    def set_server_multifile_hash(self, constDownloadDbself, strmfname, HashValval) -> Any: ...
    def set_server_multifile_size(self, constDownloadDbself, strmfname, intsize) -> Any: ...
    def write(self, DownloadDbself, ostreamout) -> Any: ...
    def writeClientDb(self, *args, **kwargs): ...
    def writeServerDb(self, *args, **kwargs): ...
    def writeVersionMap(self, *args, **kwargs): ...
    def write_client_db(self, constDownloadDbself, Filenamefile) -> Any: ...
    def write_server_db(self, constDownloadDbself, Filenamefile) -> Any: ...
    def write_version_map(self, DownloadDbself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DrawMask(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitMaskself, intindex) -> Any: ...
    def clear_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitMaskself, constBitMaskother) -> Any: ...
    def extract(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def floodBitsDown(self, *args, **kwargs): ...
    def floodBitsUp(self, *args, **kwargs): ...
    def floodDownInPlace(self, *args, **kwargs): ...
    def floodUpInPlace(self, *args, **kwargs): ...
    def flood_bits_down(self, BitMaskself) -> Any: ...
    def flood_bits_up(self, BitMaskself) -> Any: ...
    def flood_down_in_place(self, constBitMaskself) -> Any: ...
    def flood_up_in_place(self, constBitMaskself) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, BitMaskself) -> Any: ...
    def get_highest_on_bit(self, BitMaskself) -> Any: ...
    def get_key(self, BitMaskself) -> Any: ...
    def get_lowest_off_bit(self, BitMaskself) -> Any: ...
    def get_lowest_on_bit(self, BitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitMaskself) -> Any: ...
    def get_num_off_bits(self, BitMaskself) -> Any: ...
    def get_num_on_bits(self, BitMaskself) -> Any: ...
    def get_word(self, BitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitMaskself, constBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitMaskself) -> Any: ...
    def is_zero(self, BitMaskself) -> Any: ...
    def keepNextHighestBit(self, *args, **kwargs): ...
    def keepNextLowestBit(self, *args, **kwargs): ...
    @overload
    def keep_next_highest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, intindex) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitMaskself, intvalue) -> Any: ...
    def store(self, constBitMaskself, intvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, BitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class DrawableRegion(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    RTPAuxFloat0: ClassVar[int] = ...
    RTPAuxFloat1: ClassVar[int] = ...
    RTPAuxFloat2: ClassVar[int] = ...
    RTPAuxFloat3: ClassVar[int] = ...
    RTPAuxHrgba0: ClassVar[int] = ...
    RTPAuxHrgba1: ClassVar[int] = ...
    RTPAuxHrgba2: ClassVar[int] = ...
    RTPAuxHrgba3: ClassVar[int] = ...
    RTPAuxRgba0: ClassVar[int] = ...
    RTPAuxRgba1: ClassVar[int] = ...
    RTPAuxRgba2: ClassVar[int] = ...
    RTPAuxRgba3: ClassVar[int] = ...
    RTPCOUNT: ClassVar[int] = ...
    RTPColor: ClassVar[int] = ...
    RTPDepth: ClassVar[int] = ...
    RTPDepthStencil: ClassVar[int] = ...
    RTPStencil: ClassVar[int] = ...
    RTP_COUNT: ClassVar[int] = ...
    RTP_aux_float_0: ClassVar[int] = ...
    RTP_aux_float_1: ClassVar[int] = ...
    RTP_aux_float_2: ClassVar[int] = ...
    RTP_aux_float_3: ClassVar[int] = ...
    RTP_aux_hrgba_0: ClassVar[int] = ...
    RTP_aux_hrgba_1: ClassVar[int] = ...
    RTP_aux_hrgba_2: ClassVar[int] = ...
    RTP_aux_hrgba_3: ClassVar[int] = ...
    RTP_aux_rgba_0: ClassVar[int] = ...
    RTP_aux_rgba_1: ClassVar[int] = ...
    RTP_aux_rgba_2: ClassVar[int] = ...
    RTP_aux_rgba_3: ClassVar[int] = ...
    RTP_color: ClassVar[int] = ...
    RTP_depth: ClassVar[int] = ...
    RTP_depth_stencil: ClassVar[int] = ...
    RTP_stencil: ClassVar[int] = ...
    clear_color: Incomplete
    clear_depth: Incomplete
    clear_stencil: Incomplete
    pixel_factor: Incomplete
    pixel_zoom: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def disableClears(self, *args, **kwargs): ...
    def disable_clears(self, constDrawableRegionself) -> Any: ...
    def getClearActive(self, *args, **kwargs): ...
    def getClearColor(self, *args, **kwargs): ...
    def getClearColorActive(self, *args, **kwargs): ...
    def getClearDepth(self, *args, **kwargs): ...
    def getClearDepthActive(self, *args, **kwargs): ...
    def getClearStencil(self, *args, **kwargs): ...
    def getClearStencilActive(self, *args, **kwargs): ...
    def getClearValue(self, *args, **kwargs): ...
    def getPixelFactor(self, *args, **kwargs): ...
    def getPixelZoom(self, *args, **kwargs): ...
    @staticmethod
    def getRenderbufferType(*args, **kwargs): ...
    def get_clear_active(self, DrawableRegionself, intn) -> Any: ...
    def get_clear_color(self, DrawableRegionself) -> Any: ...
    def get_clear_color_active(self, DrawableRegionself) -> Any: ...
    def get_clear_depth(self, DrawableRegionself) -> Any: ...
    def get_clear_depth_active(self, DrawableRegionself) -> Any: ...
    def get_clear_stencil(self, DrawableRegionself) -> Any: ...
    def get_clear_stencil_active(self, DrawableRegionself) -> Any: ...
    def get_clear_value(self, DrawableRegionself, intn) -> Any: ...
    def get_pixel_factor(self, DrawableRegionself) -> Any: ...
    def get_pixel_zoom(self, DrawableRegionself) -> Any: ...
    @staticmethod
    def get_renderbuffer_type(intplane) -> Any: ...
    def isAnyClearActive(self, *args, **kwargs): ...
    def is_any_clear_active(self, DrawableRegionself) -> Any: ...
    def setClearActive(self, *args, **kwargs): ...
    def setClearColor(self, *args, **kwargs): ...
    def setClearColorActive(self, *args, **kwargs): ...
    def setClearDepth(self, *args, **kwargs): ...
    def setClearDepthActive(self, *args, **kwargs): ...
    def setClearStencil(self, *args, **kwargs): ...
    def setClearStencilActive(self, *args, **kwargs): ...
    def setClearValue(self, *args, **kwargs): ...
    def setPixelZoom(self, *args, **kwargs): ...
    def set_clear_active(self, constDrawableRegionself, intn, boolclear_aux_active) -> Any: ...
    def set_clear_color(self, constDrawableRegionself, constLVecBase4fcolor) -> Any: ...
    def set_clear_color_active(self, constDrawableRegionself, boolclear_color_active) -> Any: ...
    def set_clear_depth(self, constDrawableRegionself, floatdepth) -> Any: ...
    def set_clear_depth_active(self, constDrawableRegionself, boolclear_depth_active) -> Any: ...
    def set_clear_stencil(self, constDrawableRegionself, intstencil) -> Any: ...
    def set_clear_stencil_active(self, constDrawableRegionself, boolclear_stencil_active) -> Any: ...
    def set_clear_value(self, constDrawableRegionself, intn, constLVecBase4fclear_value) -> Any: ...
    def set_pixel_zoom(self, constDrawableRegionself, floatpixel_zoom) -> Any: ...
    def supportsPixelZoom(self, *args, **kwargs): ...
    def supports_pixel_zoom(self, DrawableRegionself) -> Any: ...

class DriveInterface(MouseInterfaceNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def forceDgraph(self, *args, **kwargs): ...
    def force_dgraph(self, constDriveInterfaceself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getForceMouse(self, *args, **kwargs): ...
    def getForwardSpeed(self, *args, **kwargs): ...
    def getH(self, *args, **kwargs): ...
    def getHorizontalDeadZone(self, *args, **kwargs): ...
    def getHorizontalRampDownTime(self, *args, **kwargs): ...
    def getHorizontalRampUpTime(self, *args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getIgnoreMouse(self, *args, **kwargs): ...
    def getMat(self, *args, **kwargs): ...
    def getP(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getR(self, *args, **kwargs): ...
    def getReverseSpeed(self, *args, **kwargs): ...
    def getRotSpeed(self, *args, **kwargs): ...
    def getRotateSpeed(self, *args, **kwargs): ...
    def getSpeed(self, *args, **kwargs): ...
    def getStopThisFrame(self, *args, **kwargs): ...
    def getVerticalDeadZone(self, *args, **kwargs): ...
    def getVerticalRampDownTime(self, *args, **kwargs): ...
    def getVerticalRampUpTime(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_force_mouse(self, DriveInterfaceself) -> Any: ...
    def get_forward_speed(self, DriveInterfaceself) -> Any: ...
    def get_h(self, DriveInterfaceself) -> Any: ...
    def get_horizontal_dead_zone(self, DriveInterfaceself) -> Any: ...
    def get_horizontal_ramp_down_time(self, DriveInterfaceself) -> Any: ...
    def get_horizontal_ramp_up_time(self, DriveInterfaceself) -> Any: ...
    def get_hpr(self, DriveInterfaceself) -> Any: ...
    def get_ignore_mouse(self, DriveInterfaceself) -> Any: ...
    def get_mat(self, constDriveInterfaceself) -> Any: ...
    def get_p(self, DriveInterfaceself) -> Any: ...
    def get_pos(self, DriveInterfaceself) -> Any: ...
    def get_r(self, DriveInterfaceself) -> Any: ...
    def get_reverse_speed(self, DriveInterfaceself) -> Any: ...
    def get_rot_speed(self, DriveInterfaceself) -> Any: ...
    def get_rotate_speed(self, DriveInterfaceself) -> Any: ...
    def get_speed(self, DriveInterfaceself) -> Any: ...
    def get_stop_this_frame(self, DriveInterfaceself) -> Any: ...
    def get_vertical_dead_zone(self, DriveInterfaceself) -> Any: ...
    def get_vertical_ramp_down_time(self, DriveInterfaceself) -> Any: ...
    def get_vertical_ramp_up_time(self, DriveInterfaceself) -> Any: ...
    def get_x(self, DriveInterfaceself) -> Any: ...
    def get_y(self, DriveInterfaceself) -> Any: ...
    def get_z(self, DriveInterfaceself) -> Any: ...
    def reset(self, constDriveInterfaceself) -> Any: ...
    def setForceMouse(self, *args, **kwargs): ...
    def setForceRoll(self, *args, **kwargs): ...
    def setForwardSpeed(self, *args, **kwargs): ...
    def setH(self, *args, **kwargs): ...
    def setHorizontalDeadZone(self, *args, **kwargs): ...
    def setHorizontalRampDownTime(self, *args, **kwargs): ...
    def setHorizontalRampUpTime(self, *args, **kwargs): ...
    def setHpr(self, *args, **kwargs): ...
    def setIgnoreMouse(self, *args, **kwargs): ...
    def setMat(self, *args, **kwargs): ...
    def setP(self, *args, **kwargs): ...
    def setPos(self, *args, **kwargs): ...
    def setR(self, *args, **kwargs): ...
    def setReverseSpeed(self, *args, **kwargs): ...
    def setRotateSpeed(self, *args, **kwargs): ...
    def setStopThisFrame(self, *args, **kwargs): ...
    def setVerticalDeadZone(self, *args, **kwargs): ...
    def setVerticalRampDownTime(self, *args, **kwargs): ...
    def setVerticalRampUpTime(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_force_mouse(self, constDriveInterfaceself, boolforce_mouse) -> Any: ...
    def set_force_roll(self, constDriveInterfaceself, floatforce_roll) -> Any: ...
    def set_forward_speed(self, constDriveInterfaceself, floatspeed) -> Any: ...
    def set_h(self, constDriveInterfaceself, floath) -> Any: ...
    def set_horizontal_dead_zone(self, constDriveInterfaceself, floatzone) -> Any: ...
    def set_horizontal_ramp_down_time(self, constDriveInterfaceself, floatramp_down_time) -> Any: ...
    def set_horizontal_ramp_up_time(self, constDriveInterfaceself, floatramp_up_time) -> Any: ...
    @overload
    def set_hpr(self, constDriveInterfaceself, constLVecBase3fhpr) -> Any: ...
    @overload
    def set_hpr(self, constDriveInterfaceself, floath, floatp, floatr) -> Any: ...
    def set_ignore_mouse(self, constDriveInterfaceself, boolignore_mouse) -> Any: ...
    def set_mat(self, constDriveInterfaceself, constLMatrix4fmat) -> Any: ...
    def set_p(self, constDriveInterfaceself, floatp) -> Any: ...
    @overload
    def set_pos(self, constDriveInterfaceself, constLVecBase3fvec) -> Any: ...
    @overload
    def set_pos(self, constDriveInterfaceself, floatx, floaty, floatz) -> Any: ...
    def set_r(self, constDriveInterfaceself, floatr) -> Any: ...
    def set_reverse_speed(self, constDriveInterfaceself, floatspeed) -> Any: ...
    def set_rotate_speed(self, constDriveInterfaceself, floatspeed) -> Any: ...
    def set_stop_this_frame(self, constDriveInterfaceself, boolstop_this_frame) -> Any: ...
    def set_vertical_dead_zone(self, constDriveInterfaceself, floatzone) -> Any: ...
    def set_vertical_ramp_down_time(self, constDriveInterfaceself, floatramp_down_time) -> Any: ...
    def set_vertical_ramp_up_time(self, constDriveInterfaceself, floatramp_up_time) -> Any: ...
    def set_x(self, constDriveInterfaceself, floatx) -> Any: ...
    def set_y(self, constDriveInterfaceself, floaty) -> Any: ...
    def set_z(self, constDriveInterfaceself, floatz) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DynamicTextFont(TextFont, FreetypeFont):
    DtoolClassDict: ClassVar[dict] = ...
    anisotropic_degree: Incomplete
    bg: Incomplete
    fg: Incomplete
    font_pixel_size: Incomplete
    magfilter: Incomplete
    minfilter: Incomplete
    native_antialias: Incomplete
    page_size: Incomplete
    pages: Incomplete
    pixels_per_unit: Incomplete
    point_size: Incomplete
    poly_margin: Incomplete
    render_mode: Incomplete
    scale_factor: Incomplete
    tex_format: Incomplete
    texture_margin: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constDynamicTextFontself) -> Any: ...
    def garbageCollect(self, *args, **kwargs): ...
    def garbage_collect(self, constDynamicTextFontself) -> Any: ...
    def getAnisotropicDegree(self, *args, **kwargs): ...
    def getBg(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFg(self, *args, **kwargs): ...
    def getFontPixelSize(self, *args, **kwargs): ...
    def getLineHeight(self, *args, **kwargs): ...
    def getMagfilter(self, *args, **kwargs): ...
    def getMinfilter(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNativeAntialias(self, *args, **kwargs): ...
    def getNumPages(self, *args, **kwargs): ...
    def getOutlineColor(self, *args, **kwargs): ...
    def getOutlineFeather(self, *args, **kwargs): ...
    def getOutlineWidth(self, *args, **kwargs): ...
    def getPage(self, *args, **kwargs): ...
    def getPageSize(self, *args, **kwargs): ...
    def getPageXSize(self, *args, **kwargs): ...
    def getPageYSize(self, *args, **kwargs): ...
    def getPages(self, *args, **kwargs): ...
    def getPixelsPerUnit(self, *args, **kwargs): ...
    def getPointSize(self, *args, **kwargs): ...
    def getPolyMargin(self, *args, **kwargs): ...
    def getRenderMode(self, *args, **kwargs): ...
    def getScaleFactor(self, *args, **kwargs): ...
    def getSpaceAdvance(self, *args, **kwargs): ...
    def getTexFormat(self, *args, **kwargs): ...
    def getTextureMargin(self, *args, **kwargs): ...
    def get_anisotropic_degree(self, DynamicTextFontself) -> Any: ...
    def get_bg(self, DynamicTextFontself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_fg(self, DynamicTextFontself) -> Any: ...
    def get_font_pixel_size(self, DynamicTextFontself) -> Any: ...
    def get_line_height(self, DynamicTextFontself) -> Any: ...
    def get_magfilter(self, DynamicTextFontself) -> Any: ...
    def get_minfilter(self, DynamicTextFontself) -> Any: ...
    @overload
    def get_name(self, DynamicTextFontself) -> Any: ...
    @overload
    def get_name(self) -> Any: ...
    def get_native_antialias(self, DynamicTextFontself) -> Any: ...
    def get_num_pages(self, DynamicTextFontself) -> Any: ...
    def get_outline_color(self, DynamicTextFontself) -> Any: ...
    def get_outline_feather(self, DynamicTextFontself) -> Any: ...
    def get_outline_width(self, DynamicTextFontself) -> Any: ...
    def get_page(self, DynamicTextFontself, intn) -> Any: ...
    def get_page_size(self, DynamicTextFontself) -> Any: ...
    def get_page_x_size(self, DynamicTextFontself) -> Any: ...
    def get_page_y_size(self, DynamicTextFontself) -> Any: ...
    def get_pages(self, *args, **kwargs): ...
    def get_pixels_per_unit(self, DynamicTextFontself) -> Any: ...
    def get_point_size(self, DynamicTextFontself) -> Any: ...
    def get_poly_margin(self, DynamicTextFontself) -> Any: ...
    def get_render_mode(self, DynamicTextFontself) -> Any: ...
    def get_scale_factor(self, DynamicTextFontself) -> Any: ...
    def get_space_advance(self, DynamicTextFontself) -> Any: ...
    def get_tex_format(self, DynamicTextFontself) -> Any: ...
    def get_texture_margin(self, DynamicTextFontself) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, DynamicTextFontself) -> Any: ...
    def setAnisotropicDegree(self, *args, **kwargs): ...
    def setBg(self, *args, **kwargs): ...
    def setFg(self, *args, **kwargs): ...
    def setMagfilter(self, *args, **kwargs): ...
    def setMinfilter(self, *args, **kwargs): ...
    def setNativeAntialias(self, *args, **kwargs): ...
    def setOutline(self, *args, **kwargs): ...
    def setPageSize(self, *args, **kwargs): ...
    def setPixelsPerUnit(self, *args, **kwargs): ...
    def setPointSize(self, *args, **kwargs): ...
    def setPolyMargin(self, *args, **kwargs): ...
    def setRenderMode(self, *args, **kwargs): ...
    def setScaleFactor(self, *args, **kwargs): ...
    def setTextureMargin(self, *args, **kwargs): ...
    @overload
    def set_anisotropic_degree(self, constDynamicTextFontself, intanisotropic_degree) -> Any: ...
    @overload
    def set_anisotropic_degree(self) -> Any: ...
    def set_bg(self, constDynamicTextFontself, constLVecBase4fbg) -> Any: ...
    def set_fg(self, constDynamicTextFontself, constLVecBase4ffg) -> Any: ...
    def set_magfilter(self, constDynamicTextFontself, intfilter) -> Any: ...
    def set_minfilter(self, constDynamicTextFontself, intfilter) -> Any: ...
    def set_native_antialias(self, constDynamicTextFontself, boolnative_antialias) -> Any: ...
    def set_outline(
        self, constDynamicTextFontself, constLVecBase4foutline_color, floatoutline_width, floatoutline_feather
    ) -> Any: ...
    @overload
    def set_page_size(self, constDynamicTextFontself, constLVecBase2ipage_size) -> Any: ...
    @overload
    def set_page_size(self, constDynamicTextFontself, intx_size, inty_size) -> Any: ...
    def set_pixels_per_unit(self, constDynamicTextFontself, floatpixels_per_unit) -> Any: ...
    def set_point_size(self, constDynamicTextFontself, floatpoint_size) -> Any: ...
    def set_poly_margin(self, constDynamicTextFontself, floatpoly_margin) -> Any: ...
    def set_render_mode(self, constDynamicTextFontself, intrender_mode) -> Any: ...
    def set_scale_factor(self, constDynamicTextFontself, floatscale_factor) -> Any: ...
    def set_texture_margin(self, constDynamicTextFontself, inttexture_margin) -> Any: ...
    def upcastToFreetypeFont(self, *args, **kwargs): ...
    def upcastToTextFont(self, *args, **kwargs): ...
    def upcast_to_FreetypeFont(self, constDynamicTextFontself) -> Any: ...
    def upcast_to_TextFont(self, constDynamicTextFontself) -> Any: ...
    def write(self, DynamicTextFontself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DynamicTextGlyph(TextGlyph):
    DtoolClassDict: ClassVar[dict] = ...
    page: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getBottom(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLeft(self, *args, **kwargs): ...
    def getPage(self, *args, **kwargs): ...
    def getRight(self, *args, **kwargs): ...
    def getTop(self, *args, **kwargs): ...
    def getUvBottom(self, *args, **kwargs): ...
    def getUvLeft(self, *args, **kwargs): ...
    def getUvRight(self, *args, **kwargs): ...
    def getUvTop(self, *args, **kwargs): ...
    def get_bottom(self, DynamicTextGlyphself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_left(self, DynamicTextGlyphself) -> Any: ...
    def get_page(self, DynamicTextGlyphself) -> Any: ...
    def get_right(self, DynamicTextGlyphself) -> Any: ...
    def get_top(self, DynamicTextGlyphself) -> Any: ...
    def get_uv_bottom(self, DynamicTextGlyphself) -> Any: ...
    def get_uv_left(self, DynamicTextGlyphself) -> Any: ...
    def get_uv_right(self, DynamicTextGlyphself) -> Any: ...
    def get_uv_top(self, DynamicTextGlyphself) -> Any: ...
    def intersects(self, DynamicTextGlyphself, intx, inty, intx_size, inty_size) -> Any: ...

class DynamicTextPage(Texture):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getSize(self, *args, **kwargs): ...
    def getXSize(self, *args, **kwargs): ...
    def getYSize(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_size(self, DynamicTextPageself) -> Any: ...
    def get_x_size(self, DynamicTextPageself) -> Any: ...
    def get_y_size(self, DynamicTextPageself) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, DynamicTextPageself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Event(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    name: Incomplete
    parameters: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addParameter(self, *args, **kwargs): ...
    def add_parameter(self, constEventself, constEventParameterobj) -> Any: ...
    def assign(self, constEventself, constEventcopy) -> Any: ...
    def clearName(self, *args, **kwargs): ...
    def clearReceiver(self, *args, **kwargs): ...
    def clear_name(self, constEventself) -> Any: ...
    def clear_receiver(self, constEventself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumParameters(self, *args, **kwargs): ...
    def getParameter(self, *args, **kwargs): ...
    def getParameters(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_name(self, Eventself) -> Any: ...
    def get_num_parameters(self, Eventself) -> Any: ...
    def get_parameter(self, Eventself, intn) -> Any: ...
    def get_parameters(self, *args, **kwargs): ...
    def hasName(self, *args, **kwargs): ...
    def hasReceiver(self, *args, **kwargs): ...
    def has_name(self, Eventself) -> Any: ...
    def has_receiver(self, Eventself) -> Any: ...
    def output(self, Eventself, ostreamout) -> Any: ...
    def setName(self, *args, **kwargs): ...
    def set_name(self, constEventself, strname) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EventHandler(TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def dispatchEvent(self, *args, **kwargs): ...
    def dispatch_event(self, constEventHandlerself, constEventevent) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFuture(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalEventHandler(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_future(self, constEventHandlerself, strevent_name) -> Any: ...
    @staticmethod
    def get_global_event_handler(EventQueuequeue) -> Any: ...
    def processEvents(self, *args, **kwargs): ...
    def process_events(self, constEventHandlerself) -> Any: ...
    def write(self, EventHandlerself, ostreamout) -> Any: ...

class EventParameter(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEventParameterself, constEventParametercopy) -> Any: ...
    def getDoubleValue(self, *args, **kwargs): ...
    def getIntValue(self, *args, **kwargs): ...
    def getPtr(self, *args, **kwargs): ...
    def getStringValue(self, *args, **kwargs): ...
    def getTypedRefCountValue(self, *args, **kwargs): ...
    def getWstringValue(self, *args, **kwargs): ...
    def get_double_value(self, EventParameterself) -> Any: ...
    def get_int_value(self, EventParameterself) -> Any: ...
    def get_ptr(self, EventParameterself) -> Any: ...
    def get_string_value(self, EventParameterself) -> Any: ...
    def get_typed_ref_count_value(self, EventParameterself) -> Any: ...
    def get_wstring_value(self, EventParameterself) -> Any: ...
    def isDouble(self, *args, **kwargs): ...
    def isEmpty(self, *args, **kwargs): ...
    def isInt(self, *args, **kwargs): ...
    def isString(self, *args, **kwargs): ...
    def isTypedRefCount(self, *args, **kwargs): ...
    def isWstring(self, *args, **kwargs): ...
    def is_double(self, EventParameterself) -> Any: ...
    def is_empty(self, EventParameterself) -> Any: ...
    def is_int(self, EventParameterself) -> Any: ...
    def is_string(self, EventParameterself) -> Any: ...
    def is_typed_ref_count(self, EventParameterself) -> Any: ...
    def is_wstring(self, EventParameterself) -> Any: ...
    def output(self, EventParameterself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EventQueue(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constEventQueueself) -> Any: ...
    def dequeueEvent(self, *args, **kwargs): ...
    def dequeue_event(self, constEventQueueself) -> Any: ...
    @staticmethod
    def getGlobalEventQueue(*args, **kwargs): ...
    @staticmethod
    def get_global_event_queue() -> Any: ...
    def isQueueEmpty(self, *args, **kwargs): ...
    def isQueueFull(self, *args, **kwargs): ...
    def is_queue_empty(self, EventQueueself) -> Any: ...
    def is_queue_full(self, EventQueueself) -> Any: ...
    def queueEvent(self, *args, **kwargs): ...
    def queue_event(self, constEventQueueself, constEventevent) -> Any: ...

class ExecutionEnvironment(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    args: Incomplete
    binary_name: Incomplete
    cwd: Incomplete
    dtool_name: Incomplete
    environment_variables: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def clearShadow(*args, **kwargs): ...
    @staticmethod
    def clear_shadow(strvar) -> Any: ...
    @staticmethod
    def expandString(*args, **kwargs): ...
    @staticmethod
    def expand_string(strstr) -> Any: ...
    @staticmethod
    def getArg(*args, **kwargs): ...
    @staticmethod
    def getBinaryName(*args, **kwargs): ...
    @staticmethod
    def getCwd(*args, **kwargs): ...
    @staticmethod
    def getDtoolName(*args, **kwargs): ...
    @staticmethod
    def getEnvironmentVariable(*args, **kwargs): ...
    @staticmethod
    def getNumArgs(*args, **kwargs): ...
    @staticmethod
    def get_arg(intn) -> Any: ...
    @staticmethod
    def get_binary_name() -> Any: ...
    @staticmethod
    def get_cwd() -> Any: ...
    @staticmethod
    def get_dtool_name() -> Any: ...
    @staticmethod
    def get_environment_variable(strvar) -> Any: ...
    @staticmethod
    def get_num_args() -> Any: ...
    @staticmethod
    def hasEnvironmentVariable(*args, **kwargs): ...
    @staticmethod
    def has_environment_variable(strvar) -> Any: ...
    @staticmethod
    def setBinaryName(*args, **kwargs): ...
    @staticmethod
    def setDtoolName(*args, **kwargs): ...
    @staticmethod
    def setEnvironmentVariable(*args, **kwargs): ...
    @staticmethod
    def set_binary_name(strname) -> Any: ...
    @staticmethod
    def set_dtool_name(strname) -> Any: ...
    @staticmethod
    def set_environment_variable(strvar, strvalue) -> Any: ...
    @staticmethod
    def shadowEnvironmentVariable(*args, **kwargs): ...
    @staticmethod
    def shadow_environment_variable(strvar, strvalue) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ExternalThread(Thread):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class Extractor(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    progress: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getProgress(self, *args, **kwargs): ...
    def get_progress(self, Extractorself) -> Any: ...
    def requestAllSubfiles(self, *args, **kwargs): ...
    def requestSubfile(self, *args, **kwargs): ...
    def request_all_subfiles(self, constExtractorself) -> Any: ...
    def request_subfile(self, constExtractorself, constFilenamesubfile_name) -> Any: ...
    def reset(self, constExtractorself) -> Any: ...
    def run(self, constExtractorself) -> Any: ...
    def setExtractDir(self, *args, **kwargs): ...
    def setMultifile(self, *args, **kwargs): ...
    def set_extract_dir(self, constExtractorself, constFilenameextract_dir) -> Any: ...
    def set_multifile(self, constExtractorself, constFilenamemultifile_name) -> Any: ...
    @overload
    def step(self, constExtractorself) -> Any: ...
    @overload
    def step(self) -> Any: ...
    @overload
    def step(self) -> Any: ...

class FadeLODNode(LODNode):
    DtoolClassDict: ClassVar[dict] = ...
    fade_bin_draw_order: Incomplete
    fade_bin_name: Incomplete
    fade_state_override: Incomplete
    fade_time: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFadeBinDrawOrder(self, *args, **kwargs): ...
    def getFadeBinName(self, *args, **kwargs): ...
    def getFadeStateOverride(self, *args, **kwargs): ...
    def getFadeTime(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_fade_bin_draw_order(self, FadeLODNodeself) -> Any: ...
    def get_fade_bin_name(self, FadeLODNodeself) -> Any: ...
    def get_fade_state_override(self, FadeLODNodeself) -> Any: ...
    def get_fade_time(self, FadeLODNodeself) -> Any: ...
    def setFadeBin(self, *args, **kwargs): ...
    def setFadeStateOverride(self, *args, **kwargs): ...
    def setFadeTime(self, *args, **kwargs): ...
    def set_fade_bin(self, constFadeLODNodeself, strname, intdraw_order) -> Any: ...
    def set_fade_state_override(self, constFadeLODNodeself, intoverride) -> Any: ...
    def set_fade_time(self, constFadeLODNodeself, floatt) -> Any: ...

class FileReference(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_filename(self, FileReferenceself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class FileStream(iostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constFileStreamself) -> Any: ...
    def open(self, constFileStreamself, strfilename, intmode) -> Any: ...

class Filename(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    TDso: ClassVar[int] = ...
    TExecutable: ClassVar[int] = ...
    TGeneral: ClassVar[int] = ...
    T_dso: ClassVar[int] = ...
    T_executable: ClassVar[int] = ...
    T_general: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Fspath(self, *args, **kwargs): ...
    @overload
    def assign(self, constFilenameself, constFilenamecopy) -> Any: ...
    @overload
    def assign(self, constFilenameself, unicodefilename) -> Any: ...
    @overload
    def assign(self, constFilenameself, strfilename) -> Any: ...
    @overload
    def assign(self, constFilenameself, strfilename) -> Any: ...
    @staticmethod
    def binaryFilename(*args, **kwargs): ...
    @overload
    @staticmethod
    def binary_filename(constFilenamefilename) -> Any: ...
    @overload
    @staticmethod
    def binary_filename(strfilename) -> Any: ...
    def cStr(self, *args, **kwargs): ...
    def c_str(self, Filenameself) -> Any: ...
    def chdir(self, Filenameself) -> Any: ...
    def compareTimestamps(self, *args, **kwargs): ...
    def compareTo(self, *args, **kwargs): ...
    def compare_timestamps(
        self, Filenameself, constFilenameother, boolthis_missing_is_old, boolother_missing_is_old
    ) -> Any: ...
    def compare_to(self, Filenameself, constFilenameother) -> Any: ...
    def copyTo(self, *args, **kwargs): ...
    def copy_to(self, Filenameself, constFilenameother) -> Any: ...
    @staticmethod
    def dsoFilename(*args, **kwargs): ...
    @staticmethod
    def dso_filename(strfilename) -> Any: ...
    def empty(self, Filenameself) -> Any: ...
    @staticmethod
    def executableFilename(*args, **kwargs): ...
    @staticmethod
    def executable_filename(strfilename) -> Any: ...
    @overload
    def exists(self, Filenameself) -> Any: ...
    @overload
    def exists(self) -> Any: ...
    @staticmethod
    def expandFrom(*args, **kwargs): ...
    @staticmethod
    def expand_from(struser_string, inttype) -> Any: ...
    def findOnSearchpath(self, *args, **kwargs): ...
    def find_on_searchpath(self, constFilenameself, constDSearchPathsearchpath) -> Any: ...
    @staticmethod
    def fromOsSpecific(*args, **kwargs): ...
    @staticmethod
    def fromOsSpecificW(*args, **kwargs): ...
    @staticmethod
    def from_os_specific(stros_specific, inttype) -> Any: ...
    @staticmethod
    def from_os_specific_w(unicodeos_specific, inttype) -> Any: ...
    def getAccessTimestamp(self, *args, **kwargs): ...
    def getBasename(self, *args, **kwargs): ...
    def getBasenameWoExtension(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getCommonAppdataDirectory(*args, **kwargs): ...
    def getDirname(self, *args, **kwargs): ...
    def getExtension(self, *args, **kwargs): ...
    def getFileSize(self, *args, **kwargs): ...
    def getFilenameIndex(self, *args, **kwargs): ...
    @staticmethod
    def getFilesystemEncoding(*args, **kwargs): ...
    def getFullpath(self, *args, **kwargs): ...
    def getFullpathW(self, *args, **kwargs): ...
    def getFullpathWoExtension(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getHashToEnd(self, *args, **kwargs): ...
    @staticmethod
    def getHomeDirectory(*args, **kwargs): ...
    def getPattern(self, *args, **kwargs): ...
    @staticmethod
    def getTempDirectory(*args, **kwargs): ...
    def getTimestamp(self, *args, **kwargs): ...
    def getType(self, *args, **kwargs): ...
    @staticmethod
    def getUserAppdataDirectory(*args, **kwargs): ...
    def get_access_timestamp(self, Filenameself) -> Any: ...
    def get_basename(self, Filenameself) -> Any: ...
    def get_basename_wo_extension(self, Filenameself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_common_appdata_directory() -> Any: ...
    def get_dirname(self, Filenameself) -> Any: ...
    def get_extension(self, Filenameself) -> Any: ...
    def get_file_size(self, Filenameself) -> Any: ...
    def get_filename_index(self, Filenameself, intindex) -> Any: ...
    @staticmethod
    def get_filesystem_encoding() -> Any: ...
    def get_fullpath(self, Filenameself) -> Any: ...
    def get_fullpath_w(self, Filenameself) -> Any: ...
    def get_fullpath_wo_extension(self, Filenameself) -> Any: ...
    def get_hash(self, Filenameself) -> Any: ...
    def get_hash_to_end(self, Filenameself) -> Any: ...
    @staticmethod
    def get_home_directory() -> Any: ...
    def get_pattern(self, Filenameself) -> Any: ...
    @staticmethod
    def get_temp_directory() -> Any: ...
    def get_timestamp(self, Filenameself) -> Any: ...
    def get_type(self, Filenameself) -> Any: ...
    @staticmethod
    def get_user_appdata_directory() -> Any: ...
    def hasHash(self, *args, **kwargs): ...
    def has_hash(self, Filenameself) -> Any: ...
    def isBinary(self, *args, **kwargs): ...
    def isBinaryOrText(self, *args, **kwargs): ...
    def isDirectory(self, *args, **kwargs): ...
    def isExecutable(self, *args, **kwargs): ...
    def isFullyQualified(self, *args, **kwargs): ...
    def isLocal(self, *args, **kwargs): ...
    def isRegularFile(self, *args, **kwargs): ...
    def isText(self, *args, **kwargs): ...
    def isWritable(self, *args, **kwargs): ...
    @overload
    def is_binary(self, Filenameself) -> Any: ...
    @overload
    def is_binary(self) -> Any: ...
    def is_binary_or_text(self, Filenameself) -> Any: ...
    @overload
    def is_directory(self, Filenameself) -> Any: ...
    @overload
    def is_directory(self) -> Any: ...
    def is_executable(self, Filenameself) -> Any: ...
    def is_fully_qualified(self, Filenameself) -> Any: ...
    def is_local(self, Filenameself) -> Any: ...
    @overload
    def is_regular_file(self, Filenameself) -> Any: ...
    @overload
    def is_regular_file(self) -> Any: ...
    @overload
    def is_text(self, Filenameself) -> Any: ...
    @overload
    def is_text(self) -> Any: ...
    def is_writable(self, Filenameself) -> Any: ...
    def length(self, Filenameself) -> Any: ...
    def makeAbsolute(self, *args, **kwargs): ...
    def makeCanonical(self, *args, **kwargs): ...
    def makeDir(self, *args, **kwargs): ...
    def makeRelativeTo(self, *args, **kwargs): ...
    def makeTrueCase(self, *args, **kwargs): ...
    @overload
    def make_absolute(self, constFilenameself) -> Any: ...
    @overload
    def make_absolute(self, constFilenameself, constFilenamestart_directory) -> Any: ...
    def make_canonical(self, constFilenameself) -> Any: ...
    def make_dir(self, Filenameself) -> Any: ...
    @overload
    def make_relative_to(self, constFilenameself, Filenamedirectory, boolallow_backups) -> Any: ...
    @overload
    def make_relative_to(self) -> Any: ...
    def make_true_case(self, constFilenameself) -> Any: ...
    def mkdir(self, Filenameself) -> Any: ...
    def openAppend(self, *args, **kwargs): ...
    def openRead(self, *args, **kwargs): ...
    def openReadAppend(self, *args, **kwargs): ...
    def openReadWrite(self, *args, **kwargs): ...
    def openWrite(self, *args, **kwargs): ...
    @overload
    def open_append(self, Filenameself, OFileStreamstream) -> Any: ...
    @overload
    def open_append(self, Filenameself, ofstreamstream) -> Any: ...
    @overload
    def open_read(self, Filenameself, IFileStreamstream) -> Any: ...
    @overload
    def open_read(self, Filenameself, ifstreamstream) -> Any: ...
    @overload
    def open_read(self) -> Any: ...
    @overload
    def open_read(self) -> Any: ...
    @overload
    def open_read_append(self, Filenameself, FileStreamstream) -> Any: ...
    @overload
    def open_read_append(self, Filenameself, fstreamstream) -> Any: ...
    @overload
    def open_read_write(self, Filenameself, FileStreamstream, booltruncate) -> Any: ...
    @overload
    def open_read_write(self, Filenameself, fstreamstream, booltruncate) -> Any: ...
    @overload
    def open_read_write(self) -> Any: ...
    @overload
    def open_read_write(self) -> Any: ...
    @overload
    def open_write(self, Filenameself, OFileStreamstream, booltruncate) -> Any: ...
    @overload
    def open_write(self, Filenameself, ofstreamstream, booltruncate) -> Any: ...
    def output(self, Filenameself, ostreamout) -> Any: ...
    @staticmethod
    def patternFilename(*args, **kwargs): ...
    @staticmethod
    def pattern_filename(strfilename) -> Any: ...
    def renameTo(self, *args, **kwargs): ...
    def rename_to(self, Filenameself, constFilenameother) -> Any: ...
    def resolveFilename(self, *args, **kwargs): ...
    def resolve_filename(self, constFilenameself, constDSearchPathsearchpath, strdefault_extension) -> Any: ...
    def rmdir(self, Filenameself) -> Any: ...
    def scanDirectory(self, *args, **kwargs): ...
    def scan_directory(self, Filenameself) -> Any: ...
    def setBasename(self, *args, **kwargs): ...
    def setBasenameWoExtension(self, *args, **kwargs): ...
    def setBinary(self, *args, **kwargs): ...
    def setDirname(self, *args, **kwargs): ...
    def setExtension(self, *args, **kwargs): ...
    @staticmethod
    def setFilesystemEncoding(*args, **kwargs): ...
    def setFullpath(self, *args, **kwargs): ...
    def setFullpathWoExtension(self, *args, **kwargs): ...
    def setHashToEnd(self, *args, **kwargs): ...
    def setPattern(self, *args, **kwargs): ...
    def setText(self, *args, **kwargs): ...
    def setType(self, *args, **kwargs): ...
    def set_basename(self, constFilenameself, strs) -> Any: ...
    def set_basename_wo_extension(self, constFilenameself, strs) -> Any: ...
    def set_binary(self, constFilenameself) -> Any: ...
    def set_dirname(self, constFilenameself, strs) -> Any: ...
    def set_extension(self, constFilenameself, strs) -> Any: ...
    @staticmethod
    def set_filesystem_encoding(intencoding) -> Any: ...
    def set_fullpath(self, constFilenameself, strs) -> Any: ...
    def set_fullpath_wo_extension(self, constFilenameself, strs) -> Any: ...
    def set_hash_to_end(self, constFilenameself, strs) -> Any: ...
    def set_pattern(self, constFilenameself, boolpattern) -> Any: ...
    def set_text(self, constFilenameself) -> Any: ...
    def set_type(self, constFilenameself, inttype) -> Any: ...
    def standardize(self, constFilenameself) -> Any: ...
    @overload
    def substr(self, Filenameself, intbegin) -> Any: ...
    @overload
    def substr(self, Filenameself, intbegin, intend) -> Any: ...
    @staticmethod
    def temporary(strdirname, strprefix, strsuffix, inttype) -> Any: ...
    @staticmethod
    def textFilename(*args, **kwargs): ...
    @overload
    @staticmethod
    def text_filename(constFilenamefilename) -> Any: ...
    @overload
    @staticmethod
    def text_filename(strfilename) -> Any: ...
    def toOsGeneric(self, *args, **kwargs): ...
    def toOsLongName(self, *args, **kwargs): ...
    def toOsShortName(self, *args, **kwargs): ...
    def toOsSpecific(self, *args, **kwargs): ...
    def toOsSpecificW(self, *args, **kwargs): ...
    def to_os_generic(self, Filenameself) -> Any: ...
    def to_os_long_name(self, Filenameself) -> Any: ...
    def to_os_short_name(self, Filenameself) -> Any: ...
    def to_os_specific(self, Filenameself) -> Any: ...
    def to_os_specific_w(self, Filenameself) -> Any: ...
    def touch(self, Filenameself) -> Any: ...
    def unlink(self, Filenameself) -> Any: ...
    def __add__(self, other): ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __fspath__(self, Filenameself) -> Any: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __reduce__(self, Filenameself) -> Any: ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class FilterProperties(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addChorus(self, *args, **kwargs): ...
    def addCompress(self, *args, **kwargs): ...
    def addDistort(self, *args, **kwargs): ...
    def addEcho(self, *args, **kwargs): ...
    def addFlange(self, *args, **kwargs): ...
    def addHighpass(self, *args, **kwargs): ...
    def addLowpass(self, *args, **kwargs): ...
    def addNormalize(self, *args, **kwargs): ...
    def addParameq(self, *args, **kwargs): ...
    def addPitchshift(self, *args, **kwargs): ...
    def addSfxreverb(self, *args, **kwargs): ...
    def add_chorus(
        self, constFilterPropertiesself, floatdrymix, floatwet1, floatwet2, floatwet3, floatdelay, floatrate, floatdepth
    ) -> Any: ...
    def add_compress(
        self, constFilterPropertiesself, floatthreshold, floatattack, floatrelease, floatgainmakeup
    ) -> Any: ...
    def add_distort(self, constFilterPropertiesself, floatlevel) -> Any: ...
    def add_echo(self, constFilterPropertiesself, floatdrymix, floatwetmix, floatdelay, floatdecayratio) -> Any: ...
    def add_flange(self, constFilterPropertiesself, floatdrymix, floatwetmix, floatdepth, floatrate) -> Any: ...
    def add_highpass(self, constFilterPropertiesself, floatcutoff_freq, floatresonance_q) -> Any: ...
    def add_lowpass(self, constFilterPropertiesself, floatcutoff_freq, floatresonance_q) -> Any: ...
    def add_normalize(self, constFilterPropertiesself, floatfadetime, floatthreshold, floatmaxamp) -> Any: ...
    def add_parameq(self, constFilterPropertiesself, floatcenter_freq, floatbandwidth, floatgain) -> Any: ...
    def add_pitchshift(self, constFilterPropertiesself, floatpitch, floatfftsize, floatoverlap) -> Any: ...
    def add_sfxreverb(
        self,
        constFilterPropertiesself,
        floatdrylevel,
        floatroom,
        floatroomhf,
        floatdecaytime,
        floatdecayhfratio,
        floatreflectionslevel,
        floatreflectionsdelay,
        floatreverblevel,
        floatreverbdelay,
        floatdiffusion,
        floatdensity,
        floathfreference,
        floatroomlf,
        floatlfreference,
    ) -> Any: ...
    def clear(self, constFilterPropertiesself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class FiniteBoundingVolume(GeometricBoundingVolume):
    DtoolClassDict: ClassVar[dict] = ...
    max: Incomplete
    min: Incomplete
    volume: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMax(self, *args, **kwargs): ...
    def getMin(self, *args, **kwargs): ...
    def getVolume(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_max(self, FiniteBoundingVolumeself) -> Any: ...
    def get_min(self, FiniteBoundingVolumeself) -> Any: ...
    def get_volume(self, FiniteBoundingVolumeself) -> Any: ...

class FisheyeMaker(Namable):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def generate(self, constFisheyeMakerself) -> Any: ...
    def reset(self, constFisheyeMakerself) -> Any: ...
    def setFov(self, *args, **kwargs): ...
    def setNumVertices(self, *args, **kwargs): ...
    def setReflection(self, *args, **kwargs): ...
    def setSquareInscribed(self, *args, **kwargs): ...
    def set_fov(self, constFisheyeMakerself, floatfov) -> Any: ...
    def set_num_vertices(self, constFisheyeMakerself, intnum_vertices) -> Any: ...
    def set_reflection(self, constFisheyeMakerself, boolreflection) -> Any: ...
    def set_square_inscribed(self, constFisheyeMakerself, boolsquare_inscribed, floatsquare_radius) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class FlacAudio(MovieAudio):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def make(constFilenamename) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class FlacAudioCursor(MovieAudioCursor):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Fog(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    MExponential: ClassVar[int] = ...
    MExponentialSquared: ClassVar[int] = ...
    MLinear: ClassVar[int] = ...
    M_exponential: ClassVar[int] = ...
    M_exponential_squared: ClassVar[int] = ...
    M_linear: ClassVar[int] = ...
    color: Incomplete
    exp_density: Incomplete
    linear_onset_point: Incomplete
    linear_opaque_point: Incomplete
    mode: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColor(self, *args, **kwargs): ...
    def getExpDensity(self, *args, **kwargs): ...
    def getLinearOnsetPoint(self, *args, **kwargs): ...
    def getLinearOpaquePoint(self, *args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_color(self, Fogself) -> Any: ...
    def get_exp_density(self, Fogself) -> Any: ...
    def get_linear_onset_point(self, Fogself) -> Any: ...
    def get_linear_opaque_point(self, Fogself) -> Any: ...
    def get_mode(self, Fogself) -> Any: ...
    def setColor(self, *args, **kwargs): ...
    def setExpDensity(self, *args, **kwargs): ...
    def setLinearFallback(self, *args, **kwargs): ...
    def setLinearOnsetPoint(self, *args, **kwargs): ...
    def setLinearOpaquePoint(self, *args, **kwargs): ...
    def setLinearRange(self, *args, **kwargs): ...
    def setMode(self, *args, **kwargs): ...
    @overload
    def set_color(self, constFogself, constLVecBase4fcolor) -> Any: ...
    @overload
    def set_color(self, constFogself, floatr, floatg, floatb) -> Any: ...
    def set_exp_density(self, constFogself, floatexp_density) -> Any: ...
    def set_linear_fallback(self, constFogself, floatangle, floatonset, floatopaque) -> Any: ...
    @overload
    def set_linear_onset_point(self, constFogself, constLPoint3flinear_onset_point) -> Any: ...
    @overload
    def set_linear_onset_point(self, constFogself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_linear_opaque_point(self, constFogself, constLPoint3flinear_opaque_point) -> Any: ...
    @overload
    def set_linear_opaque_point(self, constFogself, floatx, floaty, floatz) -> Any: ...
    def set_linear_range(self, constFogself, floatonset, floatopaque) -> Any: ...
    def set_mode(self, constFogself, intmode) -> Any: ...

class FogAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    class_slot: Incomplete
    fog: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFog(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_fog(self, FogAttribself) -> Any: ...
    def isOff(self, *args, **kwargs): ...
    def is_off(self, FogAttribself) -> Any: ...
    @staticmethod
    def make(Fogfog) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeOff(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_off() -> Any: ...

class FontPool(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def addFont(*args, **kwargs): ...
    @staticmethod
    def add_font(strfilename, TextFontfont) -> Any: ...
    @staticmethod
    def garbageCollect(*args, **kwargs): ...
    @staticmethod
    def garbage_collect() -> Any: ...
    @staticmethod
    def hasFont(*args, **kwargs): ...
    @staticmethod
    def has_font(strfilename) -> Any: ...
    @staticmethod
    def listContents(*args, **kwargs): ...
    @staticmethod
    def list_contents(ostreamout) -> Any: ...
    @staticmethod
    def loadFont(*args, **kwargs): ...
    @staticmethod
    def load_font(strfilename) -> Any: ...
    @staticmethod
    def releaseAllFonts(*args, **kwargs): ...
    @staticmethod
    def releaseFont(*args, **kwargs): ...
    @staticmethod
    def release_all_fonts() -> Any: ...
    @staticmethod
    def release_font(strfilename) -> Any: ...
    @staticmethod
    def verifyFont(*args, **kwargs): ...
    @staticmethod
    def verify_font(strfilename) -> Any: ...
    @staticmethod
    def write(ostreamout) -> Any: ...

class FrameBufferProperties(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    accum_bits: Incomplete
    alpha_bits: Incomplete
    aux_float: Incomplete
    aux_hrgba: Incomplete
    aux_rgba: Incomplete
    back_buffers: Incomplete
    blue_bits: Incomplete
    color_bits: Incomplete
    coverage_samples: Incomplete
    depth_bits: Incomplete
    float_color: Incomplete
    float_depth: Incomplete
    force_hardware: Incomplete
    force_software: Incomplete
    green_bits: Incomplete
    indexed_color: Incomplete
    multisamples: Incomplete
    red_bits: Incomplete
    rgb_color: Incomplete
    srgb_color: Incomplete
    stencil_bits: Incomplete
    stereo: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addProperties(self, *args, **kwargs): ...
    def add_properties(self, constFrameBufferPropertiesself, constFrameBufferPropertiesother) -> Any: ...
    def clear(self, constFrameBufferPropertiesself) -> Any: ...
    def getAccumBits(self, *args, **kwargs): ...
    def getAlphaBits(self, *args, **kwargs): ...
    def getAuxFloat(self, *args, **kwargs): ...
    def getAuxHrgba(self, *args, **kwargs): ...
    def getAuxMask(self, *args, **kwargs): ...
    def getAuxRgba(self, *args, **kwargs): ...
    def getBackBuffers(self, *args, **kwargs): ...
    def getBlueBits(self, *args, **kwargs): ...
    def getBufferMask(self, *args, **kwargs): ...
    def getColorBits(self, *args, **kwargs): ...
    def getCoverageSamples(self, *args, **kwargs): ...
    @staticmethod
    def getDefault(*args, **kwargs): ...
    def getDepthBits(self, *args, **kwargs): ...
    def getFloatColor(self, *args, **kwargs): ...
    def getFloatDepth(self, *args, **kwargs): ...
    def getForceHardware(self, *args, **kwargs): ...
    def getForceSoftware(self, *args, **kwargs): ...
    def getGreenBits(self, *args, **kwargs): ...
    def getIndexedColor(self, *args, **kwargs): ...
    def getMultisamples(self, *args, **kwargs): ...
    def getQuality(self, *args, **kwargs): ...
    def getRedBits(self, *args, **kwargs): ...
    def getRgbColor(self, *args, **kwargs): ...
    def getSrgbColor(self, *args, **kwargs): ...
    def getStencilBits(self, *args, **kwargs): ...
    def getStereo(self, *args, **kwargs): ...
    def get_accum_bits(self, FrameBufferPropertiesself) -> Any: ...
    def get_alpha_bits(self, FrameBufferPropertiesself) -> Any: ...
    def get_aux_float(self, FrameBufferPropertiesself) -> Any: ...
    def get_aux_hrgba(self, FrameBufferPropertiesself) -> Any: ...
    def get_aux_mask(self, FrameBufferPropertiesself) -> Any: ...
    def get_aux_rgba(self, FrameBufferPropertiesself) -> Any: ...
    def get_back_buffers(self, FrameBufferPropertiesself) -> Any: ...
    def get_blue_bits(self, FrameBufferPropertiesself) -> Any: ...
    def get_buffer_mask(self, FrameBufferPropertiesself) -> Any: ...
    def get_color_bits(self, FrameBufferPropertiesself) -> Any: ...
    def get_coverage_samples(self, FrameBufferPropertiesself) -> Any: ...
    @staticmethod
    def get_default() -> Any: ...
    def get_depth_bits(self, FrameBufferPropertiesself) -> Any: ...
    def get_float_color(self, FrameBufferPropertiesself) -> Any: ...
    def get_float_depth(self, FrameBufferPropertiesself) -> Any: ...
    def get_force_hardware(self, FrameBufferPropertiesself) -> Any: ...
    def get_force_software(self, FrameBufferPropertiesself) -> Any: ...
    def get_green_bits(self, FrameBufferPropertiesself) -> Any: ...
    def get_indexed_color(self, FrameBufferPropertiesself) -> Any: ...
    def get_multisamples(self, FrameBufferPropertiesself) -> Any: ...
    def get_quality(self, FrameBufferPropertiesself, constFrameBufferPropertiesreqs) -> Any: ...
    def get_red_bits(self, FrameBufferPropertiesself) -> Any: ...
    def get_rgb_color(self, FrameBufferPropertiesself) -> Any: ...
    def get_srgb_color(self, FrameBufferPropertiesself) -> Any: ...
    def get_stencil_bits(self, FrameBufferPropertiesself) -> Any: ...
    def get_stereo(self, FrameBufferPropertiesself) -> Any: ...
    def isAnySpecified(self, *args, **kwargs): ...
    def isBasic(self, *args, **kwargs): ...
    def isSingleBuffered(self, *args, **kwargs): ...
    def isStereo(self, *args, **kwargs): ...
    def is_any_specified(self, FrameBufferPropertiesself) -> Any: ...
    def is_basic(self, FrameBufferPropertiesself) -> Any: ...
    def is_single_buffered(self, FrameBufferPropertiesself) -> Any: ...
    def is_stereo(self, FrameBufferPropertiesself) -> Any: ...
    def output(self, FrameBufferPropertiesself, ostreamout) -> Any: ...
    def setAccumBits(self, *args, **kwargs): ...
    def setAllSpecified(self, *args, **kwargs): ...
    def setAlphaBits(self, *args, **kwargs): ...
    def setAuxFloat(self, *args, **kwargs): ...
    def setAuxHrgba(self, *args, **kwargs): ...
    def setAuxRgba(self, *args, **kwargs): ...
    def setBackBuffers(self, *args, **kwargs): ...
    def setBlueBits(self, *args, **kwargs): ...
    def setColorBits(self, *args, **kwargs): ...
    def setCoverageSamples(self, *args, **kwargs): ...
    def setDepthBits(self, *args, **kwargs): ...
    def setFloatColor(self, *args, **kwargs): ...
    def setFloatDepth(self, *args, **kwargs): ...
    def setForceHardware(self, *args, **kwargs): ...
    def setForceSoftware(self, *args, **kwargs): ...
    def setGreenBits(self, *args, **kwargs): ...
    def setIndexedColor(self, *args, **kwargs): ...
    def setMultisamples(self, *args, **kwargs): ...
    def setOneBitPerChannel(self, *args, **kwargs): ...
    def setRedBits(self, *args, **kwargs): ...
    def setRgbColor(self, *args, **kwargs): ...
    def setRgbaBits(self, *args, **kwargs): ...
    def setSrgbColor(self, *args, **kwargs): ...
    def setStencilBits(self, *args, **kwargs): ...
    def setStereo(self, *args, **kwargs): ...
    def set_accum_bits(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_all_specified(self, constFrameBufferPropertiesself) -> Any: ...
    def set_alpha_bits(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_aux_float(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_aux_hrgba(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_aux_rgba(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_back_buffers(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_blue_bits(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_color_bits(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_coverage_samples(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_depth_bits(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_float_color(self, constFrameBufferPropertiesself, booln) -> Any: ...
    def set_float_depth(self, constFrameBufferPropertiesself, booln) -> Any: ...
    def set_force_hardware(self, constFrameBufferPropertiesself, booln) -> Any: ...
    def set_force_software(self, constFrameBufferPropertiesself, booln) -> Any: ...
    def set_green_bits(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_indexed_color(self, constFrameBufferPropertiesself, booln) -> Any: ...
    def set_multisamples(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_one_bit_per_channel(self, constFrameBufferPropertiesself) -> Any: ...
    def set_red_bits(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_rgb_color(self, constFrameBufferPropertiesself, booln) -> Any: ...
    def set_rgba_bits(self, constFrameBufferPropertiesself, intr, intg, intb, inta) -> Any: ...
    def set_srgb_color(self, constFrameBufferPropertiesself, booln) -> Any: ...
    def set_stencil_bits(self, constFrameBufferPropertiesself, intn) -> Any: ...
    def set_stereo(self, constFrameBufferPropertiesself, booln) -> Any: ...
    def setupColorTexture(self, *args, **kwargs): ...
    def setupDepthTexture(self, *args, **kwargs): ...
    def setup_color_texture(self, FrameBufferPropertiesself, Texturetex) -> Any: ...
    def setup_depth_texture(self, FrameBufferPropertiesself, Texturetex) -> Any: ...
    def subsumes(self, FrameBufferPropertiesself, constFrameBufferPropertiesother) -> Any: ...
    def verifyHardwareSoftware(self, *args, **kwargs): ...
    def verify_hardware_software(
        self, FrameBufferPropertiesself, constFrameBufferPropertiesprops, strrenderer
    ) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class FrameRateMeter(TextNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearWindow(self, *args, **kwargs): ...
    def clear_window(self, constFrameRateMeterself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getClockObject(self, *args, **kwargs): ...
    def getDisplayRegion(self, *args, **kwargs): ...
    def getTextPattern(self, *args, **kwargs): ...
    def getUpdateInterval(self, *args, **kwargs): ...
    def getWindow(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_clock_object(self, FrameRateMeterself) -> Any: ...
    def get_display_region(self, FrameRateMeterself) -> Any: ...
    def get_text_pattern(self, FrameRateMeterself) -> Any: ...
    def get_update_interval(self, FrameRateMeterself) -> Any: ...
    def get_window(self, FrameRateMeterself) -> Any: ...
    def setClockObject(self, *args, **kwargs): ...
    def setTextPattern(self, *args, **kwargs): ...
    def setUpdateInterval(self, *args, **kwargs): ...
    def set_clock_object(self, constFrameRateMeterself, ClockObjectclock_object) -> Any: ...
    def set_text_pattern(self, constFrameRateMeterself, strtext_pattern) -> Any: ...
    def set_update_interval(self, constFrameRateMeterself, doubleupdate_interval) -> Any: ...
    def setupWindow(self, *args, **kwargs): ...
    def setup_window(self, constFrameRateMeterself, GraphicsOutputwindow) -> Any: ...
    def update(self, constFrameRateMeterself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class FreetypeFont(Namable):
    DtoolClassDict: ClassVar[dict] = ...
    WODefault: ClassVar[int] = ...
    WOInvalid: ClassVar[int] = ...
    WOLeft: ClassVar[int] = ...
    WORight: ClassVar[int] = ...
    WO_default: ClassVar[int] = ...
    WO_invalid: ClassVar[int] = ...
    WO_left: ClassVar[int] = ...
    WO_right: ClassVar[int] = ...
    winding_order: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getFontPixelSize(self, *args, **kwargs): ...
    def getLineHeight(self, *args, **kwargs): ...
    def getNativeAntialias(self, *args, **kwargs): ...
    def getPixelSize(self, *args, **kwargs): ...
    def getPixelsPerUnit(self, *args, **kwargs): ...
    def getPointSize(self, *args, **kwargs): ...
    @staticmethod
    def getPointsPerInch(*args, **kwargs): ...
    @staticmethod
    def getPointsPerUnit(*args, **kwargs): ...
    def getScaleFactor(self, *args, **kwargs): ...
    def getSpaceAdvance(self, *args, **kwargs): ...
    def getWindingOrder(self, *args, **kwargs): ...
    def get_font_pixel_size(self, FreetypeFontself) -> Any: ...
    def get_line_height(self, FreetypeFontself) -> Any: ...
    def get_native_antialias(self, FreetypeFontself) -> Any: ...
    def get_pixel_size(self, FreetypeFontself) -> Any: ...
    def get_pixels_per_unit(self, FreetypeFontself) -> Any: ...
    def get_point_size(self, FreetypeFontself) -> Any: ...
    @staticmethod
    def get_points_per_inch() -> Any: ...
    @staticmethod
    def get_points_per_unit() -> Any: ...
    def get_scale_factor(self, FreetypeFontself) -> Any: ...
    def get_space_advance(self, FreetypeFontself) -> Any: ...
    def get_winding_order(self, FreetypeFontself) -> Any: ...
    def setNativeAntialias(self, *args, **kwargs): ...
    def setPixelSize(self, *args, **kwargs): ...
    def setPixelsPerUnit(self, *args, **kwargs): ...
    def setPointSize(self, *args, **kwargs): ...
    def setScaleFactor(self, *args, **kwargs): ...
    def setWindingOrder(self, *args, **kwargs): ...
    def set_native_antialias(self, constFreetypeFontself, boolnative_antialias) -> Any: ...
    def set_pixel_size(self, constFreetypeFontself, floatpixel_size) -> Any: ...
    def set_pixels_per_unit(self, constFreetypeFontself, floatpixels_per_unit) -> Any: ...
    def set_point_size(self, constFreetypeFontself, floatpoint_size) -> Any: ...
    def set_scale_factor(self, constFreetypeFontself, floatscale_factor) -> Any: ...
    def set_winding_order(self, constFreetypeFontself, intwinding_order) -> Any: ...

class Frustum(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def makeOrtho(self, *args, **kwargs): ...
    def makeOrtho2D(self, *args, **kwargs): ...
    def makePerspective(self, *args, **kwargs): ...
    def makePerspectiveHfov(self, *args, **kwargs): ...
    def makePerspectiveVfov(self, *args, **kwargs): ...
    @overload
    def make_ortho(self, constLFrustumfself, floatfnear, floatffar) -> Any: ...
    @overload
    def make_ortho(self, constLFrustumfself, floatfnear, floatffar, floatl, floatr, floatt, floatb) -> Any: ...
    @overload
    def make_ortho_2D(self, constLFrustumfself) -> Any: ...
    @overload
    def make_ortho_2D(self, constLFrustumfself, floatl, floatr, floatt, floatb) -> Any: ...
    def make_perspective(self, constLFrustumfself, floatxfov, floatyfov, floatfnear, floatffar) -> Any: ...
    def make_perspective_hfov(self, constLFrustumfself, floatxfov, floataspect, floatfnear, floatffar) -> Any: ...
    def make_perspective_vfov(self, constLFrustumfself, floatyfov, floataspect, floatfnear, floatffar) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class FrustumD(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def makeOrtho(self, *args, **kwargs): ...
    def makeOrtho2D(self, *args, **kwargs): ...
    def makePerspective(self, *args, **kwargs): ...
    def makePerspectiveHfov(self, *args, **kwargs): ...
    def makePerspectiveVfov(self, *args, **kwargs): ...
    @overload
    def make_ortho(self, constLFrustumdself, doublefnear, doubleffar) -> Any: ...
    @overload
    def make_ortho(self, constLFrustumdself, doublefnear, doubleffar, doublel, doubler, doublet, doubleb) -> Any: ...
    @overload
    def make_ortho_2D(self, constLFrustumdself) -> Any: ...
    @overload
    def make_ortho_2D(self, constLFrustumdself, doublel, doubler, doublet, doubleb) -> Any: ...
    def make_perspective(self, constLFrustumdself, doublexfov, doubleyfov, doublefnear, doubleffar) -> Any: ...
    def make_perspective_hfov(self, constLFrustumdself, doublexfov, doubleaspect, doublefnear, doubleffar) -> Any: ...
    def make_perspective_vfov(self, constLFrustumdself, doubleyfov, doubleaspect, doublefnear, doubleffar) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class FrustumF(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def makeOrtho(self, *args, **kwargs): ...
    def makeOrtho2D(self, *args, **kwargs): ...
    def makePerspective(self, *args, **kwargs): ...
    def makePerspectiveHfov(self, *args, **kwargs): ...
    def makePerspectiveVfov(self, *args, **kwargs): ...
    @overload
    def make_ortho(self, constLFrustumfself, floatfnear, floatffar) -> Any: ...
    @overload
    def make_ortho(self, constLFrustumfself, floatfnear, floatffar, floatl, floatr, floatt, floatb) -> Any: ...
    @overload
    def make_ortho_2D(self, constLFrustumfself) -> Any: ...
    @overload
    def make_ortho_2D(self, constLFrustumfself, floatl, floatr, floatt, floatb) -> Any: ...
    def make_perspective(self, constLFrustumfself, floatxfov, floatyfov, floatfnear, floatffar) -> Any: ...
    def make_perspective_hfov(self, constLFrustumfself, floatxfov, floataspect, floatfnear, floatffar) -> Any: ...
    def make_perspective_vfov(self, constLFrustumfself, floatyfov, floataspect, floatfnear, floatffar) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Fstream(iostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constfstreamself) -> Any: ...

class GamepadButton(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def back() -> Any: ...
    @staticmethod
    def dpadDown(*args, **kwargs): ...
    @staticmethod
    def dpadLeft(*args, **kwargs): ...
    @staticmethod
    def dpadRight(*args, **kwargs): ...
    @staticmethod
    def dpadUp(*args, **kwargs): ...
    @staticmethod
    def dpad_down() -> Any: ...
    @staticmethod
    def dpad_left() -> Any: ...
    @staticmethod
    def dpad_right() -> Any: ...
    @staticmethod
    def dpad_up() -> Any: ...
    @staticmethod
    def face1(*args, **kwargs): ...
    @staticmethod
    def face2(*args, **kwargs): ...
    @staticmethod
    def faceA(*args, **kwargs): ...
    @staticmethod
    def faceB(*args, **kwargs): ...
    @staticmethod
    def faceC(*args, **kwargs): ...
    @staticmethod
    def faceX(*args, **kwargs): ...
    @staticmethod
    def faceY(*args, **kwargs): ...
    @staticmethod
    def faceZ(*args, **kwargs): ...
    @staticmethod
    def face_1() -> Any: ...
    @staticmethod
    def face_2() -> Any: ...
    @staticmethod
    def face_a() -> Any: ...
    @staticmethod
    def face_b() -> Any: ...
    @staticmethod
    def face_c() -> Any: ...
    @staticmethod
    def face_x() -> Any: ...
    @staticmethod
    def face_y() -> Any: ...
    @staticmethod
    def face_z() -> Any: ...
    @staticmethod
    def guide() -> Any: ...
    @staticmethod
    def hatDown(*args, **kwargs): ...
    @staticmethod
    def hatLeft(*args, **kwargs): ...
    @staticmethod
    def hatRight(*args, **kwargs): ...
    @staticmethod
    def hatUp(*args, **kwargs): ...
    @staticmethod
    def hat_down() -> Any: ...
    @staticmethod
    def hat_left() -> Any: ...
    @staticmethod
    def hat_right() -> Any: ...
    @staticmethod
    def hat_up() -> Any: ...
    @staticmethod
    def joystick(intbutton_number) -> Any: ...
    @staticmethod
    def lgrip() -> Any: ...
    @staticmethod
    def lshoulder() -> Any: ...
    @staticmethod
    def lstick() -> Any: ...
    @staticmethod
    def ltrigger() -> Any: ...
    @staticmethod
    def next() -> Any: ...
    @staticmethod
    def previous() -> Any: ...
    @staticmethod
    def rgrip() -> Any: ...
    @staticmethod
    def rshoulder() -> Any: ...
    @staticmethod
    def rstick() -> Any: ...
    @staticmethod
    def rtrigger() -> Any: ...
    @staticmethod
    def start() -> Any: ...
    @staticmethod
    def trigger() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeoMipTerrain(TypedObject):
    AFMLight: ClassVar[int] = ...
    AFMMedium: ClassVar[int] = ...
    AFMOff: ClassVar[int] = ...
    AFMStrong: ClassVar[int] = ...
    AFM_light: ClassVar[int] = ...
    AFM_medium: ClassVar[int] = ...
    AFM_off: ClassVar[int] = ...
    AFM_strong: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def calcAmbientOcclusion(self, *args, **kwargs): ...
    def calc_ambient_occlusion(self, constGeoMipTerrainself, floatradius, floatcontrast, floatbrightness) -> Any: ...
    def clearColorMap(self, *args, **kwargs): ...
    def clear_color_map(self, constGeoMipTerrainself) -> Any: ...
    def colorMap(self, *args, **kwargs): ...
    def color_map(self, constGeoMipTerrainself) -> Any: ...
    def generate(self, constGeoMipTerrainself) -> Any: ...
    def getBlockFromPos(self, *args, **kwargs): ...
    def getBlockNodePath(self, *args, **kwargs): ...
    def getBlockSize(self, *args, **kwargs): ...
    def getBorderStitching(self, *args, **kwargs): ...
    def getBruteforce(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getElevation(self, *args, **kwargs): ...
    def getFar(self, *args, **kwargs): ...
    def getFlattenMode(self, *args, **kwargs): ...
    def getFocalPoint(self, *args, **kwargs): ...
    def getMaxLevel(self, *args, **kwargs): ...
    def getMinLevel(self, *args, **kwargs): ...
    def getNear(self, *args, **kwargs): ...
    def getNormal(self, *args, **kwargs): ...
    def getRoot(self, *args, **kwargs): ...
    def get_block_from_pos(self, constGeoMipTerrainself, doublex, doubley) -> Any: ...
    def get_block_node_path(self, constGeoMipTerrainself, intmx, intmy) -> Any: ...
    def get_block_size(self, constGeoMipTerrainself) -> Any: ...
    def get_border_stitching(self, constGeoMipTerrainself) -> Any: ...
    def get_bruteforce(self, constGeoMipTerrainself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_elevation(self, constGeoMipTerrainself, doublex, doubley) -> Any: ...
    @overload
    def get_elevation(self, x, y) -> Any: ...
    def get_far(self, constGeoMipTerrainself) -> Any: ...
    def get_flatten_mode(self, constGeoMipTerrainself) -> Any: ...
    def get_focal_point(self, GeoMipTerrainself) -> Any: ...
    def get_max_level(self, constGeoMipTerrainself) -> Any: ...
    def get_min_level(self, constGeoMipTerrainself) -> Any: ...
    def get_near(self, constGeoMipTerrainself) -> Any: ...
    @overload
    def get_normal(self, constGeoMipTerrainself, intx, inty) -> Any: ...
    @overload
    def get_normal(self, constGeoMipTerrainself, intmx, intmy, intx, inty) -> Any: ...
    @overload
    def get_normal(self, x, y) -> Any: ...
    def get_root(self, GeoMipTerrainself) -> Any: ...
    def hasColorMap(self, *args, **kwargs): ...
    def has_color_map(self, GeoMipTerrainself) -> Any: ...
    @overload
    def heightfield(self, constGeoMipTerrainself) -> Any: ...
    @overload
    def heightfield(self, aPNMImage) -> Any: ...
    def isDirty(self, *args, **kwargs): ...
    def is_dirty(self, constGeoMipTerrainself) -> Any: ...
    def makeSlopeImage(self, *args, **kwargs): ...
    def make_slope_image(self, constGeoMipTerrainself) -> Any: ...
    def setAutoFlatten(self, *args, **kwargs): ...
    def setBlockSize(self, *args, **kwargs): ...
    def setBorderStitching(self, *args, **kwargs): ...
    def setBruteforce(self, *args, **kwargs): ...
    def setColorMap(self, *args, **kwargs): ...
    def setFactor(self, *args, **kwargs): ...
    def setFar(self, *args, **kwargs): ...
    def setFocalPoint(self, *args, **kwargs): ...
    def setHeightfield(self, *args, **kwargs): ...
    def setMinLevel(self, *args, **kwargs): ...
    def setNear(self, *args, **kwargs): ...
    def setNearFar(self, *args, **kwargs): ...
    def set_auto_flatten(self, constGeoMipTerrainself, intmode) -> Any: ...
    def set_block_size(self, constGeoMipTerrainself, intnewbs) -> Any: ...
    def set_border_stitching(self, constGeoMipTerrainself, boolstitching) -> Any: ...
    def set_bruteforce(self, constGeoMipTerrainself, boolbf) -> Any: ...
    @overload
    def set_color_map(self, constGeoMipTerrainself, constFilenamefilename) -> Any: ...
    @overload
    def set_color_map(self, constGeoMipTerrainself, constTextureimage) -> Any: ...
    @overload
    def set_color_map(self, constGeoMipTerrainself, constPNMImageimage) -> Any: ...
    @overload
    def set_color_map(self, constGeoMipTerrainself, strpath) -> Any: ...
    def set_factor(self, constGeoMipTerrainself, floatfactor) -> Any: ...
    def set_far(self, constGeoMipTerrainself, doubleinput_far) -> Any: ...
    @overload
    def set_focal_point(self, constGeoMipTerrainself, constLPoint2dfp) -> Any: ...
    @overload
    def set_focal_point(self, constGeoMipTerrainself, constLPoint2ffp) -> Any: ...
    @overload
    def set_focal_point(self, constGeoMipTerrainself, constLPoint3dfp) -> Any: ...
    @overload
    def set_focal_point(self, constGeoMipTerrainself, constLPoint3ffp) -> Any: ...
    @overload
    def set_focal_point(self, constGeoMipTerrainself, NodePathfnp) -> Any: ...
    @overload
    def set_focal_point(self, constGeoMipTerrainself, doublex, doubley) -> Any: ...
    @overload
    def set_heightfield(self, constGeoMipTerrainself, constFilenamefilename) -> Any: ...
    @overload
    def set_heightfield(self, constGeoMipTerrainself, constPNMImageimage) -> Any: ...
    def set_min_level(self, constGeoMipTerrainself, intminlevel) -> Any: ...
    def set_near(self, constGeoMipTerrainself, doubleinput_near) -> Any: ...
    def set_near_far(self, constGeoMipTerrainself, doubleinput_near, doubleinput_far) -> Any: ...
    def update(self, constGeoMipTerrainself) -> Any: ...

class Geom(CopyOnWriteObject, GeomEnums):
    DtoolClassDict: ClassVar[dict] = ...
    bounds_type: Incomplete
    geom_rendering: Incomplete
    modified: Incomplete
    num_bytes: Incomplete
    primitive_type: Incomplete
    primitives: Incomplete
    shade_model: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addPrimitive(self, *args, **kwargs): ...
    def add_primitive(self, constGeomself, constGeomPrimitiveprimitive) -> Any: ...
    def checkValid(self, *args, **kwargs): ...
    @overload
    def check_valid(self, Geomself) -> Any: ...
    @overload
    def check_valid(self, Geomself, constGeomVertexDatavertex_data) -> Any: ...
    def clearBounds(self, *args, **kwargs): ...
    def clearCache(self, *args, **kwargs): ...
    def clearCacheStage(self, *args, **kwargs): ...
    def clearPrimitives(self, *args, **kwargs): ...
    def clear_bounds(self, constGeomself) -> Any: ...
    def clear_cache(self, constGeomself) -> Any: ...
    def clear_cache_stage(self, constGeomself, Threadcurrent_thread) -> Any: ...
    def clear_primitives(self, constGeomself) -> Any: ...
    def copyPrimitivesFrom(self, *args, **kwargs): ...
    def copy_primitives_from(self, constGeomself, constGeomother) -> Any: ...
    @overload
    def decompose(self, Geomself) -> Any: ...
    @overload
    def decompose(self) -> Any: ...
    def decomposeInPlace(self, *args, **kwargs): ...
    def decompose_in_place(self, constGeomself) -> Any: ...
    @overload
    def doubleside(self, Geomself) -> Any: ...
    @overload
    def doubleside(self) -> Any: ...
    def doublesideInPlace(self, *args, **kwargs): ...
    def doubleside_in_place(self, constGeomself) -> Any: ...
    def getAnimatedVertexData(self, *args, **kwargs): ...
    def getBounds(self, *args, **kwargs): ...
    def getBoundsType(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getGeomRendering(self, *args, **kwargs): ...
    def getModified(self, *args, **kwargs): ...
    def getNestedVertices(self, *args, **kwargs): ...
    def getNumBytes(self, *args, **kwargs): ...
    def getNumPrimitives(self, *args, **kwargs): ...
    def getPrimitive(self, *args, **kwargs): ...
    def getPrimitiveType(self, *args, **kwargs): ...
    def getPrimitives(self, *args, **kwargs): ...
    def getShadeModel(self, *args, **kwargs): ...
    def getUsageHint(self, *args, **kwargs): ...
    def getVertexData(self, *args, **kwargs): ...
    def get_animated_vertex_data(self, Geomself, boolforce, Threadcurrent_thread) -> Any: ...
    def get_bounds(self, Geomself, Threadcurrent_thread) -> Any: ...
    def get_bounds_type(self, Geomself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_geom_rendering(self, Geomself) -> Any: ...
    def get_modified(self, Geomself, Threadcurrent_thread) -> Any: ...
    def get_nested_vertices(self, Geomself, Threadcurrent_thread) -> Any: ...
    def get_num_bytes(self, Geomself) -> Any: ...
    def get_num_primitives(self, Geomself) -> Any: ...
    def get_primitive(self, Geomself, inti) -> Any: ...
    def get_primitive_type(self, Geomself) -> Any: ...
    def get_primitives(self, *args, **kwargs): ...
    def get_shade_model(self, Geomself) -> Any: ...
    def get_usage_hint(self, Geomself) -> Any: ...
    def get_vertex_data(self, Geomself, Threadcurrent_thread) -> Any: ...
    def insertPrimitive(self, *args, **kwargs): ...
    def insert_primitive(self, constGeomself, inti, constGeomPrimitiveprimitive) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def isPrepared(self, *args, **kwargs): ...
    def is_empty(self, Geomself) -> Any: ...
    def is_prepared(self, Geomself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def makeAdjacency(self, *args, **kwargs): ...
    def makeAdjacencyInPlace(self, *args, **kwargs): ...
    def makeCopy(self, *args, **kwargs): ...
    def makeLines(self, *args, **kwargs): ...
    def makeLinesInPlace(self, *args, **kwargs): ...
    def makeNonindexed(self, *args, **kwargs): ...
    def makePatches(self, *args, **kwargs): ...
    def makePatchesInPlace(self, *args, **kwargs): ...
    def makePoints(self, *args, **kwargs): ...
    def makePointsInPlace(self, *args, **kwargs): ...
    def make_adjacency(self, Geomself) -> Any: ...
    def make_adjacency_in_place(self, constGeomself) -> Any: ...
    def make_copy(self, Geomself) -> Any: ...
    @overload
    def make_lines(self, Geomself) -> Any: ...
    @overload
    def make_lines(self) -> Any: ...
    def make_lines_in_place(self, constGeomself) -> Any: ...
    def make_nonindexed(self, constGeomself, boolcomposite_only) -> Any: ...
    def make_patches(self, Geomself) -> Any: ...
    def make_patches_in_place(self, constGeomself) -> Any: ...
    @overload
    def make_points(self, Geomself) -> Any: ...
    @overload
    def make_points(self) -> Any: ...
    def make_points_in_place(self, constGeomself) -> Any: ...
    def markBoundsStale(self, *args, **kwargs): ...
    def mark_bounds_stale(self, Geomself) -> Any: ...
    def modifyPrimitive(self, *args, **kwargs): ...
    def modifyVertexData(self, *args, **kwargs): ...
    def modify_primitive(self, constGeomself, inti) -> Any: ...
    def modify_vertex_data(self, constGeomself) -> Any: ...
    def offsetVertices(self, *args, **kwargs): ...
    def offset_vertices(self, constGeomself, constGeomVertexDatadata, intoffset) -> Any: ...
    def output(self, Geomself, ostreamout) -> Any: ...
    def prepare(self, constGeomself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def prepareNow(self, *args, **kwargs): ...
    def prepare_now(
        self, constGeomself, PreparedGraphicsObjectsprepared_objects, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    def release(self, constGeomself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def releaseAll(self, *args, **kwargs): ...
    def release_all(self, constGeomself) -> Any: ...
    def removePrimitive(self, *args, **kwargs): ...
    def remove_primitive(self, constGeomself, inti) -> Any: ...
    def requestResident(self, *args, **kwargs): ...
    def request_resident(self, Geomself) -> Any: ...
    @overload
    def reverse(self, Geomself) -> Any: ...
    @overload
    def reverse(self) -> Any: ...
    def reverseInPlace(self, *args, **kwargs): ...
    def reverse_in_place(self, constGeomself) -> Any: ...
    @overload
    def rotate(self, Geomself) -> Any: ...
    @overload
    def rotate(self) -> Any: ...
    def rotateInPlace(self, *args, **kwargs): ...
    def rotate_in_place(self, constGeomself) -> Any: ...
    def setBounds(self, *args, **kwargs): ...
    def setBoundsType(self, *args, **kwargs): ...
    def setPrimitive(self, *args, **kwargs): ...
    def setUsageHint(self, *args, **kwargs): ...
    def setVertexData(self, *args, **kwargs): ...
    def set_bounds(self, constGeomself, constBoundingVolumevolume) -> Any: ...
    def set_bounds_type(self, constGeomself, intbounds_type) -> Any: ...
    def set_primitive(self, constGeomself, inti, constGeomPrimitiveprimitive) -> Any: ...
    def set_usage_hint(self, constGeomself, intusage_hint) -> Any: ...
    def set_vertex_data(self, constGeomself, constGeomVertexDatadata) -> Any: ...
    def transformVertices(self, *args, **kwargs): ...
    def transform_vertices(self, constGeomself, constLMatrix4fmat) -> Any: ...
    def unify(self, Geomself, intmax_indices, boolpreserve_order) -> Any: ...
    def unifyInPlace(self, *args, **kwargs): ...
    def unify_in_place(self, constGeomself, intmax_indices, boolpreserve_order) -> Any: ...
    def upcastToCopyOnWriteObject(self, *args, **kwargs): ...
    def upcastToGeomEnums(self, *args, **kwargs): ...
    def upcast_to_CopyOnWriteObject(self, constGeomself) -> Any: ...
    def upcast_to_GeomEnums(self, constGeomself) -> Any: ...
    def write(self, Geomself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomCacheManager(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def flush(self, constGeomCacheManagerself) -> Any: ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getMaxSize(self, *args, **kwargs): ...
    def getTotalSize(self, *args, **kwargs): ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_max_size(self, GeomCacheManagerself) -> Any: ...
    def get_total_size(self, GeomCacheManagerself) -> Any: ...
    def setMaxSize(self, *args, **kwargs): ...
    def set_max_size(self, GeomCacheManagerself, intmax_size) -> Any: ...

class GeomContext(SavedContext):
    DtoolClassDict: ClassVar[dict] = ...
    geom: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getGeom(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_geom(self, GeomContextself) -> Any: ...

class GeomDrawCallbackData(CallbackData):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getForce(self, *args, **kwargs): ...
    def getGsg(self, *args, **kwargs): ...
    def getLostState(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_force(self, GeomDrawCallbackDataself) -> Any: ...
    def get_gsg(self, GeomDrawCallbackDataself) -> Any: ...
    def get_lost_state(self, GeomDrawCallbackDataself) -> Any: ...
    def setLostState(self, *args, **kwargs): ...
    def set_lost_state(self, constGeomDrawCallbackDataself, boollost_state) -> Any: ...

class GeomEnums(dtoolconfig.DTOOL_SUPER_BASE):
    ATHardware: ClassVar[int] = ...
    ATNone: ClassVar[int] = ...
    ATPanda: ClassVar[int] = ...
    AT_hardware: ClassVar[int] = ...
    AT_none: ClassVar[int] = ...
    AT_panda: ClassVar[int] = ...
    CClipPoint: ClassVar[int] = ...
    CColor: ClassVar[int] = ...
    CIndex: ClassVar[int] = ...
    CMatrix: ClassVar[int] = ...
    CMorphDelta: ClassVar[int] = ...
    CNormal: ClassVar[int] = ...
    COther: ClassVar[int] = ...
    CPoint: ClassVar[int] = ...
    CTexcoord: ClassVar[int] = ...
    CVector: ClassVar[int] = ...
    C_clip_point: ClassVar[int] = ...
    C_color: ClassVar[int] = ...
    C_index: ClassVar[int] = ...
    C_matrix: ClassVar[int] = ...
    C_morph_delta: ClassVar[int] = ...
    C_normal: ClassVar[int] = ...
    C_other: ClassVar[int] = ...
    C_point: ClassVar[int] = ...
    C_texcoord: ClassVar[int] = ...
    C_vector: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    GRAdjacency: ClassVar[int] = ...
    GRCompositeBits: ClassVar[int] = ...
    GRFlatFirstVertex: ClassVar[int] = ...
    GRFlatLastVertex: ClassVar[int] = ...
    GRIndexedBits: ClassVar[int] = ...
    GRIndexedOther: ClassVar[int] = ...
    GRIndexedPoint: ClassVar[int] = ...
    GRLineStrip: ClassVar[int] = ...
    GRPerPointSize: ClassVar[int] = ...
    GRPoint: ClassVar[int] = ...
    GRPointAspectRatio: ClassVar[int] = ...
    GRPointBits: ClassVar[int] = ...
    GRPointPerspective: ClassVar[int] = ...
    GRPointRotate: ClassVar[int] = ...
    GRPointScale: ClassVar[int] = ...
    GRPointSprite: ClassVar[int] = ...
    GRPointSpriteTexMatrix: ClassVar[int] = ...
    GRPointUniformSize: ClassVar[int] = ...
    GRRenderModePoint: ClassVar[int] = ...
    GRRenderModeWireframe: ClassVar[int] = ...
    GRShadeModelBits: ClassVar[int] = ...
    GRStripCutIndex: ClassVar[int] = ...
    GRTriangleFan: ClassVar[int] = ...
    GRTriangleStrip: ClassVar[int] = ...
    GR_adjacency: ClassVar[int] = ...
    GR_composite_bits: ClassVar[int] = ...
    GR_flat_first_vertex: ClassVar[int] = ...
    GR_flat_last_vertex: ClassVar[int] = ...
    GR_indexed_bits: ClassVar[int] = ...
    GR_indexed_other: ClassVar[int] = ...
    GR_indexed_point: ClassVar[int] = ...
    GR_line_strip: ClassVar[int] = ...
    GR_per_point_size: ClassVar[int] = ...
    GR_point: ClassVar[int] = ...
    GR_point_aspect_ratio: ClassVar[int] = ...
    GR_point_bits: ClassVar[int] = ...
    GR_point_perspective: ClassVar[int] = ...
    GR_point_rotate: ClassVar[int] = ...
    GR_point_scale: ClassVar[int] = ...
    GR_point_sprite: ClassVar[int] = ...
    GR_point_sprite_tex_matrix: ClassVar[int] = ...
    GR_point_uniform_size: ClassVar[int] = ...
    GR_render_mode_point: ClassVar[int] = ...
    GR_render_mode_wireframe: ClassVar[int] = ...
    GR_shade_model_bits: ClassVar[int] = ...
    GR_strip_cut_index: ClassVar[int] = ...
    GR_triangle_fan: ClassVar[int] = ...
    GR_triangle_strip: ClassVar[int] = ...
    NTFloat32: ClassVar[int] = ...
    NTFloat64: ClassVar[int] = ...
    NTInt16: ClassVar[int] = ...
    NTInt32: ClassVar[int] = ...
    NTInt8: ClassVar[int] = ...
    NTPackedDabc: ClassVar[int] = ...
    NTPackedDcba: ClassVar[int] = ...
    NTPackedUfloat: ClassVar[int] = ...
    NTStdfloat: ClassVar[int] = ...
    NTUint16: ClassVar[int] = ...
    NTUint32: ClassVar[int] = ...
    NTUint8: ClassVar[int] = ...
    NT_float32: ClassVar[int] = ...
    NT_float64: ClassVar[int] = ...
    NT_int16: ClassVar[int] = ...
    NT_int32: ClassVar[int] = ...
    NT_int8: ClassVar[int] = ...
    NT_packed_dabc: ClassVar[int] = ...
    NT_packed_dcba: ClassVar[int] = ...
    NT_packed_ufloat: ClassVar[int] = ...
    NT_stdfloat: ClassVar[int] = ...
    NT_uint16: ClassVar[int] = ...
    NT_uint32: ClassVar[int] = ...
    NT_uint8: ClassVar[int] = ...
    PTLines: ClassVar[int] = ...
    PTNone: ClassVar[int] = ...
    PTPatches: ClassVar[int] = ...
    PTPoints: ClassVar[int] = ...
    PTPolygons: ClassVar[int] = ...
    PT_lines: ClassVar[int] = ...
    PT_none: ClassVar[int] = ...
    PT_patches: ClassVar[int] = ...
    PT_points: ClassVar[int] = ...
    PT_polygons: ClassVar[int] = ...
    SMFlatFirstVertex: ClassVar[int] = ...
    SMFlatLastVertex: ClassVar[int] = ...
    SMSmooth: ClassVar[int] = ...
    SMUniform: ClassVar[int] = ...
    SM_flat_first_vertex: ClassVar[int] = ...
    SM_flat_last_vertex: ClassVar[int] = ...
    SM_smooth: ClassVar[int] = ...
    SM_uniform: ClassVar[int] = ...
    UHClient: ClassVar[int] = ...
    UHDynamic: ClassVar[int] = ...
    UHStatic: ClassVar[int] = ...
    UHStream: ClassVar[int] = ...
    UHUnspecified: ClassVar[int] = ...
    UH_client: ClassVar[int] = ...
    UH_dynamic: ClassVar[int] = ...
    UH_static: ClassVar[int] = ...
    UH_stream: ClassVar[int] = ...
    UH_unspecified: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomLines(GeomPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomLinesAdjacency(GeomPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomLinestrips(GeomPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomLinestripsAdjacency(GeomPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    default_collide_mask: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addGeom(self, *args, **kwargs): ...
    def addGeomsFrom(self, *args, **kwargs): ...
    def add_geom(self, constGeomNodeself, Geomgeom, constRenderStatestate) -> Any: ...
    def add_geoms_from(self, constGeomNodeself, constGeomNodeother) -> Any: ...
    def checkValid(self, *args, **kwargs): ...
    def check_valid(self, GeomNodeself) -> Any: ...
    @overload
    def decompose(self, constGeomNodeself) -> Any: ...
    @overload
    def decompose(self) -> Any: ...
    @overload
    def decompose(self) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getDefaultCollideMask(*args, **kwargs): ...
    def getGeom(self, *args, **kwargs): ...
    def getGeomState(self, *args, **kwargs): ...
    def getGeomStates(self, *args, **kwargs): ...
    def getGeoms(self, *args, **kwargs): ...
    def getNumGeoms(self, *args, **kwargs): ...
    def getPreserved(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_default_collide_mask() -> Any: ...
    def get_geom(self, GeomNodeself, intn) -> Any: ...
    def get_geom_state(self, GeomNodeself, intn) -> Any: ...
    def get_geom_states(self, *args, **kwargs): ...
    def get_geoms(self, *args, **kwargs): ...
    def get_num_geoms(self, GeomNodeself) -> Any: ...
    def get_preserved(self, GeomNodeself) -> Any: ...
    def modifyGeom(self, *args, **kwargs): ...
    def modifyGeoms(self, *args, **kwargs): ...
    def modify_geom(self, constGeomNodeself, intn) -> Any: ...
    def modify_geoms(self, *args, **kwargs): ...
    def removeAllGeoms(self, *args, **kwargs): ...
    def removeGeom(self, *args, **kwargs): ...
    def remove_all_geoms(self, constGeomNodeself) -> Any: ...
    def remove_geom(self, constGeomNodeself, intn) -> Any: ...
    def setGeom(self, *args, **kwargs): ...
    def setGeomState(self, *args, **kwargs): ...
    def setPreserved(self, *args, **kwargs): ...
    def set_geom(self, constGeomNodeself, intn, Geomgeom) -> Any: ...
    def set_geom_state(self, constGeomNodeself, intn, constRenderStatestate) -> Any: ...
    def set_preserved(self, constGeomNodeself, boolvalue) -> Any: ...
    @overload
    def unify(self, constGeomNodeself, intmax_indices, boolpreserve_order) -> Any: ...
    @overload
    def unify(self) -> Any: ...
    def writeGeoms(self, *args, **kwargs): ...
    def writeVerbose(self, *args, **kwargs): ...
    def write_geoms(self, GeomNodeself, ostreamout, intindent_level) -> Any: ...
    def write_verbose(self, GeomNodeself, ostreamout, intindent_level) -> Any: ...

class GeomPatches(GeomPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomPoints(GeomPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomPrimitive(CopyOnWriteObject, GeomEnums):
    DtoolClassDict: ClassVar[dict] = ...
    data_size_bytes: Incomplete
    geom_rendering: Incomplete
    index_stride: Incomplete
    index_type: Incomplete
    maxs: Incomplete
    min_num_vertices_per_primitive: Incomplete
    mins: Incomplete
    modified: Incomplete
    num_bytes: Incomplete
    num_unused_vertices_per_primitive: Incomplete
    num_vertices_per_primitive: Incomplete
    primitive_type: Incomplete
    shade_model: Incomplete
    strip_cut_index: Incomplete
    usage_hint: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addConsecutiveVertices(self, *args, **kwargs): ...
    def addNextVertices(self, *args, **kwargs): ...
    def addVertex(self, *args, **kwargs): ...
    def addVertices(self, *args, **kwargs): ...
    def add_consecutive_vertices(self, constGeomPrimitiveself, intstart, intnum_vertices) -> Any: ...
    def add_next_vertices(self, constGeomPrimitiveself, intnum_vertices) -> Any: ...
    @overload
    def add_vertex(self, constGeomPrimitiveself, intvertex) -> Any: ...
    @overload
    def add_vertex(self) -> Any: ...
    @overload
    def add_vertices(self, constGeomPrimitiveself, intv1, intv2) -> Any: ...
    @overload
    def add_vertices(self, constGeomPrimitiveself, intv1, intv2, intv3) -> Any: ...
    @overload
    def add_vertices(self, constGeomPrimitiveself, intv1, intv2, intv3, intv4) -> Any: ...
    def checkValid(self, *args, **kwargs): ...
    def check_valid(self, GeomPrimitiveself, constGeomVertexDatavertex_data) -> Any: ...
    def clearMinmax(self, *args, **kwargs): ...
    def clearVertices(self, *args, **kwargs): ...
    def clear_minmax(self, constGeomPrimitiveself) -> Any: ...
    def clear_vertices(self, constGeomPrimitiveself) -> Any: ...
    def closePrimitive(self, *args, **kwargs): ...
    @overload
    def close_primitive(self, constGeomPrimitiveself) -> Any: ...
    @overload
    def close_primitive(self) -> Any: ...
    def decompose(self, GeomPrimitiveself) -> Any: ...
    @overload
    def doubleside(self, GeomPrimitiveself) -> Any: ...
    @overload
    def doubleside(self) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDataSizeBytes(self, *args, **kwargs): ...
    def getEnds(self, *args, **kwargs): ...
    def getFirstVertex(self, *args, **kwargs): ...
    def getGeomRendering(self, *args, **kwargs): ...
    def getIndexStride(self, *args, **kwargs): ...
    def getIndexType(self, *args, **kwargs): ...
    def getMaxVertex(self, *args, **kwargs): ...
    def getMaxs(self, *args, **kwargs): ...
    def getMinNumVerticesPerPrimitive(self, *args, **kwargs): ...
    def getMinVertex(self, *args, **kwargs): ...
    def getMins(self, *args, **kwargs): ...
    def getModified(self, *args, **kwargs): ...
    def getNumBytes(self, *args, **kwargs): ...
    def getNumFaces(self, *args, **kwargs): ...
    def getNumPrimitives(self, *args, **kwargs): ...
    def getNumUnusedVerticesPerPrimitive(self, *args, **kwargs): ...
    def getNumUsedVertices(self, *args, **kwargs): ...
    def getNumVertices(self, *args, **kwargs): ...
    def getNumVerticesPerPrimitive(self, *args, **kwargs): ...
    def getPrimitiveEnd(self, *args, **kwargs): ...
    def getPrimitiveMaxVertex(self, *args, **kwargs): ...
    def getPrimitiveMinVertex(self, *args, **kwargs): ...
    def getPrimitiveNumFaces(self, *args, **kwargs): ...
    def getPrimitiveNumVertices(self, *args, **kwargs): ...
    def getPrimitiveStart(self, *args, **kwargs): ...
    def getPrimitiveType(self, *args, **kwargs): ...
    def getShadeModel(self, *args, **kwargs): ...
    def getStripCutIndex(self, *args, **kwargs): ...
    def getUsageHint(self, *args, **kwargs): ...
    def getVertex(self, *args, **kwargs): ...
    def getVertexList(self, *args, **kwargs): ...
    def getVertices(self, *args, **kwargs): ...
    def getVerticesHandle(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_data_size_bytes(self, GeomPrimitiveself) -> Any: ...
    def get_ends(self, GeomPrimitiveself) -> Any: ...
    @overload
    def get_first_vertex(self, GeomPrimitiveself) -> Any: ...
    @overload
    def get_first_vertex(self) -> Any: ...
    def get_geom_rendering(self, GeomPrimitiveself) -> Any: ...
    def get_index_stride(self, GeomPrimitiveself) -> Any: ...
    def get_index_type(self, GeomPrimitiveself) -> Any: ...
    def get_max_vertex(self, GeomPrimitiveself) -> Any: ...
    def get_maxs(self, GeomPrimitiveself) -> Any: ...
    def get_min_num_vertices_per_primitive(self, GeomPrimitiveself) -> Any: ...
    def get_min_vertex(self, GeomPrimitiveself) -> Any: ...
    def get_mins(self, GeomPrimitiveself) -> Any: ...
    def get_modified(self, GeomPrimitiveself) -> Any: ...
    def get_num_bytes(self, GeomPrimitiveself) -> Any: ...
    def get_num_faces(self, GeomPrimitiveself) -> Any: ...
    def get_num_primitives(self, GeomPrimitiveself) -> Any: ...
    def get_num_unused_vertices_per_primitive(self, GeomPrimitiveself) -> Any: ...
    def get_num_used_vertices(self, GeomPrimitiveself) -> Any: ...
    def get_num_vertices(self, GeomPrimitiveself) -> Any: ...
    def get_num_vertices_per_primitive(self, GeomPrimitiveself) -> Any: ...
    def get_primitive_end(self, GeomPrimitiveself, intn) -> Any: ...
    def get_primitive_max_vertex(self, GeomPrimitiveself, intn) -> Any: ...
    def get_primitive_min_vertex(self, GeomPrimitiveself, intn) -> Any: ...
    def get_primitive_num_faces(self, GeomPrimitiveself, intn) -> Any: ...
    def get_primitive_num_vertices(self, GeomPrimitiveself, intn) -> Any: ...
    def get_primitive_start(self, GeomPrimitiveself, intn) -> Any: ...
    def get_primitive_type(self, GeomPrimitiveself) -> Any: ...
    def get_shade_model(self, GeomPrimitiveself) -> Any: ...
    def get_strip_cut_index(self, GeomPrimitiveself) -> Any: ...
    def get_usage_hint(self, GeomPrimitiveself) -> Any: ...
    def get_vertex(self, GeomPrimitiveself, inti) -> Any: ...
    def get_vertex_list(self, *args, **kwargs): ...
    def get_vertices(self, GeomPrimitiveself) -> Any: ...
    def get_vertices_handle(self, GeomPrimitiveself, Threadcurrent_thread) -> Any: ...
    def isComposite(self, *args, **kwargs): ...
    def isIndexed(self, *args, **kwargs): ...
    def is_composite(self, GeomPrimitiveself) -> Any: ...
    def is_indexed(self, GeomPrimitiveself) -> Any: ...
    def makeAdjacency(self, *args, **kwargs): ...
    def makeCopy(self, *args, **kwargs): ...
    def makeIndexed(self, *args, **kwargs): ...
    def makeLines(self, *args, **kwargs): ...
    def makeNonindexed(self, *args, **kwargs): ...
    def makePatches(self, *args, **kwargs): ...
    def makePoints(self, *args, **kwargs): ...
    def make_adjacency(self, GeomPrimitiveself) -> Any: ...
    def make_copy(self, GeomPrimitiveself) -> Any: ...
    def make_indexed(self, constGeomPrimitiveself) -> Any: ...
    def make_lines(self, GeomPrimitiveself) -> Any: ...
    def make_nonindexed(self, constGeomPrimitiveself, GeomVertexDatadest, constGeomVertexDatasource) -> Any: ...
    def make_patches(self, GeomPrimitiveself) -> Any: ...
    def make_points(self, GeomPrimitiveself) -> Any: ...
    def matchShadeModel(self, *args, **kwargs): ...
    def match_shade_model(self, GeomPrimitiveself, intshade_model) -> Any: ...
    def modifyEnds(self, *args, **kwargs): ...
    def modifyVertices(self, *args, **kwargs): ...
    def modifyVerticesHandle(self, *args, **kwargs): ...
    def modify_ends(self, constGeomPrimitiveself) -> Any: ...
    def modify_vertices(self, constGeomPrimitiveself, intnum_vertices) -> Any: ...
    def modify_vertices_handle(self, constGeomPrimitiveself, Threadcurrent_thread) -> Any: ...
    def offsetVertices(self, *args, **kwargs): ...
    @overload
    def offset_vertices(self, constGeomPrimitiveself, intoffset) -> Any: ...
    @overload
    def offset_vertices(self, constGeomPrimitiveself, intoffset, intbegin_row, intend_row) -> Any: ...
    def output(self, GeomPrimitiveself, ostreamout) -> Any: ...
    def packVertices(self, *args, **kwargs): ...
    def pack_vertices(self, constGeomPrimitiveself, GeomVertexDatadest, constGeomVertexDatasource) -> Any: ...
    def requestResident(self, *args, **kwargs): ...
    def request_resident(self, GeomPrimitiveself, Threadcurrent_thread) -> Any: ...
    def reserveNumVertices(self, *args, **kwargs): ...
    def reserve_num_vertices(self, constGeomPrimitiveself, intnum_vertices) -> Any: ...
    def reverse(self, GeomPrimitiveself) -> Any: ...
    def rotate(self, GeomPrimitiveself) -> Any: ...
    def setEnds(self, *args, **kwargs): ...
    def setIndexType(self, *args, **kwargs): ...
    def setMinmax(self, *args, **kwargs): ...
    def setNonindexedVertices(self, *args, **kwargs): ...
    def setShadeModel(self, *args, **kwargs): ...
    def setUsageHint(self, *args, **kwargs): ...
    def setVertices(self, *args, **kwargs): ...
    def set_ends(self, constGeomPrimitiveself, PointerToArrayends) -> Any: ...
    def set_index_type(self, constGeomPrimitiveself, intindex_type) -> Any: ...
    def set_minmax(
        self, constGeomPrimitiveself, intmin_vertex, intmax_vertex, GeomVertexArrayDatamins, GeomVertexArrayDatamaxs
    ) -> Any: ...
    def set_nonindexed_vertices(self, constGeomPrimitiveself, intfirst_vertex, intnum_vertices) -> Any: ...
    def set_shade_model(self, constGeomPrimitiveself, intshade_model) -> Any: ...
    def set_usage_hint(self, constGeomPrimitiveself, intusage_hint) -> Any: ...
    def set_vertices(self, constGeomPrimitiveself, constGeomVertexArrayDatavertices, intnum_vertices) -> Any: ...
    def upcastToCopyOnWriteObject(self, *args, **kwargs): ...
    def upcastToGeomEnums(self, *args, **kwargs): ...
    def upcast_to_CopyOnWriteObject(self, constGeomPrimitiveself) -> Any: ...
    def upcast_to_GeomEnums(self, constGeomPrimitiveself) -> Any: ...
    def write(self, GeomPrimitiveself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomTextGlyph(Geom):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class GeomTriangles(GeomPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomTrianglesAdjacency(GeomPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomTrifans(GeomPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomTristrips(GeomPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomTristripsAdjacency(GeomPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomVertexAnimationSpec(GeomEnums):
    DtoolClassDict: ClassVar[dict] = ...
    animation_type: Incomplete
    indexed_transforms: Incomplete
    num_transforms: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constGeomVertexAnimationSpecself, constGeomVertexAnimationSpecother) -> Any: ...
    def getAnimationType(self, *args, **kwargs): ...
    def getIndexedTransforms(self, *args, **kwargs): ...
    def getNumTransforms(self, *args, **kwargs): ...
    def get_animation_type(self, GeomVertexAnimationSpecself) -> Any: ...
    def get_indexed_transforms(self, GeomVertexAnimationSpecself) -> Any: ...
    def get_num_transforms(self, GeomVertexAnimationSpecself) -> Any: ...
    def output(self, GeomVertexAnimationSpecself, ostreamout) -> Any: ...
    def setHardware(self, *args, **kwargs): ...
    def setNone(self, *args, **kwargs): ...
    def setPanda(self, *args, **kwargs): ...
    def set_hardware(self, constGeomVertexAnimationSpecself, intnum_transforms, boolindexed_transforms) -> Any: ...
    def set_none(self, constGeomVertexAnimationSpecself) -> Any: ...
    def set_panda(self, constGeomVertexAnimationSpecself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomVertexArrayData(CopyOnWriteObject, SimpleLruPage, GeomEnums):
    DtoolClassDict: ClassVar[dict] = ...
    array_format: Incomplete
    data_size_bytes: Incomplete
    modified: Incomplete
    usage_hint: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearRows(self, *args, **kwargs): ...
    def clear_rows(self, constGeomVertexArrayDataself) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, GeomVertexArrayDataself, constGeomVertexArrayDataother) -> Any: ...
    def getArrayFormat(self, *args, **kwargs): ...
    @staticmethod
    def getBook(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDataSizeBytes(self, *args, **kwargs): ...
    def getHandle(self, *args, **kwargs): ...
    @staticmethod
    def getIndependentLru(*args, **kwargs): ...
    def getModified(self, *args, **kwargs): ...
    def getNumRows(self, *args, **kwargs): ...
    @staticmethod
    def getSmallLru(*args, **kwargs): ...
    def getUsageHint(self, *args, **kwargs): ...
    def get_array_format(self, GeomVertexArrayDataself) -> Any: ...
    @staticmethod
    def get_book() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_data_size_bytes(self, GeomVertexArrayDataself) -> Any: ...
    def get_handle(self, GeomVertexArrayDataself, Threadcurrent_thread) -> Any: ...
    @staticmethod
    def get_independent_lru() -> Any: ...
    def get_modified(self, GeomVertexArrayDataself) -> Any: ...
    def get_num_rows(self, GeomVertexArrayDataself) -> Any: ...
    @staticmethod
    def get_small_lru() -> Any: ...
    def get_usage_hint(self, GeomVertexArrayDataself) -> Any: ...
    def hasColumn(self, *args, **kwargs): ...
    def has_column(self, GeomVertexArrayDataself, constInternalNamename) -> Any: ...
    def isPrepared(self, *args, **kwargs): ...
    def is_prepared(self, GeomVertexArrayDataself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    @staticmethod
    def lruEpoch(*args, **kwargs): ...
    @staticmethod
    def lru_epoch() -> Any: ...
    def modifyHandle(self, *args, **kwargs): ...
    def modify_handle(self, constGeomVertexArrayDataself, Threadcurrent_thread) -> Any: ...
    def output(self, GeomVertexArrayDataself, ostreamout) -> Any: ...
    def prepare(self, constGeomVertexArrayDataself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def prepareNow(self, *args, **kwargs): ...
    def prepare_now(
        self, constGeomVertexArrayDataself, PreparedGraphicsObjectsprepared_objects, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    def release(self, constGeomVertexArrayDataself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def releaseAll(self, *args, **kwargs): ...
    def release_all(self, constGeomVertexArrayDataself) -> Any: ...
    def requestResident(self, *args, **kwargs): ...
    def request_resident(self, GeomVertexArrayDataself, Threadcurrent_thread) -> Any: ...
    def reserveNumRows(self, *args, **kwargs): ...
    def reserve_num_rows(self, constGeomVertexArrayDataself, intn) -> Any: ...
    def setNumRows(self, *args, **kwargs): ...
    def setUsageHint(self, *args, **kwargs): ...
    @overload
    def set_num_rows(self, constGeomVertexArrayDataself, intn) -> Any: ...
    @overload
    def set_num_rows(self) -> Any: ...
    @overload
    def set_num_rows(self) -> Any: ...
    def set_usage_hint(self, constGeomVertexArrayDataself, intusage_hint) -> Any: ...
    def uncleanSetNumRows(self, *args, **kwargs): ...
    @overload
    def unclean_set_num_rows(self, constGeomVertexArrayDataself, intn) -> Any: ...
    @overload
    def unclean_set_num_rows(self) -> Any: ...
    def upcastToCopyOnWriteObject(self, *args, **kwargs): ...
    def upcastToGeomEnums(self, *args, **kwargs): ...
    def upcastToSimpleLruPage(self, *args, **kwargs): ...
    def upcast_to_CopyOnWriteObject(self, constGeomVertexArrayDataself) -> Any: ...
    def upcast_to_GeomEnums(self, constGeomVertexArrayDataself) -> Any: ...
    def upcast_to_SimpleLruPage(self, constGeomVertexArrayDataself) -> Any: ...
    def write(self, GeomVertexArrayDataself, ostreamout, intindent_level) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...

class GeomVertexArrayDataHandle(ReferenceCount, GeomEnums):
    DtoolClassDict: ClassVar[dict] = ...
    array_format: Incomplete
    data_size_bytes: Incomplete
    modified: Incomplete
    object: Incomplete
    usage_hint: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearRows(self, *args, **kwargs): ...
    def clear_rows(self, constGeomVertexArrayDataHandleself) -> Any: ...
    def copyDataFrom(self, *args, **kwargs): ...
    def copySubdataFrom(self, *args, **kwargs): ...
    @overload
    def copy_data_from(self, constGeomVertexArrayDataHandleself, constGeomVertexArrayDataHandleother) -> Any: ...
    @overload
    def copy_data_from(self, constGeomVertexArrayDataHandleself, objectbuffer) -> Any: ...
    @overload
    def copy_subdata_from(self, constGeomVertexArrayDataHandleself, intto_start, intto_size, objectbuffer) -> Any: ...
    @overload
    def copy_subdata_from(
        self,
        constGeomVertexArrayDataHandleself,
        intto_start,
        intto_size,
        constGeomVertexArrayDataHandleother,
        intfrom_start,
        intfrom_size,
    ) -> Any: ...
    @overload
    def copy_subdata_from(
        self, constGeomVertexArrayDataHandleself, intto_start, intto_size, objectbuffer, intfrom_start, intfrom_size
    ) -> Any: ...
    def getArrayFormat(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getData(self, *args, **kwargs): ...
    def getDataSizeBytes(self, *args, **kwargs): ...
    def getModified(self, *args, **kwargs): ...
    def getNumRows(self, *args, **kwargs): ...
    def getObject(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def getUsageHint(self, *args, **kwargs): ...
    def get_array_format(self, GeomVertexArrayDataHandleself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_data(self, GeomVertexArrayDataHandleself) -> Any: ...
    def get_data_size_bytes(self, GeomVertexArrayDataHandleself) -> Any: ...
    def get_modified(self, GeomVertexArrayDataHandleself) -> Any: ...
    def get_num_rows(self, GeomVertexArrayDataHandleself) -> Any: ...
    @overload
    def get_object(self, constGeomVertexArrayDataHandleself) -> Any: ...
    @overload
    def get_object(self, GeomVertexArrayDataHandleself) -> Any: ...
    def get_subdata(self, GeomVertexArrayDataHandleself, intstart, intsize) -> Any: ...
    def get_usage_hint(self, GeomVertexArrayDataHandleself) -> Any: ...
    def markUsed(self, *args, **kwargs): ...
    def mark_used(self, GeomVertexArrayDataHandleself) -> Any: ...
    def prepareNow(self, *args, **kwargs): ...
    def prepare_now(
        self, GeomVertexArrayDataHandleself, PreparedGraphicsObjectsprepared_objects, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    def requestResident(self, *args, **kwargs): ...
    def request_resident(self, GeomVertexArrayDataHandleself) -> Any: ...
    def reserveNumRows(self, *args, **kwargs): ...
    def reserve_num_rows(self, constGeomVertexArrayDataHandleself, intn) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setNumRows(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constGeomVertexArrayDataHandleself, bytesdata) -> Any: ...
    def set_num_rows(self, constGeomVertexArrayDataHandleself, intn) -> Any: ...
    def set_subdata(self, constGeomVertexArrayDataHandleself, intstart, intsize, bytesdata) -> Any: ...
    def uncleanSetNumRows(self, *args, **kwargs): ...
    def unclean_set_num_rows(self, constGeomVertexArrayDataHandleself, intn) -> Any: ...
    def upcastToGeomEnums(self, *args, **kwargs): ...
    def upcastToReferenceCount(self, *args, **kwargs): ...
    def upcast_to_GeomEnums(self, constGeomVertexArrayDataHandleself) -> Any: ...
    def upcast_to_ReferenceCount(self, constGeomVertexArrayDataHandleself) -> Any: ...

class GeomVertexArrayFormat(TypedWritableReferenceCount, GeomEnums):
    DtoolClassDict: ClassVar[dict] = ...
    columns: Incomplete
    divisor: Incomplete
    pad_to: Incomplete
    registered: Incomplete
    stride: Incomplete
    total_bytes: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addColumn(self, *args, **kwargs): ...
    @overload
    def add_column(self, constGeomVertexArrayFormatself, constGeomVertexColumncolumn) -> Any: ...
    @overload
    def add_column(
        self,
        constGeomVertexArrayFormatself,
        constInternalNamename,
        intnum_components,
        intnumeric_type,
        intcontents,
        intstart,
        intcolumn_alignment,
    ) -> Any: ...
    def alignColumnsForAnimation(self, *args, **kwargs): ...
    def align_columns_for_animation(self, constGeomVertexArrayFormatself) -> Any: ...
    def assign(self, constGeomVertexArrayFormatself, constGeomVertexArrayFormatcopy) -> Any: ...
    def clearColumns(self, *args, **kwargs): ...
    def clear_columns(self, constGeomVertexArrayFormatself) -> Any: ...
    def countUnusedSpace(self, *args, **kwargs): ...
    def count_unused_space(self, GeomVertexArrayFormatself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColumn(self, *args, **kwargs): ...
    def getColumns(self, *args, **kwargs): ...
    def getDivisor(self, *args, **kwargs): ...
    def getFormatString(self, *args, **kwargs): ...
    def getNumColumns(self, *args, **kwargs): ...
    def getPadTo(self, *args, **kwargs): ...
    def getStride(self, *args, **kwargs): ...
    def getTotalBytes(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_column(self, GeomVertexArrayFormatself, constInternalNamename) -> Any: ...
    @overload
    def get_column(self, GeomVertexArrayFormatself, inti) -> Any: ...
    @overload
    def get_column(self, GeomVertexArrayFormatself, intstart_byte, intnum_bytes) -> Any: ...
    def get_columns(self, *args, **kwargs): ...
    def get_divisor(self, GeomVertexArrayFormatself) -> Any: ...
    def get_format_string(self, GeomVertexArrayFormatself, boolpad) -> Any: ...
    def get_num_columns(self, GeomVertexArrayFormatself) -> Any: ...
    def get_pad_to(self, GeomVertexArrayFormatself) -> Any: ...
    def get_stride(self, GeomVertexArrayFormatself) -> Any: ...
    def get_total_bytes(self, GeomVertexArrayFormatself) -> Any: ...
    def hasColumn(self, *args, **kwargs): ...
    def has_column(self, GeomVertexArrayFormatself, constInternalNamename) -> Any: ...
    def isDataSubsetOf(self, *args, **kwargs): ...
    def isRegistered(self, *args, **kwargs): ...
    def is_data_subset_of(self, GeomVertexArrayFormatself, constGeomVertexArrayFormatother) -> Any: ...
    def is_registered(self, GeomVertexArrayFormatself) -> Any: ...
    def output(self, GeomVertexArrayFormatself, ostreamout) -> Any: ...
    def packColumns(self, *args, **kwargs): ...
    def pack_columns(self, constGeomVertexArrayFormatself) -> Any: ...
    @staticmethod
    def registerFormat(*args, **kwargs): ...
    @overload
    @staticmethod
    def register_format(constGeomVertexArrayFormatformat) -> Any: ...
    @overload
    @staticmethod
    def register_format() -> Any: ...
    @overload
    @staticmethod
    def register_format() -> Any: ...
    def removeColumn(self, *args, **kwargs): ...
    def remove_column(self, constGeomVertexArrayFormatself, constInternalNamename) -> Any: ...
    def setDivisor(self, *args, **kwargs): ...
    def setPadTo(self, *args, **kwargs): ...
    def setStride(self, *args, **kwargs): ...
    def set_divisor(self, constGeomVertexArrayFormatself, intdivisor) -> Any: ...
    def set_pad_to(self, constGeomVertexArrayFormatself, intpad_to) -> Any: ...
    def set_stride(self, constGeomVertexArrayFormatself, intstride) -> Any: ...
    @overload
    def unref(self, GeomVertexArrayFormatself) -> Any: ...
    @overload
    def unref(self) -> Any: ...
    def upcastToGeomEnums(self, *args, **kwargs): ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_GeomEnums(self, constGeomVertexArrayFormatself) -> Any: ...
    def upcast_to_TypedWritableReferenceCount(self, constGeomVertexArrayFormatself) -> Any: ...
    def write(self, GeomVertexArrayFormatself, ostreamout, intindent_level) -> Any: ...
    def writeWithData(self, *args, **kwargs): ...
    def write_with_data(
        self, GeomVertexArrayFormatself, ostreamout, intindent_level, constGeomVertexArrayDataarray_data
    ) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomVertexColumn(GeomEnums):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constGeomVertexColumnself, constGeomVertexColumncopy) -> Any: ...
    def getColumnAlignment(self, *args, **kwargs): ...
    def getComponentBytes(self, *args, **kwargs): ...
    def getContents(self, *args, **kwargs): ...
    def getElementStride(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getNumElements(self, *args, **kwargs): ...
    def getNumValues(self, *args, **kwargs): ...
    def getNumericType(self, *args, **kwargs): ...
    def getStart(self, *args, **kwargs): ...
    def getTotalBytes(self, *args, **kwargs): ...
    def get_column_alignment(self, GeomVertexColumnself) -> Any: ...
    def get_component_bytes(self, GeomVertexColumnself) -> Any: ...
    def get_contents(self, GeomVertexColumnself) -> Any: ...
    def get_element_stride(self, GeomVertexColumnself) -> Any: ...
    def get_name(self, GeomVertexColumnself) -> Any: ...
    def get_num_components(self, GeomVertexColumnself) -> Any: ...
    def get_num_elements(self, GeomVertexColumnself) -> Any: ...
    def get_num_values(self, GeomVertexColumnself) -> Any: ...
    def get_numeric_type(self, GeomVertexColumnself) -> Any: ...
    def get_start(self, GeomVertexColumnself) -> Any: ...
    def get_total_bytes(self, GeomVertexColumnself) -> Any: ...
    def hasHomogeneousCoord(self, *args, **kwargs): ...
    def has_homogeneous_coord(self, GeomVertexColumnself) -> Any: ...
    def isBytewiseEquivalent(self, *args, **kwargs): ...
    def is_bytewise_equivalent(self, GeomVertexColumnself, constGeomVertexColumnother) -> Any: ...
    def output(self, GeomVertexColumnself, ostreamout) -> Any: ...
    def overlapsWith(self, *args, **kwargs): ...
    def overlaps_with(self, GeomVertexColumnself, intstart_byte, intnum_bytes) -> Any: ...
    def setColumnAlignment(self, *args, **kwargs): ...
    def setContents(self, *args, **kwargs): ...
    def setName(self, *args, **kwargs): ...
    def setNumComponents(self, *args, **kwargs): ...
    def setNumericType(self, *args, **kwargs): ...
    def setStart(self, *args, **kwargs): ...
    def set_column_alignment(self, constGeomVertexColumnself, intcolumn_alignment) -> Any: ...
    def set_contents(self, constGeomVertexColumnself, intcontents) -> Any: ...
    def set_name(self, constGeomVertexColumnself, InternalNamename) -> Any: ...
    def set_num_components(self, constGeomVertexColumnself, intnum_components) -> Any: ...
    def set_numeric_type(self, constGeomVertexColumnself, intnumeric_type) -> Any: ...
    def set_start(self, constGeomVertexColumnself, intstart) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomVertexData(CopyOnWriteObject, GeomEnums):
    DtoolClassDict: ClassVar[dict] = ...
    arrays: Incomplete
    format: Incomplete
    modified: Incomplete
    name: Incomplete
    num_bytes: Incomplete
    slider_table: Incomplete
    transform_table: Incomplete
    usage_hint: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def animateVertices(self, *args, **kwargs): ...
    def animate_vertices(self, GeomVertexDataself, boolforce, Threadcurrent_thread) -> Any: ...
    def clearAnimatedVertices(self, *args, **kwargs): ...
    def clearCache(self, *args, **kwargs): ...
    def clearCacheStage(self, *args, **kwargs): ...
    def clearRows(self, *args, **kwargs): ...
    def clearSliderTable(self, *args, **kwargs): ...
    def clearTransformBlendTable(self, *args, **kwargs): ...
    def clearTransformTable(self, *args, **kwargs): ...
    def clear_animated_vertices(self, constGeomVertexDataself) -> Any: ...
    def clear_cache(self, constGeomVertexDataself) -> Any: ...
    def clear_cache_stage(self, constGeomVertexDataself) -> Any: ...
    def clear_rows(self, constGeomVertexDataself) -> Any: ...
    def clear_slider_table(self, constGeomVertexDataself) -> Any: ...
    def clear_transform_blend_table(self, constGeomVertexDataself) -> Any: ...
    def clear_transform_table(self, constGeomVertexDataself) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, GeomVertexDataself, constGeomVertexDataother) -> Any: ...
    def convertTo(self, *args, **kwargs): ...
    def convert_to(self, GeomVertexDataself, constGeomVertexFormatnew_format) -> Any: ...
    def copyFrom(self, *args, **kwargs): ...
    def copyRowFrom(self, *args, **kwargs): ...
    def copy_from(
        self, constGeomVertexDataself, constGeomVertexDatasource, boolkeep_data_objects, Threadcurrent_thread
    ) -> Any: ...
    def copy_row_from(
        self, constGeomVertexDataself, intdest_row, constGeomVertexDatasource, intsource_row, Threadcurrent_thread
    ) -> Any: ...
    def describeVertex(self, *args, **kwargs): ...
    def describe_vertex(self, GeomVertexDataself, ostreamout, introw) -> Any: ...
    def getArray(self, *args, **kwargs): ...
    def getArrayHandle(self, *args, **kwargs): ...
    def getArrays(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFormat(self, *args, **kwargs): ...
    def getModified(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumArrays(self, *args, **kwargs): ...
    def getNumBytes(self, *args, **kwargs): ...
    def getNumRows(self, *args, **kwargs): ...
    def getSliderTable(self, *args, **kwargs): ...
    def getTransformBlendTable(self, *args, **kwargs): ...
    def getTransformTable(self, *args, **kwargs): ...
    def getUsageHint(self, *args, **kwargs): ...
    def get_array(self, GeomVertexDataself, inti) -> Any: ...
    def get_array_handle(self, GeomVertexDataself, inti) -> Any: ...
    def get_arrays(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_format(self, GeomVertexDataself) -> Any: ...
    def get_modified(self, GeomVertexDataself, Threadcurrent_thread) -> Any: ...
    def get_name(self, GeomVertexDataself) -> Any: ...
    def get_num_arrays(self, GeomVertexDataself) -> Any: ...
    def get_num_bytes(self, GeomVertexDataself) -> Any: ...
    def get_num_rows(self, GeomVertexDataself) -> Any: ...
    def get_slider_table(self, GeomVertexDataself) -> Any: ...
    def get_transform_blend_table(self, GeomVertexDataself) -> Any: ...
    def get_transform_table(self, GeomVertexDataself) -> Any: ...
    def get_usage_hint(self, GeomVertexDataself) -> Any: ...
    def hasColumn(self, *args, **kwargs): ...
    def has_column(self, GeomVertexDataself, constInternalNamename) -> Any: ...
    def insertArray(self, *args, **kwargs): ...
    def insert_array(self, constGeomVertexDataself, inti, constGeomVertexArrayDataarray) -> Any: ...
    def modifyArray(self, *args, **kwargs): ...
    def modifyArrayHandle(self, *args, **kwargs): ...
    def modifyTransformBlendTable(self, *args, **kwargs): ...
    def modify_array(self, constGeomVertexDataself, inti) -> Any: ...
    def modify_array_handle(self, constGeomVertexDataself, inti) -> Any: ...
    def modify_transform_blend_table(self, constGeomVertexDataself) -> Any: ...
    def output(self, GeomVertexDataself, ostreamout) -> Any: ...
    def removeArray(self, *args, **kwargs): ...
    def remove_array(self, constGeomVertexDataself, inti) -> Any: ...
    def replaceColumn(self, *args, **kwargs): ...
    def replace_column(
        self, GeomVertexDataself, InternalNamename, intnum_components, intnumeric_type, intcontents
    ) -> Any: ...
    def requestResident(self, *args, **kwargs): ...
    def request_resident(self, GeomVertexDataself) -> Any: ...
    def reserveNumRows(self, *args, **kwargs): ...
    def reserve_num_rows(self, constGeomVertexDataself, intn) -> Any: ...
    def reverseNormals(self, *args, **kwargs): ...
    def reverse_normals(self, GeomVertexDataself) -> Any: ...
    def scaleColor(self, *args, **kwargs): ...
    @overload
    def scale_color(self, GeomVertexDataself, constLVecBase4fcolor_scale) -> Any: ...
    @overload
    def scale_color(
        self, GeomVertexDataself, constLVecBase4fcolor_scale, intnum_components, intnumeric_type, intcontents
    ) -> Any: ...
    def setArray(self, *args, **kwargs): ...
    def setColor(self, *args, **kwargs): ...
    def setFormat(self, *args, **kwargs): ...
    def setName(self, *args, **kwargs): ...
    def setNumRows(self, *args, **kwargs): ...
    def setSliderTable(self, *args, **kwargs): ...
    def setTransformBlendTable(self, *args, **kwargs): ...
    def setTransformTable(self, *args, **kwargs): ...
    def setUsageHint(self, *args, **kwargs): ...
    def set_array(self, constGeomVertexDataself, inti, constGeomVertexArrayDataarray) -> Any: ...
    @overload
    def set_color(self, GeomVertexDataself, constLVecBase4fcolor) -> Any: ...
    @overload
    def set_color(
        self, GeomVertexDataself, constLVecBase4fcolor, intnum_components, intnumeric_type, intcontents
    ) -> Any: ...
    def set_format(self, constGeomVertexDataself, constGeomVertexFormatformat) -> Any: ...
    def set_name(self, constGeomVertexDataself, strname) -> Any: ...
    def set_num_rows(self, constGeomVertexDataself, intn) -> Any: ...
    def set_slider_table(self, constGeomVertexDataself, constSliderTabletable) -> Any: ...
    def set_transform_blend_table(self, constGeomVertexDataself, constTransformBlendTabletable) -> Any: ...
    def set_transform_table(self, constGeomVertexDataself, constTransformTabletable) -> Any: ...
    def set_usage_hint(self, constGeomVertexDataself, intusage_hint) -> Any: ...
    def transformVertices(self, *args, **kwargs): ...
    @overload
    def transform_vertices(self, constGeomVertexDataself, constLMatrix4fmat) -> Any: ...
    @overload
    def transform_vertices(self, constGeomVertexDataself, constLMatrix4fmat, constSparseArrayrows) -> Any: ...
    @overload
    def transform_vertices(self, constGeomVertexDataself, constLMatrix4fmat, intbegin_row, intend_row) -> Any: ...
    def uncleanSetFormat(self, *args, **kwargs): ...
    def uncleanSetNumRows(self, *args, **kwargs): ...
    def unclean_set_format(self, constGeomVertexDataself, constGeomVertexFormatformat) -> Any: ...
    def unclean_set_num_rows(self, constGeomVertexDataself, intn) -> Any: ...
    def upcastToCopyOnWriteObject(self, *args, **kwargs): ...
    def upcastToGeomEnums(self, *args, **kwargs): ...
    def upcast_to_CopyOnWriteObject(self, constGeomVertexDataself) -> Any: ...
    def upcast_to_GeomEnums(self, constGeomVertexDataself) -> Any: ...
    def write(self, GeomVertexDataself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class GeomVertexFormat(TypedWritableReferenceCount, GeomEnums):
    DtoolClassDict: ClassVar[dict] = ...
    animation: Incomplete
    arrays: Incomplete
    columns: Incomplete
    points: Incomplete
    registered: Incomplete
    vectors: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addArray(self, *args, **kwargs): ...
    def add_array(self, constGeomVertexFormatself, constGeomVertexArrayFormatarray_format) -> Any: ...
    def alignColumnsForAnimation(self, *args, **kwargs): ...
    def align_columns_for_animation(self, constGeomVertexFormatself) -> Any: ...
    def assign(self, constGeomVertexFormatself, constGeomVertexFormatcopy) -> Any: ...
    def clearArrays(self, *args, **kwargs): ...
    def clear_arrays(self, constGeomVertexFormatself) -> Any: ...
    def getAnimation(self, *args, **kwargs): ...
    def getArray(self, *args, **kwargs): ...
    def getArrayWith(self, *args, **kwargs): ...
    def getArrays(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColumn(self, *args, **kwargs): ...
    def getColumnName(self, *args, **kwargs): ...
    def getColumns(self, *args, **kwargs): ...
    @staticmethod
    def getEmpty(*args, **kwargs): ...
    def getMorphBase(self, *args, **kwargs): ...
    def getMorphBases(self, *args, **kwargs): ...
    def getMorphDelta(self, *args, **kwargs): ...
    def getMorphDeltas(self, *args, **kwargs): ...
    def getMorphSlider(self, *args, **kwargs): ...
    def getMorphSliders(self, *args, **kwargs): ...
    def getNumArrays(self, *args, **kwargs): ...
    def getNumColumns(self, *args, **kwargs): ...
    def getNumMorphs(self, *args, **kwargs): ...
    def getNumPoints(self, *args, **kwargs): ...
    def getNumTexcoords(self, *args, **kwargs): ...
    def getNumVectors(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getPoints(self, *args, **kwargs): ...
    def getPostAnimatedFormat(self, *args, **kwargs): ...
    def getPostInstancedFormat(self, *args, **kwargs): ...
    def getTexcoord(self, *args, **kwargs): ...
    def getTexcoords(self, *args, **kwargs): ...
    def getUnionFormat(self, *args, **kwargs): ...
    @staticmethod
    def getV3(*args, **kwargs): ...
    @staticmethod
    def getV3c(*args, **kwargs): ...
    @staticmethod
    def getV3c4(*args, **kwargs): ...
    @staticmethod
    def getV3c4t2(*args, **kwargs): ...
    @staticmethod
    def getV3cp(*args, **kwargs): ...
    @staticmethod
    def getV3cpt2(*args, **kwargs): ...
    @staticmethod
    def getV3ct2(*args, **kwargs): ...
    @staticmethod
    def getV3n3(*args, **kwargs): ...
    @staticmethod
    def getV3n3c(*args, **kwargs): ...
    @staticmethod
    def getV3n3c4(*args, **kwargs): ...
    @staticmethod
    def getV3n3c4t2(*args, **kwargs): ...
    @staticmethod
    def getV3n3cp(*args, **kwargs): ...
    @staticmethod
    def getV3n3cpt2(*args, **kwargs): ...
    @staticmethod
    def getV3n3ct2(*args, **kwargs): ...
    @staticmethod
    def getV3n3t2(*args, **kwargs): ...
    @staticmethod
    def getV3t2(*args, **kwargs): ...
    def getVector(self, *args, **kwargs): ...
    def getVectors(self, *args, **kwargs): ...
    def get_animation(self, GeomVertexFormatself) -> Any: ...
    def get_array(self, GeomVertexFormatself, intarray) -> Any: ...
    @overload
    def get_array_with(self, GeomVertexFormatself, constInternalNamename) -> Any: ...
    @overload
    def get_array_with(self, GeomVertexFormatself, inti) -> Any: ...
    def get_arrays(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_column(self, GeomVertexFormatself, constInternalNamename) -> Any: ...
    @overload
    def get_column(self, GeomVertexFormatself, inti) -> Any: ...
    def get_column_name(self, GeomVertexFormatself, inti) -> Any: ...
    def get_columns(self, *args, **kwargs): ...
    @staticmethod
    def get_empty() -> Any: ...
    def get_morph_base(self, GeomVertexFormatself, intn) -> Any: ...
    def get_morph_bases(self, *args, **kwargs): ...
    def get_morph_delta(self, GeomVertexFormatself, intn) -> Any: ...
    def get_morph_deltas(self, *args, **kwargs): ...
    def get_morph_slider(self, GeomVertexFormatself, intn) -> Any: ...
    def get_morph_sliders(self, *args, **kwargs): ...
    def get_num_arrays(self, GeomVertexFormatself) -> Any: ...
    def get_num_columns(self, GeomVertexFormatself) -> Any: ...
    def get_num_morphs(self, GeomVertexFormatself) -> Any: ...
    def get_num_points(self, GeomVertexFormatself) -> Any: ...
    def get_num_texcoords(self, GeomVertexFormatself) -> Any: ...
    def get_num_vectors(self, GeomVertexFormatself) -> Any: ...
    def get_point(self, GeomVertexFormatself, intn) -> Any: ...
    def get_points(self, *args, **kwargs): ...
    def get_post_animated_format(self, GeomVertexFormatself) -> Any: ...
    def get_post_instanced_format(self, GeomVertexFormatself) -> Any: ...
    def get_texcoord(self, GeomVertexFormatself, intn) -> Any: ...
    def get_texcoords(self, *args, **kwargs): ...
    def get_union_format(self, GeomVertexFormatself, constGeomVertexFormatother) -> Any: ...
    @staticmethod
    def get_v3() -> Any: ...
    @staticmethod
    def get_v3c() -> Any: ...
    @staticmethod
    def get_v3c4() -> Any: ...
    @staticmethod
    def get_v3c4t2() -> Any: ...
    @staticmethod
    def get_v3cp() -> Any: ...
    @staticmethod
    def get_v3cpt2() -> Any: ...
    @staticmethod
    def get_v3ct2() -> Any: ...
    @staticmethod
    def get_v3n3() -> Any: ...
    @staticmethod
    def get_v3n3c() -> Any: ...
    @staticmethod
    def get_v3n3c4() -> Any: ...
    @staticmethod
    def get_v3n3c4t2() -> Any: ...
    @staticmethod
    def get_v3n3cp() -> Any: ...
    @staticmethod
    def get_v3n3cpt2() -> Any: ...
    @staticmethod
    def get_v3n3ct2() -> Any: ...
    @staticmethod
    def get_v3n3t2() -> Any: ...
    @staticmethod
    def get_v3t2() -> Any: ...
    def get_vector(self, GeomVertexFormatself, intn) -> Any: ...
    def get_vectors(self, *args, **kwargs): ...
    def hasColumn(self, *args, **kwargs): ...
    def has_column(self, GeomVertexFormatself, constInternalNamename) -> Any: ...
    def insertArray(self, *args, **kwargs): ...
    def insert_array(self, constGeomVertexFormatself, intarray, constGeomVertexArrayFormatarray_format) -> Any: ...
    def isRegistered(self, *args, **kwargs): ...
    def is_registered(self, GeomVertexFormatself) -> Any: ...
    def maybeAlignColumnsForAnimation(self, *args, **kwargs): ...
    def maybe_align_columns_for_animation(self, constGeomVertexFormatself) -> Any: ...
    def modifyArray(self, *args, **kwargs): ...
    def modify_array(self, constGeomVertexFormatself, intarray) -> Any: ...
    def output(self, GeomVertexFormatself, ostreamout) -> Any: ...
    def packColumns(self, *args, **kwargs): ...
    def pack_columns(self, constGeomVertexFormatself) -> Any: ...
    @staticmethod
    def registerFormat(*args, **kwargs): ...
    @overload
    @staticmethod
    def register_format(constGeomVertexArrayFormatformat) -> Any: ...
    @overload
    @staticmethod
    def register_format() -> Any: ...
    def removeArray(self, *args, **kwargs): ...
    def removeColumn(self, *args, **kwargs): ...
    def removeEmptyArrays(self, *args, **kwargs): ...
    def remove_array(self, constGeomVertexFormatself, intarray) -> Any: ...
    def remove_column(self, constGeomVertexFormatself, constInternalNamename, boolkeep_empty_array) -> Any: ...
    def remove_empty_arrays(self, constGeomVertexFormatself) -> Any: ...
    def setAnimation(self, *args, **kwargs): ...
    def setArray(self, *args, **kwargs): ...
    def set_animation(self, constGeomVertexFormatself, constGeomVertexAnimationSpecanimation) -> Any: ...
    def set_array(self, constGeomVertexFormatself, intarray, constGeomVertexArrayFormatformat) -> Any: ...
    @overload
    def unref(self, GeomVertexFormatself) -> Any: ...
    @overload
    def unref(self) -> Any: ...
    def upcastToGeomEnums(self, *args, **kwargs): ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_GeomEnums(self, constGeomVertexFormatself) -> Any: ...
    def upcast_to_TypedWritableReferenceCount(self, constGeomVertexFormatself) -> Any: ...
    def write(self, GeomVertexFormatself, ostreamout, intindent_level) -> Any: ...
    def writeWithData(self, *args, **kwargs): ...
    def write_with_data(self, GeomVertexFormatself, ostreamout, intindent_level, constGeomVertexDatadata) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomVertexReader(GeomEnums):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constGeomVertexReaderself, constGeomVertexReadercopy) -> Any: ...
    def clear(self, constGeomVertexReaderself) -> Any: ...
    def getArray(self, *args, **kwargs): ...
    def getArrayData(self, *args, **kwargs): ...
    def getArrayHandle(self, *args, **kwargs): ...
    def getColumn(self, *args, **kwargs): ...
    def getCurrentThread(self, *args, **kwargs): ...
    def getData1(self, *args, **kwargs): ...
    def getData1d(self, *args, **kwargs): ...
    def getData1f(self, *args, **kwargs): ...
    def getData1i(self, *args, **kwargs): ...
    def getData2(self, *args, **kwargs): ...
    def getData2d(self, *args, **kwargs): ...
    def getData2f(self, *args, **kwargs): ...
    def getData2i(self, *args, **kwargs): ...
    def getData3(self, *args, **kwargs): ...
    def getData3d(self, *args, **kwargs): ...
    def getData3f(self, *args, **kwargs): ...
    def getData3i(self, *args, **kwargs): ...
    def getData4(self, *args, **kwargs): ...
    def getData4d(self, *args, **kwargs): ...
    def getData4f(self, *args, **kwargs): ...
    def getData4i(self, *args, **kwargs): ...
    def getForce(self, *args, **kwargs): ...
    def getMatrix3(self, *args, **kwargs): ...
    def getMatrix3d(self, *args, **kwargs): ...
    def getMatrix3f(self, *args, **kwargs): ...
    def getMatrix4(self, *args, **kwargs): ...
    def getMatrix4d(self, *args, **kwargs): ...
    def getMatrix4f(self, *args, **kwargs): ...
    def getReadRow(self, *args, **kwargs): ...
    def getStartRow(self, *args, **kwargs): ...
    def getStride(self, *args, **kwargs): ...
    def getVertexData(self, *args, **kwargs): ...
    def get_array(self, GeomVertexReaderself) -> Any: ...
    def get_array_data(self, GeomVertexReaderself) -> Any: ...
    def get_array_handle(self, GeomVertexReaderself) -> Any: ...
    def get_column(self, GeomVertexReaderself) -> Any: ...
    def get_current_thread(self, GeomVertexReaderself) -> Any: ...
    def get_data1(self, constGeomVertexReaderself) -> Any: ...
    def get_data1d(self, constGeomVertexReaderself) -> Any: ...
    def get_data1f(self, constGeomVertexReaderself) -> Any: ...
    def get_data1i(self, constGeomVertexReaderself) -> Any: ...
    def get_data2(self, constGeomVertexReaderself) -> Any: ...
    def get_data2d(self, constGeomVertexReaderself) -> Any: ...
    def get_data2f(self, constGeomVertexReaderself) -> Any: ...
    def get_data2i(self, constGeomVertexReaderself) -> Any: ...
    def get_data3(self, constGeomVertexReaderself) -> Any: ...
    def get_data3d(self, constGeomVertexReaderself) -> Any: ...
    def get_data3f(self, constGeomVertexReaderself) -> Any: ...
    def get_data3i(self, constGeomVertexReaderself) -> Any: ...
    def get_data4(self, constGeomVertexReaderself) -> Any: ...
    def get_data4d(self, constGeomVertexReaderself) -> Any: ...
    def get_data4f(self, constGeomVertexReaderself) -> Any: ...
    def get_data4i(self, constGeomVertexReaderself) -> Any: ...
    def get_force(self, GeomVertexReaderself) -> Any: ...
    def get_matrix3(self, constGeomVertexReaderself) -> Any: ...
    def get_matrix3d(self, constGeomVertexReaderself) -> Any: ...
    def get_matrix3f(self, constGeomVertexReaderself) -> Any: ...
    def get_matrix4(self, constGeomVertexReaderself) -> Any: ...
    def get_matrix4d(self, constGeomVertexReaderself) -> Any: ...
    def get_matrix4f(self, constGeomVertexReaderself) -> Any: ...
    def get_read_row(self, GeomVertexReaderself) -> Any: ...
    def get_start_row(self, GeomVertexReaderself) -> Any: ...
    def get_stride(self, GeomVertexReaderself) -> Any: ...
    def get_vertex_data(self, GeomVertexReaderself) -> Any: ...
    def hasColumn(self, *args, **kwargs): ...
    def has_column(self, GeomVertexReaderself) -> Any: ...
    def isAtEnd(self, *args, **kwargs): ...
    def is_at_end(self, GeomVertexReaderself) -> Any: ...
    def output(self, GeomVertexReaderself, ostreamout) -> Any: ...
    def setColumn(self, *args, **kwargs): ...
    def setForce(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setRowUnsafe(self, *args, **kwargs): ...
    @overload
    def set_column(self, constGeomVertexReaderself, constInternalNamename) -> Any: ...
    @overload
    def set_column(self, constGeomVertexReaderself, intcolumn) -> Any: ...
    @overload
    def set_column(self, constGeomVertexReaderself, intarray, constGeomVertexColumncolumn) -> Any: ...
    def set_force(self, constGeomVertexReaderself, boolforce) -> Any: ...
    def set_row(self, constGeomVertexReaderself, introw) -> Any: ...
    def set_row_unsafe(self, constGeomVertexReaderself, introw) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomVertexRewriter(GeomVertexWriter, GeomVertexReader):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constGeomVertexRewriterself, constGeomVertexRewritercopy) -> Any: ...
    def clear(self, constGeomVertexRewriterself) -> Any: ...
    def getArray(self, *args, **kwargs): ...
    def getArrayData(self, *args, **kwargs): ...
    def getArrayHandle(self, *args, **kwargs): ...
    def getColumn(self, *args, **kwargs): ...
    def getCurrentThread(self, *args, **kwargs): ...
    def getStartRow(self, *args, **kwargs): ...
    def getStride(self, *args, **kwargs): ...
    def getVertexData(self, *args, **kwargs): ...
    def get_array(self, GeomVertexRewriterself) -> Any: ...
    def get_array_data(self, GeomVertexRewriterself) -> Any: ...
    def get_array_handle(self, GeomVertexRewriterself) -> Any: ...
    def get_column(self, GeomVertexRewriterself) -> Any: ...
    def get_current_thread(self, GeomVertexRewriterself) -> Any: ...
    def get_start_row(self, GeomVertexRewriterself) -> Any: ...
    def get_stride(self, GeomVertexRewriterself) -> Any: ...
    def get_vertex_data(self, GeomVertexRewriterself) -> Any: ...
    def hasColumn(self, *args, **kwargs): ...
    def has_column(self, GeomVertexRewriterself) -> Any: ...
    def isAtEnd(self, *args, **kwargs): ...
    def is_at_end(self, GeomVertexRewriterself) -> Any: ...
    def output(self, GeomVertexRewriterself, ostreamout) -> Any: ...
    def setColumn(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setRowUnsafe(self, *args, **kwargs): ...
    @overload
    def set_column(self, constGeomVertexRewriterself, constInternalNamename) -> Any: ...
    @overload
    def set_column(self, constGeomVertexRewriterself, intcolumn) -> Any: ...
    @overload
    def set_column(self, constGeomVertexRewriterself, intarray, constGeomVertexColumncolumn) -> Any: ...
    def set_row(self, constGeomVertexRewriterself, introw) -> Any: ...
    def set_row_unsafe(self, constGeomVertexRewriterself, introw) -> Any: ...
    def upcastToGeomVertexReader(self, *args, **kwargs): ...
    def upcastToGeomVertexWriter(self, *args, **kwargs): ...
    def upcast_to_GeomVertexReader(self, constGeomVertexRewriterself) -> Any: ...
    def upcast_to_GeomVertexWriter(self, constGeomVertexRewriterself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeomVertexWriter(GeomEnums):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addData1(self, *args, **kwargs): ...
    def addData1d(self, *args, **kwargs): ...
    def addData1f(self, *args, **kwargs): ...
    def addData1i(self, *args, **kwargs): ...
    def addData2(self, *args, **kwargs): ...
    def addData2d(self, *args, **kwargs): ...
    def addData2f(self, *args, **kwargs): ...
    def addData2i(self, *args, **kwargs): ...
    def addData3(self, *args, **kwargs): ...
    def addData3d(self, *args, **kwargs): ...
    def addData3f(self, *args, **kwargs): ...
    def addData3i(self, *args, **kwargs): ...
    def addData4(self, *args, **kwargs): ...
    def addData4d(self, *args, **kwargs): ...
    def addData4f(self, *args, **kwargs): ...
    def addData4i(self, *args, **kwargs): ...
    def addMatrix3(self, *args, **kwargs): ...
    def addMatrix3d(self, *args, **kwargs): ...
    def addMatrix3f(self, *args, **kwargs): ...
    def addMatrix4(self, *args, **kwargs): ...
    def addMatrix4d(self, *args, **kwargs): ...
    def addMatrix4f(self, *args, **kwargs): ...
    def add_data1(self, constGeomVertexWriterself, floatdata) -> Any: ...
    def add_data1d(self, constGeomVertexWriterself, doubledata) -> Any: ...
    def add_data1f(self, constGeomVertexWriterself, floatdata) -> Any: ...
    def add_data1i(self, constGeomVertexWriterself, intdata) -> Any: ...
    @overload
    def add_data2(self, constGeomVertexWriterself, constLVecBase2fdata) -> Any: ...
    @overload
    def add_data2(self, constGeomVertexWriterself, floatx, floaty) -> Any: ...
    @overload
    def add_data2d(self, constGeomVertexWriterself, constLVecBase2ddata) -> Any: ...
    @overload
    def add_data2d(self, constGeomVertexWriterself, doublex, doubley) -> Any: ...
    @overload
    def add_data2f(self, constGeomVertexWriterself, constLVecBase2fdata) -> Any: ...
    @overload
    def add_data2f(self, constGeomVertexWriterself, floatx, floaty) -> Any: ...
    @overload
    def add_data2i(self, constGeomVertexWriterself, constLVecBase2idata) -> Any: ...
    @overload
    def add_data2i(self, constGeomVertexWriterself, inta, intb) -> Any: ...
    @overload
    def add_data3(self, constGeomVertexWriterself, constLVecBase3fdata) -> Any: ...
    @overload
    def add_data3(self, constGeomVertexWriterself, floatx, floaty, floatz) -> Any: ...
    @overload
    def add_data3d(self, constGeomVertexWriterself, constLVecBase3ddata) -> Any: ...
    @overload
    def add_data3d(self, constGeomVertexWriterself, doublex, doubley, doublez) -> Any: ...
    @overload
    def add_data3f(self, constGeomVertexWriterself, constLVecBase3fdata) -> Any: ...
    @overload
    def add_data3f(self, constGeomVertexWriterself, floatx, floaty, floatz) -> Any: ...
    @overload
    def add_data3i(self, constGeomVertexWriterself, constLVecBase3idata) -> Any: ...
    @overload
    def add_data3i(self, constGeomVertexWriterself, inta, intb, intc) -> Any: ...
    @overload
    def add_data4(self, constGeomVertexWriterself, constLVecBase4fdata) -> Any: ...
    @overload
    def add_data4(self, constGeomVertexWriterself, floatx, floaty, floatz, floatw) -> Any: ...
    @overload
    def add_data4d(self, constGeomVertexWriterself, constLVecBase4ddata) -> Any: ...
    @overload
    def add_data4d(self, constGeomVertexWriterself, doublex, doubley, doublez, doublew) -> Any: ...
    @overload
    def add_data4f(self, constGeomVertexWriterself, constLVecBase4fdata) -> Any: ...
    @overload
    def add_data4f(self, constGeomVertexWriterself, floatx, floaty, floatz, floatw) -> Any: ...
    @overload
    def add_data4i(self, constGeomVertexWriterself, constLVecBase4idata) -> Any: ...
    @overload
    def add_data4i(self, constGeomVertexWriterself, inta, intb, intc, intd) -> Any: ...
    def add_matrix3(self, constGeomVertexWriterself, constLMatrix3fmat) -> Any: ...
    def add_matrix3d(self, constGeomVertexWriterself, constLMatrix3dmat) -> Any: ...
    def add_matrix3f(self, constGeomVertexWriterself, constLMatrix3fmat) -> Any: ...
    def add_matrix4(self, constGeomVertexWriterself, constLMatrix4fmat) -> Any: ...
    def add_matrix4d(self, constGeomVertexWriterself, constLMatrix4dmat) -> Any: ...
    def add_matrix4f(self, constGeomVertexWriterself, constLMatrix4fmat) -> Any: ...
    def assign(self, constGeomVertexWriterself, constGeomVertexWritercopy) -> Any: ...
    def clear(self, constGeomVertexWriterself) -> Any: ...
    def getArray(self, *args, **kwargs): ...
    def getArrayData(self, *args, **kwargs): ...
    def getArrayHandle(self, *args, **kwargs): ...
    def getColumn(self, *args, **kwargs): ...
    def getCurrentThread(self, *args, **kwargs): ...
    def getStartRow(self, *args, **kwargs): ...
    def getStride(self, *args, **kwargs): ...
    def getVertexData(self, *args, **kwargs): ...
    def getWriteRow(self, *args, **kwargs): ...
    def get_array(self, GeomVertexWriterself) -> Any: ...
    def get_array_data(self, GeomVertexWriterself) -> Any: ...
    def get_array_handle(self, GeomVertexWriterself) -> Any: ...
    def get_column(self, GeomVertexWriterself) -> Any: ...
    def get_current_thread(self, GeomVertexWriterself) -> Any: ...
    def get_start_row(self, GeomVertexWriterself) -> Any: ...
    def get_stride(self, GeomVertexWriterself) -> Any: ...
    def get_vertex_data(self, GeomVertexWriterself) -> Any: ...
    def get_write_row(self, GeomVertexWriterself) -> Any: ...
    def hasColumn(self, *args, **kwargs): ...
    def has_column(self, GeomVertexWriterself) -> Any: ...
    def isAtEnd(self, *args, **kwargs): ...
    def is_at_end(self, GeomVertexWriterself) -> Any: ...
    def output(self, GeomVertexWriterself, ostreamout) -> Any: ...
    def reserveNumRows(self, *args, **kwargs): ...
    def reserve_num_rows(self, constGeomVertexWriterself, intnum_rows) -> Any: ...
    def setColumn(self, *args, **kwargs): ...
    def setData1(self, *args, **kwargs): ...
    def setData1d(self, *args, **kwargs): ...
    def setData1f(self, *args, **kwargs): ...
    def setData1i(self, *args, **kwargs): ...
    def setData2(self, *args, **kwargs): ...
    def setData2d(self, *args, **kwargs): ...
    def setData2f(self, *args, **kwargs): ...
    def setData2i(self, *args, **kwargs): ...
    def setData3(self, *args, **kwargs): ...
    def setData3d(self, *args, **kwargs): ...
    def setData3f(self, *args, **kwargs): ...
    def setData3i(self, *args, **kwargs): ...
    def setData4(self, *args, **kwargs): ...
    def setData4d(self, *args, **kwargs): ...
    def setData4f(self, *args, **kwargs): ...
    def setData4i(self, *args, **kwargs): ...
    def setMatrix3(self, *args, **kwargs): ...
    def setMatrix3d(self, *args, **kwargs): ...
    def setMatrix3f(self, *args, **kwargs): ...
    def setMatrix4(self, *args, **kwargs): ...
    def setMatrix4d(self, *args, **kwargs): ...
    def setMatrix4f(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setRowUnsafe(self, *args, **kwargs): ...
    @overload
    def set_column(self, constGeomVertexWriterself, constInternalNamename) -> Any: ...
    @overload
    def set_column(self, constGeomVertexWriterself, intcolumn) -> Any: ...
    @overload
    def set_column(self, constGeomVertexWriterself, intarray, constGeomVertexColumncolumn) -> Any: ...
    def set_data1(self, constGeomVertexWriterself, floatdata) -> Any: ...
    def set_data1d(self, constGeomVertexWriterself, doubledata) -> Any: ...
    def set_data1f(self, constGeomVertexWriterself, floatdata) -> Any: ...
    def set_data1i(self, constGeomVertexWriterself, intdata) -> Any: ...
    @overload
    def set_data2(self, constGeomVertexWriterself, constLVecBase2fdata) -> Any: ...
    @overload
    def set_data2(self, constGeomVertexWriterself, floatx, floaty) -> Any: ...
    @overload
    def set_data2d(self, constGeomVertexWriterself, constLVecBase2ddata) -> Any: ...
    @overload
    def set_data2d(self, constGeomVertexWriterself, doublex, doubley) -> Any: ...
    @overload
    def set_data2f(self, constGeomVertexWriterself, constLVecBase2fdata) -> Any: ...
    @overload
    def set_data2f(self, constGeomVertexWriterself, floatx, floaty) -> Any: ...
    @overload
    def set_data2i(self, constGeomVertexWriterself, constLVecBase2idata) -> Any: ...
    @overload
    def set_data2i(self, constGeomVertexWriterself, inta, intb) -> Any: ...
    @overload
    def set_data3(self, constGeomVertexWriterself, constLVecBase3fdata) -> Any: ...
    @overload
    def set_data3(self, constGeomVertexWriterself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_data3d(self, constGeomVertexWriterself, constLVecBase3ddata) -> Any: ...
    @overload
    def set_data3d(self, constGeomVertexWriterself, doublex, doubley, doublez) -> Any: ...
    @overload
    def set_data3f(self, constGeomVertexWriterself, constLVecBase3fdata) -> Any: ...
    @overload
    def set_data3f(self, constGeomVertexWriterself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_data3i(self, constGeomVertexWriterself, constLVecBase3idata) -> Any: ...
    @overload
    def set_data3i(self, constGeomVertexWriterself, inta, intb, intc) -> Any: ...
    @overload
    def set_data4(self, constGeomVertexWriterself, constLVecBase4fdata) -> Any: ...
    @overload
    def set_data4(self, constGeomVertexWriterself, floatx, floaty, floatz, floatw) -> Any: ...
    @overload
    def set_data4d(self, constGeomVertexWriterself, constLVecBase4ddata) -> Any: ...
    @overload
    def set_data4d(self, constGeomVertexWriterself, doublex, doubley, doublez, doublew) -> Any: ...
    @overload
    def set_data4f(self, constGeomVertexWriterself, constLVecBase4fdata) -> Any: ...
    @overload
    def set_data4f(self, constGeomVertexWriterself, floatx, floaty, floatz, floatw) -> Any: ...
    @overload
    def set_data4i(self, constGeomVertexWriterself, constLVecBase4idata) -> Any: ...
    @overload
    def set_data4i(self, constGeomVertexWriterself, inta, intb, intc, intd) -> Any: ...
    def set_matrix3(self, constGeomVertexWriterself, constLMatrix3fmat) -> Any: ...
    def set_matrix3d(self, constGeomVertexWriterself, constLMatrix3dmat) -> Any: ...
    def set_matrix3f(self, constGeomVertexWriterself, constLMatrix3fmat) -> Any: ...
    def set_matrix4(self, constGeomVertexWriterself, constLMatrix4fmat) -> Any: ...
    def set_matrix4d(self, constGeomVertexWriterself, constLMatrix4dmat) -> Any: ...
    def set_matrix4f(self, constGeomVertexWriterself, constLMatrix4fmat) -> Any: ...
    def set_row(self, constGeomVertexWriterself, introw) -> Any: ...
    def set_row_unsafe(self, constGeomVertexWriterself, introw) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GeometricBoundingVolume(BoundingVolume):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def contains(self, GeometricBoundingVolumeself, constGeometricBoundingVolumevol) -> Any: ...
    @overload
    def contains(self, GeometricBoundingVolumeself, constLPoint3fa, constLPoint3fb) -> Any: ...
    def extendBy(self, *args, **kwargs): ...
    def extend_by(self, constGeometricBoundingVolumeself, constGeometricBoundingVolumevol) -> Any: ...
    def getApproxCenter(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_approx_center(self, GeometricBoundingVolumeself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def xform(self, constGeometricBoundingVolumeself, constLMatrix4fmat) -> Any: ...

class GlobPattern(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    case_sensitive: Incomplete
    nomatch_chars: Incomplete
    pattern: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constGlobPatternself, constGlobPatterncopy) -> Any: ...
    def getCaseSensitive(self, *args, **kwargs): ...
    def getConstPrefix(self, *args, **kwargs): ...
    def getNomatchChars(self, *args, **kwargs): ...
    def getPattern(self, *args, **kwargs): ...
    def get_case_sensitive(self, GlobPatternself) -> Any: ...
    def get_const_prefix(self, GlobPatternself) -> Any: ...
    def get_nomatch_chars(self, GlobPatternself) -> Any: ...
    def get_pattern(self, GlobPatternself) -> Any: ...
    def hasGlobCharacters(self, *args, **kwargs): ...
    def has_glob_characters(self, GlobPatternself) -> Any: ...
    def matchFiles(self, *args, **kwargs): ...
    def match_files(self, GlobPatternself, constFilenamecwd) -> Any: ...
    def matches(self, GlobPatternself, strcandidate) -> Any: ...
    def matchesFile(self, *args, **kwargs): ...
    def matches_file(self, GlobPatternself, Filenamecandidate) -> Any: ...
    def output(self, GlobPatternself, ostreamout) -> Any: ...
    def setCaseSensitive(self, *args, **kwargs): ...
    def setNomatchChars(self, *args, **kwargs): ...
    def setPattern(self, *args, **kwargs): ...
    def set_case_sensitive(self, constGlobPatternself, boolcase_sensitive) -> Any: ...
    def set_nomatch_chars(self, constGlobPatternself, strnomatch_chars) -> Any: ...
    def set_pattern(self, constGlobPatternself, strpattern) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class GraphicsBuffer(GraphicsOutput):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def setSize(self, *args, **kwargs): ...
    def set_size(self, constGraphicsBufferself, intx, inty) -> Any: ...

class GraphicsDevice(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPipe(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_pipe(self, GraphicsDeviceself) -> Any: ...

class GraphicsEngine(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    auto_flip: Incomplete
    default_loader: Incomplete
    portal_cull: Incomplete
    render_lock: Incomplete
    threading_model: Incomplete
    windows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addWindow(self, *args, **kwargs): ...
    def add_window(self, constGraphicsEngineself, GraphicsOutputwindow, intsort) -> Any: ...
    def dispatchCompute(self, *args, **kwargs): ...
    @overload
    def dispatch_compute(
        self, constGraphicsEngineself, constLVecBase3iwork_groups, constRenderStatestate, GraphicsStateGuardiangsg
    ) -> Any: ...
    @overload
    def dispatch_compute(
        self, constGraphicsEngineself, constLVecBase3iwork_groups, constShaderAttribsattr, GraphicsStateGuardiangsg
    ) -> Any: ...
    def extractShaderBufferData(self, *args, **kwargs): ...
    def extractTextureData(self, *args, **kwargs): ...
    def extract_shader_buffer_data(
        self, constGraphicsEngineself, ShaderBufferbuffer, GraphicsStateGuardiangsg
    ) -> Any: ...
    def extract_texture_data(self, constGraphicsEngineself, Texturetex, GraphicsStateGuardiangsg) -> Any: ...
    def flipFrame(self, *args, **kwargs): ...
    def flip_frame(self, constGraphicsEngineself) -> Any: ...
    def getAutoFlip(self, *args, **kwargs): ...
    def getDefaultLoader(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getNumWindows(self, *args, **kwargs): ...
    def getPortalCull(self, *args, **kwargs): ...
    def getRenderLock(self, *args, **kwargs): ...
    def getThreadingModel(self, *args, **kwargs): ...
    def getWindow(self, *args, **kwargs): ...
    def getWindows(self, *args, **kwargs): ...
    def get_auto_flip(self, GraphicsEngineself) -> Any: ...
    def get_default_loader(self, GraphicsEngineself) -> Any: ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_num_windows(self, GraphicsEngineself) -> Any: ...
    def get_portal_cull(self, GraphicsEngineself) -> Any: ...
    def get_render_lock(self, GraphicsEngineself) -> Any: ...
    def get_threading_model(self, GraphicsEngineself) -> Any: ...
    def get_window(self, GraphicsEngineself, intn) -> Any: ...
    def get_windows(self, *args, **kwargs): ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, GraphicsEngineself) -> Any: ...
    def makeBuffer(self, *args, **kwargs): ...
    def makeOutput(self, *args, **kwargs): ...
    def makeParasite(self, *args, **kwargs): ...
    @overload
    def make_buffer(
        self, constGraphicsEngineself, GraphicsOutputhost, strname, intsort, intx_size, inty_size
    ) -> Any: ...
    @overload
    def make_buffer(
        self, constGraphicsEngineself, GraphicsStateGuardiangsg, strname, intsort, intx_size, inty_size
    ) -> Any: ...
    def make_output(
        self,
        constGraphicsEngineself,
        GraphicsPipepipe,
        strname,
        intsort,
        constFrameBufferPropertiesfb_prop,
        constWindowPropertieswin_prop,
        intflags,
        GraphicsStateGuardiangsg,
        GraphicsOutputhost,
    ) -> Any: ...
    def make_parasite(
        self, constGraphicsEngineself, GraphicsOutputhost, strname, intsort, intx_size, inty_size
    ) -> Any: ...
    def openWindows(self, *args, **kwargs): ...
    def open_windows(self, constGraphicsEngineself) -> Any: ...
    def readyFlip(self, *args, **kwargs): ...
    def ready_flip(self, constGraphicsEngineself) -> Any: ...
    def removeAllWindows(self, *args, **kwargs): ...
    def removeWindow(self, *args, **kwargs): ...
    def remove_all_windows(self, constGraphicsEngineself) -> Any: ...
    @overload
    def remove_window(self, constGraphicsEngineself, GraphicsOutputwindow) -> Any: ...
    @overload
    def remove_window(self) -> Any: ...
    def renderFrame(self, *args, **kwargs): ...
    def render_frame(self, constGraphicsEngineself) -> Any: ...
    def resetAllWindows(self, *args, **kwargs): ...
    def reset_all_windows(self, constGraphicsEngineself, boolswapchain) -> Any: ...
    def setAutoFlip(self, *args, **kwargs): ...
    def setDefaultLoader(self, *args, **kwargs): ...
    def setPortalCull(self, *args, **kwargs): ...
    def setThreadingModel(self, *args, **kwargs): ...
    def set_auto_flip(self, constGraphicsEngineself, boolauto_flip) -> Any: ...
    def set_default_loader(self, constGraphicsEngineself, Loaderloader) -> Any: ...
    def set_portal_cull(self, constGraphicsEngineself, boolvalue) -> Any: ...
    def set_threading_model(self, constGraphicsEngineself, constGraphicsThreadingModelthreading_model) -> Any: ...
    def syncFrame(self, *args, **kwargs): ...
    def sync_frame(self, constGraphicsEngineself) -> Any: ...

class GraphicsOutput(GraphicsOutputBase, DrawableRegion):
    DtoolClassDict: ClassVar[dict] = ...
    FMParasite: ClassVar[int] = ...
    FMRefresh: ClassVar[int] = ...
    FMRender: ClassVar[int] = ...
    FM_parasite: ClassVar[int] = ...
    FM_refresh: ClassVar[int] = ...
    FM_render: ClassVar[int] = ...
    RTMBindLayered: ClassVar[int] = ...
    RTMBindOrCopy: ClassVar[int] = ...
    RTMCopyRam: ClassVar[int] = ...
    RTMCopyTexture: ClassVar[int] = ...
    RTMNone: ClassVar[int] = ...
    RTMTriggeredCopyRam: ClassVar[int] = ...
    RTMTriggeredCopyTexture: ClassVar[int] = ...
    RTM_bind_layered: ClassVar[int] = ...
    RTM_bind_or_copy: ClassVar[int] = ...
    RTM_copy_ram: ClassVar[int] = ...
    RTM_copy_texture: ClassVar[int] = ...
    RTM_none: ClassVar[int] = ...
    RTM_triggered_copy_ram: ClassVar[int] = ...
    RTM_triggered_copy_texture: ClassVar[int] = ...
    active: Incomplete
    active_display_regions: Incomplete
    child_sort: Incomplete
    display_regions: Incomplete
    engine: Incomplete
    fb_size: Incomplete
    gsg: Incomplete
    host: Incomplete
    inverted: Incomplete
    name: Incomplete
    one_shot: Incomplete
    pipe: Incomplete
    sbs_left_size: Incomplete
    sbs_right_size: Incomplete
    size: Incomplete
    sort: Incomplete
    supports_render_texture: Incomplete
    swap_eyes: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addRenderTexture(self, *args, **kwargs): ...
    def add_render_texture(self, constGraphicsOutputself, Texturetex, intmode, intbitplane) -> Any: ...
    def clearChildSort(self, *args, **kwargs): ...
    def clearDeleteFlag(self, *args, **kwargs): ...
    def clearRenderTextures(self, *args, **kwargs): ...
    def clear_child_sort(self, constGraphicsOutputself) -> Any: ...
    def clear_delete_flag(self, constGraphicsOutputself) -> Any: ...
    def clear_render_textures(self, constGraphicsOutputself) -> Any: ...
    def countTextures(self, *args, **kwargs): ...
    def count_textures(self, GraphicsOutputself) -> Any: ...
    def flipReady(self, *args, **kwargs): ...
    def flip_ready(self, GraphicsOutputself) -> Any: ...
    def getActiveDisplayRegion(self, *args, **kwargs): ...
    def getActiveDisplayRegions(self, *args, **kwargs): ...
    def getAsyncScreenshot(self, *args, **kwargs): ...
    def getChildSort(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDeleteFlag(self, *args, **kwargs): ...
    def getDisplayRegion(self, *args, **kwargs): ...
    def getDisplayRegions(self, *args, **kwargs): ...
    def getEngine(self, *args, **kwargs): ...
    def getFbProperties(self, *args, **kwargs): ...
    def getFbSize(self, *args, **kwargs): ...
    def getFbXSize(self, *args, **kwargs): ...
    def getFbYSize(self, *args, **kwargs): ...
    def getGsg(self, *args, **kwargs): ...
    def getHost(self, *args, **kwargs): ...
    def getInverted(self, *args, **kwargs): ...
    def getLeftEyeColorMask(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumActiveDisplayRegions(self, *args, **kwargs): ...
    def getNumDisplayRegions(self, *args, **kwargs): ...
    def getOneShot(self, *args, **kwargs): ...
    def getOverlayDisplayRegion(self, *args, **kwargs): ...
    def getPipe(self, *args, **kwargs): ...
    def getRedBlueStereo(self, *args, **kwargs): ...
    def getRightEyeColorMask(self, *args, **kwargs): ...
    def getRtmMode(self, *args, **kwargs): ...
    def getSbsLeftDimensions(self, *args, **kwargs): ...
    def getSbsLeftSize(self, *args, **kwargs): ...
    def getSbsLeftXSize(self, *args, **kwargs): ...
    def getSbsLeftYSize(self, *args, **kwargs): ...
    def getSbsRightDimensions(self, *args, **kwargs): ...
    def getSbsRightSize(self, *args, **kwargs): ...
    def getSbsRightXSize(self, *args, **kwargs): ...
    def getSbsRightYSize(self, *args, **kwargs): ...
    def getScreenshot(self, *args, **kwargs): ...
    def getSideBySideStereo(self, *args, **kwargs): ...
    def getSize(self, *args, **kwargs): ...
    def getSort(self, *args, **kwargs): ...
    def getSupportsRenderTexture(self, *args, **kwargs): ...
    def getSwapEyes(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    def getTextureCard(self, *args, **kwargs): ...
    def getTexturePlane(self, *args, **kwargs): ...
    def getXSize(self, *args, **kwargs): ...
    def getYSize(self, *args, **kwargs): ...
    def get_active_display_region(self, GraphicsOutputself, intn) -> Any: ...
    def get_active_display_regions(self, *args, **kwargs): ...
    def get_async_screenshot(self, constGraphicsOutputself) -> Any: ...
    def get_child_sort(self, GraphicsOutputself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_delete_flag(self, GraphicsOutputself) -> Any: ...
    def get_display_region(self, GraphicsOutputself, intn) -> Any: ...
    def get_display_regions(self, *args, **kwargs): ...
    def get_engine(self, GraphicsOutputself) -> Any: ...
    def get_fb_properties(self, GraphicsOutputself) -> Any: ...
    def get_fb_size(self, GraphicsOutputself) -> Any: ...
    def get_fb_x_size(self, GraphicsOutputself) -> Any: ...
    def get_fb_y_size(self, GraphicsOutputself) -> Any: ...
    def get_gsg(self, GraphicsOutputself) -> Any: ...
    def get_host(self, constGraphicsOutputself) -> Any: ...
    def get_inverted(self, GraphicsOutputself) -> Any: ...
    def get_left_eye_color_mask(self, GraphicsOutputself) -> Any: ...
    def get_name(self, GraphicsOutputself) -> Any: ...
    def get_num_active_display_regions(self, GraphicsOutputself) -> Any: ...
    def get_num_display_regions(self, GraphicsOutputself) -> Any: ...
    def get_one_shot(self, GraphicsOutputself) -> Any: ...
    def get_overlay_display_region(self, GraphicsOutputself) -> Any: ...
    @overload
    def get_pipe(self, GraphicsOutputself) -> Any: ...
    @overload
    def get_pipe(self) -> Any: ...
    def get_red_blue_stereo(self, GraphicsOutputself) -> Any: ...
    def get_right_eye_color_mask(self, GraphicsOutputself) -> Any: ...
    def get_rtm_mode(self, GraphicsOutputself, inti) -> Any: ...
    def get_sbs_left_dimensions(self, GraphicsOutputself) -> Any: ...
    def get_sbs_left_size(self, GraphicsOutputself) -> Any: ...
    def get_sbs_left_x_size(self, GraphicsOutputself) -> Any: ...
    def get_sbs_left_y_size(self, GraphicsOutputself) -> Any: ...
    def get_sbs_right_dimensions(self, GraphicsOutputself) -> Any: ...
    def get_sbs_right_size(self, GraphicsOutputself) -> Any: ...
    def get_sbs_right_x_size(self, GraphicsOutputself) -> Any: ...
    def get_sbs_right_y_size(self, GraphicsOutputself) -> Any: ...
    @overload
    def get_screenshot(self, constGraphicsOutputself) -> Any: ...
    @overload
    def get_screenshot(self, constGraphicsOutputself, PNMImageimage) -> Any: ...
    def get_side_by_side_stereo(self, GraphicsOutputself) -> Any: ...
    def get_size(self, GraphicsOutputself) -> Any: ...
    def get_sort(self, GraphicsOutputself) -> Any: ...
    def get_supports_render_texture(self, GraphicsOutputself) -> Any: ...
    def get_swap_eyes(self, GraphicsOutputself) -> Any: ...
    def get_texture(self, GraphicsOutputself, inti) -> Any: ...
    def get_texture_card(self, constGraphicsOutputself) -> Any: ...
    def get_texture_plane(self, GraphicsOutputself, inti) -> Any: ...
    def get_x_size(self, GraphicsOutputself) -> Any: ...
    def get_y_size(self, GraphicsOutputself) -> Any: ...
    def hasSize(self, *args, **kwargs): ...
    def hasTexture(self, *args, **kwargs): ...
    def has_size(self, GraphicsOutputself) -> Any: ...
    def has_texture(self, GraphicsOutputself) -> Any: ...
    def isActive(self, *args, **kwargs): ...
    def isNonzeroSize(self, *args, **kwargs): ...
    def isStereo(self, *args, **kwargs): ...
    def isValid(self, *args, **kwargs): ...
    def is_active(self, GraphicsOutputself) -> Any: ...
    def is_nonzero_size(self, GraphicsOutputself) -> Any: ...
    def is_stereo(self, GraphicsOutputself) -> Any: ...
    def is_valid(self, GraphicsOutputself) -> Any: ...
    def makeCubeMap(self, *args, **kwargs): ...
    def makeDisplayRegion(self, *args, **kwargs): ...
    def makeMonoDisplayRegion(self, *args, **kwargs): ...
    @staticmethod
    def makeScreenshotFilename(*args, **kwargs): ...
    def makeStereoDisplayRegion(self, *args, **kwargs): ...
    def makeTextureBuffer(self, *args, **kwargs): ...
    def make_cube_map(
        self,
        constGraphicsOutputself,
        strname,
        intsize,
        NodePathcamera_rig,
        BitMaskcamera_mask,
        boolto_ram,
        FrameBufferPropertiesfbp,
    ) -> Any: ...
    @overload
    def make_display_region(self, constGraphicsOutputself) -> Any: ...
    @overload
    def make_display_region(self, constGraphicsOutputself, constLVecBase4fdimensions) -> Any: ...
    @overload
    def make_display_region(self, constGraphicsOutputself, floatl, floatr, floatb, floatt) -> Any: ...
    @overload
    def make_mono_display_region(self, constGraphicsOutputself) -> Any: ...
    @overload
    def make_mono_display_region(self, constGraphicsOutputself, constLVecBase4fdimensions) -> Any: ...
    @overload
    def make_mono_display_region(self, constGraphicsOutputself, floatl, floatr, floatb, floatt) -> Any: ...
    @staticmethod
    def make_screenshot_filename(strprefix) -> Any: ...
    @overload
    def make_stereo_display_region(self, constGraphicsOutputself) -> Any: ...
    @overload
    def make_stereo_display_region(self, constGraphicsOutputself, constLVecBase4fdimensions) -> Any: ...
    @overload
    def make_stereo_display_region(self, constGraphicsOutputself, floatl, floatr, floatb, floatt) -> Any: ...
    def make_texture_buffer(
        self, constGraphicsOutputself, strname, intx_size, inty_size, Texturetex, boolto_ram, FrameBufferPropertiesfbp
    ) -> Any: ...
    def removeAllDisplayRegions(self, *args, **kwargs): ...
    def removeDisplayRegion(self, *args, **kwargs): ...
    def remove_all_display_regions(self, constGraphicsOutputself) -> Any: ...
    def remove_display_region(self, constGraphicsOutputself, DisplayRegiondisplay_region) -> Any: ...
    def saveAsyncScreenshot(self, *args, **kwargs): ...
    def saveScreenshot(self, *args, **kwargs): ...
    def saveScreenshotDefault(self, *args, **kwargs): ...
    def save_async_screenshot(self, constGraphicsOutputself, constFilenamefilename, strimage_comment) -> Any: ...
    def save_screenshot(self, constGraphicsOutputself, constFilenamefilename, strimage_comment) -> Any: ...
    def save_screenshot_default(self, constGraphicsOutputself, strprefix) -> Any: ...
    def setActive(self, *args, **kwargs): ...
    def setChildSort(self, *args, **kwargs): ...
    def setInverted(self, *args, **kwargs): ...
    def setOneShot(self, *args, **kwargs): ...
    def setOverlayDisplayRegion(self, *args, **kwargs): ...
    def setRedBlueStereo(self, *args, **kwargs): ...
    def setSideBySideStereo(self, *args, **kwargs): ...
    def setSort(self, *args, **kwargs): ...
    def setSwapEyes(self, *args, **kwargs): ...
    def set_active(self, constGraphicsOutputself, boolactive) -> Any: ...
    def set_child_sort(self, constGraphicsOutputself, intchild_sort) -> Any: ...
    def set_inverted(self, constGraphicsOutputself, boolinverted) -> Any: ...
    def set_one_shot(self, constGraphicsOutputself, boolone_shot) -> Any: ...
    def set_overlay_display_region(self, constGraphicsOutputself, DisplayRegiondisplay_region) -> Any: ...
    def set_red_blue_stereo(
        self, constGraphicsOutputself, boolred_blue_stereo, intleft_eye_color_mask, intright_eye_color_mask
    ) -> Any: ...
    @overload
    def set_side_by_side_stereo(self, constGraphicsOutputself, boolside_by_side_stereo) -> Any: ...
    @overload
    def set_side_by_side_stereo(
        self,
        constGraphicsOutputself,
        boolside_by_side_stereo,
        constLVecBase4fsbs_left_dimensions,
        constLVecBase4fsbs_right_dimensions,
    ) -> Any: ...
    def set_sort(self, constGraphicsOutputself, intsort) -> Any: ...
    def set_swap_eyes(self, constGraphicsOutputself, boolswap_eyes) -> Any: ...
    def setupRenderTexture(self, *args, **kwargs): ...
    def setup_render_texture(self, constGraphicsOutputself, Texturetex, boolallow_bind, boolto_ram) -> Any: ...
    def shareDepthBuffer(self, *args, **kwargs): ...
    def share_depth_buffer(self, constGraphicsOutputself, GraphicsOutputgraphics_output) -> Any: ...
    def triggerCopy(self, *args, **kwargs): ...
    def trigger_copy(self, constGraphicsOutputself) -> Any: ...
    def unshareDepthBuffer(self, *args, **kwargs): ...
    def unshare_depth_buffer(self, constGraphicsOutputself) -> Any: ...
    def upcastToDrawableRegion(self, *args, **kwargs): ...
    def upcastToGraphicsOutputBase(self, *args, **kwargs): ...
    def upcast_to_DrawableRegion(self, constGraphicsOutputself) -> Any: ...
    def upcast_to_GraphicsOutputBase(self, constGraphicsOutputself) -> Any: ...

class GraphicsOutputBase(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def setSort(self, *args, **kwargs): ...
    def set_sort(self, constGraphicsOutputBaseself, intsort) -> Any: ...

class GraphicsPipe(TypedReferenceCount):
    BFCanBindColor: ClassVar[int] = ...
    BFCanBindEvery: ClassVar[int] = ...
    BFCanBindLayered: ClassVar[int] = ...
    BFFbPropsOptional: ClassVar[int] = ...
    BFRefuseParasite: ClassVar[int] = ...
    BFRefuseWindow: ClassVar[int] = ...
    BFRequireCallbackWindow: ClassVar[int] = ...
    BFRequireParasite: ClassVar[int] = ...
    BFRequireWindow: ClassVar[int] = ...
    BFResizeable: ClassVar[int] = ...
    BFRttCumulative: ClassVar[int] = ...
    BFSizePower2: ClassVar[int] = ...
    BFSizeSquare: ClassVar[int] = ...
    BFSizeTrackHost: ClassVar[int] = ...
    BF_can_bind_color: ClassVar[int] = ...
    BF_can_bind_every: ClassVar[int] = ...
    BF_can_bind_layered: ClassVar[int] = ...
    BF_fb_props_optional: ClassVar[int] = ...
    BF_refuse_parasite: ClassVar[int] = ...
    BF_refuse_window: ClassVar[int] = ...
    BF_require_callback_window: ClassVar[int] = ...
    BF_require_parasite: ClassVar[int] = ...
    BF_require_window: ClassVar[int] = ...
    BF_resizeable: ClassVar[int] = ...
    BF_rtt_cumulative: ClassVar[int] = ...
    BF_size_power_2: ClassVar[int] = ...
    BF_size_square: ClassVar[int] = ...
    BF_size_track_host: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    OTBuffer: ClassVar[int] = ...
    OTFullscreenWindow: ClassVar[int] = ...
    OTTextureBuffer: ClassVar[int] = ...
    OTWindow: ClassVar[int] = ...
    OT_buffer: ClassVar[int] = ...
    OT_fullscreen_window: ClassVar[int] = ...
    OT_texture_buffer: ClassVar[int] = ...
    OT_window: ClassVar[int] = ...
    display_height: Incomplete
    display_information: Incomplete
    display_width: Incomplete
    display_zoom: Incomplete
    interface_name: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDisplayHeight(self, *args, **kwargs): ...
    def getDisplayInformation(self, *args, **kwargs): ...
    def getDisplayWidth(self, *args, **kwargs): ...
    def getDisplayZoom(self, *args, **kwargs): ...
    def getInterfaceName(self, *args, **kwargs): ...
    def getSupportedTypes(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_display_height(self, GraphicsPipeself) -> Any: ...
    def get_display_information(self, constGraphicsPipeself) -> Any: ...
    def get_display_width(self, GraphicsPipeself) -> Any: ...
    def get_display_zoom(self, GraphicsPipeself) -> Any: ...
    def get_interface_name(self, GraphicsPipeself) -> Any: ...
    def get_supported_types(self, GraphicsPipeself) -> Any: ...
    def isValid(self, *args, **kwargs): ...
    def is_valid(self, GraphicsPipeself) -> Any: ...
    def lookupCpuData(self, *args, **kwargs): ...
    def lookup_cpu_data(self, constGraphicsPipeself) -> Any: ...
    def supportsType(self, *args, **kwargs): ...
    def supports_type(self, GraphicsPipeself, intflags) -> Any: ...

class GraphicsPipeSelection(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    pipe_types: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getNumAuxModules(self, *args, **kwargs): ...
    def getNumPipeTypes(self, *args, **kwargs): ...
    def getPipeType(self, *args, **kwargs): ...
    def getPipeTypes(self, *args, **kwargs): ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_num_aux_modules(self, GraphicsPipeSelectionself) -> Any: ...
    def get_num_pipe_types(self, GraphicsPipeSelectionself) -> Any: ...
    def get_pipe_type(self, GraphicsPipeSelectionself, intn) -> Any: ...
    def get_pipe_types(self, *args, **kwargs): ...
    def loadAuxModules(self, *args, **kwargs): ...
    def load_aux_modules(self, constGraphicsPipeSelectionself) -> Any: ...
    def makeDefaultPipe(self, *args, **kwargs): ...
    def makeModulePipe(self, *args, **kwargs): ...
    def makePipe(self, *args, **kwargs): ...
    def make_default_pipe(self, constGraphicsPipeSelectionself) -> Any: ...
    def make_module_pipe(self, constGraphicsPipeSelectionself, strmodule_name) -> Any: ...
    def make_pipe(self, constGraphicsPipeSelectionself, strtype_name, strmodule_name) -> Any: ...
    def printPipeTypes(self, *args, **kwargs): ...
    def print_pipe_types(self, GraphicsPipeSelectionself) -> Any: ...
    def __reduce__(self, GraphicsPipeSelectionself) -> Any: ...

class GraphicsStateGuardian(GraphicsStateGuardianBase):
    DtoolClassDict: ClassVar[dict] = ...
    SM00: ClassVar[int] = ...
    SM11: ClassVar[int] = ...
    SM20: ClassVar[int] = ...
    SM2X: ClassVar[int] = ...
    SM30: ClassVar[int] = ...
    SM40: ClassVar[int] = ...
    SM50: ClassVar[int] = ...
    SM51: ClassVar[int] = ...
    SM_00: ClassVar[int] = ...
    SM_11: ClassVar[int] = ...
    SM_20: ClassVar[int] = ...
    SM_2X: ClassVar[int] = ...
    SM_30: ClassVar[int] = ...
    SM_40: ClassVar[int] = ...
    SM_50: ClassVar[int] = ...
    SM_51: ClassVar[int] = ...
    active: Incomplete
    coordinate_system: Incomplete
    copy_texture_inverted: Incomplete
    driver_renderer: Incomplete
    driver_shader_version_major: Incomplete
    driver_shader_version_minor: Incomplete
    driver_vendor: Incomplete
    driver_version: Incomplete
    driver_version_major: Incomplete
    driver_version_minor: Incomplete
    effective_incomplete_render: Incomplete
    engine: Incomplete
    flash_texture: Incomplete
    gamma: Incomplete
    incomplete_render: Incomplete
    loader: Incomplete
    max_2d_texture_array_layers: Incomplete
    max_3d_texture_dimension: Incomplete
    max_buffer_texture_size: Incomplete
    max_clip_planes: Incomplete
    max_color_targets: Incomplete
    max_compute_work_group_count: Incomplete
    max_compute_work_group_invocations: Incomplete
    max_compute_work_group_size: Incomplete
    max_cube_map_dimension: Incomplete
    max_lights: Incomplete
    max_texture_dimension: Incomplete
    max_texture_stages: Incomplete
    max_vertex_transform_indices: Incomplete
    max_vertex_transforms: Incomplete
    max_vertices_per_array: Incomplete
    max_vertices_per_primitive: Incomplete
    pipe: Incomplete
    prepared_objects: Incomplete
    scene: Incomplete
    shader_generator: Incomplete
    shader_model: Incomplete
    supports_2d_texture_array: Incomplete
    supports_3d_texture: Incomplete
    supports_basic_shaders: Incomplete
    supports_buffer_texture: Incomplete
    supports_compressed_texture: Incomplete
    supports_compute_shaders: Incomplete
    supports_cube_map: Incomplete
    supports_cube_map_array: Incomplete
    supports_depth_stencil: Incomplete
    supports_depth_texture: Incomplete
    supports_dual_source_blending: Incomplete
    supports_generate_mipmap: Incomplete
    supports_geometry_instancing: Incomplete
    supports_geometry_shaders: Incomplete
    supports_glsl: Incomplete
    supports_hlsl: Incomplete
    supports_indirect_draw: Incomplete
    supports_luminance_texture: Incomplete
    supports_multisample: Incomplete
    supports_occlusion_query: Incomplete
    supports_sampler_objects: Incomplete
    supports_shadow_filter: Incomplete
    supports_stencil: Incomplete
    supports_tessellation_shaders: Incomplete
    supports_tex_non_pow2: Incomplete
    supports_texture_combine: Incomplete
    supports_texture_dot3: Incomplete
    supports_texture_saved_result: Incomplete
    supports_texture_srgb: Incomplete
    supports_timer_query: Incomplete
    supports_two_sided_stencil: Incomplete
    texture_quality_override: Incomplete
    timer_queries_active: Incomplete
    valid: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def beginScene(self, *args, **kwargs): ...
    def begin_scene(self, constGraphicsStateGuardianself) -> Any: ...
    def clearFlashTexture(self, *args, **kwargs): ...
    def clear_flash_texture(self, constGraphicsStateGuardianself) -> Any: ...
    def endScene(self, *args, **kwargs): ...
    def end_scene(self, constGraphicsStateGuardianself) -> Any: ...
    @staticmethod
    def getAlphaScaleTextureStage(*args, **kwargs): ...
    def getAlphaScaleViaTexture(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColorScaleViaLighting(self, *args, **kwargs): ...
    def getCoordinateSystem(self, *args, **kwargs): ...
    def getCopyTextureInverted(self, *args, **kwargs): ...
    def getDriverRenderer(self, *args, **kwargs): ...
    def getDriverShaderVersionMajor(self, *args, **kwargs): ...
    def getDriverShaderVersionMinor(self, *args, **kwargs): ...
    def getDriverVendor(self, *args, **kwargs): ...
    def getDriverVersion(self, *args, **kwargs): ...
    def getDriverVersionMajor(self, *args, **kwargs): ...
    def getDriverVersionMinor(self, *args, **kwargs): ...
    def getEngine(self, *args, **kwargs): ...
    def getFlashTexture(self, *args, **kwargs): ...
    def getGamma(self, *args, **kwargs): ...
    def getInternalCoordinateSystem(self, *args, **kwargs): ...
    def getLoader(self, *args, **kwargs): ...
    def getMax2dTextureArrayLayers(self, *args, **kwargs): ...
    def getMax3dTextureDimension(self, *args, **kwargs): ...
    def getMaxBufferTextureSize(self, *args, **kwargs): ...
    def getMaxClipPlanes(self, *args, **kwargs): ...
    def getMaxColorTargets(self, *args, **kwargs): ...
    def getMaxCubeMapDimension(self, *args, **kwargs): ...
    def getMaxLights(self, *args, **kwargs): ...
    def getMaxTextureStages(self, *args, **kwargs): ...
    def getMaxVertexTransformIndices(self, *args, **kwargs): ...
    def getMaxVertexTransforms(self, *args, **kwargs): ...
    def getMaximumSimultaneousRenderTargets(self, *args, **kwargs): ...
    def getPipe(self, *args, **kwargs): ...
    def getPreparedObjects(self, *args, **kwargs): ...
    def getPreparedTextures(self, *args, **kwargs): ...
    def getRuntimeColorScale(self, *args, **kwargs): ...
    def getScene(self, *args, **kwargs): ...
    def getShaderGenerator(self, *args, **kwargs): ...
    def getShaderModel(self, *args, **kwargs): ...
    def getSupports2dTextureArray(self, *args, **kwargs): ...
    def getSupports3dTexture(self, *args, **kwargs): ...
    def getSupportsBasicShaders(self, *args, **kwargs): ...
    def getSupportsBufferTexture(self, *args, **kwargs): ...
    def getSupportsCgProfile(self, *args, **kwargs): ...
    def getSupportsCompressedTexture(self, *args, **kwargs): ...
    def getSupportsComputeShaders(self, *args, **kwargs): ...
    def getSupportsCubeMap(self, *args, **kwargs): ...
    def getSupportsCubeMapArray(self, *args, **kwargs): ...
    def getSupportsDepthStencil(self, *args, **kwargs): ...
    def getSupportsDepthTexture(self, *args, **kwargs): ...
    def getSupportsDualSourceBlending(self, *args, **kwargs): ...
    def getSupportsGenerateMipmap(self, *args, **kwargs): ...
    def getSupportsGeometryInstancing(self, *args, **kwargs): ...
    def getSupportsGeometryShaders(self, *args, **kwargs): ...
    def getSupportsGlsl(self, *args, **kwargs): ...
    def getSupportsIndirectDraw(self, *args, **kwargs): ...
    def getSupportsLuminanceTexture(self, *args, **kwargs): ...
    def getSupportsOcclusionQuery(self, *args, **kwargs): ...
    def getSupportsSamplerObjects(self, *args, **kwargs): ...
    def getSupportsStencil(self, *args, **kwargs): ...
    def getSupportsTessellationShaders(self, *args, **kwargs): ...
    def getSupportsTexNonPow2(self, *args, **kwargs): ...
    def getSupportsTextureCombine(self, *args, **kwargs): ...
    def getSupportsTextureDot3(self, *args, **kwargs): ...
    def getSupportsTextureSavedResult(self, *args, **kwargs): ...
    def getSupportsTimerQuery(self, *args, **kwargs): ...
    def getSupportsTwoSidedStencil(self, *args, **kwargs): ...
    def getTextureQualityOverride(self, *args, **kwargs): ...
    def getThreadingModel(self, *args, **kwargs): ...
    def getTimerQueriesActive(self, *args, **kwargs): ...
    @staticmethod
    def get_alpha_scale_texture_stage() -> Any: ...
    @overload
    def get_alpha_scale_via_texture(self, GraphicsStateGuardianself) -> Any: ...
    @overload
    def get_alpha_scale_via_texture(self, GraphicsStateGuardianself, constTextureAttribtex_attrib) -> Any: ...
    @overload
    def get_alpha_scale_via_texture(self) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_color_scale_via_lighting(self, GraphicsStateGuardianself) -> Any: ...
    def get_coordinate_system(self, GraphicsStateGuardianself) -> Any: ...
    def get_copy_texture_inverted(self, GraphicsStateGuardianself) -> Any: ...
    def get_driver_renderer(self, constGraphicsStateGuardianself) -> Any: ...
    def get_driver_shader_version_major(self, constGraphicsStateGuardianself) -> Any: ...
    def get_driver_shader_version_minor(self, constGraphicsStateGuardianself) -> Any: ...
    def get_driver_vendor(self, constGraphicsStateGuardianself) -> Any: ...
    def get_driver_version(self, constGraphicsStateGuardianself) -> Any: ...
    def get_driver_version_major(self, constGraphicsStateGuardianself) -> Any: ...
    def get_driver_version_minor(self, constGraphicsStateGuardianself) -> Any: ...
    def get_engine(self, GraphicsStateGuardianself) -> Any: ...
    def get_flash_texture(self, GraphicsStateGuardianself) -> Any: ...
    def get_gamma(self, GraphicsStateGuardianself) -> Any: ...
    def get_internal_coordinate_system(self, GraphicsStateGuardianself) -> Any: ...
    def get_loader(self, GraphicsStateGuardianself) -> Any: ...
    def get_max_2d_texture_array_layers(self, GraphicsStateGuardianself) -> Any: ...
    def get_max_3d_texture_dimension(self, GraphicsStateGuardianself) -> Any: ...
    def get_max_buffer_texture_size(self, GraphicsStateGuardianself) -> Any: ...
    def get_max_clip_planes(self, GraphicsStateGuardianself) -> Any: ...
    def get_max_color_targets(self, GraphicsStateGuardianself) -> Any: ...
    def get_max_cube_map_dimension(self, GraphicsStateGuardianself) -> Any: ...
    def get_max_lights(self, GraphicsStateGuardianself) -> Any: ...
    def get_max_texture_stages(self, GraphicsStateGuardianself) -> Any: ...
    def get_max_vertex_transform_indices(self, GraphicsStateGuardianself) -> Any: ...
    def get_max_vertex_transforms(self, GraphicsStateGuardianself) -> Any: ...
    def get_maximum_simultaneous_render_targets(self, GraphicsStateGuardianself) -> Any: ...
    def get_pipe(self, GraphicsStateGuardianself) -> Any: ...
    def get_prepared_objects(self, constGraphicsStateGuardianself) -> Any: ...
    def get_prepared_textures(self, GraphicsStateGuardianself) -> Any: ...
    def get_runtime_color_scale(self, GraphicsStateGuardianself) -> Any: ...
    def get_scene(self, GraphicsStateGuardianself) -> Any: ...
    def get_shader_generator(self, GraphicsStateGuardianself) -> Any: ...
    def get_shader_model(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_2d_texture_array(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_3d_texture(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_basic_shaders(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_buffer_texture(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_cg_profile(self, GraphicsStateGuardianself, strname) -> Any: ...
    def get_supports_compressed_texture(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_compute_shaders(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_cube_map(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_cube_map_array(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_depth_stencil(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_depth_texture(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_dual_source_blending(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_generate_mipmap(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_geometry_instancing(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_geometry_shaders(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_glsl(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_indirect_draw(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_luminance_texture(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_occlusion_query(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_sampler_objects(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_stencil(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_tessellation_shaders(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_tex_non_pow2(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_texture_combine(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_texture_dot3(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_texture_saved_result(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_timer_query(self, GraphicsStateGuardianself) -> Any: ...
    def get_supports_two_sided_stencil(self, GraphicsStateGuardianself) -> Any: ...
    def get_texture_quality_override(self, GraphicsStateGuardianself) -> Any: ...
    def get_threading_model(self, GraphicsStateGuardianself) -> Any: ...
    def get_timer_queries_active(self, GraphicsStateGuardianself) -> Any: ...
    def hasExtension(self, *args, **kwargs): ...
    def has_extension(self, GraphicsStateGuardianself, strextension) -> Any: ...
    def isActive(self, *args, **kwargs): ...
    def isHardware(self, *args, **kwargs): ...
    def isValid(self, *args, **kwargs): ...
    def is_active(self, GraphicsStateGuardianself) -> Any: ...
    def is_hardware(self, GraphicsStateGuardianself) -> Any: ...
    def is_valid(self, GraphicsStateGuardianself) -> Any: ...
    def needsReset(self, *args, **kwargs): ...
    def needs_reset(self, GraphicsStateGuardianself) -> Any: ...
    def releaseAll(self, *args, **kwargs): ...
    def releaseAllGeoms(self, *args, **kwargs): ...
    def releaseAllIndexBuffers(self, *args, **kwargs): ...
    def releaseAllSamplers(self, *args, **kwargs): ...
    def releaseAllShaderBuffers(self, *args, **kwargs): ...
    def releaseAllTextures(self, *args, **kwargs): ...
    def releaseAllVertexBuffers(self, *args, **kwargs): ...
    def release_all(self, constGraphicsStateGuardianself) -> Any: ...
    def release_all_geoms(self, constGraphicsStateGuardianself) -> Any: ...
    def release_all_index_buffers(self, constGraphicsStateGuardianself) -> Any: ...
    def release_all_samplers(self, constGraphicsStateGuardianself) -> Any: ...
    def release_all_shader_buffers(self, constGraphicsStateGuardianself) -> Any: ...
    def release_all_textures(self, constGraphicsStateGuardianself) -> Any: ...
    def release_all_vertex_buffers(self, constGraphicsStateGuardianself) -> Any: ...
    def restoreGamma(self, *args, **kwargs): ...
    def restore_gamma(self, constGraphicsStateGuardianself) -> Any: ...
    def setActive(self, *args, **kwargs): ...
    def setCoordinateSystem(self, *args, **kwargs): ...
    def setFlashTexture(self, *args, **kwargs): ...
    def setGamma(self, *args, **kwargs): ...
    def setIncompleteRender(self, *args, **kwargs): ...
    def setLoader(self, *args, **kwargs): ...
    def setScene(self, *args, **kwargs): ...
    def setShaderGenerator(self, *args, **kwargs): ...
    def setShaderModel(self, *args, **kwargs): ...
    def setTextureQualityOverride(self, *args, **kwargs): ...
    def set_active(self, constGraphicsStateGuardianself, boolactive) -> Any: ...
    def set_coordinate_system(self, constGraphicsStateGuardianself, intcs) -> Any: ...
    def set_flash_texture(self, constGraphicsStateGuardianself, Texturetex) -> Any: ...
    def set_gamma(self, constGraphicsStateGuardianself, floatgamma) -> Any: ...
    def set_incomplete_render(self, constGraphicsStateGuardianself, boolincomplete_render) -> Any: ...
    def set_loader(self, constGraphicsStateGuardianself, Loaderloader) -> Any: ...
    def set_scene(self, constGraphicsStateGuardianself, SceneSetupscene_setup) -> Any: ...
    def set_shader_generator(self, constGraphicsStateGuardianself, ShaderGeneratorshader_generator) -> Any: ...
    def set_shader_model(self, constGraphicsStateGuardianself, intshader_model) -> Any: ...
    def set_texture_quality_override(self, constGraphicsStateGuardianself, intquality_level) -> Any: ...

class GraphicsStateGuardianBase(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getDefaultGsg(*args, **kwargs): ...
    def getEffectiveIncompleteRender(self, *args, **kwargs): ...
    @staticmethod
    def getGsg(*args, **kwargs): ...
    @staticmethod
    def getGsgs(*args, **kwargs): ...
    def getIncompleteRender(self, *args, **kwargs): ...
    def getMaxTextureDimension(self, *args, **kwargs): ...
    def getMaxVerticesPerArray(self, *args, **kwargs): ...
    def getMaxVerticesPerPrimitive(self, *args, **kwargs): ...
    @staticmethod
    def getNumGsgs(*args, **kwargs): ...
    def getSupportedGeomRendering(self, *args, **kwargs): ...
    def getSupportsCompressedTextureFormat(self, *args, **kwargs): ...
    def getSupportsHlsl(self, *args, **kwargs): ...
    def getSupportsMultisample(self, *args, **kwargs): ...
    def getSupportsShadowFilter(self, *args, **kwargs): ...
    def getSupportsTextureSrgb(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_default_gsg() -> Any: ...
    def get_effective_incomplete_render(self, GraphicsStateGuardianBaseself) -> Any: ...
    @staticmethod
    def get_gsg(intn) -> Any: ...
    @staticmethod
    def get_gsgs(*args, **kwargs): ...
    def get_incomplete_render(self, GraphicsStateGuardianBaseself) -> Any: ...
    def get_max_texture_dimension(self, GraphicsStateGuardianBaseself) -> Any: ...
    def get_max_vertices_per_array(self, GraphicsStateGuardianBaseself) -> Any: ...
    def get_max_vertices_per_primitive(self, GraphicsStateGuardianBaseself) -> Any: ...
    @staticmethod
    def get_num_gsgs() -> Any: ...
    def get_supported_geom_rendering(self, GraphicsStateGuardianBaseself) -> Any: ...
    def get_supports_compressed_texture_format(self, GraphicsStateGuardianBaseself, intcompression_mode) -> Any: ...
    def get_supports_hlsl(self, GraphicsStateGuardianBaseself) -> Any: ...
    def get_supports_multisample(self, GraphicsStateGuardianBaseself) -> Any: ...
    def get_supports_shadow_filter(self, GraphicsStateGuardianBaseself) -> Any: ...
    def get_supports_texture_srgb(self, GraphicsStateGuardianBaseself) -> Any: ...
    def prefersTriangleStrips(self, *args, **kwargs): ...
    def prefers_triangle_strips(self, GraphicsStateGuardianBaseself) -> Any: ...
    @staticmethod
    def setDefaultGsg(*args, **kwargs): ...
    @staticmethod
    def set_default_gsg(GraphicsStateGuardianBasedefault_gsg) -> Any: ...

class GraphicsThreadingModel(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constGraphicsThreadingModelself, constGraphicsThreadingModelcopy) -> Any: ...
    def getCullName(self, *args, **kwargs): ...
    def getCullSorting(self, *args, **kwargs): ...
    def getCullStage(self, *args, **kwargs): ...
    def getDrawName(self, *args, **kwargs): ...
    def getDrawStage(self, *args, **kwargs): ...
    def getModel(self, *args, **kwargs): ...
    def get_cull_name(self, GraphicsThreadingModelself) -> Any: ...
    def get_cull_sorting(self, GraphicsThreadingModelself) -> Any: ...
    def get_cull_stage(self, GraphicsThreadingModelself) -> Any: ...
    def get_draw_name(self, GraphicsThreadingModelself) -> Any: ...
    def get_draw_stage(self, GraphicsThreadingModelself) -> Any: ...
    def get_model(self, GraphicsThreadingModelself) -> Any: ...
    def isDefault(self, *args, **kwargs): ...
    def isSingleThreaded(self, *args, **kwargs): ...
    def is_default(self, GraphicsThreadingModelself) -> Any: ...
    def is_single_threaded(self, GraphicsThreadingModelself) -> Any: ...
    def output(self, GraphicsThreadingModelself, ostreamout) -> Any: ...
    def setCullName(self, *args, **kwargs): ...
    def setCullSorting(self, *args, **kwargs): ...
    def setDrawName(self, *args, **kwargs): ...
    def set_cull_name(self, constGraphicsThreadingModelself, strcull_name) -> Any: ...
    def set_cull_sorting(self, constGraphicsThreadingModelself, boolcull_sorting) -> Any: ...
    def set_draw_name(self, constGraphicsThreadingModelself, strcull_name) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class GraphicsWindow(GraphicsOutput):
    DtoolClassDict: ClassVar[dict] = ...
    close_request_event: Incomplete
    closed: Incomplete
    properties: WindowProperties
    rejected_properties: Incomplete
    requested_properties: Incomplete
    unexposed_draw: Incomplete
    window_event: Incomplete
    window_handle: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearRejectedProperties(self, *args, **kwargs): ...
    def clear_rejected_properties(self, constGraphicsWindowself) -> Any: ...
    def closeIme(self, *args, **kwargs): ...
    def close_ime(self, constGraphicsWindowself) -> Any: ...
    def disablePointerEvents(self, *args, **kwargs): ...
    def disable_pointer_events(self, constGraphicsWindowself, intdevice) -> Any: ...
    def enablePointerEvents(self, *args, **kwargs): ...
    def enable_pointer_events(self, constGraphicsWindowself, intdevice) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCloseRequestEvent(self, *args, **kwargs): ...
    def getInputDevice(self, *args, **kwargs): ...
    def getInputDeviceName(self, *args, **kwargs): ...
    def getInputDeviceNames(self, *args, **kwargs): ...
    def getInputDevices(self, *args, **kwargs): ...
    def getKeyboardMap(self, *args, **kwargs): ...
    def getNumInputDevices(self, *args, **kwargs): ...
    def getPointer(self, *args, **kwargs): ...
    def getProperties(self, *args, **kwargs): ...
    def getRejectedProperties(self, *args, **kwargs): ...
    def getRequestedProperties(self, *args, **kwargs): ...
    def getUnexposedDraw(self, *args, **kwargs): ...
    def getWindowEvent(self, *args, **kwargs): ...
    def getWindowHandle(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_close_request_event(self, GraphicsWindowself) -> Any: ...
    def get_input_device(self, GraphicsWindowself, inti) -> Any: ...
    def get_input_device_name(self, GraphicsWindowself, intdevice) -> Any: ...
    def get_input_device_names(self, *args, **kwargs): ...
    def get_input_devices(self, *args, **kwargs): ...
    def get_keyboard_map(self, GraphicsWindowself) -> Any: ...
    def get_num_input_devices(self, GraphicsWindowself) -> Any: ...
    def get_pointer(self, GraphicsWindowself, intdevice) -> Any: ...
    def get_properties(self, GraphicsWindowself) -> Any: ...
    def get_rejected_properties(self, GraphicsWindowself) -> Any: ...
    def get_requested_properties(self, GraphicsWindowself) -> Any: ...
    def get_unexposed_draw(self, GraphicsWindowself) -> Any: ...
    def get_window_event(self, GraphicsWindowself) -> Any: ...
    def get_window_handle(self, GraphicsWindowself) -> Any: ...
    def hasKeyboard(self, *args, **kwargs): ...
    def hasPointer(self, *args, **kwargs): ...
    def has_keyboard(self, GraphicsWindowself, intdevice) -> Any: ...
    def has_pointer(self, GraphicsWindowself, intdevice) -> Any: ...
    def isClosed(self, *args, **kwargs): ...
    def isFullscreen(self, *args, **kwargs): ...
    def is_closed(self, GraphicsWindowself) -> Any: ...
    def is_fullscreen(self, GraphicsWindowself) -> Any: ...
    def movePointer(self, *args, **kwargs): ...
    def move_pointer(self, constGraphicsWindowself, intdevice, intx, inty) -> Any: ...
    def requestProperties(self, *args, **kwargs): ...
    def request_properties(self, *args, **kwargs): ...
    def setCloseRequestEvent(self, *args, **kwargs): ...
    def setUnexposedDraw(self, *args, **kwargs): ...
    def setWindowEvent(self, *args, **kwargs): ...
    def set_close_request_event(self, constGraphicsWindowself, strclose_request_event) -> Any: ...
    def set_unexposed_draw(self, constGraphicsWindowself, boolunexposed_draw) -> Any: ...
    def set_window_event(self, constGraphicsWindowself, strwindow_event) -> Any: ...

class GraphicsWindowInputDevice(InputDevice):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def buttonDown(self, *args, **kwargs): ...
    def buttonResumeDown(self, *args, **kwargs): ...
    def buttonUp(self, *args, **kwargs): ...
    def button_down(self, constGraphicsWindowInputDeviceself, ButtonHandlebutton, doubletime) -> Any: ...
    def button_resume_down(self, constGraphicsWindowInputDeviceself, ButtonHandlebutton, doubletime) -> Any: ...
    def button_up(self, constGraphicsWindowInputDeviceself, ButtonHandlebutton, doubletime) -> Any: ...
    def candidate(
        self,
        constGraphicsWindowInputDeviceself,
        unicodecandidate_string,
        inthighlight_start,
        inthighlight_end,
        intcursor_pos,
    ) -> Any: ...
    def focusLost(self, *args, **kwargs): ...
    def focus_lost(self, constGraphicsWindowInputDeviceself, doubletime) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPointer(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_pointer(self, GraphicsWindowInputDeviceself) -> Any: ...
    def keystroke(self, constGraphicsWindowInputDeviceself, intkeycode, doubletime) -> Any: ...
    def pointerMoved(self, *args, **kwargs): ...
    def pointer_moved(self, constGraphicsWindowInputDeviceself, doublex, doubley, doubletime) -> Any: ...
    def rawButtonDown(self, *args, **kwargs): ...
    def rawButtonUp(self, *args, **kwargs): ...
    def raw_button_down(self, constGraphicsWindowInputDeviceself, ButtonHandlebutton, doubletime) -> Any: ...
    def raw_button_up(self, constGraphicsWindowInputDeviceself, ButtonHandlebutton, doubletime) -> Any: ...
    def removePointer(self, *args, **kwargs): ...
    def remove_pointer(self, constGraphicsWindowInputDeviceself, intid) -> Any: ...
    def setPointerInWindow(self, *args, **kwargs): ...
    def setPointerOutOfWindow(self, *args, **kwargs): ...
    def set_pointer_in_window(self, constGraphicsWindowInputDeviceself, doublex, doubley, doubletime) -> Any: ...
    def set_pointer_out_of_window(self, constGraphicsWindowInputDeviceself, doubletime) -> Any: ...
    def updatePointer(self, *args, **kwargs): ...
    def update_pointer(self, constGraphicsWindowInputDeviceself, PointerDatadata, doubletime) -> Any: ...

class GraphicsWindowProcCallbackData(CallbackData):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumTouches(self, *args, **kwargs): ...
    def getTouchInfo(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_touches(self, constGraphicsWindowProcCallbackDataself) -> Any: ...
    def get_touch_info(self, constGraphicsWindowProcCallbackDataself, intindex) -> Any: ...
    def isTouchEvent(self, *args, **kwargs): ...
    def is_touch_event(self, constGraphicsWindowProcCallbackDataself) -> Any: ...

class HTTPChannel(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    SCDownloadInvalidRange: ClassVar[int] = ...
    SCDownloadOpenError: ClassVar[int] = ...
    SCDownloadWriteError: ClassVar[int] = ...
    SCHttpErrorWatermark: ClassVar[int] = ...
    SCIncomplete: ClassVar[int] = ...
    SCInternalError: ClassVar[int] = ...
    SCInvalidHttp: ClassVar[int] = ...
    SCLostConnection: ClassVar[int] = ...
    SCNoConnection: ClassVar[int] = ...
    SCNonHttpResponse: ClassVar[int] = ...
    SCSocksInvalidVersion: ClassVar[int] = ...
    SCSocksNoAcceptableLoginMethod: ClassVar[int] = ...
    SCSocksNoConnection: ClassVar[int] = ...
    SCSocksRefused: ClassVar[int] = ...
    SCSslInternalFailure: ClassVar[int] = ...
    SCSslInvalidServerCertificate: ClassVar[int] = ...
    SCSslNoHandshake: ClassVar[int] = ...
    SCSslSelfSignedServerCertificate: ClassVar[int] = ...
    SCSslUnexpectedServer: ClassVar[int] = ...
    SCTimeout: ClassVar[int] = ...
    SC_download_invalid_range: ClassVar[int] = ...
    SC_download_open_error: ClassVar[int] = ...
    SC_download_write_error: ClassVar[int] = ...
    SC_http_error_watermark: ClassVar[int] = ...
    SC_incomplete: ClassVar[int] = ...
    SC_internal_error: ClassVar[int] = ...
    SC_invalid_http: ClassVar[int] = ...
    SC_lost_connection: ClassVar[int] = ...
    SC_no_connection: ClassVar[int] = ...
    SC_non_http_response: ClassVar[int] = ...
    SC_socks_invalid_version: ClassVar[int] = ...
    SC_socks_no_acceptable_login_method: ClassVar[int] = ...
    SC_socks_no_connection: ClassVar[int] = ...
    SC_socks_refused: ClassVar[int] = ...
    SC_ssl_internal_failure: ClassVar[int] = ...
    SC_ssl_invalid_server_certificate: ClassVar[int] = ...
    SC_ssl_no_handshake: ClassVar[int] = ...
    SC_ssl_self_signed_server_certificate: ClassVar[int] = ...
    SC_ssl_unexpected_server: ClassVar[int] = ...
    SC_timeout: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def beginConnectTo(self, *args, **kwargs): ...
    def beginGetDocument(self, *args, **kwargs): ...
    def beginGetHeader(self, *args, **kwargs): ...
    def beginGetSubdocument(self, *args, **kwargs): ...
    def beginPostForm(self, *args, **kwargs): ...
    def begin_connect_to(self, constHTTPChannelself, constDocumentSpecurl) -> Any: ...
    def begin_get_document(self, constHTTPChannelself, constDocumentSpecurl) -> Any: ...
    def begin_get_header(self, constHTTPChannelself, constDocumentSpecurl) -> Any: ...
    def begin_get_subdocument(self, constHTTPChannelself, constDocumentSpecurl, intfirst_byte, intlast_byte) -> Any: ...
    def begin_post_form(self, constHTTPChannelself, constDocumentSpecurl, strbody) -> Any: ...
    def clearExtraHeaders(self, *args, **kwargs): ...
    def clear_extra_headers(self, constHTTPChannelself) -> Any: ...
    def closeReadBody(self, *args, **kwargs): ...
    def close_read_body(self, HTTPChannelself, istreamstream) -> Any: ...
    def connectTo(self, *args, **kwargs): ...
    def connect_to(self, constHTTPChannelself, constDocumentSpecurl) -> Any: ...
    def deleteDocument(self, *args, **kwargs): ...
    def delete_document(self, constHTTPChannelself, constDocumentSpecurl) -> Any: ...
    def downloadToFile(self, *args, **kwargs): ...
    def downloadToRam(self, *args, **kwargs): ...
    def downloadToStream(self, *args, **kwargs): ...
    def download_to_file(self, constHTTPChannelself, constFilenamefilename, boolsubdocument_resumes) -> Any: ...
    def download_to_ram(self, constHTTPChannelself, Ramfileramfile, boolsubdocument_resumes) -> Any: ...
    def download_to_stream(self, constHTTPChannelself, ostreamstrm, boolsubdocument_resumes) -> Any: ...
    def getAllowProxy(self, *args, **kwargs): ...
    def getBlockingConnect(self, *args, **kwargs): ...
    def getBytesDownloaded(self, *args, **kwargs): ...
    def getBytesRequested(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getClient(self, *args, **kwargs): ...
    def getConnectTimeout(self, *args, **kwargs): ...
    def getConnection(self, *args, **kwargs): ...
    def getContentType(self, *args, **kwargs): ...
    def getDocument(self, *args, **kwargs): ...
    def getDocumentSpec(self, *args, **kwargs): ...
    def getDownloadThrottle(self, *args, **kwargs): ...
    def getFileSize(self, *args, **kwargs): ...
    def getFirstByteDelivered(self, *args, **kwargs): ...
    def getFirstByteRequested(self, *args, **kwargs): ...
    def getHeader(self, *args, **kwargs): ...
    def getHeaderValue(self, *args, **kwargs): ...
    def getHttpTimeout(self, *args, **kwargs): ...
    def getHttpVersion(self, *args, **kwargs): ...
    def getHttpVersionString(self, *args, **kwargs): ...
    def getIdleTimeout(self, *args, **kwargs): ...
    def getLastByteDelivered(self, *args, **kwargs): ...
    def getLastByteRequested(self, *args, **kwargs): ...
    def getMaxBytesPerSecond(self, *args, **kwargs): ...
    def getMaxUpdatesPerSecond(self, *args, **kwargs): ...
    def getNumRedirectSteps(self, *args, **kwargs): ...
    def getOptions(self, *args, **kwargs): ...
    def getPersistentConnection(self, *args, **kwargs): ...
    def getProxyRealm(self, *args, **kwargs): ...
    def getProxyTunnel(self, *args, **kwargs): ...
    def getRedirect(self, *args, **kwargs): ...
    def getRedirectStep(self, *args, **kwargs): ...
    def getRedirectSteps(self, *args, **kwargs): ...
    def getSkipBodySize(self, *args, **kwargs): ...
    def getStatusCode(self, *args, **kwargs): ...
    def getStatusString(self, *args, **kwargs): ...
    def getSubdocument(self, *args, **kwargs): ...
    def getTrace(self, *args, **kwargs): ...
    def getUrl(self, *args, **kwargs): ...
    def getWwwRealm(self, *args, **kwargs): ...
    def get_allow_proxy(self, HTTPChannelself) -> Any: ...
    def get_blocking_connect(self, HTTPChannelself) -> Any: ...
    def get_bytes_downloaded(self, HTTPChannelself) -> Any: ...
    def get_bytes_requested(self, HTTPChannelself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_client(self, HTTPChannelself) -> Any: ...
    def get_connect_timeout(self, HTTPChannelself) -> Any: ...
    def get_connection(self, constHTTPChannelself) -> Any: ...
    def get_content_type(self, HTTPChannelself) -> Any: ...
    def get_document(self, constHTTPChannelself, constDocumentSpecurl) -> Any: ...
    def get_document_spec(self, HTTPChannelself) -> Any: ...
    def get_download_throttle(self, HTTPChannelself) -> Any: ...
    def get_file_size(self, HTTPChannelself) -> Any: ...
    def get_first_byte_delivered(self, HTTPChannelself) -> Any: ...
    def get_first_byte_requested(self, HTTPChannelself) -> Any: ...
    def get_header(self, constHTTPChannelself, constDocumentSpecurl) -> Any: ...
    def get_header_value(self, HTTPChannelself, strkey) -> Any: ...
    def get_http_timeout(self, HTTPChannelself) -> Any: ...
    def get_http_version(self, HTTPChannelself) -> Any: ...
    def get_http_version_string(self, HTTPChannelself) -> Any: ...
    def get_idle_timeout(self, HTTPChannelself) -> Any: ...
    def get_last_byte_delivered(self, HTTPChannelself) -> Any: ...
    def get_last_byte_requested(self, HTTPChannelself) -> Any: ...
    def get_max_bytes_per_second(self, HTTPChannelself) -> Any: ...
    def get_max_updates_per_second(self, HTTPChannelself) -> Any: ...
    def get_num_redirect_steps(self, HTTPChannelself) -> Any: ...
    def get_options(self, constHTTPChannelself, constDocumentSpecurl) -> Any: ...
    def get_persistent_connection(self, HTTPChannelself) -> Any: ...
    def get_proxy_realm(self, HTTPChannelself) -> Any: ...
    def get_proxy_tunnel(self, HTTPChannelself) -> Any: ...
    @overload
    def get_redirect(self, HTTPChannelself) -> Any: ...
    @overload
    def get_redirect(self) -> Any: ...
    def get_redirect_step(self, HTTPChannelself, intn) -> Any: ...
    def get_redirect_steps(self, *args, **kwargs): ...
    def get_skip_body_size(self, HTTPChannelself) -> Any: ...
    def get_status_code(self, HTTPChannelself) -> Any: ...
    def get_status_string(self, HTTPChannelself) -> Any: ...
    def get_subdocument(self, constHTTPChannelself, constDocumentSpecurl, intfirst_byte, intlast_byte) -> Any: ...
    def get_trace(self, constHTTPChannelself, constDocumentSpecurl) -> Any: ...
    def get_url(self, HTTPChannelself) -> Any: ...
    def get_www_realm(self, HTTPChannelself) -> Any: ...
    def isConnectionReady(self, *args, **kwargs): ...
    def isDownloadComplete(self, *args, **kwargs): ...
    def isFileSizeKnown(self, *args, **kwargs): ...
    def isValid(self, *args, **kwargs): ...
    def is_connection_ready(self, HTTPChannelself) -> Any: ...
    @overload
    def is_download_complete(self, HTTPChannelself) -> Any: ...
    @overload
    def is_download_complete(self) -> Any: ...
    def is_file_size_known(self, HTTPChannelself) -> Any: ...
    def is_valid(self, HTTPChannelself) -> Any: ...
    def openReadBody(self, *args, **kwargs): ...
    def open_read_body(self, constHTTPChannelself) -> Any: ...
    def postForm(self, *args, **kwargs): ...
    def post_form(self, constHTTPChannelself, constDocumentSpecurl, strbody) -> Any: ...
    def preserveStatus(self, *args, **kwargs): ...
    def preserve_status(self, constHTTPChannelself) -> Any: ...
    def putDocument(self, *args, **kwargs): ...
    def put_document(self, constHTTPChannelself, constDocumentSpecurl, strbody) -> Any: ...
    def reset(self, constHTTPChannelself) -> Any: ...
    @overload
    def run(self, constHTTPChannelself) -> Any: ...
    @overload
    def run(self) -> Any: ...
    def sendExtraHeader(self, *args, **kwargs): ...
    def send_extra_header(self, constHTTPChannelself, strkey, strvalue) -> Any: ...
    def setAllowProxy(self, *args, **kwargs): ...
    def setBlockingConnect(self, *args, **kwargs): ...
    def setConnectTimeout(self, *args, **kwargs): ...
    def setContentType(self, *args, **kwargs): ...
    def setDownloadThrottle(self, *args, **kwargs): ...
    def setExpectedFileSize(self, *args, **kwargs): ...
    def setHttpTimeout(self, *args, **kwargs): ...
    def setIdleTimeout(self, *args, **kwargs): ...
    def setMaxBytesPerSecond(self, *args, **kwargs): ...
    def setMaxUpdatesPerSecond(self, *args, **kwargs): ...
    def setPersistentConnection(self, *args, **kwargs): ...
    def setProxyTunnel(self, *args, **kwargs): ...
    def setSkipBodySize(self, *args, **kwargs): ...
    def set_allow_proxy(self, constHTTPChannelself, boolallow_proxy) -> Any: ...
    def set_blocking_connect(self, constHTTPChannelself, boolblocking_connect) -> Any: ...
    def set_connect_timeout(self, constHTTPChannelself, doubletimeout_seconds) -> Any: ...
    def set_content_type(self, constHTTPChannelself, strcontent_type) -> Any: ...
    def set_download_throttle(self, constHTTPChannelself, booldownload_throttle) -> Any: ...
    def set_expected_file_size(self, constHTTPChannelself, intfile_size) -> Any: ...
    def set_http_timeout(self, constHTTPChannelself, doubletimeout_seconds) -> Any: ...
    def set_idle_timeout(self, constHTTPChannelself, doubleidle_timeout) -> Any: ...
    def set_max_bytes_per_second(self, constHTTPChannelself, doublemax_bytes_per_second) -> Any: ...
    def set_max_updates_per_second(self, constHTTPChannelself, doublemax_updates_per_second) -> Any: ...
    def set_persistent_connection(self, constHTTPChannelself, boolpersistent_connection) -> Any: ...
    def set_proxy_tunnel(self, constHTTPChannelself, boolproxy_tunnel) -> Any: ...
    def set_skip_body_size(self, constHTTPChannelself, intskip_body_size) -> Any: ...
    def willCloseConnection(self, *args, **kwargs): ...
    def will_close_connection(self, HTTPChannelself) -> Any: ...
    def writeHeaders(self, *args, **kwargs): ...
    def write_headers(self, HTTPChannelself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class HTTPClient(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    VSNoDateCheck: ClassVar[int] = ...
    VSNoVerify: ClassVar[int] = ...
    VSNormal: ClassVar[int] = ...
    VS_no_date_check: ClassVar[int] = ...
    VS_no_verify: ClassVar[int] = ...
    VS_normal: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addDirectHost(self, *args, **kwargs): ...
    def addPreapprovedServerCertificateFilename(self, *args, **kwargs): ...
    def addPreapprovedServerCertificateName(self, *args, **kwargs): ...
    def addPreapprovedServerCertificatePem(self, *args, **kwargs): ...
    def addProxy(self, *args, **kwargs): ...
    def add_direct_host(self, constHTTPClientself, strhostname) -> Any: ...
    def add_preapproved_server_certificate_filename(
        self, constHTTPClientself, constURLSpecurl, constFilenamefilename
    ) -> Any: ...
    def add_preapproved_server_certificate_name(self, constHTTPClientself, constURLSpecurl, strname) -> Any: ...
    def add_preapproved_server_certificate_pem(self, constHTTPClientself, constURLSpecurl, strpem) -> Any: ...
    def add_proxy(self, constHTTPClientself, strscheme, constURLSpecproxy) -> Any: ...
    def assign(self, constHTTPClientself, constHTTPClientcopy) -> Any: ...
    @staticmethod
    def base64Decode(*args, **kwargs): ...
    @staticmethod
    def base64Encode(*args, **kwargs): ...
    @overload
    @staticmethod
    def base64_decode(strs) -> Any: ...
    @overload
    @staticmethod
    def base64_decode() -> Any: ...
    @overload
    @staticmethod
    def base64_encode(strs) -> Any: ...
    @overload
    @staticmethod
    def base64_encode() -> Any: ...
    def clearAllCookies(self, *args, **kwargs): ...
    def clearAllPreapprovedServerCertificates(self, *args, **kwargs): ...
    def clearCookie(self, *args, **kwargs): ...
    def clearDirectHost(self, *args, **kwargs): ...
    def clearPreapprovedServerCertificates(self, *args, **kwargs): ...
    def clearProxy(self, *args, **kwargs): ...
    def clear_all_cookies(self, constHTTPClientself) -> Any: ...
    def clear_all_preapproved_server_certificates(self, constHTTPClientself) -> Any: ...
    def clear_cookie(self, constHTTPClientself, constHTTPCookiecookie) -> Any: ...
    def clear_direct_host(self, constHTTPClientself) -> Any: ...
    def clear_preapproved_server_certificates(self, constHTTPClientself, constURLSpecurl) -> Any: ...
    def clear_proxy(self, constHTTPClientself) -> Any: ...
    def copyCookiesFrom(self, *args, **kwargs): ...
    def copy_cookies_from(self, constHTTPClientself, constHTTPClientother) -> Any: ...
    def getCipherList(self, *args, **kwargs): ...
    def getCookie(self, *args, **kwargs): ...
    def getDirectHostSpec(self, *args, **kwargs): ...
    def getDocument(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getHeader(self, *args, **kwargs): ...
    def getHttpVersion(self, *args, **kwargs): ...
    def getHttpVersionString(self, *args, **kwargs): ...
    def getProxiesForUrl(self, *args, **kwargs): ...
    def getProxySpec(self, *args, **kwargs): ...
    def getTryAllDirect(self, *args, **kwargs): ...
    def getUsername(self, *args, **kwargs): ...
    def getVerifySsl(self, *args, **kwargs): ...
    def get_cipher_list(self, HTTPClientself) -> Any: ...
    def get_cookie(self, HTTPClientself, constHTTPCookiecookie) -> Any: ...
    def get_direct_host_spec(self, HTTPClientself) -> Any: ...
    def get_document(self, constHTTPClientself, constURLSpecurl) -> Any: ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_header(self, constHTTPClientself, constURLSpecurl) -> Any: ...
    def get_http_version(self, HTTPClientself) -> Any: ...
    def get_http_version_string(self, HTTPClientself) -> Any: ...
    def get_proxies_for_url(self, HTTPClientself, constURLSpecurl) -> Any: ...
    def get_proxy_spec(self, HTTPClientself) -> Any: ...
    def get_try_all_direct(self, HTTPClientself) -> Any: ...
    def get_username(self, HTTPClientself, strserver, strrealm) -> Any: ...
    def get_verify_ssl(self, HTTPClientself) -> Any: ...
    def hasCookie(self, *args, **kwargs): ...
    def has_cookie(self, HTTPClientself, constHTTPCookiecookie) -> Any: ...
    @staticmethod
    def initRandomSeed(*args, **kwargs): ...
    @staticmethod
    def init_random_seed() -> Any: ...
    def loadCertificates(self, *args, **kwargs): ...
    def loadClientCertificate(self, *args, **kwargs): ...
    def load_certificates(self, constHTTPClientself, constFilenamefilename) -> Any: ...
    def load_client_certificate(self, constHTTPClientself) -> Any: ...
    def makeChannel(self, *args, **kwargs): ...
    def make_channel(self, constHTTPClientself, boolpersistent_connection) -> Any: ...
    @staticmethod
    def parseHttpVersionString(*args, **kwargs): ...
    @staticmethod
    def parse_http_version_string(strversion) -> Any: ...
    def postForm(self, *args, **kwargs): ...
    def post_form(self, constHTTPClientself, constURLSpecurl, strbody) -> Any: ...
    def sendCookies(self, *args, **kwargs): ...
    def send_cookies(self, constHTTPClientself, ostreamout, constURLSpecurl) -> Any: ...
    def setCipherList(self, *args, **kwargs): ...
    def setClientCertificateFilename(self, *args, **kwargs): ...
    def setClientCertificatePassphrase(self, *args, **kwargs): ...
    def setClientCertificatePem(self, *args, **kwargs): ...
    def setCookie(self, *args, **kwargs): ...
    def setDirectHostSpec(self, *args, **kwargs): ...
    def setHttpVersion(self, *args, **kwargs): ...
    def setProxySpec(self, *args, **kwargs): ...
    def setTryAllDirect(self, *args, **kwargs): ...
    def setUsername(self, *args, **kwargs): ...
    def setVerifySsl(self, *args, **kwargs): ...
    def set_cipher_list(self, constHTTPClientself, strcipher_list) -> Any: ...
    def set_client_certificate_filename(self, constHTTPClientself, constFilenamefilename) -> Any: ...
    def set_client_certificate_passphrase(self, constHTTPClientself, strpassphrase) -> Any: ...
    def set_client_certificate_pem(self, constHTTPClientself, strpem) -> Any: ...
    def set_cookie(self, constHTTPClientself, constHTTPCookiecookie) -> Any: ...
    def set_direct_host_spec(self, constHTTPClientself, strdirect_host_spec) -> Any: ...
    def set_http_version(self, constHTTPClientself, intversion) -> Any: ...
    def set_proxy_spec(self, constHTTPClientself, strproxy_spec) -> Any: ...
    def set_try_all_direct(self, constHTTPClientself, booltry_all_direct) -> Any: ...
    def set_username(self, constHTTPClientself, strserver, strrealm, strusername) -> Any: ...
    def set_verify_ssl(self, constHTTPClientself, intverify_ssl) -> Any: ...
    def writeCookies(self, *args, **kwargs): ...
    def write_cookies(self, HTTPClientself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class HTTPCookie(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    SSLax: ClassVar[int] = ...
    SSNone: ClassVar[int] = ...
    SSStrict: ClassVar[int] = ...
    SSUnspecified: ClassVar[int] = ...
    SS_lax: ClassVar[int] = ...
    SS_none: ClassVar[int] = ...
    SS_strict: ClassVar[int] = ...
    SS_unspecified: ClassVar[int] = ...
    domain: Incomplete
    expires: Incomplete
    name: Incomplete
    path: Incomplete
    secure: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearExpires(self, *args, **kwargs): ...
    def clear_expires(self, constHTTPCookieself) -> Any: ...
    def getDomain(self, *args, **kwargs): ...
    def getExpires(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getPath(self, *args, **kwargs): ...
    def getSamesite(self, *args, **kwargs): ...
    def getSecure(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def get_domain(self, HTTPCookieself) -> Any: ...
    def get_expires(self, HTTPCookieself) -> Any: ...
    def get_name(self, HTTPCookieself) -> Any: ...
    def get_path(self, HTTPCookieself) -> Any: ...
    def get_samesite(self, HTTPCookieself) -> Any: ...
    def get_secure(self, HTTPCookieself) -> Any: ...
    def get_value(self, HTTPCookieself) -> Any: ...
    def hasExpires(self, *args, **kwargs): ...
    def has_expires(self, HTTPCookieself) -> Any: ...
    def isExpired(self, *args, **kwargs): ...
    def is_expired(self, HTTPCookieself, constHTTPDatenow) -> Any: ...
    def matchesUrl(self, *args, **kwargs): ...
    def matches_url(self, HTTPCookieself, constURLSpecurl) -> Any: ...
    def output(self, HTTPCookieself, ostreamout) -> Any: ...
    def parseSetCookie(self, *args, **kwargs): ...
    def parse_set_cookie(self, constHTTPCookieself, strformat, constURLSpecurl) -> Any: ...
    def setDomain(self, *args, **kwargs): ...
    def setExpires(self, *args, **kwargs): ...
    def setName(self, *args, **kwargs): ...
    def setPath(self, *args, **kwargs): ...
    def setSamesite(self, *args, **kwargs): ...
    def setSecure(self, *args, **kwargs): ...
    def setValue(self, *args, **kwargs): ...
    def set_domain(self, constHTTPCookieself, strdomain) -> Any: ...
    def set_expires(self, constHTTPCookieself, constHTTPDateexpires) -> Any: ...
    def set_name(self, constHTTPCookieself, strname) -> Any: ...
    def set_path(self, constHTTPCookieself, strpath) -> Any: ...
    def set_samesite(self, constHTTPCookieself, intsamesite) -> Any: ...
    def set_secure(self, constHTTPCookieself, boolflag) -> Any: ...
    def set_value(self, constHTTPCookieself, strvalue) -> Any: ...
    def updateFrom(self, *args, **kwargs): ...
    def update_from(self, constHTTPCookieself, constHTTPCookieother) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class HTTPDate(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constHTTPDateself, constHTTPDatecopy) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, HTTPDateself, constHTTPDateother) -> Any: ...
    def getString(self, *args, **kwargs): ...
    def getTime(self, *args, **kwargs): ...
    def get_string(self, HTTPDateself) -> Any: ...
    def get_time(self, HTTPDateself) -> Any: ...
    def input(self, constHTTPDateself, istreamin) -> Any: ...
    def isValid(self, *args, **kwargs): ...
    def is_valid(self, HTTPDateself) -> Any: ...
    @staticmethod
    def now() -> Any: ...
    def output(self, HTTPDateself, ostreamout) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __rsub__(self, other): ...
    def __sub__(self, other): ...

class HTTPEntityTag(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constHTTPEntityTagself, constHTTPEntityTagcopy) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, HTTPEntityTagself, constHTTPEntityTagother) -> Any: ...
    def getString(self, *args, **kwargs): ...
    def getTag(self, *args, **kwargs): ...
    def get_string(self, HTTPEntityTagself) -> Any: ...
    def get_tag(self, HTTPEntityTagself) -> Any: ...
    def isWeak(self, *args, **kwargs): ...
    def is_weak(self, HTTPEntityTagself) -> Any: ...
    def output(self, HTTPEntityTagself, ostreamout) -> Any: ...
    def strongEquiv(self, *args, **kwargs): ...
    def strong_equiv(self, HTTPEntityTagself, constHTTPEntityTagother) -> Any: ...
    def weakEquiv(self, *args, **kwargs): ...
    def weak_equiv(self, HTTPEntityTagself, constHTTPEntityTagother) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class HTTPEnum(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    HV09: ClassVar[int] = ...
    HV10: ClassVar[int] = ...
    HV11: ClassVar[int] = ...
    HVOther: ClassVar[int] = ...
    HV_09: ClassVar[int] = ...
    HV_10: ClassVar[int] = ...
    HV_11: ClassVar[int] = ...
    HV_other: ClassVar[int] = ...
    MConnect: ClassVar[int] = ...
    MDelete: ClassVar[int] = ...
    MGet: ClassVar[int] = ...
    MHead: ClassVar[int] = ...
    MOptions: ClassVar[int] = ...
    MPost: ClassVar[int] = ...
    MPut: ClassVar[int] = ...
    MTrace: ClassVar[int] = ...
    M_connect: ClassVar[int] = ...
    M_delete: ClassVar[int] = ...
    M_get: ClassVar[int] = ...
    M_head: ClassVar[int] = ...
    M_options: ClassVar[int] = ...
    M_post: ClassVar[int] = ...
    M_put: ClassVar[int] = ...
    M_trace: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class HashVal(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def asBin(self, *args, **kwargs): ...
    def asDec(self, *args, **kwargs): ...
    def asHex(self, *args, **kwargs): ...
    def as_bin(self, HashValself) -> Any: ...
    def as_dec(self, HashValself) -> Any: ...
    def as_hex(self, HashValself) -> Any: ...
    def assign(self, constHashValself, constHashValcopy) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, HashValself, constHashValother) -> Any: ...
    def hashBuffer(self, *args, **kwargs): ...
    def hashBytes(self, *args, **kwargs): ...
    def hashFile(self, *args, **kwargs): ...
    def hashRamfile(self, *args, **kwargs): ...
    def hashStream(self, *args, **kwargs): ...
    def hashString(self, *args, **kwargs): ...
    def hash_buffer(self, constHashValself, strbuffer, intlength) -> Any: ...
    def hash_bytes(self, constHashValself, bytesdata) -> Any: ...
    def hash_file(self, constHashValself, constFilenamefilename) -> Any: ...
    def hash_ramfile(self, constHashValself, constRamfileramfile) -> Any: ...
    def hash_stream(self, constHashValself, istreamstream) -> Any: ...
    def hash_string(self, constHashValself, strdata) -> Any: ...
    def inputBinary(self, *args, **kwargs): ...
    def inputDec(self, *args, **kwargs): ...
    def inputHex(self, *args, **kwargs): ...
    def input_binary(self, constHashValself, istreamin) -> Any: ...
    def input_dec(self, constHashValself, istreamin) -> Any: ...
    def input_hex(self, constHashValself, istreamin) -> Any: ...
    def mergeWith(self, *args, **kwargs): ...
    def merge_with(self, constHashValself, constHashValother) -> Any: ...
    def output(self, HashValself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputDec(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, HashValself, ostreamout) -> Any: ...
    def output_dec(self, HashValself, ostreamout) -> Any: ...
    def output_hex(self, HashValself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readStream(self, *args, **kwargs): ...
    def read_datagram(self, constHashValself, DatagramIteratorsource) -> Any: ...
    def read_stream(self, constHashValself, StreamReadersource) -> Any: ...
    def setFromBin(self, *args, **kwargs): ...
    def setFromDec(self, *args, **kwargs): ...
    def setFromHex(self, *args, **kwargs): ...
    def set_from_bin(self, constHashValself, bytestext) -> Any: ...
    def set_from_dec(self, constHashValself, strtext) -> Any: ...
    def set_from_hex(self, constHashValself, strtext) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeStream(self, *args, **kwargs): ...
    def write_datagram(self, HashValself, Datagramdestination) -> Any: ...
    def write_stream(self, HashValself, StreamWriterdestination) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class HeightfieldTesselator(Namable):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def generate(self, constHeightfieldTesselatorself) -> Any: ...
    def getElevation(self, *args, **kwargs): ...
    def get_elevation(self, constHeightfieldTesselatorself, doublex, doubley) -> Any: ...
    @overload
    def heightfield(self, constHeightfieldTesselatorself) -> Any: ...
    @overload
    def heightfield(self, aPNMImage) -> Any: ...
    def setFocalPoint(self, *args, **kwargs): ...
    def setHeightfield(self, *args, **kwargs): ...
    def setHorizontalScale(self, *args, **kwargs): ...
    def setMaxTriangles(self, *args, **kwargs): ...
    def setPolyCount(self, *args, **kwargs): ...
    def setVerticalScale(self, *args, **kwargs): ...
    def setVisibilityRadius(self, *args, **kwargs): ...
    def set_focal_point(self, constHeightfieldTesselatorself, intx, inty) -> Any: ...
    def set_heightfield(self, constHeightfieldTesselatorself, constFilenamefilename) -> Any: ...
    def set_horizontal_scale(self, constHeightfieldTesselatorself, doubleh) -> Any: ...
    def set_max_triangles(self, constHeightfieldTesselatorself, intn) -> Any: ...
    def set_poly_count(self, constHeightfieldTesselatorself, intn) -> Any: ...
    def set_vertical_scale(self, constHeightfieldTesselatorself, doublev) -> Any: ...
    def set_visibility_radius(self, constHeightfieldTesselatorself, intr) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class HermiteCurve(PiecewiseCurve):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def appendCv(self, *args, **kwargs): ...
    @overload
    def append_cv(self, constHermiteCurveself, inttype, constLVecBase3fv) -> Any: ...
    @overload
    def append_cv(self, constHermiteCurveself, inttype, floatx, floaty, floatz) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCvIn(self, *args, **kwargs): ...
    def getCvName(self, *args, **kwargs): ...
    def getCvOut(self, *args, **kwargs): ...
    def getCvPoint(self, *args, **kwargs): ...
    def getCvTstart(self, *args, **kwargs): ...
    def getCvType(self, *args, **kwargs): ...
    def getNumCvs(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_cv_in(self, HermiteCurveself, intn) -> Any: ...
    @overload
    def get_cv_in(self, HermiteCurveself, intn, LVecBase3fv) -> Any: ...
    def get_cv_name(self, HermiteCurveself, intn) -> Any: ...
    @overload
    def get_cv_out(self, HermiteCurveself, intn) -> Any: ...
    @overload
    def get_cv_out(self, HermiteCurveself, intn, LVecBase3fv) -> Any: ...
    @overload
    def get_cv_point(self, HermiteCurveself, intn) -> Any: ...
    @overload
    def get_cv_point(self, HermiteCurveself, intn, LVecBase3fv) -> Any: ...
    def get_cv_tstart(self, HermiteCurveself, intn) -> Any: ...
    def get_cv_type(self, HermiteCurveself, intn) -> Any: ...
    def get_num_cvs(self, HermiteCurveself) -> Any: ...
    def insertCv(self, *args, **kwargs): ...
    def insert_cv(self, constHermiteCurveself, floatt) -> Any: ...
    def removeAllCvs(self, *args, **kwargs): ...
    def removeCv(self, *args, **kwargs): ...
    def remove_all_cvs(self, constHermiteCurveself) -> Any: ...
    def remove_cv(self, constHermiteCurveself, intn) -> Any: ...
    def setCvIn(self, *args, **kwargs): ...
    def setCvName(self, *args, **kwargs): ...
    def setCvOut(self, *args, **kwargs): ...
    def setCvPoint(self, *args, **kwargs): ...
    def setCvTstart(self, *args, **kwargs): ...
    def setCvType(self, *args, **kwargs): ...
    @overload
    def set_cv_in(self, constHermiteCurveself, intn, constLVecBase3fv) -> Any: ...
    @overload
    def set_cv_in(self, constHermiteCurveself, intn, floatx, floaty, floatz) -> Any: ...
    def set_cv_name(self, constHermiteCurveself, intn, strname) -> Any: ...
    @overload
    def set_cv_out(self, constHermiteCurveself, intn, constLVecBase3fv) -> Any: ...
    @overload
    def set_cv_out(self, constHermiteCurveself, intn, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_cv_point(self, constHermiteCurveself, intn, constLVecBase3fv) -> Any: ...
    @overload
    def set_cv_point(self, constHermiteCurveself, intn, floatx, floaty, floatz) -> Any: ...
    def set_cv_tstart(self, constHermiteCurveself, intn, floattstart) -> Any: ...
    def set_cv_type(self, constHermiteCurveself, intn, inttype) -> Any: ...
    def writeCv(self, *args, **kwargs): ...
    def write_cv(self, HermiteCurveself, ostreamout, intn) -> Any: ...

class IDecompressStream(istream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constIDecompressStreamself) -> Any: ...
    def open(self, constIDecompressStreamself, istreamsource, boolowns_source, intsource_length, boolheader) -> Any: ...

class IDecryptStream(istream):
    DtoolClassDict: ClassVar[dict] = ...
    algorithm: Incomplete
    iteration_count: Incomplete
    key_length: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constIDecryptStreamself) -> Any: ...
    def getAlgorithm(self, *args, **kwargs): ...
    def getIterationCount(self, *args, **kwargs): ...
    def getKeyLength(self, *args, **kwargs): ...
    def get_algorithm(self, IDecryptStreamself) -> Any: ...
    def get_iteration_count(self, IDecryptStreamself) -> Any: ...
    def get_key_length(self, IDecryptStreamself) -> Any: ...
    def open(self, constIDecryptStreamself, istreamsource, boolowns_source, strpassword) -> Any: ...

class IFileStream(istream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constIFileStreamself) -> Any: ...
    def open(self, constIFileStreamself, strfilename, intmode) -> Any: ...

class ISocketStream(istream, SSReader):
    DtoolClassDict: ClassVar[dict] = ...
    RSComplete: ClassVar[int] = ...
    RSError: ClassVar[int] = ...
    RSInitial: ClassVar[int] = ...
    RSReading: ClassVar[int] = ...
    RS_complete: ClassVar[int] = ...
    RS_error: ClassVar[int] = ...
    RS_initial: ClassVar[int] = ...
    RS_reading: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constISocketStreamself) -> Any: ...
    def getReadState(self, *args, **kwargs): ...
    def get_read_state(self, constISocketStreamself) -> Any: ...
    def isClosed(self, *args, **kwargs): ...
    def is_closed(self, constISocketStreamself) -> Any: ...
    def upcastToIstream(self, *args, **kwargs): ...
    def upcastToSSReader(self, *args, **kwargs): ...
    def upcast_to_SSReader(self, constISocketStreamself) -> Any: ...
    def upcast_to_istream(self, constISocketStreamself) -> Any: ...

class IStreamWrapper(StreamWrapperBase):
    DtoolClassDict: ClassVar[dict] = ...
    istream: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getIstream(self, *args, **kwargs): ...
    def get_istream(self, IStreamWrapperself) -> Any: ...
    def upcastToStreamWrapperBase(self, *args, **kwargs): ...
    def upcast_to_StreamWrapperBase(self, constIStreamWrapperself) -> Any: ...

class ISubStream(istream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constISubStreamself) -> Any: ...
    def open(self, constISubStreamself, IStreamWrappersource, longstart, longend) -> Any: ...

class Ifstream(istream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constifstreamself) -> Any: ...

class IndexBufferContext(BufferContext, AdaptiveLruPage):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getData(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_data(self, IndexBufferContextself) -> Any: ...
    def upcastToAdaptiveLruPage(self, *args, **kwargs): ...
    def upcastToBufferContext(self, *args, **kwargs): ...
    def upcast_to_AdaptiveLruPage(self, constIndexBufferContextself) -> Any: ...
    def upcast_to_BufferContext(self, constIndexBufferContextself) -> Any: ...

class InkblotVideo(MovieVideo):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class InkblotVideoCursor(MovieVideoCursor):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class InputDevice(TypedReferenceCount):
    class Axis(enum.Enum):
        __new__: ClassVar[Callable] = ...
        ACCELERATOR: ClassVar[Axis] = ...
        BRAKE: ClassVar[Axis] = ...
        LEFT_TRIGGER: ClassVar[Axis] = ...
        LEFT_X: ClassVar[Axis] = ...
        LEFT_Y: ClassVar[Axis] = ...
        NONE: ClassVar[Axis] = ...
        PITCH: ClassVar[Axis] = ...
        PRESSURE: ClassVar[Axis] = ...
        RIGHT_TRIGGER: ClassVar[Axis] = ...
        RIGHT_X: ClassVar[Axis] = ...
        RIGHT_Y: ClassVar[Axis] = ...
        ROLL: ClassVar[Axis] = ...
        RUDDER: ClassVar[Axis] = ...
        THROTTLE: ClassVar[Axis] = ...
        WHEEL: ClassVar[Axis] = ...
        X: ClassVar[Axis] = ...
        Y: ClassVar[Axis] = ...
        YAW: ClassVar[Axis] = ...
        Z: ClassVar[Axis] = ...
        _generate_next_value_: ClassVar[Callable] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _member_type_: ClassVar[type[object]] = ...
        _unhashable_values_: ClassVar[list] = ...
        _use_args_: ClassVar[bool] = ...
        _value2member_map_: ClassVar[dict] = ...
        _value_repr_: ClassVar[None] = ...
        accelerator: ClassVar[Axis] = ...
        brake: ClassVar[Axis] = ...
        left_trigger: ClassVar[Axis] = ...
        left_x: ClassVar[Axis] = ...
        left_y: ClassVar[Axis] = ...
        none: ClassVar[Axis] = ...
        pitch: ClassVar[Axis] = ...
        pressure: ClassVar[Axis] = ...
        right_trigger: ClassVar[Axis] = ...
        right_x: ClassVar[Axis] = ...
        right_y: ClassVar[Axis] = ...
        roll: ClassVar[Axis] = ...
        rudder: ClassVar[Axis] = ...
        throttle: ClassVar[Axis] = ...
        wheel: ClassVar[Axis] = ...
        x: ClassVar[Axis] = ...
        y: ClassVar[Axis] = ...
        yaw: ClassVar[Axis] = ...
        z: ClassVar[Axis] = ...

    class AxisState(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        axis: Incomplete
        known: Incomplete
        value: Incomplete
        def __init__(self, *args, **kwargs) -> None: ...
        def __bool__(self) -> bool: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...

    class BatteryData(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        level: Incomplete
        max_level: Incomplete
        def __init__(self, *args, **kwargs) -> None: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...

    class ButtonState(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        handle: Incomplete
        known: Incomplete
        pressed: Incomplete
        def __init__(self, *args, **kwargs) -> None: ...
        def __bool__(self) -> bool: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...

    class DeviceClass(enum.Enum):
        __new__: ClassVar[Callable] = ...
        DANCE_PAD: ClassVar[DeviceClass] = ...
        DIGITIZER: ClassVar[DeviceClass] = ...
        FLIGHT_STICK: ClassVar[DeviceClass] = ...
        GAMEPAD: ClassVar[DeviceClass] = ...
        HMD: ClassVar[DeviceClass] = ...
        KEYBOARD: ClassVar[DeviceClass] = ...
        MOUSE: ClassVar[DeviceClass] = ...
        SPATIAL_MOUSE: ClassVar[DeviceClass] = ...
        STEERING_WHEEL: ClassVar[DeviceClass] = ...
        TOUCH: ClassVar[DeviceClass] = ...
        UNKNOWN: ClassVar[DeviceClass] = ...
        VIRTUAL: ClassVar[DeviceClass] = ...
        _generate_next_value_: ClassVar[Callable] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _member_type_: ClassVar[type[object]] = ...
        _unhashable_values_: ClassVar[list] = ...
        _use_args_: ClassVar[bool] = ...
        _value2member_map_: ClassVar[dict] = ...
        _value_repr_: ClassVar[None] = ...
        dance_pad: ClassVar[DeviceClass] = ...
        digitizer: ClassVar[DeviceClass] = ...
        flight_stick: ClassVar[DeviceClass] = ...
        gamepad: ClassVar[DeviceClass] = ...
        hmd: ClassVar[DeviceClass] = ...
        keyboard: ClassVar[DeviceClass] = ...
        mouse: ClassVar[DeviceClass] = ...
        spatial_mouse: ClassVar[DeviceClass] = ...
        steering_wheel: ClassVar[DeviceClass] = ...
        touch: ClassVar[DeviceClass] = ...
        unknown: ClassVar[DeviceClass] = ...
        virtual_device: ClassVar[DeviceClass] = ...

    class Feature(enum.Enum):
        __new__: ClassVar[Callable] = ...
        BATTERY: ClassVar[Feature] = ...
        KEYBOARD: ClassVar[Feature] = ...
        POINTER: ClassVar[Feature] = ...
        TRACKER: ClassVar[Feature] = ...
        VIBRATION: ClassVar[Feature] = ...
        _generate_next_value_: ClassVar[Callable] = ...
        _member_map_: ClassVar[dict] = ...
        _member_names_: ClassVar[list] = ...
        _member_type_: ClassVar[type[object]] = ...
        _unhashable_values_: ClassVar[list] = ...
        _use_args_: ClassVar[bool] = ...
        _value2member_map_: ClassVar[dict] = ...
        _value_repr_: ClassVar[None] = ...
        battery: ClassVar[Feature] = ...
        keyboard: ClassVar[Feature] = ...
        pointer: ClassVar[Feature] = ...
        tracker: ClassVar[Feature] = ...
        vibration: ClassVar[Feature] = ...

    DtoolClassDict: ClassVar[dict] = ...
    SDown: ClassVar[int] = ...
    SUnknown: ClassVar[int] = ...
    SUp: ClassVar[int] = ...
    S_down: ClassVar[int] = ...
    S_unknown: ClassVar[int] = ...
    S_up: ClassVar[int] = ...
    axes: Incomplete
    battery: Incomplete
    buttons: Incomplete
    connected: Incomplete
    device_class: Incomplete
    manufacturer: Incomplete
    name: Incomplete
    product_id: Incomplete
    serial_number: Incomplete
    tracker: Incomplete
    vendor_id: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def disablePointerEvents(self, *args, **kwargs): ...
    def disable_pointer_events(self, constInputDeviceself) -> Any: ...
    def enablePointerEvents(self, *args, **kwargs): ...
    def enable_pointer_events(self, constInputDeviceself) -> Any: ...
    def findAxis(self, *args, **kwargs): ...
    def findButton(self, *args, **kwargs): ...
    def find_axis(self, InputDeviceself, Axisaxis) -> Any: ...
    def find_button(self, InputDeviceself, ButtonHandlehandle) -> Any: ...
    def getButtonEvents(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPointerEvents(self, *args, **kwargs): ...
    def get_button_events(self, constInputDeviceself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_pointer_events(self, constInputDeviceself) -> Any: ...
    def hasButtonEvent(self, *args, **kwargs): ...
    def hasFeature(self, *args, **kwargs): ...
    def hasPointerEvent(self, *args, **kwargs): ...
    def has_button_event(self, InputDeviceself) -> Any: ...
    def has_feature(self, InputDeviceself, Featurefeature) -> Any: ...
    def has_pointer_event(self, InputDeviceself) -> Any: ...
    def mapAxis(self, *args, **kwargs): ...
    def mapButton(self, *args, **kwargs): ...
    def map_axis(self, constInputDeviceself, intindex, Axisaxis) -> Any: ...
    def map_button(self, constInputDeviceself, intindex, ButtonHandlehandle) -> Any: ...
    def output(self, InputDeviceself, ostreamout) -> Any: ...
    def poll(self, constInputDeviceself) -> Any: ...
    def setVibration(self, *args, **kwargs): ...
    def set_vibration(self, constInputDeviceself, doublestrong, doubleweak) -> Any: ...

class InputDeviceManager(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addDevice(self, *args, **kwargs): ...
    def add_device(self, constInputDeviceManagerself, InputDevicedevice) -> Any: ...
    def getDevices(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    @overload
    def get_devices(self, InputDeviceManagerself) -> Any: ...
    @overload
    def get_devices(self, InputDeviceManagerself, DeviceClassdevice_class) -> Any: ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def removeDevice(self, *args, **kwargs): ...
    def remove_device(self, constInputDeviceManagerself, InputDevicedevice) -> Any: ...
    def update(self, constInputDeviceManagerself) -> Any: ...

class InputDeviceNode(DataNode):
    DtoolClassDict: ClassVar[dict] = ...
    device: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class InputDeviceSet(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constInputDeviceSetself, constInputDeviceSetcopy) -> Any: ...
    def clear(self, constInputDeviceSetself) -> Any: ...
    def output(self, InputDeviceSetself, ostreamout) -> Any: ...
    def reserve(self, constInputDeviceSetself, intnum) -> Any: ...
    def write(self, InputDeviceSetself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...

class InstanceList(CopyOnWriteObject):
    class Instance(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        transform: Incomplete
        def __init__(self, *args, **kwargs) -> None: ...
        def getHpr(self, *args, **kwargs): ...
        def getMat(self, *args, **kwargs): ...
        def getPos(self, *args, **kwargs): ...
        def getQuat(self, *args, **kwargs): ...
        def getScale(self, *args, **kwargs): ...
        def getTransform(self, *args, **kwargs): ...
        def get_hpr(self, Instanceself) -> Any: ...
        def get_mat(self, Instanceself) -> Any: ...
        def get_pos(self, Instanceself) -> Any: ...
        def get_quat(self, Instanceself) -> Any: ...
        def get_scale(self, Instanceself) -> Any: ...
        def get_transform(self, Instanceself) -> Any: ...
        def setHpr(self, *args, **kwargs): ...
        def setMat(self, *args, **kwargs): ...
        def setPos(self, *args, **kwargs): ...
        def setQuat(self, *args, **kwargs): ...
        def setScale(self, *args, **kwargs): ...
        def setTransform(self, *args, **kwargs): ...
        @overload
        def set_hpr(self, constInstanceself, constLVecBase3fparam0) -> Any: ...
        @overload
        def set_hpr(self, constInstanceself, floath, floatp, floatr) -> Any: ...
        def set_mat(self, constInstanceself, constLMatrix4fmat) -> Any: ...
        @overload
        def set_pos(self, constInstanceself, constLPoint3fparam0) -> Any: ...
        @overload
        def set_pos(self, constInstanceself, floatx, floaty, floatz) -> Any: ...
        def set_quat(self, constInstanceself, constLQuaternionfparam0) -> Any: ...
        @overload
        def set_scale(self, constInstanceself, constLVecBase3fparam0) -> Any: ...
        @overload
        def set_scale(self, constInstanceself, floatsx, floatsy, floatsz) -> Any: ...
        def set_transform(self, constInstanceself, constTransformStateparam0) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...

    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def append(self, constInstanceListself, constLPoint3fpos) -> Any: ...
    @overload
    def append(self, constInstanceListself, constTransformStatetransform) -> Any: ...
    @overload
    def append(self, constInstanceListself, Instanceinstance) -> Any: ...
    @overload
    def append(self, constInstanceListself, constLPoint3fpos, constLQuaternionfquat, constLVecBase3fscale) -> Any: ...
    @overload
    def append(self, constInstanceListself, constLPoint3fpos, constLVecBase3fhpr, constLVecBase3fscale) -> Any: ...
    def clear(self, constInstanceListself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def reserve(self, constInstanceListself, intparam0) -> Any: ...
    def xform(self, constInstanceListself, constLMatrix4fmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __setitem__(self, index, object) -> None: ...

class InstancedNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    instances: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class InternalName(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    basename: Incomplete
    name: Incomplete
    parent: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, constInternalNameself, strbasename) -> Any: ...
    def findAncestor(self, *args, **kwargs): ...
    def find_ancestor(self, InternalNameself, strbasename) -> Any: ...
    def getAncestor(self, *args, **kwargs): ...
    @staticmethod
    def getAspectRatio(*args, **kwargs): ...
    def getBasename(self, *args, **kwargs): ...
    @staticmethod
    def getBinormal(*args, **kwargs): ...
    @staticmethod
    def getBinormalName(*args, **kwargs): ...
    @staticmethod
    def getCamera(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getColor(*args, **kwargs): ...
    @staticmethod
    def getError(*args, **kwargs): ...
    @staticmethod
    def getIndex(*args, **kwargs): ...
    @staticmethod
    def getInstanceMatrix(*args, **kwargs): ...
    @staticmethod
    def getModel(*args, **kwargs): ...
    @staticmethod
    def getMorph(*args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNetBasename(self, *args, **kwargs): ...
    @staticmethod
    def getNormal(*args, **kwargs): ...
    def getParent(self, *args, **kwargs): ...
    @staticmethod
    def getRoot(*args, **kwargs): ...
    @staticmethod
    def getRotate(*args, **kwargs): ...
    @staticmethod
    def getSize(*args, **kwargs): ...
    @staticmethod
    def getTangent(*args, **kwargs): ...
    @staticmethod
    def getTangentName(*args, **kwargs): ...
    @staticmethod
    def getTexcoord(*args, **kwargs): ...
    @staticmethod
    def getTexcoordName(*args, **kwargs): ...
    def getTop(self, *args, **kwargs): ...
    @staticmethod
    def getTransformBlend(*args, **kwargs): ...
    @staticmethod
    def getTransformIndex(*args, **kwargs): ...
    @staticmethod
    def getTransformWeight(*args, **kwargs): ...
    @staticmethod
    def getVertex(*args, **kwargs): ...
    @staticmethod
    def getView(*args, **kwargs): ...
    @staticmethod
    def getWorld(*args, **kwargs): ...
    def get_ancestor(self, InternalNameself, intn) -> Any: ...
    @staticmethod
    def get_aspect_ratio() -> Any: ...
    def get_basename(self, InternalNameself) -> Any: ...
    @staticmethod
    def get_binormal() -> Any: ...
    @staticmethod
    def get_binormal_name(strname) -> Any: ...
    @staticmethod
    def get_camera() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_color() -> Any: ...
    @staticmethod
    def get_error() -> Any: ...
    @staticmethod
    def get_index() -> Any: ...
    @staticmethod
    def get_instance_matrix() -> Any: ...
    @staticmethod
    def get_model() -> Any: ...
    @staticmethod
    def get_morph(InternalNamecolumn, strslider) -> Any: ...
    def get_name(self, InternalNameself) -> Any: ...
    def get_net_basename(self, InternalNameself, intn) -> Any: ...
    @staticmethod
    def get_normal() -> Any: ...
    def get_parent(self, InternalNameself) -> Any: ...
    @staticmethod
    def get_root() -> Any: ...
    @staticmethod
    def get_rotate() -> Any: ...
    @staticmethod
    def get_size() -> Any: ...
    @staticmethod
    def get_tangent() -> Any: ...
    @staticmethod
    def get_tangent_name(strname) -> Any: ...
    @staticmethod
    def get_texcoord() -> Any: ...
    @staticmethod
    def get_texcoord_name(strname) -> Any: ...
    def get_top(self, InternalNameself) -> Any: ...
    @staticmethod
    def get_transform_blend() -> Any: ...
    @staticmethod
    def get_transform_index() -> Any: ...
    @staticmethod
    def get_transform_weight() -> Any: ...
    @staticmethod
    def get_vertex() -> Any: ...
    @staticmethod
    def get_view() -> Any: ...
    @staticmethod
    def get_world() -> Any: ...
    def join(self, InternalNameself, strsep) -> Any: ...
    @overload
    @staticmethod
    def make(objectstr) -> Any: ...
    @overload
    @staticmethod
    def make(strname, intindex) -> Any: ...
    def output(self, InternalNameself, ostreamout) -> Any: ...
    def __reduce__(self, InternalNameself) -> Any: ...

class InternalNameCollection(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addName(self, *args, **kwargs): ...
    def addNamesFrom(self, *args, **kwargs): ...
    def add_name(self, constInternalNameCollectionself, constInternalNamename) -> Any: ...
    def add_names_from(self, constInternalNameCollectionself, constInternalNameCollectionother) -> Any: ...
    def assign(self, constInternalNameCollectionself, constInternalNameCollectioncopy) -> Any: ...
    def clear(self, constInternalNameCollectionself) -> Any: ...
    def getName(self, *args, **kwargs): ...
    def getNames(self, *args, **kwargs): ...
    def getNumNames(self, *args, **kwargs): ...
    def get_name(self, InternalNameCollectionself, intindex) -> Any: ...
    def get_names(self, *args, **kwargs): ...
    def get_num_names(self, InternalNameCollectionself) -> Any: ...
    def hasName(self, *args, **kwargs): ...
    def has_name(self, InternalNameCollectionself, constInternalNamename) -> Any: ...
    def output(self, InternalNameCollectionself, ostreamout) -> Any: ...
    def removeDuplicateNames(self, *args, **kwargs): ...
    def removeName(self, *args, **kwargs): ...
    def removeNamesFrom(self, *args, **kwargs): ...
    def remove_duplicate_names(self, constInternalNameCollectionself) -> Any: ...
    def remove_name(self, constInternalNameCollectionself, constInternalNamename) -> Any: ...
    def remove_names_from(self, constInternalNameCollectionself, constInternalNameCollectionother) -> Any: ...
    def write(self, InternalNameCollectionself, ostreamout, intindent_level) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __iadd__(self, other): ...
    def __len__(self) -> int: ...
    def __radd__(self, other): ...

class IntersectionBoundingVolume(GeometricBoundingVolume):
    DtoolClassDict: ClassVar[dict] = ...
    components: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addComponent(self, *args, **kwargs): ...
    def add_component(self, constIntersectionBoundingVolumeself, constGeometricBoundingVolumecomponent) -> Any: ...
    def clearComponents(self, *args, **kwargs): ...
    def clear_components(self, constIntersectionBoundingVolumeself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getComponent(self, *args, **kwargs): ...
    def getComponents(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_component(self, IntersectionBoundingVolumeself, intn) -> Any: ...
    def get_components(self, *args, **kwargs): ...
    def get_num_components(self, IntersectionBoundingVolumeself) -> Any: ...

class Ios(ios_base):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bad(self, basic_iosself) -> Any: ...
    def clear(self, constbasic_iosself) -> Any: ...
    def eof(self, basic_iosself) -> Any: ...
    def fail(self, basic_iosself) -> Any: ...
    def good(self, basic_iosself) -> Any: ...

class IosBase(dtoolconfig.DTOOL_SUPER_BASE):
    Beg: ClassVar[int] = ...
    Cur: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    End: ClassVar[int] = ...
    beg: ClassVar[int] = ...
    cur: ClassVar[int] = ...
    end: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Iostream(istream, ostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def flush(self, constiostreamself) -> Any: ...
    def upcastToIstream(self, *args, **kwargs): ...
    def upcastToOstream(self, *args, **kwargs): ...
    def upcast_to_istream(self, constiostreamself) -> Any: ...
    def upcast_to_ostream(self, constiostreamself) -> Any: ...

class Istream(basic_ios_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, constistreamself) -> Any: ...
    def read(self, constistreamself, intsize) -> Any: ...
    def read1(self, constistreamself, intsize) -> Any: ...
    def readall(self, constistreamself) -> Any: ...
    def readinto(self, constistreamself, objectb) -> Any: ...
    def readline(self, constistreamself, intsize) -> Any: ...
    def readlines(self, constistreamself, inthint) -> Any: ...
    @overload
    def seekg(self, constistreamself, longpos) -> Any: ...
    @overload
    def seekg(self, constistreamself, longoff, intdir) -> Any: ...
    def tellg(self, constistreamself) -> Any: ...
    def upcastToBasicIosChar(self, *args, **kwargs): ...
    def upcast_to_basic_ios_char(self, constistreamself) -> Any: ...
    def __iter__(self): ...

class JointVertexTransform(VertexTransform):
    DtoolClassDict: ClassVar[dict] = ...
    joint: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getJoint(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_joint(self, JointVertexTransformself) -> Any: ...

class KeyboardButton(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def alt() -> Any: ...
    @staticmethod
    def asciiKey(*args, **kwargs): ...
    @staticmethod
    def ascii_key(charascii_equivalent) -> Any: ...
    @staticmethod
    def backspace() -> Any: ...
    @staticmethod
    def capsLock(*args, **kwargs): ...
    @staticmethod
    def caps_lock() -> Any: ...
    @staticmethod
    def control() -> Any: ...
    @staticmethod
    def down() -> Any: ...
    @staticmethod
    def end() -> Any: ...
    @staticmethod
    def enter() -> Any: ...
    @staticmethod
    def escape() -> Any: ...
    @staticmethod
    def f1() -> Any: ...
    @staticmethod
    def f10() -> Any: ...
    @staticmethod
    def f11() -> Any: ...
    @staticmethod
    def f12() -> Any: ...
    @staticmethod
    def f13() -> Any: ...
    @staticmethod
    def f14() -> Any: ...
    @staticmethod
    def f15() -> Any: ...
    @staticmethod
    def f16() -> Any: ...
    @staticmethod
    def f2() -> Any: ...
    @staticmethod
    def f3() -> Any: ...
    @staticmethod
    def f4() -> Any: ...
    @staticmethod
    def f5() -> Any: ...
    @staticmethod
    def f6() -> Any: ...
    @staticmethod
    def f7() -> Any: ...
    @staticmethod
    def f8() -> Any: ...
    @staticmethod
    def f9() -> Any: ...
    @staticmethod
    def help() -> Any: ...
    @staticmethod
    def home() -> Any: ...
    @staticmethod
    def insert() -> Any: ...
    @staticmethod
    def lalt() -> Any: ...
    @staticmethod
    def lcontrol() -> Any: ...
    @staticmethod
    def left() -> Any: ...
    @staticmethod
    def lmeta() -> Any: ...
    @staticmethod
    def lshift() -> Any: ...
    @staticmethod
    def menu() -> Any: ...
    @staticmethod
    def meta() -> Any: ...
    @staticmethod
    def numLock(*args, **kwargs): ...
    @staticmethod
    def num_lock() -> Any: ...
    @staticmethod
    def pageDown(*args, **kwargs): ...
    @staticmethod
    def pageUp(*args, **kwargs): ...
    @staticmethod
    def page_down() -> Any: ...
    @staticmethod
    def page_up() -> Any: ...
    @staticmethod
    def pause() -> Any: ...
    @staticmethod
    def printScreen(*args, **kwargs): ...
    @staticmethod
    def print_screen() -> Any: ...
    @staticmethod
    def ralt() -> Any: ...
    @staticmethod
    def rcontrol() -> Any: ...
    @staticmethod
    def right() -> Any: ...
    @staticmethod
    def rmeta() -> Any: ...
    @staticmethod
    def rshift() -> Any: ...
    @staticmethod
    def scrollLock(*args, **kwargs): ...
    @staticmethod
    def scroll_lock() -> Any: ...
    @staticmethod
    def shift() -> Any: ...
    @staticmethod
    def shiftLock(*args, **kwargs): ...
    @staticmethod
    def shift_lock() -> Any: ...
    @staticmethod
    def space() -> Any: ...
    @staticmethod
    def tab() -> Any: ...
    @staticmethod
    def up() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LColor(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase4fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def add_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, constLVecBase4fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4fself, constLVecBase4fother) -> Any: ...
    def dot(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fill(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fmin(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4fself) -> Any: ...
    def get_x(self, LVecBase4fself) -> Any: ...
    def get_xy(self, LVecBase4fself) -> Any: ...
    def get_xyz(self, LVecBase4fself) -> Any: ...
    def get_y(self, LVecBase4fself) -> Any: ...
    def get_z(self, LVecBase4fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4fself) -> Any: ...
    def length(self, LVecBase4fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4fself) -> Any: ...
    def normalize(self, constLVecBase4fself) -> Any: ...
    def normalized(self, LVecBase4fself) -> Any: ...
    def output(self, LVecBase4fself, ostreamout) -> Any: ...
    def project(self, LVecBase4fself, constLVecBase4fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4fself, floatx, floaty, floatz, floatw) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def set_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LColord(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase4dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase4dself, inthash, doublethreshold) -> Any: ...
    def add_to_cell(self, constLVecBase4dself, inti, doublevalue) -> Any: ...
    def add_w(self, constLVecBase4dself, doublevalue) -> Any: ...
    def add_x(self, constLVecBase4dself, doublevalue) -> Any: ...
    def add_y(self, constLVecBase4dself, doublevalue) -> Any: ...
    def add_z(self, constLVecBase4dself, doublevalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4dself, constLVecBase4dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4dself, constLVecBase4dcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    @overload
    def compare_to(self, LVecBase4dself, constLVecBase4dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4dself, constLVecBase4dother) -> Any: ...
    def dot(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    def fill(self, constLVecBase4dself, doublefill_value) -> Any: ...
    def fmax(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    def fmin(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4dself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase4dself) -> Any: ...
    @overload
    def get_hash(self, LVecBase4dself, doublethreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4dself) -> Any: ...
    def get_x(self, LVecBase4dself) -> Any: ...
    def get_xy(self, LVecBase4dself) -> Any: ...
    def get_xyz(self, LVecBase4dself) -> Any: ...
    def get_y(self, LVecBase4dself) -> Any: ...
    def get_z(self, LVecBase4dself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4dself) -> Any: ...
    def length(self, LVecBase4dself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4dself) -> Any: ...
    def normalize(self, constLVecBase4dself) -> Any: ...
    def normalized(self, LVecBase4dself) -> Any: ...
    def output(self, LVecBase4dself, ostreamout) -> Any: ...
    def project(self, LVecBase4dself, constLVecBase4donto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4dself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4dself, doublex, doubley, doublez, doublew) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4dself, inti, doublevalue) -> Any: ...
    def set_w(self, constLVecBase4dself, doublevalue) -> Any: ...
    def set_x(self, constLVecBase4dself, doublevalue) -> Any: ...
    def set_y(self, constLVecBase4dself, doublevalue) -> Any: ...
    def set_z(self, constLVecBase4dself, doublevalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4dself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4dself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4dself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4dself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4dself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LColorf(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase4fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def add_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, constLVecBase4fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4fself, constLVecBase4fother) -> Any: ...
    def dot(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fill(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fmin(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4fself) -> Any: ...
    def get_x(self, LVecBase4fself) -> Any: ...
    def get_xy(self, LVecBase4fself) -> Any: ...
    def get_xyz(self, LVecBase4fself) -> Any: ...
    def get_y(self, LVecBase4fself) -> Any: ...
    def get_z(self, LVecBase4fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4fself) -> Any: ...
    def length(self, LVecBase4fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4fself) -> Any: ...
    def normalize(self, constLVecBase4fself) -> Any: ...
    def normalized(self, LVecBase4fself) -> Any: ...
    def output(self, LVecBase4fself, ostreamout) -> Any: ...
    def project(self, LVecBase4fself, constLVecBase4fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4fself, floatx, floaty, floatz, floatw) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def set_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LFrustum(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def makeOrtho(self, *args, **kwargs): ...
    def makeOrtho2D(self, *args, **kwargs): ...
    def makePerspective(self, *args, **kwargs): ...
    def makePerspectiveHfov(self, *args, **kwargs): ...
    def makePerspectiveVfov(self, *args, **kwargs): ...
    @overload
    def make_ortho(self, constLFrustumfself, floatfnear, floatffar) -> Any: ...
    @overload
    def make_ortho(self, constLFrustumfself, floatfnear, floatffar, floatl, floatr, floatt, floatb) -> Any: ...
    @overload
    def make_ortho_2D(self, constLFrustumfself) -> Any: ...
    @overload
    def make_ortho_2D(self, constLFrustumfself, floatl, floatr, floatt, floatb) -> Any: ...
    def make_perspective(self, constLFrustumfself, floatxfov, floatyfov, floatfnear, floatffar) -> Any: ...
    def make_perspective_hfov(self, constLFrustumfself, floatxfov, floataspect, floatfnear, floatffar) -> Any: ...
    def make_perspective_vfov(self, constLFrustumfself, floatyfov, floataspect, floatfnear, floatffar) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LFrustumd(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def makeOrtho(self, *args, **kwargs): ...
    def makeOrtho2D(self, *args, **kwargs): ...
    def makePerspective(self, *args, **kwargs): ...
    def makePerspectiveHfov(self, *args, **kwargs): ...
    def makePerspectiveVfov(self, *args, **kwargs): ...
    @overload
    def make_ortho(self, constLFrustumdself, doublefnear, doubleffar) -> Any: ...
    @overload
    def make_ortho(self, constLFrustumdself, doublefnear, doubleffar, doublel, doubler, doublet, doubleb) -> Any: ...
    @overload
    def make_ortho_2D(self, constLFrustumdself) -> Any: ...
    @overload
    def make_ortho_2D(self, constLFrustumdself, doublel, doubler, doublet, doubleb) -> Any: ...
    def make_perspective(self, constLFrustumdself, doublexfov, doubleyfov, doublefnear, doubleffar) -> Any: ...
    def make_perspective_hfov(self, constLFrustumdself, doublexfov, doubleaspect, doublefnear, doubleffar) -> Any: ...
    def make_perspective_vfov(self, constLFrustumdself, doubleyfov, doubleaspect, doublefnear, doubleffar) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LFrustumf(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def makeOrtho(self, *args, **kwargs): ...
    def makeOrtho2D(self, *args, **kwargs): ...
    def makePerspective(self, *args, **kwargs): ...
    def makePerspectiveHfov(self, *args, **kwargs): ...
    def makePerspectiveVfov(self, *args, **kwargs): ...
    @overload
    def make_ortho(self, constLFrustumfself, floatfnear, floatffar) -> Any: ...
    @overload
    def make_ortho(self, constLFrustumfself, floatfnear, floatffar, floatl, floatr, floatt, floatb) -> Any: ...
    @overload
    def make_ortho_2D(self, constLFrustumfself) -> Any: ...
    @overload
    def make_ortho_2D(self, constLFrustumfself, floatl, floatr, floatt, floatb) -> Any: ...
    def make_perspective(self, constLFrustumfself, floatxfov, floatyfov, floatfnear, floatffar) -> Any: ...
    def make_perspective_hfov(self, constLFrustumfself, floatxfov, floataspect, floatfnear, floatffar) -> Any: ...
    def make_perspective_vfov(self, constLFrustumfself, floatyfov, floataspect, floatfnear, floatffar) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LMatrix3(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix3fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix3fself, inthash, floatthreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix3fself, constLMatrix3fother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix3fself, constLMatrix3fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    @overload
    def assign(self, constLMatrix3fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix3fself, constLMatrix3fother) -> Any: ...
    @overload
    def compare_to(self, LMatrix3fself, constLMatrix3fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def determinant(self, LMatrix3fself) -> Any: ...
    def fill(self, constLMatrix3fself, floatfill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol2(self, *args, **kwargs): ...
    def getCol2s(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow2(self, *args, **kwargs): ...
    def getRow2s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def get_cell(self, LMatrix3fself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix3fself, intcol) -> Any: ...
    def get_col2(self, LMatrix3fself, intcol) -> Any: ...
    def get_col2s(self, *args, **kwargs): ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix3fself) -> Any: ...
    @overload
    def get_hash(self, LMatrix3fself, floatthreshold) -> Any: ...
    def get_num_components(self, LMatrix3fself) -> Any: ...
    @overload
    def get_row(self, LMatrix3fself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix3fself, LVecBase3fresult_vec, introw) -> Any: ...
    def get_row2(self, LMatrix3fself, introw) -> Any: ...
    def get_row2s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invertTransposeFrom(self, *args, **kwargs): ...
    def invert_from(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    def invert_in_place(self, constLMatrix3fself) -> Any: ...
    @overload
    def invert_transpose_from(self, constLMatrix3fself, constLMatrix4fother) -> Any: ...
    @overload
    def invert_transpose_from(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix3fself) -> Any: ...
    def is_nan(self, LMatrix3fself) -> Any: ...
    def multiply(self, constLMatrix3fself, constLMatrix3fother1, constLMatrix3fother2) -> Any: ...
    def output(self, LMatrix3fself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix3fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix3fself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @overload
    @staticmethod
    def rotate_mat(floatangle) -> Any: ...
    @overload
    @staticmethod
    def rotate_mat(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase2fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy, floatsz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(floatsx, floatsy, floatsz, floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix3fself,
        floate00,
        floate01,
        floate02,
        floate10,
        floate11,
        floate12,
        floate20,
        floate21,
        floate22,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix3fself, introw, intcol, floatvalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix3fself, intcol, constLVecBase2fv) -> Any: ...
    @overload
    def set_col(self, constLMatrix3fself, intcol, constLVecBase3fv) -> Any: ...
    @overload
    def set_rotate_mat(self, constLMatrix3fself, floatangle) -> Any: ...
    @overload
    def set_rotate_mat(self, constLMatrix3fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix3fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix3fself, introw, constLVecBase2fv) -> Any: ...
    @overload
    def set_row(self, constLMatrix3fself, introw, constLVecBase3fv) -> Any: ...
    @overload
    def set_scale_mat(self, constLMatrix3fself, constLVecBase2fscale) -> Any: ...
    @overload
    def set_scale_mat(self, constLMatrix3fself, constLVecBase3fscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix3fself, constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix3fself, constLVecBase3fshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix3fself, constLVecBase2ftrans) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase2ftrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(floattx, floatty) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    def transpose_in_place(self, constLMatrix3fself) -> Any: ...
    def write(self, LMatrix3fself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix3fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix3fself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix3fself, constLVecBase3fv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix3fself, LVecBase3fv) -> Any: ...
    def xform_point(self, LMatrix3fself, constLVecBase2fv) -> Any: ...
    def xform_point_in_place(self, LMatrix3fself, LVecBase2fv) -> Any: ...
    @overload
    def xform_vec(self, LMatrix3fself, constLVecBase2fv) -> Any: ...
    @overload
    def xform_vec(self, LMatrix3fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general(self, LMatrix3fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix3fself, LVecBase3fv) -> Any: ...
    @overload
    def xform_vec_in_place(self, LMatrix3fself, LVecBase2fv) -> Any: ...
    @overload
    def xform_vec_in_place(self, LMatrix3fself, LVecBase3fv) -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix3fself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class LMatrix3d(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix3dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix3dself, inthash, doublethreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix3dself, constLMatrix3dother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix3dself, constLMatrix3dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix3dself, constLMatrix3dother) -> Any: ...
    @overload
    def assign(self, constLMatrix3dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix3dself, constLMatrix3dother) -> Any: ...
    @overload
    def compare_to(self, LMatrix3dself, constLMatrix3dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix3dself, constLMatrix3dother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def determinant(self, LMatrix3dself) -> Any: ...
    def fill(self, constLMatrix3dself, doublefill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol2(self, *args, **kwargs): ...
    def getCol2s(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow2(self, *args, **kwargs): ...
    def getRow2s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def get_cell(self, LMatrix3dself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix3dself, intcol) -> Any: ...
    def get_col2(self, LMatrix3dself, intcol) -> Any: ...
    def get_col2s(self, *args, **kwargs): ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix3dself) -> Any: ...
    @overload
    def get_hash(self, LMatrix3dself, doublethreshold) -> Any: ...
    def get_num_components(self, LMatrix3dself) -> Any: ...
    @overload
    def get_row(self, LMatrix3dself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix3dself, LVecBase3dresult_vec, introw) -> Any: ...
    def get_row2(self, LMatrix3dself, introw) -> Any: ...
    def get_row2s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invertTransposeFrom(self, *args, **kwargs): ...
    def invert_from(self, constLMatrix3dself, constLMatrix3dother) -> Any: ...
    def invert_in_place(self, constLMatrix3dself) -> Any: ...
    @overload
    def invert_transpose_from(self, constLMatrix3dself, constLMatrix4dother) -> Any: ...
    @overload
    def invert_transpose_from(self, constLMatrix3dself, constLMatrix3dother) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix3dself) -> Any: ...
    def is_nan(self, LMatrix3dself) -> Any: ...
    def multiply(self, constLMatrix3dself, constLMatrix3dother1, constLMatrix3dother2) -> Any: ...
    def output(self, LMatrix3dself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix3dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix3dself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @overload
    @staticmethod
    def rotate_mat(doubleangle) -> Any: ...
    @overload
    @staticmethod
    def rotate_mat(doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase2dscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3dscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(doublesx, doublesy) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(doublesx, doublesy, doublesz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3dscale, constLVecBase3dshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3dscale, constLVecBase3dshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(doublesx, doublesy, doublesz, doubleshxy, doubleshxz, doubleshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix3dself,
        doublee00,
        doublee01,
        doublee02,
        doublee10,
        doublee11,
        doublee12,
        doublee20,
        doublee21,
        doublee22,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix3dself, introw, intcol, doublevalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix3dself, intcol, constLVecBase2dv) -> Any: ...
    @overload
    def set_col(self, constLMatrix3dself, intcol, constLVecBase3dv) -> Any: ...
    @overload
    def set_rotate_mat(self, constLMatrix3dself, doubleangle) -> Any: ...
    @overload
    def set_rotate_mat(self, constLMatrix3dself, doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix3dself, doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix3dself, introw, constLVecBase2dv) -> Any: ...
    @overload
    def set_row(self, constLMatrix3dself, introw, constLVecBase3dv) -> Any: ...
    @overload
    def set_scale_mat(self, constLMatrix3dself, constLVecBase2dscale) -> Any: ...
    @overload
    def set_scale_mat(self, constLMatrix3dself, constLVecBase3dscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix3dself, constLVecBase3dscale, constLVecBase3dshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix3dself, constLVecBase3dshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix3dself, constLVecBase2dtrans) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3dshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3dshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(doubleshxy, doubleshxz, doubleshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase2dtrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(doubletx, doublety) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix3dself, constLMatrix3dother) -> Any: ...
    def transpose_in_place(self, constLMatrix3dself) -> Any: ...
    def write(self, LMatrix3dself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix3dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix3dself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix3dself, constLVecBase3dv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix3dself, LVecBase3dv) -> Any: ...
    def xform_point(self, LMatrix3dself, constLVecBase2dv) -> Any: ...
    def xform_point_in_place(self, LMatrix3dself, LVecBase2dv) -> Any: ...
    @overload
    def xform_vec(self, LMatrix3dself, constLVecBase2dv) -> Any: ...
    @overload
    def xform_vec(self, LMatrix3dself, constLVecBase3dv) -> Any: ...
    def xform_vec_general(self, LMatrix3dself, constLVecBase3dv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix3dself, LVecBase3dv) -> Any: ...
    @overload
    def xform_vec_in_place(self, LMatrix3dself, LVecBase2dv) -> Any: ...
    @overload
    def xform_vec_in_place(self, LMatrix3dself, LVecBase3dv) -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix3dself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class LMatrix3f(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix3fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix3fself, inthash, floatthreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix3fself, constLMatrix3fother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix3fself, constLMatrix3fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    @overload
    def assign(self, constLMatrix3fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix3fself, constLMatrix3fother) -> Any: ...
    @overload
    def compare_to(self, LMatrix3fself, constLMatrix3fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def determinant(self, LMatrix3fself) -> Any: ...
    def fill(self, constLMatrix3fself, floatfill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol2(self, *args, **kwargs): ...
    def getCol2s(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow2(self, *args, **kwargs): ...
    def getRow2s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def get_cell(self, LMatrix3fself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix3fself, intcol) -> Any: ...
    def get_col2(self, LMatrix3fself, intcol) -> Any: ...
    def get_col2s(self, *args, **kwargs): ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix3fself) -> Any: ...
    @overload
    def get_hash(self, LMatrix3fself, floatthreshold) -> Any: ...
    def get_num_components(self, LMatrix3fself) -> Any: ...
    @overload
    def get_row(self, LMatrix3fself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix3fself, LVecBase3fresult_vec, introw) -> Any: ...
    def get_row2(self, LMatrix3fself, introw) -> Any: ...
    def get_row2s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invertTransposeFrom(self, *args, **kwargs): ...
    def invert_from(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    def invert_in_place(self, constLMatrix3fself) -> Any: ...
    @overload
    def invert_transpose_from(self, constLMatrix3fself, constLMatrix4fother) -> Any: ...
    @overload
    def invert_transpose_from(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix3fself) -> Any: ...
    def is_nan(self, LMatrix3fself) -> Any: ...
    def multiply(self, constLMatrix3fself, constLMatrix3fother1, constLMatrix3fother2) -> Any: ...
    def output(self, LMatrix3fself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix3fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix3fself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @overload
    @staticmethod
    def rotate_mat(floatangle) -> Any: ...
    @overload
    @staticmethod
    def rotate_mat(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase2fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy, floatsz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(floatsx, floatsy, floatsz, floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix3fself,
        floate00,
        floate01,
        floate02,
        floate10,
        floate11,
        floate12,
        floate20,
        floate21,
        floate22,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix3fself, introw, intcol, floatvalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix3fself, intcol, constLVecBase2fv) -> Any: ...
    @overload
    def set_col(self, constLMatrix3fself, intcol, constLVecBase3fv) -> Any: ...
    @overload
    def set_rotate_mat(self, constLMatrix3fself, floatangle) -> Any: ...
    @overload
    def set_rotate_mat(self, constLMatrix3fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix3fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix3fself, introw, constLVecBase2fv) -> Any: ...
    @overload
    def set_row(self, constLMatrix3fself, introw, constLVecBase3fv) -> Any: ...
    @overload
    def set_scale_mat(self, constLMatrix3fself, constLVecBase2fscale) -> Any: ...
    @overload
    def set_scale_mat(self, constLMatrix3fself, constLVecBase3fscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix3fself, constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix3fself, constLVecBase3fshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix3fself, constLVecBase2ftrans) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase2ftrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(floattx, floatty) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    def transpose_in_place(self, constLMatrix3fself) -> Any: ...
    def write(self, LMatrix3fself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix3fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix3fself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix3fself, constLVecBase3fv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix3fself, LVecBase3fv) -> Any: ...
    def xform_point(self, LMatrix3fself, constLVecBase2fv) -> Any: ...
    def xform_point_in_place(self, LMatrix3fself, LVecBase2fv) -> Any: ...
    @overload
    def xform_vec(self, LMatrix3fself, constLVecBase2fv) -> Any: ...
    @overload
    def xform_vec(self, LMatrix3fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general(self, LMatrix3fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix3fself, LVecBase3fv) -> Any: ...
    @overload
    def xform_vec_in_place(self, LMatrix3fself, LVecBase2fv) -> Any: ...
    @overload
    def xform_vec_in_place(self, LMatrix3fself, LVecBase3fv) -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix3fself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class LMatrix4(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def accumulate(self, constLMatrix4fself, constLMatrix4fother, floatweight) -> Any: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix4fself, inthash, floatthreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix4fself, constLMatrix4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def assign(self, constLMatrix4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def compare_to(self, LMatrix4fself, constLMatrix4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def fill(self, constLMatrix4fself, floatfill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol3(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow3(self, *args, **kwargs): ...
    def getRow3s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def getUpper3(self, *args, **kwargs): ...
    def get_cell(self, LMatrix4fself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix4fself, intcol) -> Any: ...
    def get_col3(self, LMatrix4fself, intcol) -> Any: ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix4fself) -> Any: ...
    @overload
    def get_hash(self, LMatrix4fself, floatthreshold) -> Any: ...
    def get_num_components(self, LMatrix4fself) -> Any: ...
    @overload
    def get_row(self, LMatrix4fself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix4fself, LVecBase4fresult_vec, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4fself, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4fself, LVecBase3fresult_vec, introw) -> Any: ...
    def get_row3s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    def get_upper_3(self, LMatrix4fself) -> Any: ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertAffineFrom(self, *args, **kwargs): ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_affine_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def invert_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def invert_in_place(self, constLMatrix4fself) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix4fself) -> Any: ...
    def is_nan(self, LMatrix4fself) -> Any: ...
    def multiply(self, constLMatrix4fself, constLMatrix4fother1, constLMatrix4fother2) -> Any: ...
    @staticmethod
    def onesMat(*args, **kwargs): ...
    @staticmethod
    def ones_mat() -> Any: ...
    def output(self, LMatrix4fself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix4fself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @staticmethod
    def rotate_mat(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy, floatsz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(floatsx, floatsy, floatsz, floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix4fself,
        floate00,
        floate01,
        floate02,
        floate03,
        floate10,
        floate11,
        floate12,
        floate13,
        floate20,
        floate21,
        floate22,
        floate23,
        floate30,
        floate31,
        floate32,
        floate33,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def setUpper3(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix4fself, introw, intcol, floatvalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix4fself, intcol, constLVecBase4fv) -> Any: ...
    @overload
    def set_col(self, constLMatrix4fself, intcol, constLVecBase3fv) -> Any: ...
    def set_rotate_mat(self, constLMatrix4fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix4fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix4fself, introw, constLVecBase4fv) -> Any: ...
    @overload
    def set_row(self, constLMatrix4fself, introw, constLVecBase3fv) -> Any: ...
    def set_scale_mat(self, constLMatrix4fself, constLVecBase3fscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix4fself, constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix4fself, constLVecBase3fshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix4fself, constLVecBase3ftrans) -> Any: ...
    def set_upper_3(self, constLMatrix4fself, constLMatrix3fupper3) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase3ftrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(floattx, floatty, floattz) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def transpose_in_place(self, constLMatrix4fself) -> Any: ...
    def write(self, LMatrix4fself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix4fself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix4fself, constLVecBase4fv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointGeneral(self, *args, **kwargs): ...
    def xformPointGeneralInPlace(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix4fself, LVecBase4fv) -> Any: ...
    def xform_point(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_point_general(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_point_general_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_point_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_vec(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_vec_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    @staticmethod
    def yToZUpMat(*args, **kwargs): ...
    @staticmethod
    def y_to_z_up_mat() -> Any: ...
    @staticmethod
    def zToYUpMat(*args, **kwargs): ...
    @staticmethod
    def z_to_y_up_mat() -> Any: ...
    @staticmethod
    def zerosMat(*args, **kwargs): ...
    @staticmethod
    def zeros_mat() -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix4fself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class LMatrix4d(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def accumulate(self, constLMatrix4dself, constLMatrix4dother, doubleweight) -> Any: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix4dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix4dself, inthash, doublethreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix4dself, constLMatrix4dother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix4dself, constLMatrix4dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    @overload
    def assign(self, constLMatrix4dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix4dself, constLMatrix4dother) -> Any: ...
    @overload
    def compare_to(self, LMatrix4dself, constLMatrix4dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def fill(self, constLMatrix4dself, doublefill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol3(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow3(self, *args, **kwargs): ...
    def getRow3s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def getUpper3(self, *args, **kwargs): ...
    def get_cell(self, LMatrix4dself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix4dself, intcol) -> Any: ...
    def get_col3(self, LMatrix4dself, intcol) -> Any: ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix4dself) -> Any: ...
    @overload
    def get_hash(self, LMatrix4dself, doublethreshold) -> Any: ...
    def get_num_components(self, LMatrix4dself) -> Any: ...
    @overload
    def get_row(self, LMatrix4dself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix4dself, LVecBase4dresult_vec, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4dself, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4dself, LVecBase3dresult_vec, introw) -> Any: ...
    def get_row3s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    def get_upper_3(self, LMatrix4dself) -> Any: ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertAffineFrom(self, *args, **kwargs): ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_affine_from(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    def invert_from(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    def invert_in_place(self, constLMatrix4dself) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix4dself) -> Any: ...
    def is_nan(self, LMatrix4dself) -> Any: ...
    def multiply(self, constLMatrix4dself, constLMatrix4dother1, constLMatrix4dother2) -> Any: ...
    @staticmethod
    def onesMat(*args, **kwargs): ...
    @staticmethod
    def ones_mat() -> Any: ...
    def output(self, LMatrix4dself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix4dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix4dself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @staticmethod
    def rotate_mat(doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3dscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(doublescale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(doublesx, doublesy, doublesz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3dscale, constLVecBase3dshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3dscale, constLVecBase3dshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(doublesx, doublesy, doublesz, doubleshxy, doubleshxz, doubleshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix4dself,
        doublee00,
        doublee01,
        doublee02,
        doublee03,
        doublee10,
        doublee11,
        doublee12,
        doublee13,
        doublee20,
        doublee21,
        doublee22,
        doublee23,
        doublee30,
        doublee31,
        doublee32,
        doublee33,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def setUpper3(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix4dself, introw, intcol, doublevalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix4dself, intcol, constLVecBase4dv) -> Any: ...
    @overload
    def set_col(self, constLMatrix4dself, intcol, constLVecBase3dv) -> Any: ...
    def set_rotate_mat(self, constLMatrix4dself, doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix4dself, doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix4dself, introw, constLVecBase4dv) -> Any: ...
    @overload
    def set_row(self, constLMatrix4dself, introw, constLVecBase3dv) -> Any: ...
    def set_scale_mat(self, constLMatrix4dself, constLVecBase3dscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix4dself, constLVecBase3dscale, constLVecBase3dshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix4dself, constLVecBase3dshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix4dself, constLVecBase3dtrans) -> Any: ...
    def set_upper_3(self, constLMatrix4dself, constLMatrix3dupper3) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3dshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3dshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(doubleshxy, doubleshxz, doubleshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase3dtrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(doubletx, doublety, doubletz) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    def transpose_in_place(self, constLMatrix4dself) -> Any: ...
    def write(self, LMatrix4dself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix4dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix4dself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix4dself, constLVecBase4dv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointGeneral(self, *args, **kwargs): ...
    def xformPointGeneralInPlace(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix4dself, LVecBase4dv) -> Any: ...
    def xform_point(self, LMatrix4dself, constLVecBase3dv) -> Any: ...
    def xform_point_general(self, LMatrix4dself, constLVecBase3dv) -> Any: ...
    def xform_point_general_in_place(self, LMatrix4dself, LVecBase3dv) -> Any: ...
    def xform_point_in_place(self, LMatrix4dself, LVecBase3dv) -> Any: ...
    def xform_vec(self, LMatrix4dself, constLVecBase3dv) -> Any: ...
    def xform_vec_general(self, LMatrix4dself, constLVecBase3dv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix4dself, LVecBase3dv) -> Any: ...
    def xform_vec_in_place(self, LMatrix4dself, LVecBase3dv) -> Any: ...
    @staticmethod
    def yToZUpMat(*args, **kwargs): ...
    @staticmethod
    def y_to_z_up_mat() -> Any: ...
    @staticmethod
    def zToYUpMat(*args, **kwargs): ...
    @staticmethod
    def z_to_y_up_mat() -> Any: ...
    @staticmethod
    def zerosMat(*args, **kwargs): ...
    @staticmethod
    def zeros_mat() -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix4dself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class LMatrix4f(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def accumulate(self, constLMatrix4fself, constLMatrix4fother, floatweight) -> Any: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix4fself, inthash, floatthreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix4fself, constLMatrix4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def assign(self, constLMatrix4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def compare_to(self, LMatrix4fself, constLMatrix4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def fill(self, constLMatrix4fself, floatfill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol3(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow3(self, *args, **kwargs): ...
    def getRow3s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def getUpper3(self, *args, **kwargs): ...
    def get_cell(self, LMatrix4fself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix4fself, intcol) -> Any: ...
    def get_col3(self, LMatrix4fself, intcol) -> Any: ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix4fself) -> Any: ...
    @overload
    def get_hash(self, LMatrix4fself, floatthreshold) -> Any: ...
    def get_num_components(self, LMatrix4fself) -> Any: ...
    @overload
    def get_row(self, LMatrix4fself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix4fself, LVecBase4fresult_vec, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4fself, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4fself, LVecBase3fresult_vec, introw) -> Any: ...
    def get_row3s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    def get_upper_3(self, LMatrix4fself) -> Any: ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertAffineFrom(self, *args, **kwargs): ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_affine_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def invert_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def invert_in_place(self, constLMatrix4fself) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix4fself) -> Any: ...
    def is_nan(self, LMatrix4fself) -> Any: ...
    def multiply(self, constLMatrix4fself, constLMatrix4fother1, constLMatrix4fother2) -> Any: ...
    @staticmethod
    def onesMat(*args, **kwargs): ...
    @staticmethod
    def ones_mat() -> Any: ...
    def output(self, LMatrix4fself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix4fself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @staticmethod
    def rotate_mat(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy, floatsz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(floatsx, floatsy, floatsz, floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix4fself,
        floate00,
        floate01,
        floate02,
        floate03,
        floate10,
        floate11,
        floate12,
        floate13,
        floate20,
        floate21,
        floate22,
        floate23,
        floate30,
        floate31,
        floate32,
        floate33,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def setUpper3(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix4fself, introw, intcol, floatvalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix4fself, intcol, constLVecBase4fv) -> Any: ...
    @overload
    def set_col(self, constLMatrix4fself, intcol, constLVecBase3fv) -> Any: ...
    def set_rotate_mat(self, constLMatrix4fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix4fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix4fself, introw, constLVecBase4fv) -> Any: ...
    @overload
    def set_row(self, constLMatrix4fself, introw, constLVecBase3fv) -> Any: ...
    def set_scale_mat(self, constLMatrix4fself, constLVecBase3fscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix4fself, constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix4fself, constLVecBase3fshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix4fself, constLVecBase3ftrans) -> Any: ...
    def set_upper_3(self, constLMatrix4fself, constLMatrix3fupper3) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase3ftrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(floattx, floatty, floattz) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def transpose_in_place(self, constLMatrix4fself) -> Any: ...
    def write(self, LMatrix4fself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix4fself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix4fself, constLVecBase4fv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointGeneral(self, *args, **kwargs): ...
    def xformPointGeneralInPlace(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix4fself, LVecBase4fv) -> Any: ...
    def xform_point(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_point_general(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_point_general_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_point_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_vec(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_vec_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    @staticmethod
    def yToZUpMat(*args, **kwargs): ...
    @staticmethod
    def y_to_z_up_mat() -> Any: ...
    @staticmethod
    def zToYUpMat(*args, **kwargs): ...
    @staticmethod
    def z_to_y_up_mat() -> Any: ...
    @staticmethod
    def zerosMat(*args, **kwargs): ...
    @staticmethod
    def zeros_mat() -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix4fself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class LNormal(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LVector3fself, constLVector3fother) -> Any: ...
    def angle_rad(self, LVector3fself, constLVector3fother) -> Any: ...
    @staticmethod
    def back(intcs) -> Any: ...
    def cross(self, LVector3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def down(intcs) -> Any: ...
    @staticmethod
    def forward(intcs) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector3fself) -> Any: ...
    def get_xz(self, LVector3fself) -> Any: ...
    def get_yz(self, LVector3fself) -> Any: ...
    @staticmethod
    def left(intcs) -> Any: ...
    def normalized(self, LVector3fself) -> Any: ...
    def project(self, LVector3fself, constLVecBase3fonto) -> Any: ...
    def relativeAngleDeg(self, *args, **kwargs): ...
    def relativeAngleRad(self, *args, **kwargs): ...
    def relative_angle_deg(self, LVector3fself, constLVector3fother) -> Any: ...
    def relative_angle_rad(self, LVector3fself, constLVector3fother) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def right(intcs) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector3fself, constLVector3fother, constLVector3fref) -> Any: ...
    def signed_angle_rad(self, LVector3fself, constLVector3fother, constLVector3fref) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def up(intcs) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LNormald(LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LVector3dself, constLVector3dother) -> Any: ...
    def angle_rad(self, LVector3dself, constLVector3dother) -> Any: ...
    @staticmethod
    def back(intcs) -> Any: ...
    def cross(self, LVector3dself, constLVecBase3dother) -> Any: ...
    @staticmethod
    def down(intcs) -> Any: ...
    @staticmethod
    def forward(intcs) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector3dself) -> Any: ...
    def get_xz(self, LVector3dself) -> Any: ...
    def get_yz(self, LVector3dself) -> Any: ...
    @staticmethod
    def left(intcs) -> Any: ...
    def normalized(self, LVector3dself) -> Any: ...
    def project(self, LVector3dself, constLVecBase3donto) -> Any: ...
    def relativeAngleDeg(self, *args, **kwargs): ...
    def relativeAngleRad(self, *args, **kwargs): ...
    def relative_angle_deg(self, LVector3dself, constLVector3dother) -> Any: ...
    def relative_angle_rad(self, LVector3dself, constLVector3dother) -> Any: ...
    @staticmethod
    def rfu(doubleright, doublefwd, doubleup, intcs) -> Any: ...
    @staticmethod
    def right(intcs) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector3dself, constLVector3dother, constLVector3dref) -> Any: ...
    def signed_angle_rad(self, LVector3dself, constLVector3dother, constLVector3dref) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def up(intcs) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LNormalf(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LVector3fself, constLVector3fother) -> Any: ...
    def angle_rad(self, LVector3fself, constLVector3fother) -> Any: ...
    @staticmethod
    def back(intcs) -> Any: ...
    def cross(self, LVector3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def down(intcs) -> Any: ...
    @staticmethod
    def forward(intcs) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector3fself) -> Any: ...
    def get_xz(self, LVector3fself) -> Any: ...
    def get_yz(self, LVector3fself) -> Any: ...
    @staticmethod
    def left(intcs) -> Any: ...
    def normalized(self, LVector3fself) -> Any: ...
    def project(self, LVector3fself, constLVecBase3fonto) -> Any: ...
    def relativeAngleDeg(self, *args, **kwargs): ...
    def relativeAngleRad(self, *args, **kwargs): ...
    def relative_angle_deg(self, LVector3fself, constLVector3fother) -> Any: ...
    def relative_angle_rad(self, LVector3fself, constLVector3fother) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def right(intcs) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector3fself, constLVector3fother, constLVector3fref) -> Any: ...
    def signed_angle_rad(self, LVector3fself, constLVector3fother, constLVector3fref) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def up(intcs) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LODNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    center: Incomplete
    highest_switch: Incomplete
    ins: Incomplete
    lod_scale: Incomplete
    lowest_switch: Incomplete
    outs: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addSwitch(self, *args, **kwargs): ...
    def add_switch(self, constLODNodeself, floatin, floatout) -> Any: ...
    def clearForceSwitch(self, *args, **kwargs): ...
    def clearSwitches(self, *args, **kwargs): ...
    def clear_force_switch(self, constLODNodeself) -> Any: ...
    def clear_switches(self, constLODNodeself) -> Any: ...
    def forceSwitch(self, *args, **kwargs): ...
    def force_switch(self, constLODNodeself, intindex) -> Any: ...
    def getCenter(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestSwitch(self, *args, **kwargs): ...
    def getIn(self, *args, **kwargs): ...
    def getIns(self, *args, **kwargs): ...
    def getLodScale(self, *args, **kwargs): ...
    def getLowestSwitch(self, *args, **kwargs): ...
    def getNumSwitches(self, *args, **kwargs): ...
    def getOut(self, *args, **kwargs): ...
    def getOuts(self, *args, **kwargs): ...
    def get_center(self, LODNodeself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_switch(self, LODNodeself) -> Any: ...
    def get_in(self, LODNodeself, intindex) -> Any: ...
    def get_ins(self, *args, **kwargs): ...
    def get_lod_scale(self, LODNodeself) -> Any: ...
    def get_lowest_switch(self, LODNodeself) -> Any: ...
    def get_num_switches(self, LODNodeself) -> Any: ...
    def get_out(self, LODNodeself, intindex) -> Any: ...
    def get_outs(self, *args, **kwargs): ...
    def hideAllSwitches(self, *args, **kwargs): ...
    def hideSwitch(self, *args, **kwargs): ...
    def hide_all_switches(self, constLODNodeself) -> Any: ...
    def hide_switch(self, constLODNodeself, intindex) -> Any: ...
    def isAnyShown(self, *args, **kwargs): ...
    def is_any_shown(self, LODNodeself) -> Any: ...
    @staticmethod
    def makeDefaultLod(*args, **kwargs): ...
    @staticmethod
    def make_default_lod(strname) -> Any: ...
    def setCenter(self, *args, **kwargs): ...
    def setLodScale(self, *args, **kwargs): ...
    def setSwitch(self, *args, **kwargs): ...
    def set_center(self, constLODNodeself, constLPoint3fcenter) -> Any: ...
    def set_lod_scale(self, constLODNodeself, floatvalue) -> Any: ...
    def set_switch(self, constLODNodeself, intindex, floatin, floatout) -> Any: ...
    def showAllSwitches(self, *args, **kwargs): ...
    def showSwitch(self, *args, **kwargs): ...
    def show_all_switches(self, constLODNodeself) -> Any: ...
    @overload
    def show_switch(self, constLODNodeself, intindex) -> Any: ...
    @overload
    def show_switch(self, constLODNodeself, intindex, constLVecBase4fcolor) -> Any: ...
    @overload
    def show_switch(self) -> Any: ...
    @overload
    def show_switch(self) -> Any: ...
    def verifyChildBounds(self, *args, **kwargs): ...
    def verify_child_bounds(self, LODNodeself) -> Any: ...

class LOrientation(LQuaternionf):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...

class LOrientationd(LQuaterniond):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...

class LOrientationf(LQuaternionf):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...

class LParabola(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constLParabolafself, constLParabolafcopy) -> Any: ...
    def calcPoint(self, *args, **kwargs): ...
    def calc_point(self, LParabolafself, floatt) -> Any: ...
    def getA(self, *args, **kwargs): ...
    def getB(self, *args, **kwargs): ...
    def getC(self, *args, **kwargs): ...
    def get_a(self, LParabolafself) -> Any: ...
    def get_b(self, LParabolafself) -> Any: ...
    def get_c(self, LParabolafself) -> Any: ...
    def output(self, LParabolafself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLParabolafself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLParabolafself, DatagramIteratorsource) -> Any: ...
    def write(self, LParabolafself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LParabolafself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LParabolafself, Datagramdestination) -> Any: ...
    def xform(self, constLParabolafself, constLMatrix4fmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LParabolad(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constLParaboladself, constLParaboladcopy) -> Any: ...
    def calcPoint(self, *args, **kwargs): ...
    def calc_point(self, LParaboladself, doublet) -> Any: ...
    def getA(self, *args, **kwargs): ...
    def getB(self, *args, **kwargs): ...
    def getC(self, *args, **kwargs): ...
    def get_a(self, LParaboladself) -> Any: ...
    def get_b(self, LParaboladself) -> Any: ...
    def get_c(self, LParaboladself) -> Any: ...
    def output(self, LParaboladself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLParaboladself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLParaboladself, DatagramIteratorsource) -> Any: ...
    def write(self, LParaboladself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LParaboladself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LParaboladself, Datagramdestination) -> Any: ...
    def xform(self, constLParaboladself, constLMatrix4dmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LParabolaf(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constLParabolafself, constLParabolafcopy) -> Any: ...
    def calcPoint(self, *args, **kwargs): ...
    def calc_point(self, LParabolafself, floatt) -> Any: ...
    def getA(self, *args, **kwargs): ...
    def getB(self, *args, **kwargs): ...
    def getC(self, *args, **kwargs): ...
    def get_a(self, LParabolafself) -> Any: ...
    def get_b(self, LParabolafself) -> Any: ...
    def get_c(self, LParabolafself) -> Any: ...
    def output(self, LParabolafself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLParabolafself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLParabolafself, DatagramIteratorsource) -> Any: ...
    def write(self, LParabolafself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LParabolafself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LParabolafself, Datagramdestination) -> Any: ...
    def xform(self, constLParabolafself, constLMatrix4fmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LPlane(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def distToPlane(self, *args, **kwargs): ...
    def dist_to_plane(self, LPlanefself, constLPoint3fpoint) -> Any: ...
    def flip(self, constLPlanefself) -> Any: ...
    def getNormal(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getReflectionMat(self, *args, **kwargs): ...
    def get_normal(self, LPlanefself) -> Any: ...
    def get_point(self, LPlanefself) -> Any: ...
    def get_reflection_mat(self, LPlanefself) -> Any: ...
    def intersectsLine(self, *args, **kwargs): ...
    def intersectsPlane(self, *args, **kwargs): ...
    @overload
    def intersects_line(self, LPlanefself, LPoint3fintersection_point, constLPoint3fp1, constLPoint3fp2) -> Any: ...
    @overload
    def intersects_line(self) -> Any: ...
    def intersects_plane(self, LPlanefself, LPoint3ffrom, LVector3fdelta, constLPlanefother) -> Any: ...
    def normalize(self, constLPlanefself) -> Any: ...
    def normalized(self, LPlanefself) -> Any: ...
    def output(self, LPlanefself, ostreamout) -> Any: ...
    def project(self, LPlanefself, constLPoint3fpoint) -> Any: ...
    def write(self, LPlanefself, ostreamout, intindent_level) -> Any: ...
    def xform(self, constLPlanefself, constLMatrix4fmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __rmul__(self, other): ...

class LPlaned(LVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def distToPlane(self, *args, **kwargs): ...
    def dist_to_plane(self, LPlanedself, constLPoint3dpoint) -> Any: ...
    def flip(self, constLPlanedself) -> Any: ...
    def getNormal(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getReflectionMat(self, *args, **kwargs): ...
    def get_normal(self, LPlanedself) -> Any: ...
    def get_point(self, LPlanedself) -> Any: ...
    def get_reflection_mat(self, LPlanedself) -> Any: ...
    def intersectsLine(self, *args, **kwargs): ...
    def intersectsPlane(self, *args, **kwargs): ...
    @overload
    def intersects_line(self, LPlanedself, LPoint3dintersection_point, constLPoint3dp1, constLPoint3dp2) -> Any: ...
    @overload
    def intersects_line(self) -> Any: ...
    def intersects_plane(self, LPlanedself, LPoint3dfrom, LVector3ddelta, constLPlanedother) -> Any: ...
    def normalize(self, constLPlanedself) -> Any: ...
    def normalized(self, LPlanedself) -> Any: ...
    def output(self, LPlanedself, ostreamout) -> Any: ...
    def project(self, LPlanedself, constLPoint3dpoint) -> Any: ...
    def write(self, LPlanedself, ostreamout, intindent_level) -> Any: ...
    def xform(self, constLPlanedself, constLMatrix4dmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __rmul__(self, other): ...

class LPlanef(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def distToPlane(self, *args, **kwargs): ...
    def dist_to_plane(self, LPlanefself, constLPoint3fpoint) -> Any: ...
    def flip(self, constLPlanefself) -> Any: ...
    def getNormal(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getReflectionMat(self, *args, **kwargs): ...
    def get_normal(self, LPlanefself) -> Any: ...
    def get_point(self, LPlanefself) -> Any: ...
    def get_reflection_mat(self, LPlanefself) -> Any: ...
    def intersectsLine(self, *args, **kwargs): ...
    def intersectsPlane(self, *args, **kwargs): ...
    @overload
    def intersects_line(self, LPlanefself, LPoint3fintersection_point, constLPoint3fp1, constLPoint3fp2) -> Any: ...
    @overload
    def intersects_line(self) -> Any: ...
    def intersects_plane(self, LPlanefself, LPoint3ffrom, LVector3fdelta, constLPlanefother) -> Any: ...
    def normalize(self, constLPlanefself) -> Any: ...
    def normalized(self, LPlanefself) -> Any: ...
    def output(self, LPlanefself, ostreamout) -> Any: ...
    def project(self, LPlanefself, constLPoint3fpoint) -> Any: ...
    def write(self, LPlanefself, ostreamout, intindent_level) -> Any: ...
    def xform(self, constLPlanefself, constLMatrix4fmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __rmul__(self, other): ...

class LPoint2(LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LPoint2fself) -> Any: ...
    def project(self, LPoint2fself, constLVecBase2fonto) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LPoint2d(LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LPoint2dself) -> Any: ...
    def project(self, LPoint2dself, constLVecBase2donto) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LPoint2f(LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LPoint2fself) -> Any: ...
    def project(self, LPoint2fself, constLVecBase2fonto) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LPoint2i(LVecBase2i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...

class LPoint3(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3fself) -> Any: ...
    def get_xz(self, LPoint3fself) -> Any: ...
    def get_yz(self, LPoint3fself) -> Any: ...
    def normalized(self, LPoint3fself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    def project(self, LPoint3fself, constLVecBase3fonto) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LPoint3d(LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3dself, constLVecBase3dother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3dself) -> Any: ...
    def get_xz(self, LPoint3dself) -> Any: ...
    def get_yz(self, LPoint3dself) -> Any: ...
    def normalized(self, LPoint3dself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    def project(self, LPoint3dself, constLVecBase3donto) -> Any: ...
    @staticmethod
    def rfu(doubleright, doublefwd, doubleup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LPoint3f(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3fself) -> Any: ...
    def get_xz(self, LPoint3fself) -> Any: ...
    def get_yz(self, LPoint3fself) -> Any: ...
    def normalized(self, LPoint3fself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    def project(self, LPoint3fself, constLVecBase3fonto) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LPoint3i(LVecBase3i):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3iself, constLVecBase3iother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3iself) -> Any: ...
    def get_xz(self, LPoint3iself) -> Any: ...
    def get_yz(self, LPoint3iself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    @staticmethod
    def rfu(intright, intfwd, intup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...

class LPoint4(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint4fself) -> Any: ...
    def get_xyz(self, LPoint4fself) -> Any: ...
    def normalized(self, LPoint4fself) -> Any: ...
    def project(self, LPoint4fself, constLVecBase4fonto) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LPoint4d(LVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint4dself) -> Any: ...
    def get_xyz(self, LPoint4dself) -> Any: ...
    def normalized(self, LPoint4dself) -> Any: ...
    def project(self, LPoint4dself, constLVecBase4donto) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LPoint4f(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint4fself) -> Any: ...
    def get_xyz(self, LPoint4fself) -> Any: ...
    def normalized(self, LPoint4fself) -> Any: ...
    def project(self, LPoint4fself, constLVecBase4fonto) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LPoint4i(LVecBase4i):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint4iself) -> Any: ...
    def get_xyz(self, LPoint4iself) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...

class LQuaternion(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def almostEqual(self, *args, **kwargs): ...
    def almostSameDirection(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    @overload
    def almost_equal(self, LQuaternionfself, constLQuaternionfother, floatthreshold) -> Any: ...
    def almost_same_direction(self, LQuaternionfself, constLQuaternionfother, floatthreshold) -> Any: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    def angle_rad(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    def conjugate(self, LQuaternionfself) -> Any: ...
    def conjugateFrom(self, *args, **kwargs): ...
    def conjugateInPlace(self, *args, **kwargs): ...
    def conjugate_from(self, constLQuaternionfself, constLQuaternionfother) -> Any: ...
    def conjugate_in_place(self, constLQuaternionfself) -> Any: ...
    def extractToMatrix(self, *args, **kwargs): ...
    @overload
    def extract_to_matrix(self, LQuaternionfself, LMatrix4fm) -> Any: ...
    @overload
    def extract_to_matrix(self, LQuaternionfself, LMatrix3fm) -> Any: ...
    def getAngle(self, *args, **kwargs): ...
    def getAngleRad(self, *args, **kwargs): ...
    def getAxis(self, *args, **kwargs): ...
    def getAxisNormalized(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getForward(self, *args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getI(self, *args, **kwargs): ...
    def getJ(self, *args, **kwargs): ...
    def getK(self, *args, **kwargs): ...
    def getR(self, *args, **kwargs): ...
    def getRight(self, *args, **kwargs): ...
    def getUp(self, *args, **kwargs): ...
    def get_angle(self, LQuaternionfself) -> Any: ...
    def get_angle_rad(self, LQuaternionfself) -> Any: ...
    def get_axis(self, LQuaternionfself) -> Any: ...
    def get_axis_normalized(self, LQuaternionfself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_forward(self, LQuaternionfself, intcs) -> Any: ...
    def get_hpr(self, LQuaternionfself, intcs) -> Any: ...
    def get_i(self, LQuaternionfself) -> Any: ...
    def get_j(self, LQuaternionfself) -> Any: ...
    def get_k(self, LQuaternionfself) -> Any: ...
    def get_r(self, LQuaternionfself) -> Any: ...
    def get_right(self, LQuaternionfself, intcs) -> Any: ...
    def get_up(self, LQuaternionfself, intcs) -> Any: ...
    @staticmethod
    def identQuat(*args, **kwargs): ...
    @staticmethod
    def ident_quat() -> Any: ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_from(self, constLQuaternionfself, constLQuaternionfother) -> Any: ...
    def invert_in_place(self, constLQuaternionfself) -> Any: ...
    def isAlmostIdentity(self, *args, **kwargs): ...
    def isIdentity(self, *args, **kwargs): ...
    def isSameDirection(self, *args, **kwargs): ...
    def is_almost_identity(self, LQuaternionfself, floattolerance) -> Any: ...
    def is_identity(self, LQuaternionfself) -> Any: ...
    def is_same_direction(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    def multiply(self, LQuaternionfself, constLQuaternionfrhs) -> Any: ...
    def normalize(self, constLQuaternionfself) -> Any: ...
    def output(self, LQuaternionfself, ostreamparam0) -> Any: ...
    @staticmethod
    def pureImaginary(*args, **kwargs): ...
    @staticmethod
    def pure_imaginary(constLVector3fv) -> Any: ...
    def setFromAxisAngle(self, *args, **kwargs): ...
    def setFromAxisAngleRad(self, *args, **kwargs): ...
    def setFromMatrix(self, *args, **kwargs): ...
    def setHpr(self, *args, **kwargs): ...
    def setI(self, *args, **kwargs): ...
    def setJ(self, *args, **kwargs): ...
    def setK(self, *args, **kwargs): ...
    def setR(self, *args, **kwargs): ...
    def set_from_axis_angle(self, constLQuaternionfself, floatangle_deg, constLVector3faxis) -> Any: ...
    def set_from_axis_angle_rad(self, constLQuaternionfself, floatangle_rad, constLVector3faxis) -> Any: ...
    @overload
    def set_from_matrix(self, constLQuaternionfself, constLMatrix4fm) -> Any: ...
    @overload
    def set_from_matrix(self, constLQuaternionfself, constLMatrix3fm) -> Any: ...
    def set_hpr(self, constLQuaternionfself, constLVecBase3fhpr, intcs) -> Any: ...
    def set_i(self, constLQuaternionfself, floati) -> Any: ...
    def set_j(self, constLQuaternionfself, floatj) -> Any: ...
    def set_k(self, constLQuaternionfself, floatk) -> Any: ...
    def set_r(self, constLQuaternionfself, floatr) -> Any: ...
    @overload
    def xform(self, LQuaternionfself, constLVecBase4fv) -> Any: ...
    @overload
    def xform(self, LQuaternionfself, constLVecBase3fv) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LQuaterniond(LVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def almostEqual(self, *args, **kwargs): ...
    def almostSameDirection(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LQuaterniondself, constLQuaterniondother) -> Any: ...
    @overload
    def almost_equal(self, LQuaterniondself, constLQuaterniondother, doublethreshold) -> Any: ...
    def almost_same_direction(self, LQuaterniondself, constLQuaterniondother, doublethreshold) -> Any: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LQuaterniondself, constLQuaterniondother) -> Any: ...
    def angle_rad(self, LQuaterniondself, constLQuaterniondother) -> Any: ...
    def conjugate(self, LQuaterniondself) -> Any: ...
    def conjugateFrom(self, *args, **kwargs): ...
    def conjugateInPlace(self, *args, **kwargs): ...
    def conjugate_from(self, constLQuaterniondself, constLQuaterniondother) -> Any: ...
    def conjugate_in_place(self, constLQuaterniondself) -> Any: ...
    def extractToMatrix(self, *args, **kwargs): ...
    @overload
    def extract_to_matrix(self, LQuaterniondself, LMatrix4dm) -> Any: ...
    @overload
    def extract_to_matrix(self, LQuaterniondself, LMatrix3dm) -> Any: ...
    def getAngle(self, *args, **kwargs): ...
    def getAngleRad(self, *args, **kwargs): ...
    def getAxis(self, *args, **kwargs): ...
    def getAxisNormalized(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getForward(self, *args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getI(self, *args, **kwargs): ...
    def getJ(self, *args, **kwargs): ...
    def getK(self, *args, **kwargs): ...
    def getR(self, *args, **kwargs): ...
    def getRight(self, *args, **kwargs): ...
    def getUp(self, *args, **kwargs): ...
    def get_angle(self, LQuaterniondself) -> Any: ...
    def get_angle_rad(self, LQuaterniondself) -> Any: ...
    def get_axis(self, LQuaterniondself) -> Any: ...
    def get_axis_normalized(self, LQuaterniondself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_forward(self, LQuaterniondself, intcs) -> Any: ...
    def get_hpr(self, LQuaterniondself, intcs) -> Any: ...
    def get_i(self, LQuaterniondself) -> Any: ...
    def get_j(self, LQuaterniondself) -> Any: ...
    def get_k(self, LQuaterniondself) -> Any: ...
    def get_r(self, LQuaterniondself) -> Any: ...
    def get_right(self, LQuaterniondself, intcs) -> Any: ...
    def get_up(self, LQuaterniondself, intcs) -> Any: ...
    @staticmethod
    def identQuat(*args, **kwargs): ...
    @staticmethod
    def ident_quat() -> Any: ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_from(self, constLQuaterniondself, constLQuaterniondother) -> Any: ...
    def invert_in_place(self, constLQuaterniondself) -> Any: ...
    def isAlmostIdentity(self, *args, **kwargs): ...
    def isIdentity(self, *args, **kwargs): ...
    def isSameDirection(self, *args, **kwargs): ...
    def is_almost_identity(self, LQuaterniondself, doubletolerance) -> Any: ...
    def is_identity(self, LQuaterniondself) -> Any: ...
    def is_same_direction(self, LQuaterniondself, constLQuaterniondother) -> Any: ...
    def multiply(self, LQuaterniondself, constLQuaterniondrhs) -> Any: ...
    def normalize(self, constLQuaterniondself) -> Any: ...
    def output(self, LQuaterniondself, ostreamparam0) -> Any: ...
    @staticmethod
    def pureImaginary(*args, **kwargs): ...
    @staticmethod
    def pure_imaginary(constLVector3dv) -> Any: ...
    def setFromAxisAngle(self, *args, **kwargs): ...
    def setFromAxisAngleRad(self, *args, **kwargs): ...
    def setFromMatrix(self, *args, **kwargs): ...
    def setHpr(self, *args, **kwargs): ...
    def setI(self, *args, **kwargs): ...
    def setJ(self, *args, **kwargs): ...
    def setK(self, *args, **kwargs): ...
    def setR(self, *args, **kwargs): ...
    def set_from_axis_angle(self, constLQuaterniondself, doubleangle_deg, constLVector3daxis) -> Any: ...
    def set_from_axis_angle_rad(self, constLQuaterniondself, doubleangle_rad, constLVector3daxis) -> Any: ...
    @overload
    def set_from_matrix(self, constLQuaterniondself, constLMatrix4dm) -> Any: ...
    @overload
    def set_from_matrix(self, constLQuaterniondself, constLMatrix3dm) -> Any: ...
    def set_hpr(self, constLQuaterniondself, constLVecBase3dhpr, intcs) -> Any: ...
    def set_i(self, constLQuaterniondself, doublei) -> Any: ...
    def set_j(self, constLQuaterniondself, doublej) -> Any: ...
    def set_k(self, constLQuaterniondself, doublek) -> Any: ...
    def set_r(self, constLQuaterniondself, doubler) -> Any: ...
    @overload
    def xform(self, LQuaterniondself, constLVecBase4dv) -> Any: ...
    @overload
    def xform(self, LQuaterniondself, constLVecBase3dv) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LQuaternionf(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def almostEqual(self, *args, **kwargs): ...
    def almostSameDirection(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    @overload
    def almost_equal(self, LQuaternionfself, constLQuaternionfother, floatthreshold) -> Any: ...
    def almost_same_direction(self, LQuaternionfself, constLQuaternionfother, floatthreshold) -> Any: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    def angle_rad(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    def conjugate(self, LQuaternionfself) -> Any: ...
    def conjugateFrom(self, *args, **kwargs): ...
    def conjugateInPlace(self, *args, **kwargs): ...
    def conjugate_from(self, constLQuaternionfself, constLQuaternionfother) -> Any: ...
    def conjugate_in_place(self, constLQuaternionfself) -> Any: ...
    def extractToMatrix(self, *args, **kwargs): ...
    @overload
    def extract_to_matrix(self, LQuaternionfself, LMatrix4fm) -> Any: ...
    @overload
    def extract_to_matrix(self, LQuaternionfself, LMatrix3fm) -> Any: ...
    def getAngle(self, *args, **kwargs): ...
    def getAngleRad(self, *args, **kwargs): ...
    def getAxis(self, *args, **kwargs): ...
    def getAxisNormalized(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getForward(self, *args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getI(self, *args, **kwargs): ...
    def getJ(self, *args, **kwargs): ...
    def getK(self, *args, **kwargs): ...
    def getR(self, *args, **kwargs): ...
    def getRight(self, *args, **kwargs): ...
    def getUp(self, *args, **kwargs): ...
    def get_angle(self, LQuaternionfself) -> Any: ...
    def get_angle_rad(self, LQuaternionfself) -> Any: ...
    def get_axis(self, LQuaternionfself) -> Any: ...
    def get_axis_normalized(self, LQuaternionfself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_forward(self, LQuaternionfself, intcs) -> Any: ...
    def get_hpr(self, LQuaternionfself, intcs) -> Any: ...
    def get_i(self, LQuaternionfself) -> Any: ...
    def get_j(self, LQuaternionfself) -> Any: ...
    def get_k(self, LQuaternionfself) -> Any: ...
    def get_r(self, LQuaternionfself) -> Any: ...
    def get_right(self, LQuaternionfself, intcs) -> Any: ...
    def get_up(self, LQuaternionfself, intcs) -> Any: ...
    @staticmethod
    def identQuat(*args, **kwargs): ...
    @staticmethod
    def ident_quat() -> Any: ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_from(self, constLQuaternionfself, constLQuaternionfother) -> Any: ...
    def invert_in_place(self, constLQuaternionfself) -> Any: ...
    def isAlmostIdentity(self, *args, **kwargs): ...
    def isIdentity(self, *args, **kwargs): ...
    def isSameDirection(self, *args, **kwargs): ...
    def is_almost_identity(self, LQuaternionfself, floattolerance) -> Any: ...
    def is_identity(self, LQuaternionfself) -> Any: ...
    def is_same_direction(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    def multiply(self, LQuaternionfself, constLQuaternionfrhs) -> Any: ...
    def normalize(self, constLQuaternionfself) -> Any: ...
    def output(self, LQuaternionfself, ostreamparam0) -> Any: ...
    @staticmethod
    def pureImaginary(*args, **kwargs): ...
    @staticmethod
    def pure_imaginary(constLVector3fv) -> Any: ...
    def setFromAxisAngle(self, *args, **kwargs): ...
    def setFromAxisAngleRad(self, *args, **kwargs): ...
    def setFromMatrix(self, *args, **kwargs): ...
    def setHpr(self, *args, **kwargs): ...
    def setI(self, *args, **kwargs): ...
    def setJ(self, *args, **kwargs): ...
    def setK(self, *args, **kwargs): ...
    def setR(self, *args, **kwargs): ...
    def set_from_axis_angle(self, constLQuaternionfself, floatangle_deg, constLVector3faxis) -> Any: ...
    def set_from_axis_angle_rad(self, constLQuaternionfself, floatangle_rad, constLVector3faxis) -> Any: ...
    @overload
    def set_from_matrix(self, constLQuaternionfself, constLMatrix4fm) -> Any: ...
    @overload
    def set_from_matrix(self, constLQuaternionfself, constLMatrix3fm) -> Any: ...
    def set_hpr(self, constLQuaternionfself, constLVecBase3fhpr, intcs) -> Any: ...
    def set_i(self, constLQuaternionfself, floati) -> Any: ...
    def set_j(self, constLQuaternionfself, floatj) -> Any: ...
    def set_k(self, constLQuaternionfself, floatk) -> Any: ...
    def set_r(self, constLQuaternionfself, floatr) -> Any: ...
    @overload
    def xform(self, LQuaternionfself, constLVecBase4fv) -> Any: ...
    @overload
    def xform(self, LQuaternionfself, constLVecBase3fv) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LRGBColor(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xz: Incomplete
    y: Incomplete
    yz: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase3fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase3fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase3fself, inti, floatvalue) -> Any: ...
    def add_x(self, constLVecBase3fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase3fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase3fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase3fself, constLVecBase3fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase3fself, constLVecBase3fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase3fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase3fself, constLVecBase3fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase3fself, constLVecBase3fother) -> Any: ...
    def cross(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def crossInto(self, *args, **kwargs): ...
    def cross_into(self, constLVecBase3fself, constLVecBase3fother) -> Any: ...
    def dot(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def fill(self, constLVecBase3fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def fmin(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getStandardizedHpr(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase3fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase3fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase3fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_standardized_hpr(self, LVecBase3fself) -> Any: ...
    def get_x(self, LVecBase3fself) -> Any: ...
    def get_xy(self, LVecBase3fself) -> Any: ...
    def get_xz(self, LVecBase3fself) -> Any: ...
    def get_y(self, LVecBase3fself) -> Any: ...
    def get_yz(self, LVecBase3fself) -> Any: ...
    def get_z(self, LVecBase3fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase3fself) -> Any: ...
    def length(self, LVecBase3fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase3fself) -> Any: ...
    def normalize(self, constLVecBase3fself) -> Any: ...
    def normalized(self, LVecBase3fself) -> Any: ...
    def output(self, LVecBase3fself, ostreamout) -> Any: ...
    def project(self, LVecBase3fself, constLVecBase3fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase3fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase3fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase3fself, floatx, floaty, floatz) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase3fself, inti, floatvalue) -> Any: ...
    def set_x(self, constLVecBase3fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase3fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase3fself, floatvalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase3fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase3fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase3fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase3fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase3fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase3fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LRGBColord(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xz: Incomplete
    y: Incomplete
    yz: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase3dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase3dself, inthash, doublethreshold) -> Any: ...
    def add_to_cell(self, constLVecBase3dself, inti, doublevalue) -> Any: ...
    def add_x(self, constLVecBase3dself, doublevalue) -> Any: ...
    def add_y(self, constLVecBase3dself, doublevalue) -> Any: ...
    def add_z(self, constLVecBase3dself, doublevalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase3dself, constLVecBase3dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase3dself, constLVecBase3dcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase3dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    @overload
    def compare_to(self, LVecBase3dself, constLVecBase3dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase3dself, constLVecBase3dother) -> Any: ...
    def cross(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    def crossInto(self, *args, **kwargs): ...
    def cross_into(self, constLVecBase3dself, constLVecBase3dother) -> Any: ...
    def dot(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    def fill(self, constLVecBase3dself, doublefill_value) -> Any: ...
    def fmax(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    def fmin(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getStandardizedHpr(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase3dself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase3dself) -> Any: ...
    @overload
    def get_hash(self, LVecBase3dself, doublethreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_standardized_hpr(self, LVecBase3dself) -> Any: ...
    def get_x(self, LVecBase3dself) -> Any: ...
    def get_xy(self, LVecBase3dself) -> Any: ...
    def get_xz(self, LVecBase3dself) -> Any: ...
    def get_y(self, LVecBase3dself) -> Any: ...
    def get_yz(self, LVecBase3dself) -> Any: ...
    def get_z(self, LVecBase3dself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase3dself) -> Any: ...
    def length(self, LVecBase3dself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase3dself) -> Any: ...
    def normalize(self, constLVecBase3dself) -> Any: ...
    def normalized(self, LVecBase3dself) -> Any: ...
    def output(self, LVecBase3dself, ostreamout) -> Any: ...
    def project(self, LVecBase3dself, constLVecBase3donto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase3dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase3dself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase3dself, doublex, doubley, doublez) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase3dself, inti, doublevalue) -> Any: ...
    def set_x(self, constLVecBase3dself, doublevalue) -> Any: ...
    def set_y(self, constLVecBase3dself, doublevalue) -> Any: ...
    def set_z(self, constLVecBase3dself, doublevalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase3dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase3dself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase3dself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase3dself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase3dself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase3dself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LRGBColorf(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xz: Incomplete
    y: Incomplete
    yz: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase3fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase3fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase3fself, inti, floatvalue) -> Any: ...
    def add_x(self, constLVecBase3fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase3fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase3fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase3fself, constLVecBase3fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase3fself, constLVecBase3fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase3fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase3fself, constLVecBase3fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase3fself, constLVecBase3fother) -> Any: ...
    def cross(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def crossInto(self, *args, **kwargs): ...
    def cross_into(self, constLVecBase3fself, constLVecBase3fother) -> Any: ...
    def dot(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def fill(self, constLVecBase3fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def fmin(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getStandardizedHpr(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase3fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase3fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase3fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_standardized_hpr(self, LVecBase3fself) -> Any: ...
    def get_x(self, LVecBase3fself) -> Any: ...
    def get_xy(self, LVecBase3fself) -> Any: ...
    def get_xz(self, LVecBase3fself) -> Any: ...
    def get_y(self, LVecBase3fself) -> Any: ...
    def get_yz(self, LVecBase3fself) -> Any: ...
    def get_z(self, LVecBase3fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase3fself) -> Any: ...
    def length(self, LVecBase3fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase3fself) -> Any: ...
    def normalize(self, constLVecBase3fself) -> Any: ...
    def normalized(self, LVecBase3fself) -> Any: ...
    def output(self, LVecBase3fself, ostreamout) -> Any: ...
    def project(self, LVecBase3fself, constLVecBase3fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase3fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase3fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase3fself, floatx, floaty, floatz) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase3fself, inti, floatvalue) -> Any: ...
    def set_x(self, constLVecBase3fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase3fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase3fself, floatvalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase3fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase3fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase3fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase3fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase3fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase3fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LRotation(LQuaternionf):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class LRotationd(LQuaterniond):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class LRotationf(LQuaternionf):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class LTexCoord(LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LPoint2fself) -> Any: ...
    def project(self, LPoint2fself, constLVecBase2fonto) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LTexCoord3(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3fself) -> Any: ...
    def get_xz(self, LPoint3fself) -> Any: ...
    def get_yz(self, LPoint3fself) -> Any: ...
    def normalized(self, LPoint3fself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    def project(self, LPoint3fself, constLVecBase3fonto) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LTexCoord3d(LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3dself, constLVecBase3dother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3dself) -> Any: ...
    def get_xz(self, LPoint3dself) -> Any: ...
    def get_yz(self, LPoint3dself) -> Any: ...
    def normalized(self, LPoint3dself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    def project(self, LPoint3dself, constLVecBase3donto) -> Any: ...
    @staticmethod
    def rfu(doubleright, doublefwd, doubleup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LTexCoord3f(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3fself) -> Any: ...
    def get_xz(self, LPoint3fself) -> Any: ...
    def get_yz(self, LPoint3fself) -> Any: ...
    def normalized(self, LPoint3fself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    def project(self, LPoint3fself, constLVecBase3fonto) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LTexCoordd(LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LPoint2dself) -> Any: ...
    def project(self, LPoint2dself, constLVecBase2donto) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LTexCoordf(LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LPoint2fself) -> Any: ...
    def project(self, LPoint2fself, constLVecBase2fonto) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVecBase2(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    y: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase2fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase2fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase2fself, inti, floatvalue) -> Any: ...
    def add_x(self, constLVecBase2fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase2fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase2fself, constLVecBase2fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase2fself, constLVecBase2fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase2fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase2fself, constLVecBase2fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase2fself, constLVecBase2fother) -> Any: ...
    def dot(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    def fill(self, constLVecBase2fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    def fmin(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def get_cell(self, LVecBase2fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase2fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase2fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_x(self, LVecBase2fself) -> Any: ...
    def get_y(self, LVecBase2fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase2fself) -> Any: ...
    def length(self, LVecBase2fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase2fself) -> Any: ...
    def normalize(self, constLVecBase2fself) -> Any: ...
    def normalized(self, LVecBase2fself) -> Any: ...
    def output(self, LVecBase2fself, ostreamout) -> Any: ...
    def project(self, LVecBase2fself, constLVecBase2fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase2fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase2fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase2fself, floatx, floaty) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase2fself, inti, floatvalue) -> Any: ...
    def set_x(self, constLVecBase2fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase2fself, floatvalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase2fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase2fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase2fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase2fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase2fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase2fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVecBase2d(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    y: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase2dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase2dself, inthash, doublethreshold) -> Any: ...
    def add_to_cell(self, constLVecBase2dself, inti, doublevalue) -> Any: ...
    def add_x(self, constLVecBase2dself, doublevalue) -> Any: ...
    def add_y(self, constLVecBase2dself, doublevalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase2dself, constLVecBase2dother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase2dself, constLVecBase2dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase2dself, constLVecBase2dcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase2dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase2dself, constLVecBase2dother) -> Any: ...
    @overload
    def compare_to(self, LVecBase2dself, constLVecBase2dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase2dself, constLVecBase2dother) -> Any: ...
    def dot(self, LVecBase2dself, constLVecBase2dother) -> Any: ...
    def fill(self, constLVecBase2dself, doublefill_value) -> Any: ...
    def fmax(self, LVecBase2dself, constLVecBase2dother) -> Any: ...
    def fmin(self, LVecBase2dself, constLVecBase2dother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def get_cell(self, LVecBase2dself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase2dself) -> Any: ...
    @overload
    def get_hash(self, LVecBase2dself, doublethreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_x(self, LVecBase2dself) -> Any: ...
    def get_y(self, LVecBase2dself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase2dself) -> Any: ...
    def length(self, LVecBase2dself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase2dself) -> Any: ...
    def normalize(self, constLVecBase2dself) -> Any: ...
    def normalized(self, LVecBase2dself) -> Any: ...
    def output(self, LVecBase2dself, ostreamout) -> Any: ...
    def project(self, LVecBase2dself, constLVecBase2donto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase2dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase2dself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase2dself, doublex, doubley) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase2dself, inti, doublevalue) -> Any: ...
    def set_x(self, constLVecBase2dself, doublevalue) -> Any: ...
    def set_y(self, constLVecBase2dself, doublevalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase2dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase2dself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase2dself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase2dself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase2dself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase2dself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVecBase2f(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    y: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase2fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase2fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase2fself, inti, floatvalue) -> Any: ...
    def add_x(self, constLVecBase2fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase2fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase2fself, constLVecBase2fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase2fself, constLVecBase2fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase2fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase2fself, constLVecBase2fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase2fself, constLVecBase2fother) -> Any: ...
    def dot(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    def fill(self, constLVecBase2fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    def fmin(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def get_cell(self, LVecBase2fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase2fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase2fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_x(self, LVecBase2fself) -> Any: ...
    def get_y(self, LVecBase2fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase2fself) -> Any: ...
    def length(self, LVecBase2fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase2fself) -> Any: ...
    def normalize(self, constLVecBase2fself) -> Any: ...
    def normalized(self, LVecBase2fself) -> Any: ...
    def output(self, LVecBase2fself, ostreamout) -> Any: ...
    def project(self, LVecBase2fself, constLVecBase2fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase2fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase2fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase2fself, floatx, floaty) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase2fself, inti, floatvalue) -> Any: ...
    def set_x(self, constLVecBase2fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase2fself, floatvalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase2fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase2fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase2fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase2fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase2fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase2fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVecBase2i(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    y: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def add_hash(self, LVecBase2iself, inthash) -> Any: ...
    def add_to_cell(self, constLVecBase2iself, inti, intvalue) -> Any: ...
    def add_x(self, constLVecBase2iself, intvalue) -> Any: ...
    def add_y(self, constLVecBase2iself, intvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase2iself, constLVecBase2iother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase2iself, constLVecBase2iother, intthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase2iself, constLVecBase2icopy) -> Any: ...
    @overload
    def assign(self, constLVecBase2iself, intfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, LVecBase2iself, constLVecBase2iother) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase2iself, constLVecBase2iother) -> Any: ...
    def dot(self, LVecBase2iself, constLVecBase2iother) -> Any: ...
    def fill(self, constLVecBase2iself, intfill_value) -> Any: ...
    def fmax(self, LVecBase2iself, constLVecBase2iother) -> Any: ...
    def fmin(self, LVecBase2iself, constLVecBase2iother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def get_cell(self, LVecBase2iself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_hash(self, LVecBase2iself) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_x(self, LVecBase2iself) -> Any: ...
    def get_y(self, LVecBase2iself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase2iself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase2iself) -> Any: ...
    def output(self, LVecBase2iself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase2iself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase2iself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase2iself, intx, inty) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase2iself, inti, intvalue) -> Any: ...
    def set_x(self, constLVecBase2iself, intvalue) -> Any: ...
    def set_y(self, constLVecBase2iself, intvalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase2iself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase2iself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase2iself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase2iself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase2iself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase2iself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...

class LVecBase3(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xz: Incomplete
    y: Incomplete
    yz: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase3fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase3fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase3fself, inti, floatvalue) -> Any: ...
    def add_x(self, constLVecBase3fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase3fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase3fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase3fself, constLVecBase3fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase3fself, constLVecBase3fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase3fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase3fself, constLVecBase3fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase3fself, constLVecBase3fother) -> Any: ...
    def cross(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def crossInto(self, *args, **kwargs): ...
    def cross_into(self, constLVecBase3fself, constLVecBase3fother) -> Any: ...
    def dot(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def fill(self, constLVecBase3fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def fmin(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getStandardizedHpr(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase3fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase3fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase3fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_standardized_hpr(self, LVecBase3fself) -> Any: ...
    def get_x(self, LVecBase3fself) -> Any: ...
    def get_xy(self, LVecBase3fself) -> Any: ...
    def get_xz(self, LVecBase3fself) -> Any: ...
    def get_y(self, LVecBase3fself) -> Any: ...
    def get_yz(self, LVecBase3fself) -> Any: ...
    def get_z(self, LVecBase3fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase3fself) -> Any: ...
    def length(self, LVecBase3fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase3fself) -> Any: ...
    def normalize(self, constLVecBase3fself) -> Any: ...
    def normalized(self, LVecBase3fself) -> Any: ...
    def output(self, LVecBase3fself, ostreamout) -> Any: ...
    def project(self, LVecBase3fself, constLVecBase3fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase3fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase3fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase3fself, floatx, floaty, floatz) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase3fself, inti, floatvalue) -> Any: ...
    def set_x(self, constLVecBase3fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase3fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase3fself, floatvalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase3fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase3fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase3fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase3fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase3fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase3fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVecBase3d(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xz: Incomplete
    y: Incomplete
    yz: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase3dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase3dself, inthash, doublethreshold) -> Any: ...
    def add_to_cell(self, constLVecBase3dself, inti, doublevalue) -> Any: ...
    def add_x(self, constLVecBase3dself, doublevalue) -> Any: ...
    def add_y(self, constLVecBase3dself, doublevalue) -> Any: ...
    def add_z(self, constLVecBase3dself, doublevalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase3dself, constLVecBase3dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase3dself, constLVecBase3dcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase3dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    @overload
    def compare_to(self, LVecBase3dself, constLVecBase3dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase3dself, constLVecBase3dother) -> Any: ...
    def cross(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    def crossInto(self, *args, **kwargs): ...
    def cross_into(self, constLVecBase3dself, constLVecBase3dother) -> Any: ...
    def dot(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    def fill(self, constLVecBase3dself, doublefill_value) -> Any: ...
    def fmax(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    def fmin(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getStandardizedHpr(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase3dself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase3dself) -> Any: ...
    @overload
    def get_hash(self, LVecBase3dself, doublethreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_standardized_hpr(self, LVecBase3dself) -> Any: ...
    def get_x(self, LVecBase3dself) -> Any: ...
    def get_xy(self, LVecBase3dself) -> Any: ...
    def get_xz(self, LVecBase3dself) -> Any: ...
    def get_y(self, LVecBase3dself) -> Any: ...
    def get_yz(self, LVecBase3dself) -> Any: ...
    def get_z(self, LVecBase3dself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase3dself) -> Any: ...
    def length(self, LVecBase3dself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase3dself) -> Any: ...
    def normalize(self, constLVecBase3dself) -> Any: ...
    def normalized(self, LVecBase3dself) -> Any: ...
    def output(self, LVecBase3dself, ostreamout) -> Any: ...
    def project(self, LVecBase3dself, constLVecBase3donto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase3dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase3dself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase3dself, doublex, doubley, doublez) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase3dself, inti, doublevalue) -> Any: ...
    def set_x(self, constLVecBase3dself, doublevalue) -> Any: ...
    def set_y(self, constLVecBase3dself, doublevalue) -> Any: ...
    def set_z(self, constLVecBase3dself, doublevalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase3dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase3dself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase3dself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase3dself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase3dself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase3dself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVecBase3f(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xz: Incomplete
    y: Incomplete
    yz: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase3fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase3fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase3fself, inti, floatvalue) -> Any: ...
    def add_x(self, constLVecBase3fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase3fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase3fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase3fself, constLVecBase3fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase3fself, constLVecBase3fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase3fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase3fself, constLVecBase3fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase3fself, constLVecBase3fother) -> Any: ...
    def cross(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def crossInto(self, *args, **kwargs): ...
    def cross_into(self, constLVecBase3fself, constLVecBase3fother) -> Any: ...
    def dot(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def fill(self, constLVecBase3fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def fmin(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getStandardizedHpr(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase3fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase3fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase3fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_standardized_hpr(self, LVecBase3fself) -> Any: ...
    def get_x(self, LVecBase3fself) -> Any: ...
    def get_xy(self, LVecBase3fself) -> Any: ...
    def get_xz(self, LVecBase3fself) -> Any: ...
    def get_y(self, LVecBase3fself) -> Any: ...
    def get_yz(self, LVecBase3fself) -> Any: ...
    def get_z(self, LVecBase3fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase3fself) -> Any: ...
    def length(self, LVecBase3fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase3fself) -> Any: ...
    def normalize(self, constLVecBase3fself) -> Any: ...
    def normalized(self, LVecBase3fself) -> Any: ...
    def output(self, LVecBase3fself, ostreamout) -> Any: ...
    def project(self, LVecBase3fself, constLVecBase3fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase3fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase3fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase3fself, floatx, floaty, floatz) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase3fself, inti, floatvalue) -> Any: ...
    def set_x(self, constLVecBase3fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase3fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase3fself, floatvalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase3fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase3fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase3fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase3fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase3fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase3fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVecBase3i(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xz: Incomplete
    y: Incomplete
    yz: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    def add_hash(self, LVecBase3iself, inthash) -> Any: ...
    def add_to_cell(self, constLVecBase3iself, inti, intvalue) -> Any: ...
    def add_x(self, constLVecBase3iself, intvalue) -> Any: ...
    def add_y(self, constLVecBase3iself, intvalue) -> Any: ...
    def add_z(self, constLVecBase3iself, intvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase3iself, constLVecBase3iother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase3iself, constLVecBase3iother, intthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase3iself, constLVecBase3icopy) -> Any: ...
    @overload
    def assign(self, constLVecBase3iself, intfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, LVecBase3iself, constLVecBase3iother) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase3iself, constLVecBase3iother) -> Any: ...
    def cross(self, LVecBase3iself, constLVecBase3iother) -> Any: ...
    def crossInto(self, *args, **kwargs): ...
    def cross_into(self, constLVecBase3iself, constLVecBase3iother) -> Any: ...
    def dot(self, LVecBase3iself, constLVecBase3iother) -> Any: ...
    def fill(self, constLVecBase3iself, intfill_value) -> Any: ...
    def fmax(self, LVecBase3iself, constLVecBase3iother) -> Any: ...
    def fmin(self, LVecBase3iself, constLVecBase3iother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase3iself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_hash(self, LVecBase3iself) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_x(self, LVecBase3iself) -> Any: ...
    def get_xy(self, LVecBase3iself) -> Any: ...
    def get_xz(self, LVecBase3iself) -> Any: ...
    def get_y(self, LVecBase3iself) -> Any: ...
    def get_yz(self, LVecBase3iself) -> Any: ...
    def get_z(self, LVecBase3iself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase3iself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase3iself) -> Any: ...
    def output(self, LVecBase3iself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase3iself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase3iself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase3iself, intx, inty, intz) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase3iself, inti, intvalue) -> Any: ...
    def set_x(self, constLVecBase3iself, intvalue) -> Any: ...
    def set_y(self, constLVecBase3iself, intvalue) -> Any: ...
    def set_z(self, constLVecBase3iself, intvalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase3iself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase3iself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase3iself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase3iself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase3iself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase3iself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...

class LVecBase4(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase4fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def add_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, constLVecBase4fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4fself, constLVecBase4fother) -> Any: ...
    def dot(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fill(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fmin(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4fself) -> Any: ...
    def get_x(self, LVecBase4fself) -> Any: ...
    def get_xy(self, LVecBase4fself) -> Any: ...
    def get_xyz(self, LVecBase4fself) -> Any: ...
    def get_y(self, LVecBase4fself) -> Any: ...
    def get_z(self, LVecBase4fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4fself) -> Any: ...
    def length(self, LVecBase4fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4fself) -> Any: ...
    def normalize(self, constLVecBase4fself) -> Any: ...
    def normalized(self, LVecBase4fself) -> Any: ...
    def output(self, LVecBase4fself, ostreamout) -> Any: ...
    def project(self, LVecBase4fself, constLVecBase4fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4fself, floatx, floaty, floatz, floatw) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def set_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVecBase4d(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase4dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase4dself, inthash, doublethreshold) -> Any: ...
    def add_to_cell(self, constLVecBase4dself, inti, doublevalue) -> Any: ...
    def add_w(self, constLVecBase4dself, doublevalue) -> Any: ...
    def add_x(self, constLVecBase4dself, doublevalue) -> Any: ...
    def add_y(self, constLVecBase4dself, doublevalue) -> Any: ...
    def add_z(self, constLVecBase4dself, doublevalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4dself, constLVecBase4dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4dself, constLVecBase4dcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    @overload
    def compare_to(self, LVecBase4dself, constLVecBase4dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4dself, constLVecBase4dother) -> Any: ...
    def dot(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    def fill(self, constLVecBase4dself, doublefill_value) -> Any: ...
    def fmax(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    def fmin(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4dself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase4dself) -> Any: ...
    @overload
    def get_hash(self, LVecBase4dself, doublethreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4dself) -> Any: ...
    def get_x(self, LVecBase4dself) -> Any: ...
    def get_xy(self, LVecBase4dself) -> Any: ...
    def get_xyz(self, LVecBase4dself) -> Any: ...
    def get_y(self, LVecBase4dself) -> Any: ...
    def get_z(self, LVecBase4dself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4dself) -> Any: ...
    def length(self, LVecBase4dself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4dself) -> Any: ...
    def normalize(self, constLVecBase4dself) -> Any: ...
    def normalized(self, LVecBase4dself) -> Any: ...
    def output(self, LVecBase4dself, ostreamout) -> Any: ...
    def project(self, LVecBase4dself, constLVecBase4donto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4dself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4dself, doublex, doubley, doublez, doublew) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4dself, inti, doublevalue) -> Any: ...
    def set_w(self, constLVecBase4dself, doublevalue) -> Any: ...
    def set_x(self, constLVecBase4dself, doublevalue) -> Any: ...
    def set_y(self, constLVecBase4dself, doublevalue) -> Any: ...
    def set_z(self, constLVecBase4dself, doublevalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4dself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4dself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4dself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4dself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4dself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVecBase4f(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase4fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def add_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, constLVecBase4fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4fself, constLVecBase4fother) -> Any: ...
    def dot(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fill(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fmin(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4fself) -> Any: ...
    def get_x(self, LVecBase4fself) -> Any: ...
    def get_xy(self, LVecBase4fself) -> Any: ...
    def get_xyz(self, LVecBase4fself) -> Any: ...
    def get_y(self, LVecBase4fself) -> Any: ...
    def get_z(self, LVecBase4fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4fself) -> Any: ...
    def length(self, LVecBase4fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4fself) -> Any: ...
    def normalize(self, constLVecBase4fself) -> Any: ...
    def normalized(self, LVecBase4fself) -> Any: ...
    def output(self, LVecBase4fself, ostreamout) -> Any: ...
    def project(self, LVecBase4fself, constLVecBase4fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4fself, floatx, floaty, floatz, floatw) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def set_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVecBase4i(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    def add_hash(self, LVecBase4iself, inthash) -> Any: ...
    def add_to_cell(self, constLVecBase4iself, inti, intvalue) -> Any: ...
    def add_w(self, constLVecBase4iself, intvalue) -> Any: ...
    def add_x(self, constLVecBase4iself, intvalue) -> Any: ...
    def add_y(self, constLVecBase4iself, intvalue) -> Any: ...
    def add_z(self, constLVecBase4iself, intvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4iself, constLVecBase4iother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4iself, constLVecBase4iother, intthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4iself, constLVecBase4icopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4iself, intfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, LVecBase4iself, constLVecBase4iother) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4iself, constLVecBase4iother) -> Any: ...
    def dot(self, LVecBase4iself, constLVecBase4iother) -> Any: ...
    def fill(self, constLVecBase4iself, intfill_value) -> Any: ...
    def fmax(self, LVecBase4iself, constLVecBase4iother) -> Any: ...
    def fmin(self, LVecBase4iself, constLVecBase4iother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4iself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_hash(self, LVecBase4iself) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4iself) -> Any: ...
    def get_x(self, LVecBase4iself) -> Any: ...
    def get_xy(self, LVecBase4iself) -> Any: ...
    def get_xyz(self, LVecBase4iself) -> Any: ...
    def get_y(self, LVecBase4iself) -> Any: ...
    def get_z(self, LVecBase4iself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4iself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4iself) -> Any: ...
    def output(self, LVecBase4iself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4iself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4iself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4iself, intx, inty, intz, intw) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4iself, inti, intvalue) -> Any: ...
    def set_w(self, constLVecBase4iself, intvalue) -> Any: ...
    def set_x(self, constLVecBase4iself, intvalue) -> Any: ...
    def set_y(self, constLVecBase4iself, intvalue) -> Any: ...
    def set_z(self, constLVecBase4iself, intvalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4iself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4iself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4iself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4iself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4iself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4iself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...

class LVector2(LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LVector2fself) -> Any: ...
    def project(self, LVector2fself, constLVecBase2fonto) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector2fself, constLVector2fother) -> Any: ...
    def signed_angle_rad(self, LVector2fself, constLVector2fother) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVector2d(LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LVector2dself) -> Any: ...
    def project(self, LVector2dself, constLVecBase2donto) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector2dself, constLVector2dother) -> Any: ...
    def signed_angle_rad(self, LVector2dself, constLVector2dother) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVector2f(LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LVector2fself) -> Any: ...
    def project(self, LVector2fself, constLVecBase2fonto) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector2fself, constLVector2fother) -> Any: ...
    def signed_angle_rad(self, LVector2fself, constLVector2fother) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVector2i(LVecBase2i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...

class LVector3(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LVector3fself, constLVector3fother) -> Any: ...
    def angle_rad(self, LVector3fself, constLVector3fother) -> Any: ...
    @staticmethod
    def back(intcs) -> Any: ...
    def cross(self, LVector3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def down(intcs) -> Any: ...
    @staticmethod
    def forward(intcs) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector3fself) -> Any: ...
    def get_xz(self, LVector3fself) -> Any: ...
    def get_yz(self, LVector3fself) -> Any: ...
    @staticmethod
    def left(intcs) -> Any: ...
    def normalized(self, LVector3fself) -> Any: ...
    def project(self, LVector3fself, constLVecBase3fonto) -> Any: ...
    def relativeAngleDeg(self, *args, **kwargs): ...
    def relativeAngleRad(self, *args, **kwargs): ...
    def relative_angle_deg(self, LVector3fself, constLVector3fother) -> Any: ...
    def relative_angle_rad(self, LVector3fself, constLVector3fother) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def right(intcs) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector3fself, constLVector3fother, constLVector3fref) -> Any: ...
    def signed_angle_rad(self, LVector3fself, constLVector3fother, constLVector3fref) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def up(intcs) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVector3d(LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LVector3dself, constLVector3dother) -> Any: ...
    def angle_rad(self, LVector3dself, constLVector3dother) -> Any: ...
    @staticmethod
    def back(intcs) -> Any: ...
    def cross(self, LVector3dself, constLVecBase3dother) -> Any: ...
    @staticmethod
    def down(intcs) -> Any: ...
    @staticmethod
    def forward(intcs) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector3dself) -> Any: ...
    def get_xz(self, LVector3dself) -> Any: ...
    def get_yz(self, LVector3dself) -> Any: ...
    @staticmethod
    def left(intcs) -> Any: ...
    def normalized(self, LVector3dself) -> Any: ...
    def project(self, LVector3dself, constLVecBase3donto) -> Any: ...
    def relativeAngleDeg(self, *args, **kwargs): ...
    def relativeAngleRad(self, *args, **kwargs): ...
    def relative_angle_deg(self, LVector3dself, constLVector3dother) -> Any: ...
    def relative_angle_rad(self, LVector3dself, constLVector3dother) -> Any: ...
    @staticmethod
    def rfu(doubleright, doublefwd, doubleup, intcs) -> Any: ...
    @staticmethod
    def right(intcs) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector3dself, constLVector3dother, constLVector3dref) -> Any: ...
    def signed_angle_rad(self, LVector3dself, constLVector3dother, constLVector3dref) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def up(intcs) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVector3f(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LVector3fself, constLVector3fother) -> Any: ...
    def angle_rad(self, LVector3fself, constLVector3fother) -> Any: ...
    @staticmethod
    def back(intcs) -> Any: ...
    def cross(self, LVector3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def down(intcs) -> Any: ...
    @staticmethod
    def forward(intcs) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector3fself) -> Any: ...
    def get_xz(self, LVector3fself) -> Any: ...
    def get_yz(self, LVector3fself) -> Any: ...
    @staticmethod
    def left(intcs) -> Any: ...
    def normalized(self, LVector3fself) -> Any: ...
    def project(self, LVector3fself, constLVecBase3fonto) -> Any: ...
    def relativeAngleDeg(self, *args, **kwargs): ...
    def relativeAngleRad(self, *args, **kwargs): ...
    def relative_angle_deg(self, LVector3fself, constLVector3fother) -> Any: ...
    def relative_angle_rad(self, LVector3fself, constLVector3fother) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def right(intcs) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector3fself, constLVector3fother, constLVector3fref) -> Any: ...
    def signed_angle_rad(self, LVector3fself, constLVector3fother, constLVector3fref) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def up(intcs) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVector3i(LVecBase3i):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def back(intcs) -> Any: ...
    def cross(self, LVector3iself, constLVecBase3iother) -> Any: ...
    @staticmethod
    def down(intcs) -> Any: ...
    @staticmethod
    def forward(intcs) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector3iself) -> Any: ...
    def get_xz(self, LVector3iself) -> Any: ...
    def get_yz(self, LVector3iself) -> Any: ...
    @staticmethod
    def left(intcs) -> Any: ...
    @staticmethod
    def rfu(intright, intfwd, intup, intcs) -> Any: ...
    @staticmethod
    def right(intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def up(intcs) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...

class LVector4(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector4fself) -> Any: ...
    def get_xyz(self, LVector4fself) -> Any: ...
    def normalized(self, LVector4fself) -> Any: ...
    def project(self, LVector4fself, constLVecBase4fonto) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVector4d(LVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector4dself) -> Any: ...
    def get_xyz(self, LVector4dself) -> Any: ...
    def normalized(self, LVector4dself) -> Any: ...
    def project(self, LVector4dself, constLVecBase4donto) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVector4f(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector4fself) -> Any: ...
    def get_xyz(self, LVector4fself) -> Any: ...
    def normalized(self, LVector4fself) -> Any: ...
    def project(self, LVector4fself, constLVecBase4fonto) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVector4i(LVecBase4i):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector4iself) -> Any: ...
    def get_xyz(self, LVector4iself) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...

class LVertex(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3fself) -> Any: ...
    def get_xz(self, LPoint3fself) -> Any: ...
    def get_yz(self, LPoint3fself) -> Any: ...
    def normalized(self, LPoint3fself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    def project(self, LPoint3fself, constLVecBase3fonto) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVertexd(LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3dself, constLVecBase3dother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3dself) -> Any: ...
    def get_xz(self, LPoint3dself) -> Any: ...
    def get_yz(self, LPoint3dself) -> Any: ...
    def normalized(self, LPoint3dself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    def project(self, LPoint3dself, constLVecBase3donto) -> Any: ...
    @staticmethod
    def rfu(doubleright, doublefwd, doubleup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class LVertexf(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3fself) -> Any: ...
    def get_xz(self, LPoint3fself) -> Any: ...
    def get_yz(self, LPoint3fself) -> Any: ...
    def normalized(self, LPoint3fself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    def project(self, LPoint3fself, constLVecBase3fonto) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Lens(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    FCAspectRatio: ClassVar[int] = ...
    FCCameraPlane: ClassVar[int] = ...
    FCKeystone: ClassVar[int] = ...
    FCOffAxis: ClassVar[int] = ...
    FCRoll: ClassVar[int] = ...
    FCShear: ClassVar[int] = ...
    FC_aspect_ratio: ClassVar[int] = ...
    FC_camera_plane: ClassVar[int] = ...
    FC_keystone: ClassVar[int] = ...
    FC_off_axis: ClassVar[int] = ...
    FC_roll: ClassVar[int] = ...
    FC_shear: ClassVar[int] = ...
    SCLeft: ClassVar[int] = ...
    SCMono: ClassVar[int] = ...
    SCRight: ClassVar[int] = ...
    SCStereo: ClassVar[int] = ...
    SC_left: ClassVar[int] = ...
    SC_mono: ClassVar[int] = ...
    SC_right: ClassVar[int] = ...
    SC_stereo: ClassVar[int] = ...
    aspect_ratio: Incomplete
    change_event: Incomplete
    convergence_distance: Incomplete
    coordinate_system: Incomplete
    far: Incomplete
    film_offset: Incomplete
    film_size: Incomplete
    focal_length: Incomplete
    fov: Incomplete
    interocular_distance: Incomplete
    keystone: Incomplete
    min_fov: Incomplete
    near: Incomplete
    nodal_point: Incomplete
    view_hpr: Incomplete
    view_mat: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constLensself) -> Any: ...
    def clearCustomFilmMat(self, *args, **kwargs): ...
    def clearKeystone(self, *args, **kwargs): ...
    def clearViewMat(self, *args, **kwargs): ...
    def clear_custom_film_mat(self, constLensself) -> Any: ...
    def clear_keystone(self, constLensself) -> Any: ...
    def clear_view_mat(self, constLensself) -> Any: ...
    @overload
    def extrude(self, Lensself, constLPoint2fpoint2d, LPoint3fnear_point, LPoint3ffar_point) -> Any: ...
    @overload
    def extrude(self, Lensself, constLPoint3fpoint2d, LPoint3fnear_point, LPoint3ffar_point) -> Any: ...
    def extrudeDepth(self, *args, **kwargs): ...
    def extrudeVec(self, *args, **kwargs): ...
    def extrude_depth(self, Lensself, constLPoint3fpoint2d, LPoint3fpoint3d) -> Any: ...
    @overload
    def extrude_vec(self, Lensself, constLPoint3fpoint2d, LVector3fvec3d) -> Any: ...
    @overload
    def extrude_vec(self, Lensself, constLPoint2fpoint2d, LVector3fvec3d) -> Any: ...
    def getAspectRatio(self, *args, **kwargs): ...
    def getChangeEvent(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getConvergenceDistance(self, *args, **kwargs): ...
    def getCoordinateSystem(self, *args, **kwargs): ...
    def getCustomFilmMat(self, *args, **kwargs): ...
    @staticmethod
    def getDefaultFar(*args, **kwargs): ...
    @staticmethod
    def getDefaultNear(*args, **kwargs): ...
    def getFar(self, *args, **kwargs): ...
    def getFilmMat(self, *args, **kwargs): ...
    def getFilmMatInv(self, *args, **kwargs): ...
    def getFilmOffset(self, *args, **kwargs): ...
    def getFilmSize(self, *args, **kwargs): ...
    def getFocalLength(self, *args, **kwargs): ...
    def getFov(self, *args, **kwargs): ...
    def getHfov(self, *args, **kwargs): ...
    def getInterocularDistance(self, *args, **kwargs): ...
    def getKeystone(self, *args, **kwargs): ...
    def getLastChange(self, *args, **kwargs): ...
    def getLensMat(self, *args, **kwargs): ...
    def getLensMatInv(self, *args, **kwargs): ...
    def getMinFov(self, *args, **kwargs): ...
    def getNear(self, *args, **kwargs): ...
    def getNodalPoint(self, *args, **kwargs): ...
    def getProjectionMat(self, *args, **kwargs): ...
    def getProjectionMatInv(self, *args, **kwargs): ...
    def getUpVector(self, *args, **kwargs): ...
    def getVfov(self, *args, **kwargs): ...
    def getViewHpr(self, *args, **kwargs): ...
    def getViewMat(self, *args, **kwargs): ...
    def getViewVector(self, *args, **kwargs): ...
    def get_aspect_ratio(self, Lensself) -> Any: ...
    def get_change_event(self, Lensself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_convergence_distance(self, Lensself) -> Any: ...
    def get_coordinate_system(self, Lensself) -> Any: ...
    def get_custom_film_mat(self, Lensself) -> Any: ...
    @staticmethod
    def get_default_far() -> Any: ...
    @staticmethod
    def get_default_near() -> Any: ...
    def get_far(self, Lensself) -> Any: ...
    def get_film_mat(self, Lensself) -> Any: ...
    def get_film_mat_inv(self, Lensself) -> Any: ...
    def get_film_offset(self, Lensself) -> Any: ...
    def get_film_size(self, Lensself) -> Any: ...
    def get_focal_length(self, Lensself) -> Any: ...
    def get_fov(self, Lensself) -> Any: ...
    def get_hfov(self, Lensself) -> Any: ...
    def get_interocular_distance(self, Lensself) -> Any: ...
    def get_keystone(self, Lensself) -> Any: ...
    def get_last_change(self, Lensself) -> Any: ...
    def get_lens_mat(self, Lensself) -> Any: ...
    def get_lens_mat_inv(self, Lensself) -> Any: ...
    def get_min_fov(self, Lensself) -> Any: ...
    def get_near(self, Lensself) -> Any: ...
    def get_nodal_point(self, Lensself) -> Any: ...
    def get_projection_mat(self, Lensself, intchannel) -> Any: ...
    def get_projection_mat_inv(self, Lensself, intchannel) -> Any: ...
    def get_up_vector(self, Lensself) -> Any: ...
    def get_vfov(self, Lensself) -> Any: ...
    def get_view_hpr(self, Lensself) -> Any: ...
    def get_view_mat(self, Lensself) -> Any: ...
    def get_view_vector(self, Lensself) -> Any: ...
    def isLinear(self, *args, **kwargs): ...
    def isOrthographic(self, *args, **kwargs): ...
    def isPerspective(self, *args, **kwargs): ...
    def is_linear(self, Lensself) -> Any: ...
    def is_orthographic(self, Lensself) -> Any: ...
    def is_perspective(self, Lensself) -> Any: ...
    def makeBounds(self, *args, **kwargs): ...
    def makeCopy(self, *args, **kwargs): ...
    def makeGeometry(self, *args, **kwargs): ...
    def make_bounds(self, Lensself) -> Any: ...
    def make_copy(self, Lensself) -> Any: ...
    def make_geometry(self, constLensself) -> Any: ...
    def output(self, Lensself, ostreamout) -> Any: ...
    @overload
    def project(self, Lensself, constLPoint3fpoint3d, LPoint2fpoint2d) -> Any: ...
    @overload
    def project(self, Lensself, constLPoint3fpoint3d, LPoint3fpoint2d) -> Any: ...
    def recomputeAll(self, *args, **kwargs): ...
    def recompute_all(self, constLensself) -> Any: ...
    def setAspectRatio(self, *args, **kwargs): ...
    def setChangeEvent(self, *args, **kwargs): ...
    def setConvergenceDistance(self, *args, **kwargs): ...
    def setCoordinateSystem(self, *args, **kwargs): ...
    def setCustomFilmMat(self, *args, **kwargs): ...
    def setFar(self, *args, **kwargs): ...
    def setFilmOffset(self, *args, **kwargs): ...
    def setFilmSize(self, *args, **kwargs): ...
    def setFocalLength(self, *args, **kwargs): ...
    def setFov(self, *args, **kwargs): ...
    def setFrustumFromCorners(self, *args, **kwargs): ...
    def setInterocularDistance(self, *args, **kwargs): ...
    def setKeystone(self, *args, **kwargs): ...
    def setMinFov(self, *args, **kwargs): ...
    def setNear(self, *args, **kwargs): ...
    def setNearFar(self, *args, **kwargs): ...
    def setViewHpr(self, *args, **kwargs): ...
    def setViewMat(self, *args, **kwargs): ...
    def setViewVector(self, *args, **kwargs): ...
    def set_aspect_ratio(self, constLensself, floataspect_ratio) -> Any: ...
    def set_change_event(self, constLensself, strevent) -> Any: ...
    def set_convergence_distance(self, constLensself, floatconvergence_distance) -> Any: ...
    def set_coordinate_system(self, constLensself, intcs) -> Any: ...
    def set_custom_film_mat(self, constLensself, constLMatrix4fcustom_film_mat) -> Any: ...
    def set_far(self, constLensself, floatfar_distance) -> Any: ...
    @overload
    def set_film_offset(self, constLensself, constLVecBase2ffilm_offset) -> Any: ...
    @overload
    def set_film_offset(self, constLensself, floatx, floaty) -> Any: ...
    @overload
    def set_film_size(self, constLensself, constLVecBase2ffilm_size) -> Any: ...
    @overload
    def set_film_size(self, constLensself, floatwidth) -> Any: ...
    @overload
    def set_film_size(self, constLensself, floatwidth, floatheight) -> Any: ...
    def set_focal_length(self, constLensself, floatfocal_length) -> Any: ...
    @overload
    def set_fov(self, constLensself, constLVecBase2ffov) -> Any: ...
    @overload
    def set_fov(self, constLensself, floatfov) -> Any: ...
    @overload
    def set_fov(self, constLensself, floathfov, floatvfov) -> Any: ...
    def set_frustum_from_corners(
        self, constLensself, constLVecBase3ful, constLVecBase3fur, constLVecBase3fll, constLVecBase3flr, intflags
    ) -> Any: ...
    def set_interocular_distance(self, constLensself, floatinterocular_distance) -> Any: ...
    def set_keystone(self, constLensself, constLVecBase2fkeystone) -> Any: ...
    def set_min_fov(self, constLensself, floatmin_fov) -> Any: ...
    def set_near(self, constLensself, floatnear_distance) -> Any: ...
    def set_near_far(self, constLensself, floatnear_distance, floatfar_distance) -> Any: ...
    @overload
    def set_view_hpr(self, constLensself, constLVecBase3fview_hpr) -> Any: ...
    @overload
    def set_view_hpr(self, constLensself, floath, floatp, floatr) -> Any: ...
    def set_view_mat(self, constLensself, constLMatrix4fview_mat) -> Any: ...
    @overload
    def set_view_vector(self, constLensself, constLVector3fview_vector, constLVector3fup_vector) -> Any: ...
    @overload
    def set_view_vector(self, constLensself, floatx, floaty, floatz, floati, floatj, floatk) -> Any: ...
    def write(self, Lensself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LensNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def activateLens(self, *args, **kwargs): ...
    def activate_lens(self, constLensNodeself, intindex) -> Any: ...
    def copyLens(self, *args, **kwargs): ...
    @overload
    def copy_lens(self, constLensNodeself, constLenslens) -> Any: ...
    @overload
    def copy_lens(self, constLensNodeself, intindex, constLenslens) -> Any: ...
    def deactivateLens(self, *args, **kwargs): ...
    def deactivate_lens(self, constLensNodeself, intindex) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLens(self, *args, **kwargs): ...
    def getLensActive(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_lens(self, LensNodeself, intindex) -> Any: ...
    def get_lens_active(self, LensNodeself, intindex) -> Any: ...
    def hideFrustum(self, *args, **kwargs): ...
    def hide_frustum(self, constLensNodeself) -> Any: ...
    def isInView(self, *args, **kwargs): ...
    @overload
    def is_in_view(self, constLensNodeself, constLPoint3fpos) -> Any: ...
    @overload
    def is_in_view(self, constLensNodeself, intindex, constLPoint3fpos) -> Any: ...
    def setLens(self, *args, **kwargs): ...
    def setLensActive(self, *args, **kwargs): ...
    @overload
    def set_lens(self, constLensNodeself, Lenslens) -> Any: ...
    @overload
    def set_lens(self, constLensNodeself, intindex, Lenslens) -> Any: ...
    def set_lens_active(self, constLensNodeself, intindex, boolactive) -> Any: ...
    def showFrustum(self, *args, **kwargs): ...
    def show_frustum(self, constLensNodeself) -> Any: ...

class Light(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    color: Incomplete
    color_temperature: Incomplete
    priority: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def asNode(self, *args, **kwargs): ...
    def as_node(self, constLightself) -> Any: ...
    def getAttenuation(self, *args, **kwargs): ...
    def getClassPriority(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColor(self, *args, **kwargs): ...
    def getColorTemperature(self, *args, **kwargs): ...
    def getExponent(self, *args, **kwargs): ...
    def getPriority(self, *args, **kwargs): ...
    def getSpecularColor(self, *args, **kwargs): ...
    def get_attenuation(self, Lightself) -> Any: ...
    def get_class_priority(self, Lightself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_color(self, Lightself) -> Any: ...
    def get_color_temperature(self, Lightself) -> Any: ...
    def get_exponent(self, Lightself) -> Any: ...
    def get_priority(self, Lightself) -> Any: ...
    def get_specular_color(self, Lightself) -> Any: ...
    def hasColorTemperature(self, *args, **kwargs): ...
    def has_color_temperature(self, Lightself) -> Any: ...
    def isAmbientLight(self, *args, **kwargs): ...
    def is_ambient_light(self, Lightself) -> Any: ...
    def setColor(self, *args, **kwargs): ...
    def setColorTemperature(self, *args, **kwargs): ...
    def setPriority(self, *args, **kwargs): ...
    def set_color(self, constLightself, constLVecBase4fcolor) -> Any: ...
    def set_color_temperature(self, constLightself, floattemperature) -> Any: ...
    @overload
    def set_priority(self, constLightself, intpriority) -> Any: ...
    @overload
    def set_priority(self) -> Any: ...

class LightAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    OAdd: ClassVar[int] = ...
    ORemove: ClassVar[int] = ...
    OSet: ClassVar[int] = ...
    O_add: ClassVar[int] = ...
    O_remove: ClassVar[int] = ...
    O_set: ClassVar[int] = ...
    class_slot: Incomplete
    off_lights: Incomplete
    on_lights: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addLight(self, *args, **kwargs): ...
    def addOffLight(self, *args, **kwargs): ...
    def addOnLight(self, *args, **kwargs): ...
    def add_light(self, LightAttribself, Lightlight) -> Any: ...
    def add_off_light(self, LightAttribself, constNodePathlight) -> Any: ...
    def add_on_light(self, LightAttribself, constNodePathlight) -> Any: ...
    def getAmbientContribution(self, *args, **kwargs): ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLight(self, *args, **kwargs): ...
    def getMostImportantLight(self, *args, **kwargs): ...
    def getNumLights(self, *args, **kwargs): ...
    def getNumNonAmbientLights(self, *args, **kwargs): ...
    def getNumOffLights(self, *args, **kwargs): ...
    def getNumOnLights(self, *args, **kwargs): ...
    def getOffLight(self, *args, **kwargs): ...
    def getOffLights(self, *args, **kwargs): ...
    def getOnLight(self, *args, **kwargs): ...
    def getOnLights(self, *args, **kwargs): ...
    def getOperation(self, *args, **kwargs): ...
    def get_ambient_contribution(self, LightAttribself) -> Any: ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_light(self, LightAttribself, intn) -> Any: ...
    def get_most_important_light(self, LightAttribself) -> Any: ...
    def get_num_lights(self, LightAttribself) -> Any: ...
    def get_num_non_ambient_lights(self, LightAttribself) -> Any: ...
    def get_num_off_lights(self, LightAttribself) -> Any: ...
    def get_num_on_lights(self, LightAttribself) -> Any: ...
    def get_off_light(self, LightAttribself, intn) -> Any: ...
    def get_off_lights(self, *args, **kwargs): ...
    def get_on_light(self, LightAttribself, intn) -> Any: ...
    def get_on_lights(self, *args, **kwargs): ...
    def get_operation(self, LightAttribself) -> Any: ...
    def hasAllOff(self, *args, **kwargs): ...
    def hasAnyOnLight(self, *args, **kwargs): ...
    def hasLight(self, *args, **kwargs): ...
    def hasOffLight(self, *args, **kwargs): ...
    def hasOnLight(self, *args, **kwargs): ...
    def has_all_off(self, LightAttribself) -> Any: ...
    def has_any_on_light(self, LightAttribself) -> Any: ...
    def has_light(self, LightAttribself, Lightlight) -> Any: ...
    def has_off_light(self, LightAttribself, constNodePathlight) -> Any: ...
    def has_on_light(self, LightAttribself, constNodePathlight) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def is_identity(self, LightAttribself) -> Any: ...
    @overload
    @staticmethod
    def make() -> Any: ...
    @overload
    @staticmethod
    def make(intop, Lightlight) -> Any: ...
    @overload
    @staticmethod
    def make(intop, Lightlight1, Lightlight2) -> Any: ...
    @overload
    @staticmethod
    def make(intop, Lightlight1, Lightlight2, Lightlight3) -> Any: ...
    @overload
    @staticmethod
    def make(intop, Lightlight1, Lightlight2, Lightlight3, Lightlight4) -> Any: ...
    @staticmethod
    def makeAllOff(*args, **kwargs): ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_all_off() -> Any: ...
    @staticmethod
    def make_default() -> Any: ...
    def removeLight(self, *args, **kwargs): ...
    def removeOffLight(self, *args, **kwargs): ...
    def removeOnLight(self, *args, **kwargs): ...
    def remove_light(self, LightAttribself, Lightlight) -> Any: ...
    def remove_off_light(self, LightAttribself, constNodePathlight) -> Any: ...
    def remove_on_light(self, LightAttribself, constNodePathlight) -> Any: ...
    def replaceOffLight(self, *args, **kwargs): ...
    def replaceOnLight(self, *args, **kwargs): ...
    def replace_off_light(self, LightAttribself, constNodePathsource, constNodePathdest) -> Any: ...
    def replace_on_light(self, LightAttribself, constNodePathsource, constNodePathdest) -> Any: ...

class LightLensNode(Light, Camera):
    DtoolClassDict: ClassVar[dict] = ...
    shadow_buffer_size: Incomplete
    shadow_caster: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getShadowBuffer(self, *args, **kwargs): ...
    def getShadowBufferSize(self, *args, **kwargs): ...
    def getShadowBufferSort(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_shadow_buffer(self, constLightLensNodeself, GraphicsStateGuardianBasegsg) -> Any: ...
    def get_shadow_buffer_size(self, LightLensNodeself) -> Any: ...
    def get_shadow_buffer_sort(self, LightLensNodeself) -> Any: ...
    def hasSpecularColor(self, *args, **kwargs): ...
    def has_specular_color(self, LightLensNodeself) -> Any: ...
    def isShadowCaster(self, *args, **kwargs): ...
    def is_shadow_caster(self, LightLensNodeself) -> Any: ...
    def output(self, LightLensNodeself, ostreamout) -> Any: ...
    def setShadowBufferSize(self, *args, **kwargs): ...
    def setShadowCaster(self, *args, **kwargs): ...
    def set_shadow_buffer_size(self, constLightLensNodeself, constLVecBase2isize) -> Any: ...
    @overload
    def set_shadow_caster(self, constLightLensNodeself, boolcaster) -> Any: ...
    @overload
    def set_shadow_caster(
        self, constLightLensNodeself, boolcaster, intbuffer_xsize, intbuffer_ysize, intsort
    ) -> Any: ...
    def upcastToCamera(self, *args, **kwargs): ...
    def upcastToLight(self, *args, **kwargs): ...
    def upcast_to_Camera(self, constLightLensNodeself) -> Any: ...
    def upcast_to_Light(self, constLightLensNodeself) -> Any: ...
    def write(self, LightLensNodeself, ostreamout, intindent_level) -> Any: ...

class LightMutex(LightMutexDirect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class LightMutexDirect(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def acquire(self, LightMutexDirectself) -> Any: ...
    def clearName(self, *args, **kwargs): ...
    def clear_name(self, constLightMutexDirectself) -> Any: ...
    def debugIsLocked(self, *args, **kwargs): ...
    def debug_is_locked(self, LightMutexDirectself) -> Any: ...
    def getName(self, *args, **kwargs): ...
    def get_name(self, LightMutexDirectself) -> Any: ...
    def hasName(self, *args, **kwargs): ...
    def has_name(self, LightMutexDirectself) -> Any: ...
    def output(self, LightMutexDirectself, ostreamout) -> Any: ...
    def release(self, LightMutexDirectself) -> Any: ...
    def setName(self, *args, **kwargs): ...
    def set_name(self, constLightMutexDirectself, strname) -> Any: ...

class LightNode(Light, PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def output(self, LightNodeself, ostreamout) -> Any: ...
    def upcastToLight(self, *args, **kwargs): ...
    def upcastToPandaNode(self, *args, **kwargs): ...
    def upcast_to_Light(self, constLightNodeself) -> Any: ...
    def upcast_to_PandaNode(self, constLightNodeself) -> Any: ...
    def write(self, LightNodeself, ostreamout, intindent_level) -> Any: ...

class LightRampAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    LRTDefault: ClassVar[int] = ...
    LRTDoubleThreshold: ClassVar[int] = ...
    LRTHdr0: ClassVar[int] = ...
    LRTHdr1: ClassVar[int] = ...
    LRTHdr2: ClassVar[int] = ...
    LRTIdentity: ClassVar[int] = ...
    LRTSingleThreshold: ClassVar[int] = ...
    LRT_default: ClassVar[int] = ...
    LRT_double_threshold: ClassVar[int] = ...
    LRT_hdr0: ClassVar[int] = ...
    LRT_hdr1: ClassVar[int] = ...
    LRT_hdr2: ClassVar[int] = ...
    LRT_identity: ClassVar[int] = ...
    LRT_single_threshold: ClassVar[int] = ...
    class_slot: Incomplete
    mode: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLevel(self, *args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    def getThreshold(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_level(self, LightRampAttribself, intn) -> Any: ...
    def get_mode(self, LightRampAttribself) -> Any: ...
    def get_threshold(self, LightRampAttribself, intn) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeDoubleThreshold(*args, **kwargs): ...
    @staticmethod
    def makeHdr0(*args, **kwargs): ...
    @staticmethod
    def makeHdr1(*args, **kwargs): ...
    @staticmethod
    def makeHdr2(*args, **kwargs): ...
    @staticmethod
    def makeIdentity(*args, **kwargs): ...
    @staticmethod
    def makeSingleThreshold(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_double_threshold(floatthresh0, floatlev0, floatthresh1, floatlev1) -> Any: ...
    @staticmethod
    def make_hdr0() -> Any: ...
    @staticmethod
    def make_hdr1() -> Any: ...
    @staticmethod
    def make_hdr2() -> Any: ...
    @staticmethod
    def make_identity() -> Any: ...
    @staticmethod
    def make_single_threshold(floatthresh0, floatlev0) -> Any: ...

class LightReMutex(LightReMutexDirect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class LightReMutexDirect(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def acquire(self, LightReMutexDirectself) -> Any: ...
    @overload
    def acquire(self, LightReMutexDirectself, Threadcurrent_thread) -> Any: ...
    @overload
    def acquire(self) -> Any: ...
    def clearName(self, *args, **kwargs): ...
    def clear_name(self, constLightReMutexDirectself) -> Any: ...
    def debugIsLocked(self, *args, **kwargs): ...
    def debug_is_locked(self, LightReMutexDirectself) -> Any: ...
    def elevateLock(self, *args, **kwargs): ...
    def elevate_lock(self, LightReMutexDirectself) -> Any: ...
    def getName(self, *args, **kwargs): ...
    def get_name(self, LightReMutexDirectself) -> Any: ...
    def hasName(self, *args, **kwargs): ...
    def has_name(self, LightReMutexDirectself) -> Any: ...
    def output(self, LightReMutexDirectself, ostreamout) -> Any: ...
    def release(self, LightReMutexDirectself) -> Any: ...
    def setName(self, *args, **kwargs): ...
    def set_name(self, constLightReMutexDirectself, strname) -> Any: ...

class LineSegs(Namable):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def create(self, constLineSegsself) -> Any: ...
    @overload
    def create(self, constLineSegsself, GeomNodeprevious, booldynamic) -> Any: ...
    @overload
    def create(self, constLineSegsself, booldynamic) -> Any: ...
    def drawTo(self, *args, **kwargs): ...
    @overload
    def draw_to(self, constLineSegsself, constLVecBase3fv) -> Any: ...
    @overload
    def draw_to(self, constLineSegsself, floatx, floaty, floatz) -> Any: ...
    def getCurrentPosition(self, *args, **kwargs): ...
    def getNumVertices(self, *args, **kwargs): ...
    def getVertex(self, *args, **kwargs): ...
    def getVertexColor(self, *args, **kwargs): ...
    def getVertexColors(self, *args, **kwargs): ...
    def getVertices(self, *args, **kwargs): ...
    def get_current_position(self, constLineSegsself) -> Any: ...
    def get_num_vertices(self, LineSegsself) -> Any: ...
    def get_vertex(self, LineSegsself, intn) -> Any: ...
    def get_vertex_color(self, LineSegsself, intvertex) -> Any: ...
    def get_vertex_colors(self, *args, **kwargs): ...
    def get_vertices(self, *args, **kwargs): ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, constLineSegsself) -> Any: ...
    def moveTo(self, *args, **kwargs): ...
    @overload
    def move_to(self, constLineSegsself, constLVecBase3fv) -> Any: ...
    @overload
    def move_to(self, constLineSegsself, floatx, floaty, floatz) -> Any: ...
    @overload
    def move_to(self) -> Any: ...
    @overload
    def move_to(self) -> Any: ...
    def reset(self, constLineSegsself) -> Any: ...
    def setColor(self, *args, **kwargs): ...
    def setThickness(self, *args, **kwargs): ...
    def setVertex(self, *args, **kwargs): ...
    def setVertexColor(self, *args, **kwargs): ...
    @overload
    def set_color(self, constLineSegsself, constLVecBase4fcolor) -> Any: ...
    @overload
    def set_color(self, constLineSegsself, floatr, floatg, floatb, floata) -> Any: ...
    def set_thickness(self, constLineSegsself, floatthick) -> Any: ...
    @overload
    def set_vertex(self, constLineSegsself, intn, constLPoint3fvert) -> Any: ...
    @overload
    def set_vertex(self, constLineSegsself, intvertex, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_vertex_color(self, constLineSegsself, intvertex, constLVecBase4fc) -> Any: ...
    @overload
    def set_vertex_color(self, constLineSegsself, intvertex, floatr, floatg, floatb, floata) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LineStream(ostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getLine(self, *args, **kwargs): ...
    def get_line(self, constLineStreamself) -> Any: ...
    def hasNewline(self, *args, **kwargs): ...
    def has_newline(self, LineStreamself) -> Any: ...
    def isTextAvailable(self, *args, **kwargs): ...
    def is_text_available(self, LineStreamself) -> Any: ...

class LinuxJoystickDevice(InputDevice):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def checkEvents(self, *args, **kwargs): ...
    def check_events(self, LinuxJoystickDeviceself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class Loader(TypedReferenceCount, Namable):
    class Results(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def assign(self, constResultsself, constResultscopy) -> Any: ...
        def clear(self, constResultsself) -> Any: ...
        def getFile(self, *args, **kwargs): ...
        def getFileType(self, *args, **kwargs): ...
        def getFileTypes(self, *args, **kwargs): ...
        def getFiles(self, *args, **kwargs): ...
        def getNumFiles(self, *args, **kwargs): ...
        def get_file(self, Resultsself, intn) -> Any: ...
        def get_file_type(self, Resultsself, intn) -> Any: ...
        def get_file_types(self, *args, **kwargs): ...
        def get_files(self, *args, **kwargs): ...
        def get_num_files(self, Resultsself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...

    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getTaskChain(self, *args, **kwargs): ...
    def getTaskManager(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_task_chain(self, Loaderself) -> Any: ...
    def get_task_manager(self, Loaderself) -> Any: ...
    def loadAsync(self, *args, **kwargs): ...
    def loadBamStream(self, *args, **kwargs): ...
    def loadSync(self, *args, **kwargs): ...
    def load_async(self, constLoaderself, AsyncTaskrequest) -> Any: ...
    def load_bam_stream(self, constLoaderself, istreamin) -> Any: ...
    def load_sync(self, Loaderself, constFilenamefilename, constLoaderOptionsoptions) -> Any: ...
    def makeAsyncRequest(self, *args, **kwargs): ...
    def makeAsyncSaveRequest(self, *args, **kwargs): ...
    def make_async_request(self, constLoaderself, constFilenamefilename, constLoaderOptionsoptions) -> Any: ...
    def make_async_save_request(
        self, constLoaderself, constFilenamefilename, constLoaderOptionsoptions, PandaNodenode
    ) -> Any: ...
    def output(self, Loaderself, ostreamout) -> Any: ...
    def remove(self, constLoaderself, AsyncTasktask) -> Any: ...
    def saveAsync(self, *args, **kwargs): ...
    def saveSync(self, *args, **kwargs): ...
    def save_async(self, constLoaderself, AsyncTaskrequest) -> Any: ...
    def save_sync(self, Loaderself, constFilenamefilename, constLoaderOptionsoptions, PandaNodenode) -> Any: ...
    def setTaskChain(self, *args, **kwargs): ...
    def setTaskManager(self, *args, **kwargs): ...
    def set_task_chain(self, constLoaderself, strtask_chain) -> Any: ...
    def set_task_manager(self, constLoaderself, AsyncTaskManagertask_manager) -> Any: ...
    def stopThreads(self, *args, **kwargs): ...
    def stop_threads(self, constLoaderself) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constLoaderself) -> Any: ...
    def upcast_to_TypedReferenceCount(self, constLoaderself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LoaderFileType(TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAdditionalExtensions(self, *args, **kwargs): ...
    def getAllowDiskCache(self, *args, **kwargs): ...
    def getAllowRamCache(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getExtension(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def get_additional_extensions(self, LoaderFileTypeself) -> Any: ...
    def get_allow_disk_cache(self, LoaderFileTypeself, constLoaderOptionsoptions) -> Any: ...
    def get_allow_ram_cache(self, LoaderFileTypeself, constLoaderOptionsoptions) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_extension(self, LoaderFileTypeself) -> Any: ...
    def get_name(self, LoaderFileTypeself) -> Any: ...
    def supportsCompressed(self, *args, **kwargs): ...
    def supportsLoad(self, *args, **kwargs): ...
    def supportsSave(self, *args, **kwargs): ...
    def supports_compressed(self, LoaderFileTypeself) -> Any: ...
    def supports_load(self, LoaderFileTypeself) -> Any: ...
    def supports_save(self, LoaderFileTypeself) -> Any: ...

class LoaderFileTypeRegistry(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    types: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getNumTypes(self, *args, **kwargs): ...
    def getType(self, *args, **kwargs): ...
    def getTypeFromExtension(self, *args, **kwargs): ...
    def getTypes(self, *args, **kwargs): ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_num_types(self, LoaderFileTypeRegistryself) -> Any: ...
    def get_type(self, LoaderFileTypeRegistryself, intn) -> Any: ...
    def get_type_from_extension(self, constLoaderFileTypeRegistryself, strextension) -> Any: ...
    def get_types(self, *args, **kwargs): ...
    def registerDeferredType(self, *args, **kwargs): ...
    def registerType(self, *args, **kwargs): ...
    def register_deferred_type(self, constLoaderFileTypeRegistryself, objectentry_point) -> Any: ...
    def register_type(self, constLoaderFileTypeRegistryself, objecttype) -> Any: ...
    def unregisterType(self, *args, **kwargs): ...
    def unregister_type(self, constLoaderFileTypeRegistryself, objecttype) -> Any: ...
    def write(self, LoaderFileTypeRegistryself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __reduce__(self, LoaderFileTypeRegistryself) -> Any: ...

class LoaderOptions(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    LFAllowInstance: ClassVar[int] = ...
    LFCacheOnly: ClassVar[int] = ...
    LFConvertAnim: ClassVar[int] = ...
    LFConvertChannels: ClassVar[int] = ...
    LFConvertSkeleton: ClassVar[int] = ...
    LFNoCache: ClassVar[int] = ...
    LFNoDiskCache: ClassVar[int] = ...
    LFNoRamCache: ClassVar[int] = ...
    LFReportErrors: ClassVar[int] = ...
    LFSearch: ClassVar[int] = ...
    LF_allow_instance: ClassVar[int] = ...
    LF_cache_only: ClassVar[int] = ...
    LF_convert_anim: ClassVar[int] = ...
    LF_convert_channels: ClassVar[int] = ...
    LF_convert_skeleton: ClassVar[int] = ...
    LF_no_cache: ClassVar[int] = ...
    LF_no_disk_cache: ClassVar[int] = ...
    LF_no_ram_cache: ClassVar[int] = ...
    LF_report_errors: ClassVar[int] = ...
    LF_search: ClassVar[int] = ...
    TFAllow1d: ClassVar[int] = ...
    TFAllowCompression: ClassVar[int] = ...
    TFFloat: ClassVar[int] = ...
    TFForceSrgb: ClassVar[int] = ...
    TFGenerateMipmaps: ClassVar[int] = ...
    TFInteger: ClassVar[int] = ...
    TFMultiview: ClassVar[int] = ...
    TFNoFilters: ClassVar[int] = ...
    TFPreload: ClassVar[int] = ...
    TFPreloadSimple: ClassVar[int] = ...
    TF_allow_1d: ClassVar[int] = ...
    TF_allow_compression: ClassVar[int] = ...
    TF_float: ClassVar[int] = ...
    TF_force_srgb: ClassVar[int] = ...
    TF_generate_mipmaps: ClassVar[int] = ...
    TF_integer: ClassVar[int] = ...
    TF_multiview: ClassVar[int] = ...
    TF_no_filters: ClassVar[int] = ...
    TF_preload: ClassVar[int] = ...
    TF_preload_simple: ClassVar[int] = ...
    auto_texture_scale: Incomplete
    flags: Incomplete
    texture_flags: Incomplete
    texture_num_views: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getAutoTextureScale(self, *args, **kwargs): ...
    def getFlags(self, *args, **kwargs): ...
    def getTextureCompression(self, *args, **kwargs): ...
    def getTextureFlags(self, *args, **kwargs): ...
    def getTextureFormat(self, *args, **kwargs): ...
    def getTextureNumViews(self, *args, **kwargs): ...
    def getTextureQuality(self, *args, **kwargs): ...
    def get_auto_texture_scale(self, LoaderOptionsself) -> Any: ...
    def get_flags(self, LoaderOptionsself) -> Any: ...
    def get_texture_compression(self, LoaderOptionsself) -> Any: ...
    def get_texture_flags(self, LoaderOptionsself) -> Any: ...
    def get_texture_format(self, LoaderOptionsself) -> Any: ...
    def get_texture_num_views(self, LoaderOptionsself) -> Any: ...
    def get_texture_quality(self, LoaderOptionsself) -> Any: ...
    def output(self, LoaderOptionsself, ostreamout) -> Any: ...
    def setAutoTextureScale(self, *args, **kwargs): ...
    def setFlags(self, *args, **kwargs): ...
    def setTextureCompression(self, *args, **kwargs): ...
    def setTextureFlags(self, *args, **kwargs): ...
    def setTextureFormat(self, *args, **kwargs): ...
    def setTextureNumViews(self, *args, **kwargs): ...
    def setTextureQuality(self, *args, **kwargs): ...
    def set_auto_texture_scale(self, constLoaderOptionsself, intscale) -> Any: ...
    def set_flags(self, constLoaderOptionsself, intflags) -> Any: ...
    def set_texture_compression(self, constLoaderOptionsself, intcompress) -> Any: ...
    def set_texture_flags(self, constLoaderOptionsself, intflags) -> Any: ...
    def set_texture_format(self, constLoaderOptionsself, intformat) -> Any: ...
    def set_texture_num_views(self, constLoaderOptionsself, intnum_views) -> Any: ...
    def set_texture_quality(self, constLoaderOptionsself, intquality) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LogicOpAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    OAnd: ClassVar[int] = ...
    OAndInverted: ClassVar[int] = ...
    OAndReverse: ClassVar[int] = ...
    OClear: ClassVar[int] = ...
    OCopy: ClassVar[int] = ...
    OCopyInverted: ClassVar[int] = ...
    OEquivalent: ClassVar[int] = ...
    OInvert: ClassVar[int] = ...
    ONand: ClassVar[int] = ...
    ONone: ClassVar[int] = ...
    ONoop: ClassVar[int] = ...
    ONor: ClassVar[int] = ...
    OOr: ClassVar[int] = ...
    OOrInverted: ClassVar[int] = ...
    OOrReverse: ClassVar[int] = ...
    OSet: ClassVar[int] = ...
    OXor: ClassVar[int] = ...
    O_and: ClassVar[int] = ...
    O_and_inverted: ClassVar[int] = ...
    O_and_reverse: ClassVar[int] = ...
    O_clear: ClassVar[int] = ...
    O_copy: ClassVar[int] = ...
    O_copy_inverted: ClassVar[int] = ...
    O_equivalent: ClassVar[int] = ...
    O_invert: ClassVar[int] = ...
    O_nand: ClassVar[int] = ...
    O_none: ClassVar[int] = ...
    O_noop: ClassVar[int] = ...
    O_nor: ClassVar[int] = ...
    O_or: ClassVar[int] = ...
    O_or_inverted: ClassVar[int] = ...
    O_or_reverse: ClassVar[int] = ...
    O_set: ClassVar[int] = ...
    O_xor: ClassVar[int] = ...
    class_slot: Incomplete
    operation: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getOperation(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_operation(self, LogicOpAttribself) -> Any: ...
    @staticmethod
    def make(intop) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeOff(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_off() -> Any: ...

class MainThread(Thread):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class Mat3(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix3fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix3fself, inthash, floatthreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix3fself, constLMatrix3fother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix3fself, constLMatrix3fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    @overload
    def assign(self, constLMatrix3fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix3fself, constLMatrix3fother) -> Any: ...
    @overload
    def compare_to(self, LMatrix3fself, constLMatrix3fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def determinant(self, LMatrix3fself) -> Any: ...
    def fill(self, constLMatrix3fself, floatfill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol2(self, *args, **kwargs): ...
    def getCol2s(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow2(self, *args, **kwargs): ...
    def getRow2s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def get_cell(self, LMatrix3fself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix3fself, intcol) -> Any: ...
    def get_col2(self, LMatrix3fself, intcol) -> Any: ...
    def get_col2s(self, *args, **kwargs): ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix3fself) -> Any: ...
    @overload
    def get_hash(self, LMatrix3fself, floatthreshold) -> Any: ...
    def get_num_components(self, LMatrix3fself) -> Any: ...
    @overload
    def get_row(self, LMatrix3fself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix3fself, LVecBase3fresult_vec, introw) -> Any: ...
    def get_row2(self, LMatrix3fself, introw) -> Any: ...
    def get_row2s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invertTransposeFrom(self, *args, **kwargs): ...
    def invert_from(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    def invert_in_place(self, constLMatrix3fself) -> Any: ...
    @overload
    def invert_transpose_from(self, constLMatrix3fself, constLMatrix4fother) -> Any: ...
    @overload
    def invert_transpose_from(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix3fself) -> Any: ...
    def is_nan(self, LMatrix3fself) -> Any: ...
    def multiply(self, constLMatrix3fself, constLMatrix3fother1, constLMatrix3fother2) -> Any: ...
    def output(self, LMatrix3fself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix3fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix3fself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @overload
    @staticmethod
    def rotate_mat(floatangle) -> Any: ...
    @overload
    @staticmethod
    def rotate_mat(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase2fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy, floatsz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(floatsx, floatsy, floatsz, floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix3fself,
        floate00,
        floate01,
        floate02,
        floate10,
        floate11,
        floate12,
        floate20,
        floate21,
        floate22,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix3fself, introw, intcol, floatvalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix3fself, intcol, constLVecBase2fv) -> Any: ...
    @overload
    def set_col(self, constLMatrix3fself, intcol, constLVecBase3fv) -> Any: ...
    @overload
    def set_rotate_mat(self, constLMatrix3fself, floatangle) -> Any: ...
    @overload
    def set_rotate_mat(self, constLMatrix3fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix3fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix3fself, introw, constLVecBase2fv) -> Any: ...
    @overload
    def set_row(self, constLMatrix3fself, introw, constLVecBase3fv) -> Any: ...
    @overload
    def set_scale_mat(self, constLMatrix3fself, constLVecBase2fscale) -> Any: ...
    @overload
    def set_scale_mat(self, constLMatrix3fself, constLVecBase3fscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix3fself, constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix3fself, constLVecBase3fshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix3fself, constLVecBase2ftrans) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase2ftrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(floattx, floatty) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    def transpose_in_place(self, constLMatrix3fself) -> Any: ...
    def write(self, LMatrix3fself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix3fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix3fself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix3fself, constLVecBase3fv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix3fself, LVecBase3fv) -> Any: ...
    def xform_point(self, LMatrix3fself, constLVecBase2fv) -> Any: ...
    def xform_point_in_place(self, LMatrix3fself, LVecBase2fv) -> Any: ...
    @overload
    def xform_vec(self, LMatrix3fself, constLVecBase2fv) -> Any: ...
    @overload
    def xform_vec(self, LMatrix3fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general(self, LMatrix3fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix3fself, LVecBase3fv) -> Any: ...
    @overload
    def xform_vec_in_place(self, LMatrix3fself, LVecBase2fv) -> Any: ...
    @overload
    def xform_vec_in_place(self, LMatrix3fself, LVecBase3fv) -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix3fself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class Mat3D(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix3dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix3dself, inthash, doublethreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix3dself, constLMatrix3dother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix3dself, constLMatrix3dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix3dself, constLMatrix3dother) -> Any: ...
    @overload
    def assign(self, constLMatrix3dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix3dself, constLMatrix3dother) -> Any: ...
    @overload
    def compare_to(self, LMatrix3dself, constLMatrix3dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix3dself, constLMatrix3dother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def determinant(self, LMatrix3dself) -> Any: ...
    def fill(self, constLMatrix3dself, doublefill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol2(self, *args, **kwargs): ...
    def getCol2s(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow2(self, *args, **kwargs): ...
    def getRow2s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def get_cell(self, LMatrix3dself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix3dself, intcol) -> Any: ...
    def get_col2(self, LMatrix3dself, intcol) -> Any: ...
    def get_col2s(self, *args, **kwargs): ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix3dself) -> Any: ...
    @overload
    def get_hash(self, LMatrix3dself, doublethreshold) -> Any: ...
    def get_num_components(self, LMatrix3dself) -> Any: ...
    @overload
    def get_row(self, LMatrix3dself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix3dself, LVecBase3dresult_vec, introw) -> Any: ...
    def get_row2(self, LMatrix3dself, introw) -> Any: ...
    def get_row2s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invertTransposeFrom(self, *args, **kwargs): ...
    def invert_from(self, constLMatrix3dself, constLMatrix3dother) -> Any: ...
    def invert_in_place(self, constLMatrix3dself) -> Any: ...
    @overload
    def invert_transpose_from(self, constLMatrix3dself, constLMatrix4dother) -> Any: ...
    @overload
    def invert_transpose_from(self, constLMatrix3dself, constLMatrix3dother) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix3dself) -> Any: ...
    def is_nan(self, LMatrix3dself) -> Any: ...
    def multiply(self, constLMatrix3dself, constLMatrix3dother1, constLMatrix3dother2) -> Any: ...
    def output(self, LMatrix3dself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix3dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix3dself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @overload
    @staticmethod
    def rotate_mat(doubleangle) -> Any: ...
    @overload
    @staticmethod
    def rotate_mat(doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase2dscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3dscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(doublesx, doublesy) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(doublesx, doublesy, doublesz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3dscale, constLVecBase3dshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3dscale, constLVecBase3dshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(doublesx, doublesy, doublesz, doubleshxy, doubleshxz, doubleshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix3dself,
        doublee00,
        doublee01,
        doublee02,
        doublee10,
        doublee11,
        doublee12,
        doublee20,
        doublee21,
        doublee22,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix3dself, introw, intcol, doublevalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix3dself, intcol, constLVecBase2dv) -> Any: ...
    @overload
    def set_col(self, constLMatrix3dself, intcol, constLVecBase3dv) -> Any: ...
    @overload
    def set_rotate_mat(self, constLMatrix3dself, doubleangle) -> Any: ...
    @overload
    def set_rotate_mat(self, constLMatrix3dself, doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix3dself, doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix3dself, introw, constLVecBase2dv) -> Any: ...
    @overload
    def set_row(self, constLMatrix3dself, introw, constLVecBase3dv) -> Any: ...
    @overload
    def set_scale_mat(self, constLMatrix3dself, constLVecBase2dscale) -> Any: ...
    @overload
    def set_scale_mat(self, constLMatrix3dself, constLVecBase3dscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix3dself, constLVecBase3dscale, constLVecBase3dshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix3dself, constLVecBase3dshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix3dself, constLVecBase2dtrans) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3dshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3dshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(doubleshxy, doubleshxz, doubleshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase2dtrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(doubletx, doublety) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix3dself, constLMatrix3dother) -> Any: ...
    def transpose_in_place(self, constLMatrix3dself) -> Any: ...
    def write(self, LMatrix3dself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix3dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix3dself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix3dself, constLVecBase3dv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix3dself, LVecBase3dv) -> Any: ...
    def xform_point(self, LMatrix3dself, constLVecBase2dv) -> Any: ...
    def xform_point_in_place(self, LMatrix3dself, LVecBase2dv) -> Any: ...
    @overload
    def xform_vec(self, LMatrix3dself, constLVecBase2dv) -> Any: ...
    @overload
    def xform_vec(self, LMatrix3dself, constLVecBase3dv) -> Any: ...
    def xform_vec_general(self, LMatrix3dself, constLVecBase3dv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix3dself, LVecBase3dv) -> Any: ...
    @overload
    def xform_vec_in_place(self, LMatrix3dself, LVecBase2dv) -> Any: ...
    @overload
    def xform_vec_in_place(self, LMatrix3dself, LVecBase3dv) -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix3dself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class Mat3F(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix3fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix3fself, inthash, floatthreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix3fself, constLMatrix3fother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix3fself, constLMatrix3fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    @overload
    def assign(self, constLMatrix3fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix3fself, constLMatrix3fother) -> Any: ...
    @overload
    def compare_to(self, LMatrix3fself, constLMatrix3fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def determinant(self, LMatrix3fself) -> Any: ...
    def fill(self, constLMatrix3fself, floatfill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol2(self, *args, **kwargs): ...
    def getCol2s(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow2(self, *args, **kwargs): ...
    def getRow2s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def get_cell(self, LMatrix3fself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix3fself, intcol) -> Any: ...
    def get_col2(self, LMatrix3fself, intcol) -> Any: ...
    def get_col2s(self, *args, **kwargs): ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix3fself) -> Any: ...
    @overload
    def get_hash(self, LMatrix3fself, floatthreshold) -> Any: ...
    def get_num_components(self, LMatrix3fself) -> Any: ...
    @overload
    def get_row(self, LMatrix3fself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix3fself, LVecBase3fresult_vec, introw) -> Any: ...
    def get_row2(self, LMatrix3fself, introw) -> Any: ...
    def get_row2s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invertTransposeFrom(self, *args, **kwargs): ...
    def invert_from(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    def invert_in_place(self, constLMatrix3fself) -> Any: ...
    @overload
    def invert_transpose_from(self, constLMatrix3fself, constLMatrix4fother) -> Any: ...
    @overload
    def invert_transpose_from(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix3fself) -> Any: ...
    def is_nan(self, LMatrix3fself) -> Any: ...
    def multiply(self, constLMatrix3fself, constLMatrix3fother1, constLMatrix3fother2) -> Any: ...
    def output(self, LMatrix3fself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix3fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix3fself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @overload
    @staticmethod
    def rotate_mat(floatangle) -> Any: ...
    @overload
    @staticmethod
    def rotate_mat(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase2fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy, floatsz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(floatsx, floatsy, floatsz, floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix3fself,
        floate00,
        floate01,
        floate02,
        floate10,
        floate11,
        floate12,
        floate20,
        floate21,
        floate22,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix3fself, introw, intcol, floatvalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix3fself, intcol, constLVecBase2fv) -> Any: ...
    @overload
    def set_col(self, constLMatrix3fself, intcol, constLVecBase3fv) -> Any: ...
    @overload
    def set_rotate_mat(self, constLMatrix3fself, floatangle) -> Any: ...
    @overload
    def set_rotate_mat(self, constLMatrix3fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix3fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix3fself, introw, constLVecBase2fv) -> Any: ...
    @overload
    def set_row(self, constLMatrix3fself, introw, constLVecBase3fv) -> Any: ...
    @overload
    def set_scale_mat(self, constLMatrix3fself, constLVecBase2fscale) -> Any: ...
    @overload
    def set_scale_mat(self, constLMatrix3fself, constLVecBase3fscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix3fself, constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix3fself, constLVecBase3fshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix3fself, constLVecBase2ftrans) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase2ftrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(floattx, floatty) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix3fself, constLMatrix3fother) -> Any: ...
    def transpose_in_place(self, constLMatrix3fself) -> Any: ...
    def write(self, LMatrix3fself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix3fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix3fself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix3fself, constLVecBase3fv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix3fself, LVecBase3fv) -> Any: ...
    def xform_point(self, LMatrix3fself, constLVecBase2fv) -> Any: ...
    def xform_point_in_place(self, LMatrix3fself, LVecBase2fv) -> Any: ...
    @overload
    def xform_vec(self, LMatrix3fself, constLVecBase2fv) -> Any: ...
    @overload
    def xform_vec(self, LMatrix3fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general(self, LMatrix3fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix3fself, LVecBase3fv) -> Any: ...
    @overload
    def xform_vec_in_place(self, LMatrix3fself, LVecBase2fv) -> Any: ...
    @overload
    def xform_vec_in_place(self, LMatrix3fself, LVecBase3fv) -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix3fself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class Mat4(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def accumulate(self, constLMatrix4fself, constLMatrix4fother, floatweight) -> Any: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix4fself, inthash, floatthreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix4fself, constLMatrix4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def assign(self, constLMatrix4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def compare_to(self, LMatrix4fself, constLMatrix4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def fill(self, constLMatrix4fself, floatfill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol3(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow3(self, *args, **kwargs): ...
    def getRow3s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def getUpper3(self, *args, **kwargs): ...
    def get_cell(self, LMatrix4fself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix4fself, intcol) -> Any: ...
    def get_col3(self, LMatrix4fself, intcol) -> Any: ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix4fself) -> Any: ...
    @overload
    def get_hash(self, LMatrix4fself, floatthreshold) -> Any: ...
    def get_num_components(self, LMatrix4fself) -> Any: ...
    @overload
    def get_row(self, LMatrix4fself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix4fself, LVecBase4fresult_vec, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4fself, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4fself, LVecBase3fresult_vec, introw) -> Any: ...
    def get_row3s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    def get_upper_3(self, LMatrix4fself) -> Any: ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertAffineFrom(self, *args, **kwargs): ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_affine_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def invert_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def invert_in_place(self, constLMatrix4fself) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix4fself) -> Any: ...
    def is_nan(self, LMatrix4fself) -> Any: ...
    def multiply(self, constLMatrix4fself, constLMatrix4fother1, constLMatrix4fother2) -> Any: ...
    @staticmethod
    def onesMat(*args, **kwargs): ...
    @staticmethod
    def ones_mat() -> Any: ...
    def output(self, LMatrix4fself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix4fself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @staticmethod
    def rotate_mat(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy, floatsz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(floatsx, floatsy, floatsz, floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix4fself,
        floate00,
        floate01,
        floate02,
        floate03,
        floate10,
        floate11,
        floate12,
        floate13,
        floate20,
        floate21,
        floate22,
        floate23,
        floate30,
        floate31,
        floate32,
        floate33,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def setUpper3(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix4fself, introw, intcol, floatvalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix4fself, intcol, constLVecBase4fv) -> Any: ...
    @overload
    def set_col(self, constLMatrix4fself, intcol, constLVecBase3fv) -> Any: ...
    def set_rotate_mat(self, constLMatrix4fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix4fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix4fself, introw, constLVecBase4fv) -> Any: ...
    @overload
    def set_row(self, constLMatrix4fself, introw, constLVecBase3fv) -> Any: ...
    def set_scale_mat(self, constLMatrix4fself, constLVecBase3fscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix4fself, constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix4fself, constLVecBase3fshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix4fself, constLVecBase3ftrans) -> Any: ...
    def set_upper_3(self, constLMatrix4fself, constLMatrix3fupper3) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase3ftrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(floattx, floatty, floattz) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def transpose_in_place(self, constLMatrix4fself) -> Any: ...
    def write(self, LMatrix4fself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix4fself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix4fself, constLVecBase4fv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointGeneral(self, *args, **kwargs): ...
    def xformPointGeneralInPlace(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix4fself, LVecBase4fv) -> Any: ...
    def xform_point(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_point_general(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_point_general_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_point_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_vec(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_vec_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    @staticmethod
    def yToZUpMat(*args, **kwargs): ...
    @staticmethod
    def y_to_z_up_mat() -> Any: ...
    @staticmethod
    def zToYUpMat(*args, **kwargs): ...
    @staticmethod
    def z_to_y_up_mat() -> Any: ...
    @staticmethod
    def zerosMat(*args, **kwargs): ...
    @staticmethod
    def zeros_mat() -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix4fself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class Mat4D(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def accumulate(self, constLMatrix4dself, constLMatrix4dother, doubleweight) -> Any: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix4dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix4dself, inthash, doublethreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix4dself, constLMatrix4dother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix4dself, constLMatrix4dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    @overload
    def assign(self, constLMatrix4dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix4dself, constLMatrix4dother) -> Any: ...
    @overload
    def compare_to(self, LMatrix4dself, constLMatrix4dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def fill(self, constLMatrix4dself, doublefill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol3(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow3(self, *args, **kwargs): ...
    def getRow3s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def getUpper3(self, *args, **kwargs): ...
    def get_cell(self, LMatrix4dself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix4dself, intcol) -> Any: ...
    def get_col3(self, LMatrix4dself, intcol) -> Any: ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix4dself) -> Any: ...
    @overload
    def get_hash(self, LMatrix4dself, doublethreshold) -> Any: ...
    def get_num_components(self, LMatrix4dself) -> Any: ...
    @overload
    def get_row(self, LMatrix4dself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix4dself, LVecBase4dresult_vec, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4dself, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4dself, LVecBase3dresult_vec, introw) -> Any: ...
    def get_row3s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    def get_upper_3(self, LMatrix4dself) -> Any: ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertAffineFrom(self, *args, **kwargs): ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_affine_from(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    def invert_from(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    def invert_in_place(self, constLMatrix4dself) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix4dself) -> Any: ...
    def is_nan(self, LMatrix4dself) -> Any: ...
    def multiply(self, constLMatrix4dself, constLMatrix4dother1, constLMatrix4dother2) -> Any: ...
    @staticmethod
    def onesMat(*args, **kwargs): ...
    @staticmethod
    def ones_mat() -> Any: ...
    def output(self, LMatrix4dself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix4dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix4dself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @staticmethod
    def rotate_mat(doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3dscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(doublescale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(doublesx, doublesy, doublesz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3dscale, constLVecBase3dshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3dscale, constLVecBase3dshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(doublesx, doublesy, doublesz, doubleshxy, doubleshxz, doubleshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix4dself,
        doublee00,
        doublee01,
        doublee02,
        doublee03,
        doublee10,
        doublee11,
        doublee12,
        doublee13,
        doublee20,
        doublee21,
        doublee22,
        doublee23,
        doublee30,
        doublee31,
        doublee32,
        doublee33,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def setUpper3(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix4dself, introw, intcol, doublevalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix4dself, intcol, constLVecBase4dv) -> Any: ...
    @overload
    def set_col(self, constLMatrix4dself, intcol, constLVecBase3dv) -> Any: ...
    def set_rotate_mat(self, constLMatrix4dself, doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix4dself, doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix4dself, introw, constLVecBase4dv) -> Any: ...
    @overload
    def set_row(self, constLMatrix4dself, introw, constLVecBase3dv) -> Any: ...
    def set_scale_mat(self, constLMatrix4dself, constLVecBase3dscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix4dself, constLVecBase3dscale, constLVecBase3dshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix4dself, constLVecBase3dshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix4dself, constLVecBase3dtrans) -> Any: ...
    def set_upper_3(self, constLMatrix4dself, constLMatrix3dupper3) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3dshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3dshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(doubleshxy, doubleshxz, doubleshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase3dtrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(doubletx, doublety, doubletz) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    def transpose_in_place(self, constLMatrix4dself) -> Any: ...
    def write(self, LMatrix4dself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix4dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix4dself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix4dself, constLVecBase4dv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointGeneral(self, *args, **kwargs): ...
    def xformPointGeneralInPlace(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix4dself, LVecBase4dv) -> Any: ...
    def xform_point(self, LMatrix4dself, constLVecBase3dv) -> Any: ...
    def xform_point_general(self, LMatrix4dself, constLVecBase3dv) -> Any: ...
    def xform_point_general_in_place(self, LMatrix4dself, LVecBase3dv) -> Any: ...
    def xform_point_in_place(self, LMatrix4dself, LVecBase3dv) -> Any: ...
    def xform_vec(self, LMatrix4dself, constLVecBase3dv) -> Any: ...
    def xform_vec_general(self, LMatrix4dself, constLVecBase3dv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix4dself, LVecBase3dv) -> Any: ...
    def xform_vec_in_place(self, LMatrix4dself, LVecBase3dv) -> Any: ...
    @staticmethod
    def yToZUpMat(*args, **kwargs): ...
    @staticmethod
    def y_to_z_up_mat() -> Any: ...
    @staticmethod
    def zToYUpMat(*args, **kwargs): ...
    @staticmethod
    def z_to_y_up_mat() -> Any: ...
    @staticmethod
    def zerosMat(*args, **kwargs): ...
    @staticmethod
    def zeros_mat() -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix4dself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class Mat4F(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def accumulate(self, constLMatrix4fself, constLMatrix4fother, floatweight) -> Any: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix4fself, inthash, floatthreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix4fself, constLMatrix4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def assign(self, constLMatrix4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def compare_to(self, LMatrix4fself, constLMatrix4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def fill(self, constLMatrix4fself, floatfill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol3(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow3(self, *args, **kwargs): ...
    def getRow3s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def getUpper3(self, *args, **kwargs): ...
    def get_cell(self, LMatrix4fself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix4fself, intcol) -> Any: ...
    def get_col3(self, LMatrix4fself, intcol) -> Any: ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix4fself) -> Any: ...
    @overload
    def get_hash(self, LMatrix4fself, floatthreshold) -> Any: ...
    def get_num_components(self, LMatrix4fself) -> Any: ...
    @overload
    def get_row(self, LMatrix4fself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix4fself, LVecBase4fresult_vec, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4fself, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4fself, LVecBase3fresult_vec, introw) -> Any: ...
    def get_row3s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    def get_upper_3(self, LMatrix4fself) -> Any: ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertAffineFrom(self, *args, **kwargs): ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_affine_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def invert_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def invert_in_place(self, constLMatrix4fself) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix4fself) -> Any: ...
    def is_nan(self, LMatrix4fself) -> Any: ...
    def multiply(self, constLMatrix4fself, constLMatrix4fother1, constLMatrix4fother2) -> Any: ...
    @staticmethod
    def onesMat(*args, **kwargs): ...
    @staticmethod
    def ones_mat() -> Any: ...
    def output(self, LMatrix4fself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix4fself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @staticmethod
    def rotate_mat(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy, floatsz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(floatsx, floatsy, floatsz, floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix4fself,
        floate00,
        floate01,
        floate02,
        floate03,
        floate10,
        floate11,
        floate12,
        floate13,
        floate20,
        floate21,
        floate22,
        floate23,
        floate30,
        floate31,
        floate32,
        floate33,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def setUpper3(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix4fself, introw, intcol, floatvalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix4fself, intcol, constLVecBase4fv) -> Any: ...
    @overload
    def set_col(self, constLMatrix4fself, intcol, constLVecBase3fv) -> Any: ...
    def set_rotate_mat(self, constLMatrix4fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix4fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix4fself, introw, constLVecBase4fv) -> Any: ...
    @overload
    def set_row(self, constLMatrix4fself, introw, constLVecBase3fv) -> Any: ...
    def set_scale_mat(self, constLMatrix4fself, constLVecBase3fscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix4fself, constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix4fself, constLVecBase3fshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix4fself, constLVecBase3ftrans) -> Any: ...
    def set_upper_3(self, constLMatrix4fself, constLMatrix3fupper3) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase3ftrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(floattx, floatty, floattz) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def transpose_in_place(self, constLMatrix4fself) -> Any: ...
    def write(self, LMatrix4fself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix4fself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix4fself, constLVecBase4fv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointGeneral(self, *args, **kwargs): ...
    def xformPointGeneralInPlace(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix4fself, LVecBase4fv) -> Any: ...
    def xform_point(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_point_general(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_point_general_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_point_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_vec(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_vec_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    @staticmethod
    def yToZUpMat(*args, **kwargs): ...
    @staticmethod
    def y_to_z_up_mat() -> Any: ...
    @staticmethod
    def zToYUpMat(*args, **kwargs): ...
    @staticmethod
    def z_to_y_up_mat() -> Any: ...
    @staticmethod
    def zerosMat(*args, **kwargs): ...
    @staticmethod
    def zeros_mat() -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix4fself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class Material(TypedWritableReferenceCount, Namable):
    DtoolClassDict: ClassVar[dict] = ...
    ambient: Incomplete
    base_color: Incomplete
    diffuse: Incomplete
    emission: Incomplete
    local: Incomplete
    metallic: Incomplete
    refractive_index: Incomplete
    roughness: Incomplete
    shininess: Incomplete
    specular: Incomplete
    twoside: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constMaterialself, constMaterialcopy) -> Any: ...
    def clearAmbient(self, *args, **kwargs): ...
    def clearBaseColor(self, *args, **kwargs): ...
    def clearDiffuse(self, *args, **kwargs): ...
    def clearEmission(self, *args, **kwargs): ...
    def clearMetallic(self, *args, **kwargs): ...
    def clearSpecular(self, *args, **kwargs): ...
    def clear_ambient(self, constMaterialself) -> Any: ...
    def clear_base_color(self, constMaterialself) -> Any: ...
    def clear_diffuse(self, constMaterialself) -> Any: ...
    def clear_emission(self, constMaterialself) -> Any: ...
    def clear_metallic(self, constMaterialself) -> Any: ...
    def clear_specular(self, constMaterialself) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, Materialself, constMaterialother) -> Any: ...
    def getAmbient(self, *args, **kwargs): ...
    def getBaseColor(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getDefault(*args, **kwargs): ...
    def getDiffuse(self, *args, **kwargs): ...
    def getEmission(self, *args, **kwargs): ...
    def getLocal(self, *args, **kwargs): ...
    def getMetallic(self, *args, **kwargs): ...
    def getRefractiveIndex(self, *args, **kwargs): ...
    def getRoughness(self, *args, **kwargs): ...
    def getShininess(self, *args, **kwargs): ...
    def getSpecular(self, *args, **kwargs): ...
    def getTwoside(self, *args, **kwargs): ...
    def get_ambient(self, Materialself) -> Any: ...
    def get_base_color(self, Materialself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_default() -> Any: ...
    def get_diffuse(self, Materialself) -> Any: ...
    def get_emission(self, Materialself) -> Any: ...
    def get_local(self, Materialself) -> Any: ...
    def get_metallic(self, Materialself) -> Any: ...
    def get_refractive_index(self, Materialself) -> Any: ...
    def get_roughness(self, Materialself) -> Any: ...
    def get_shininess(self, Materialself) -> Any: ...
    def get_specular(self, Materialself) -> Any: ...
    def get_twoside(self, Materialself) -> Any: ...
    def hasAmbient(self, *args, **kwargs): ...
    def hasBaseColor(self, *args, **kwargs): ...
    def hasDiffuse(self, *args, **kwargs): ...
    def hasEmission(self, *args, **kwargs): ...
    def hasMetallic(self, *args, **kwargs): ...
    def hasRefractiveIndex(self, *args, **kwargs): ...
    def hasRoughness(self, *args, **kwargs): ...
    def hasSpecular(self, *args, **kwargs): ...
    def has_ambient(self, Materialself) -> Any: ...
    def has_base_color(self, Materialself) -> Any: ...
    def has_diffuse(self, Materialself) -> Any: ...
    def has_emission(self, Materialself) -> Any: ...
    def has_metallic(self, Materialself) -> Any: ...
    def has_refractive_index(self, Materialself) -> Any: ...
    def has_roughness(self, Materialself) -> Any: ...
    def has_specular(self, Materialself) -> Any: ...
    def isAttribLocked(self, *args, **kwargs): ...
    def is_attrib_locked(self, Materialself) -> Any: ...
    def output(self, Materialself, ostreamout) -> Any: ...
    def setAmbient(self, *args, **kwargs): ...
    def setAttribLock(self, *args, **kwargs): ...
    def setBaseColor(self, *args, **kwargs): ...
    def setDiffuse(self, *args, **kwargs): ...
    def setEmission(self, *args, **kwargs): ...
    def setLocal(self, *args, **kwargs): ...
    def setMetallic(self, *args, **kwargs): ...
    def setRefractiveIndex(self, *args, **kwargs): ...
    def setRoughness(self, *args, **kwargs): ...
    def setShininess(self, *args, **kwargs): ...
    def setSpecular(self, *args, **kwargs): ...
    def setTwoside(self, *args, **kwargs): ...
    def set_ambient(self, constMaterialself, constLVecBase4fcolor) -> Any: ...
    def set_attrib_lock(self, constMaterialself) -> Any: ...
    def set_base_color(self, constMaterialself, constLVecBase4fcolor) -> Any: ...
    def set_diffuse(self, constMaterialself, constLVecBase4fcolor) -> Any: ...
    def set_emission(self, constMaterialself, constLVecBase4fcolor) -> Any: ...
    def set_local(self, constMaterialself, boollocal) -> Any: ...
    def set_metallic(self, constMaterialself, floatmetallic) -> Any: ...
    def set_refractive_index(self, constMaterialself, floatrefractive_index) -> Any: ...
    def set_roughness(self, constMaterialself, floatroughness) -> Any: ...
    def set_shininess(self, constMaterialself, floatshininess) -> Any: ...
    def set_specular(self, constMaterialself, constLVecBase4fcolor) -> Any: ...
    def set_twoside(self, constMaterialself, booltwoside) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constMaterialself) -> Any: ...
    def upcast_to_TypedWritableReferenceCount(self, constMaterialself) -> Any: ...
    def write(self, Materialself, ostreamout, intindent) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class MaterialAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    class_slot: Incomplete
    material: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMaterial(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_material(self, MaterialAttribself) -> Any: ...
    def isOff(self, *args, **kwargs): ...
    def is_off(self, MaterialAttribself) -> Any: ...
    @staticmethod
    def make(Materialmaterial) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeOff(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_off() -> Any: ...

class MaterialCollection(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addMaterial(self, *args, **kwargs): ...
    def addMaterialsFrom(self, *args, **kwargs): ...
    def add_material(self, constMaterialCollectionself, Materialnode_material) -> Any: ...
    def add_materials_from(self, constMaterialCollectionself, constMaterialCollectionother) -> Any: ...
    def assign(self, constMaterialCollectionself, constMaterialCollectioncopy) -> Any: ...
    def clear(self, constMaterialCollectionself) -> Any: ...
    def findMaterial(self, *args, **kwargs): ...
    def find_material(self, MaterialCollectionself, strname) -> Any: ...
    def getMaterial(self, *args, **kwargs): ...
    def getNumMaterials(self, *args, **kwargs): ...
    def get_material(self, MaterialCollectionself, intindex) -> Any: ...
    def get_num_materials(self, MaterialCollectionself) -> Any: ...
    def hasMaterial(self, *args, **kwargs): ...
    def has_material(self, MaterialCollectionself, Materialmaterial) -> Any: ...
    def output(self, MaterialCollectionself, ostreamout) -> Any: ...
    def removeDuplicateMaterials(self, *args, **kwargs): ...
    def removeMaterial(self, *args, **kwargs): ...
    def removeMaterialsFrom(self, *args, **kwargs): ...
    def remove_duplicate_materials(self, constMaterialCollectionself) -> Any: ...
    def remove_material(self, constMaterialCollectionself, Materialnode_material) -> Any: ...
    def remove_materials_from(self, constMaterialCollectionself, constMaterialCollectionother) -> Any: ...
    def write(self, MaterialCollectionself, ostreamout, intindent_level) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __iadd__(self, other): ...
    def __len__(self) -> int: ...
    def __radd__(self, other): ...

class MaterialPool(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, thereisonlyoneintheuniverse) -> Any: ...
    @staticmethod
    def garbageCollect(*args, **kwargs): ...
    @staticmethod
    def garbage_collect() -> Any: ...
    @staticmethod
    def getMaterial(*args, **kwargs): ...
    @overload
    @staticmethod
    def get_material(Materialtemp) -> Any: ...
    @overload
    @staticmethod
    def get_material() -> Any: ...
    @staticmethod
    def listContents(*args, **kwargs): ...
    @staticmethod
    def list_contents(ostreamout) -> Any: ...
    @staticmethod
    def releaseAllMaterials(*args, **kwargs): ...
    @staticmethod
    def releaseMaterial(*args, **kwargs): ...
    @staticmethod
    def release_all_materials() -> Any: ...
    @staticmethod
    def release_material(Materialtemp) -> Any: ...
    @staticmethod
    def write(ostreamout) -> Any: ...

class MathNumbers(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class MatrixLens(Lens):
    DtoolClassDict: ClassVar[dict] = ...
    user_mat: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearLeftEyeMat(self, *args, **kwargs): ...
    def clearRightEyeMat(self, *args, **kwargs): ...
    def clear_left_eye_mat(self, constMatrixLensself) -> Any: ...
    def clear_right_eye_mat(self, constMatrixLensself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLeftEyeMat(self, *args, **kwargs): ...
    def getRightEyeMat(self, *args, **kwargs): ...
    def getUserMat(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_left_eye_mat(self, MatrixLensself) -> Any: ...
    def get_right_eye_mat(self, MatrixLensself) -> Any: ...
    def get_user_mat(self, MatrixLensself) -> Any: ...
    def hasLeftEyeMat(self, *args, **kwargs): ...
    def hasRightEyeMat(self, *args, **kwargs): ...
    def has_left_eye_mat(self, MatrixLensself) -> Any: ...
    def has_right_eye_mat(self, MatrixLensself) -> Any: ...
    def setLeftEyeMat(self, *args, **kwargs): ...
    def setRightEyeMat(self, *args, **kwargs): ...
    def setUserMat(self, *args, **kwargs): ...
    def set_left_eye_mat(self, constMatrixLensself, constLMatrix4fuser_mat) -> Any: ...
    def set_right_eye_mat(self, constMatrixLensself, constLMatrix4fuser_mat) -> Any: ...
    def set_user_mat(self, constMatrixLensself, constLMatrix4fuser_mat) -> Any: ...

class MemoryUsage(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    counting: Incomplete
    current_cpp_size: Incomplete
    external_size: Incomplete
    panda_heap_array_size: Incomplete
    panda_heap_overhead: Incomplete
    panda_heap_single_size: Incomplete
    panda_mmap_size: Incomplete
    total_cpp_size: Incomplete
    total_size: Incomplete
    tracking: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def freeze() -> Any: ...
    @staticmethod
    def getCurrentCppSize(*args, **kwargs): ...
    @staticmethod
    def getExternalSize(*args, **kwargs): ...
    @staticmethod
    def getNumPointers(*args, **kwargs): ...
    @staticmethod
    def getPandaHeapArraySize(*args, **kwargs): ...
    @staticmethod
    def getPandaHeapOverhead(*args, **kwargs): ...
    @staticmethod
    def getPandaHeapSingleSize(*args, **kwargs): ...
    @staticmethod
    def getPandaMmapSize(*args, **kwargs): ...
    @staticmethod
    def getPointers(*args, **kwargs): ...
    @staticmethod
    def getPointersOfAge(*args, **kwargs): ...
    @staticmethod
    def getPointersOfType(*args, **kwargs): ...
    @staticmethod
    def getPointersWithZeroCount(*args, **kwargs): ...
    @staticmethod
    def getTotalCppSize(*args, **kwargs): ...
    @staticmethod
    def getTotalSize(*args, **kwargs): ...
    @staticmethod
    def get_current_cpp_size() -> Any: ...
    @staticmethod
    def get_external_size() -> Any: ...
    @staticmethod
    def get_num_pointers() -> Any: ...
    @staticmethod
    def get_panda_heap_array_size() -> Any: ...
    @staticmethod
    def get_panda_heap_overhead() -> Any: ...
    @staticmethod
    def get_panda_heap_single_size() -> Any: ...
    @staticmethod
    def get_panda_mmap_size() -> Any: ...
    @staticmethod
    def get_pointers(MemoryUsagePointersresult) -> Any: ...
    @staticmethod
    def get_pointers_of_age(MemoryUsagePointersresult, doublefrom, doubleto) -> Any: ...
    @staticmethod
    def get_pointers_of_type(MemoryUsagePointersresult, TypeHandletype) -> Any: ...
    @staticmethod
    def get_pointers_with_zero_count(MemoryUsagePointersresult) -> Any: ...
    @staticmethod
    def get_total_cpp_size() -> Any: ...
    @staticmethod
    def get_total_size() -> Any: ...
    @staticmethod
    def isCounting(*args, **kwargs): ...
    @staticmethod
    def isTracking(*args, **kwargs): ...
    @staticmethod
    def is_counting() -> Any: ...
    @staticmethod
    def is_tracking() -> Any: ...
    @staticmethod
    def showCurrentAges(*args, **kwargs): ...
    @staticmethod
    def showCurrentTypes(*args, **kwargs): ...
    @staticmethod
    def showTrendAges(*args, **kwargs): ...
    @staticmethod
    def showTrendTypes(*args, **kwargs): ...
    @staticmethod
    def show_current_ages() -> Any: ...
    @staticmethod
    def show_current_types() -> Any: ...
    @staticmethod
    def show_trend_ages() -> Any: ...
    @staticmethod
    def show_trend_types() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class MemoryUsagePointers(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constMemoryUsagePointersself) -> Any: ...
    def getAge(self, *args, **kwargs): ...
    def getNumPointers(self, *args, **kwargs): ...
    def getPointer(self, *args, **kwargs): ...
    def getPointers(self, *args, **kwargs): ...
    def getPythonPointer(self, *args, **kwargs): ...
    def getType(self, *args, **kwargs): ...
    def getTypeName(self, *args, **kwargs): ...
    def getTypedPointer(self, *args, **kwargs): ...
    def getTypedPointers(self, *args, **kwargs): ...
    def get_age(self, MemoryUsagePointersself, intn) -> Any: ...
    def get_num_pointers(self, MemoryUsagePointersself) -> Any: ...
    def get_pointer(self, MemoryUsagePointersself, intn) -> Any: ...
    def get_pointers(self, *args, **kwargs): ...
    def get_python_pointer(self, MemoryUsagePointersself, intn) -> Any: ...
    def get_type(self, MemoryUsagePointersself, intn) -> Any: ...
    def get_type_name(self, MemoryUsagePointersself, intn) -> Any: ...
    def get_typed_pointer(self, MemoryUsagePointersself, intn) -> Any: ...
    def get_typed_pointers(self, *args, **kwargs): ...
    def output(self, MemoryUsagePointersself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Mersenne(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    max_value: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getUint31(self, *args, **kwargs): ...
    def get_uint31(self, constMersenneself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class MeshDrawer(TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def begin(self, constMeshDrawerself, NodePathcamera, NodePathrender) -> Any: ...
    def billboard(
        self, constMeshDrawerself, constLVector3fpos, constLVector4fframe, floatsize, constLVector4fcolor
    ) -> Any: ...
    def blendedParticle(self, *args, **kwargs): ...
    def blended_particle(
        self,
        constMeshDrawerself,
        constLVector3fpos,
        constLVector4fframe1,
        constLVector4fframe2,
        floatblend,
        floatsize,
        constLVector4fcolor,
        floatrotation,
    ) -> Any: ...
    def crossSegment(self, *args, **kwargs): ...
    def cross_segment(
        self,
        constMeshDrawerself,
        constLVector3fstart,
        constLVector3fstop,
        constLVector4fframe,
        floatthickness,
        constLVector4fcolor,
    ) -> Any: ...
    def end(self, constMeshDrawerself) -> Any: ...
    def explosion(
        self,
        constMeshDrawerself,
        constLVector3fpos,
        constLVector4fframe,
        floatsize,
        constLVector4fcolor,
        intseed,
        intnumber,
        floatdistance,
    ) -> Any: ...
    def geometry(self, constMeshDrawerself, NodePathnode) -> Any: ...
    def getBudget(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getRoot(self, *args, **kwargs): ...
    def get_budget(self, constMeshDrawerself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_root(self, constMeshDrawerself) -> Any: ...
    def linkSegment(self, *args, **kwargs): ...
    def linkSegmentEnd(self, *args, **kwargs): ...
    def link_segment(
        self, constMeshDrawerself, constLVector3fpos, constLVector4fframe, floatthickness, constLVector4fcolor
    ) -> Any: ...
    def link_segment_end(self, constMeshDrawerself, constLVector4fframe, constLVector4fcolor) -> Any: ...
    def particle(
        self, constMeshDrawerself, constLVector3fpos, constLVector4fframe, floatsize, constLVector4fcolor, floatrotation
    ) -> Any: ...
    def segment(
        self,
        constMeshDrawerself,
        constLVector3fstart,
        constLVector3fstop,
        constLVector4fframe,
        floatthickness,
        constLVector4fcolor,
    ) -> Any: ...
    def setBudget(self, *args, **kwargs): ...
    def set_budget(self, constMeshDrawerself, intbudget) -> Any: ...
    def stream(
        self,
        constMeshDrawerself,
        constLVector3fstart,
        constLVector3fstop,
        constLVector4fframe,
        floatsize,
        constLVector4fcolor,
        intnumber,
        floatoffset,
    ) -> Any: ...
    def tri(
        self,
        constMeshDrawerself,
        constLVector3fv1,
        constLVector4fc1,
        constLVector2fuv1,
        constLVector3fv2,
        constLVector4fc2,
        constLVector2fuv2,
        constLVector3fv3,
        constLVector4fc3,
        constLVector2fuv3,
    ) -> Any: ...
    def unevenSegment(self, *args, **kwargs): ...
    def uneven_segment(
        self,
        constMeshDrawerself,
        constLVector3fstart,
        constLVector3fstop,
        constLVector4fframe,
        floatthickness_start,
        constLVector4fcolor_start,
        floatthickness_stop,
        constLVector4fcolor_stop,
    ) -> Any: ...

class MeshDrawer2D(TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def begin(self, constMeshDrawer2Dself) -> Any: ...
    def end(self, constMeshDrawer2Dself) -> Any: ...
    def getBudget(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getRoot(self, *args, **kwargs): ...
    def get_budget(self, constMeshDrawer2Dself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_root(self, constMeshDrawer2Dself) -> Any: ...
    def quadRaw(self, *args, **kwargs): ...
    def quad_raw(
        self,
        constMeshDrawer2Dself,
        constLVector3fv1,
        constLVector4fc1,
        constLVector2fuv1,
        constLVector3fv2,
        constLVector4fc2,
        constLVector2fuv2,
        constLVector3fv3,
        constLVector4fc3,
        constLVector2fuv3,
        constLVector3fv4,
        constLVector4fc4,
        constLVector2fuv4,
    ) -> Any: ...
    def rectangle(
        self,
        constMeshDrawer2Dself,
        floatx,
        floaty,
        floatw,
        floath,
        floatu,
        floatv,
        floatus,
        floatvs,
        constLVector4fcolor,
    ) -> Any: ...
    def rectangleBorder(self, *args, **kwargs): ...
    def rectangleBorderTiled(self, *args, **kwargs): ...
    def rectangleRaw(self, *args, **kwargs): ...
    def rectangleTiled(self, *args, **kwargs): ...
    def rectangle_border(
        self,
        constMeshDrawer2Dself,
        floatx,
        floaty,
        floatw,
        floath,
        floatr,
        floatt,
        floatl,
        floatb,
        floattr,
        floattt,
        floattl,
        floattb,
        floatu,
        floatv,
        floatus,
        floatvs,
        constLVector4fcolor,
    ) -> Any: ...
    def rectangle_border_tiled(
        self,
        constMeshDrawer2Dself,
        floatx,
        floaty,
        floatw,
        floath,
        floatr,
        floatt,
        floatl,
        floatb,
        floattr,
        floattt,
        floattl,
        floattb,
        floatu,
        floatv,
        floatus,
        floatvs,
        constLVector4fcolor,
    ) -> Any: ...
    def rectangle_raw(
        self,
        constMeshDrawer2Dself,
        floatx,
        floaty,
        floatw,
        floath,
        floatu,
        floatv,
        floatus,
        floatvs,
        constLVector4fcolor,
    ) -> Any: ...
    def rectangle_tiled(
        self,
        constMeshDrawer2Dself,
        floatx,
        floaty,
        floatw,
        floath,
        floatu,
        floatv,
        floatus,
        floatvs,
        constLVector4fcolor,
    ) -> Any: ...
    def setBudget(self, *args, **kwargs): ...
    def setClip(self, *args, **kwargs): ...
    def set_budget(self, constMeshDrawer2Dself, intbudget) -> Any: ...
    def set_clip(self, constMeshDrawer2Dself, floatx, floaty, floatw, floath) -> Any: ...

class MicrophoneAudio(MovieAudio):
    DtoolClassDict: ClassVar[dict] = ...
    channels: Incomplete
    options: Incomplete
    rate: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getChannels(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getNumOptions(*args, **kwargs): ...
    @staticmethod
    def getOption(*args, **kwargs): ...
    @staticmethod
    def getOptions(*args, **kwargs): ...
    def getRate(self, *args, **kwargs): ...
    def get_channels(self, MicrophoneAudioself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_num_options() -> Any: ...
    @staticmethod
    def get_option(intn) -> Any: ...
    @staticmethod
    def get_options(*args, **kwargs): ...
    def get_rate(self, MicrophoneAudioself) -> Any: ...

class ModelFlattenRequest(AsyncTask):
    DtoolClassDict: ClassVar[dict] = ...
    orig: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getModel(self, *args, **kwargs): ...
    def getOrig(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_model(self, ModelFlattenRequestself) -> Any: ...
    def get_orig(self, ModelFlattenRequestself) -> Any: ...
    def isReady(self, *args, **kwargs): ...
    def is_ready(self, ModelFlattenRequestself) -> Any: ...

class ModelLoadRequest(AsyncTask):
    DtoolClassDict: ClassVar[dict] = ...
    filename: Incomplete
    loader: Incomplete
    options: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getLoader(self, *args, **kwargs): ...
    def getModel(self, *args, **kwargs): ...
    def getOptions(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_filename(self, ModelLoadRequestself) -> Any: ...
    def get_loader(self, ModelLoadRequestself) -> Any: ...
    def get_model(self, ModelLoadRequestself) -> Any: ...
    def get_options(self, ModelLoadRequestself) -> Any: ...
    def isReady(self, *args, **kwargs): ...
    def is_ready(self, ModelLoadRequestself) -> Any: ...

class ModelNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    PTDropNode: ClassVar[int] = ...
    PTLocal: ClassVar[int] = ...
    PTNet: ClassVar[int] = ...
    PTNoTouch: ClassVar[int] = ...
    PTNone: ClassVar[int] = ...
    PT_drop_node: ClassVar[int] = ...
    PT_local: ClassVar[int] = ...
    PT_net: ClassVar[int] = ...
    PT_no_touch: ClassVar[int] = ...
    PT_none: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPreserveAttributes(self, *args, **kwargs): ...
    def getPreserveTransform(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_preserve_attributes(self, ModelNodeself) -> Any: ...
    def get_preserve_transform(self, ModelNodeself) -> Any: ...
    def setPreserveAttributes(self, *args, **kwargs): ...
    def setPreserveTransform(self, *args, **kwargs): ...
    def setTransformLimit(self, *args, **kwargs): ...
    def set_preserve_attributes(self, constModelNodeself, intattrib_mask) -> Any: ...
    def set_preserve_transform(self, constModelNodeself, intpreserve_transform) -> Any: ...
    def set_transform_limit(self, constModelNodeself, floatlimit) -> Any: ...

class ModelPool(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def addModel(*args, **kwargs): ...
    @overload
    @staticmethod
    def add_model(ModelRootmodel) -> Any: ...
    @overload
    @staticmethod
    def add_model(constFilenamefilename, ModelRootmodel) -> Any: ...
    @overload
    @staticmethod
    def add_model(model) -> Any: ...
    @staticmethod
    def garbageCollect(*args, **kwargs): ...
    @staticmethod
    def garbage_collect() -> Any: ...
    @staticmethod
    def getModel(*args, **kwargs): ...
    @staticmethod
    def get_model(constFilenamefilename, boolverify) -> Any: ...
    @staticmethod
    def hasModel(*args, **kwargs): ...
    @staticmethod
    def has_model(constFilenamefilename) -> Any: ...
    @staticmethod
    def listContents(*args, **kwargs): ...
    @overload
    @staticmethod
    def list_contents() -> Any: ...
    @overload
    @staticmethod
    def list_contents(ostreamout) -> Any: ...
    @staticmethod
    def loadModel(*args, **kwargs): ...
    @staticmethod
    def load_model(constFilenamefilename, constLoaderOptionsoptions) -> Any: ...
    @staticmethod
    def releaseAllModels(*args, **kwargs): ...
    @staticmethod
    def releaseModel(*args, **kwargs): ...
    @staticmethod
    def release_all_models() -> Any: ...
    @overload
    @staticmethod
    def release_model(ModelRootmodel) -> Any: ...
    @overload
    @staticmethod
    def release_model(model) -> Any: ...
    @staticmethod
    def verifyModel(*args, **kwargs): ...
    @staticmethod
    def verify_model(constFilenamefilename) -> Any: ...
    @staticmethod
    def write(ostreamout) -> Any: ...

class ModelRoot(ModelNode):
    class ModelReference(ReferenceCount):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...

    DtoolClassDict: ClassVar[dict] = ...
    fullpath: Incomplete
    model_ref_count: Incomplete
    reference: Incomplete
    timestamp: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFullpath(self, *args, **kwargs): ...
    def getModelRefCount(self, *args, **kwargs): ...
    def getReference(self, *args, **kwargs): ...
    def getTimestamp(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_fullpath(self, ModelRootself) -> Any: ...
    def get_model_ref_count(self, ModelRootself) -> Any: ...
    def get_reference(self, ModelRootself) -> Any: ...
    def get_timestamp(self, ModelRootself) -> Any: ...
    def setFullpath(self, *args, **kwargs): ...
    def setReference(self, *args, **kwargs): ...
    def setTimestamp(self, *args, **kwargs): ...
    def set_fullpath(self, constModelRootself, constFilenamefullpath) -> Any: ...
    def set_reference(self, constModelRootself, ModelReferenceref) -> Any: ...
    def set_timestamp(self, constModelRootself, inttimestamp) -> Any: ...

class ModelSaveRequest(AsyncTask):
    DtoolClassDict: ClassVar[dict] = ...
    filename: Incomplete
    loader: Incomplete
    node: Incomplete
    options: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getLoader(self, *args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getOptions(self, *args, **kwargs): ...
    def getSuccess(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_filename(self, ModelSaveRequestself) -> Any: ...
    def get_loader(self, ModelSaveRequestself) -> Any: ...
    def get_node(self, ModelSaveRequestself) -> Any: ...
    def get_options(self, ModelSaveRequestself) -> Any: ...
    def get_success(self, ModelSaveRequestself) -> Any: ...
    def isReady(self, *args, **kwargs): ...
    def is_ready(self, ModelSaveRequestself) -> Any: ...

class ModifierButtons(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    buttons: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addButton(self, *args, **kwargs): ...
    def add_button(self, constModifierButtonsself, ButtonHandlebutton) -> Any: ...
    def allButtonsUp(self, *args, **kwargs): ...
    def all_buttons_up(self, constModifierButtonsself) -> Any: ...
    def assign(self, constModifierButtonsself, constModifierButtonscopy) -> Any: ...
    def buttonDown(self, *args, **kwargs): ...
    def buttonUp(self, *args, **kwargs): ...
    def button_down(self, constModifierButtonsself, ButtonHandlebutton) -> Any: ...
    def button_up(self, constModifierButtonsself, ButtonHandlebutton) -> Any: ...
    def getButton(self, *args, **kwargs): ...
    def getButtons(self, *args, **kwargs): ...
    def getNumButtons(self, *args, **kwargs): ...
    def getPrefix(self, *args, **kwargs): ...
    def get_button(self, ModifierButtonsself, intindex) -> Any: ...
    def get_buttons(self, *args, **kwargs): ...
    def get_num_buttons(self, ModifierButtonsself) -> Any: ...
    def get_prefix(self, ModifierButtonsself) -> Any: ...
    def hasButton(self, *args, **kwargs): ...
    def has_button(self, ModifierButtonsself, ButtonHandlebutton) -> Any: ...
    def isAnyDown(self, *args, **kwargs): ...
    def isDown(self, *args, **kwargs): ...
    def is_any_down(self, ModifierButtonsself) -> Any: ...
    @overload
    def is_down(self, ModifierButtonsself, ButtonHandlebutton) -> Any: ...
    @overload
    def is_down(self, ModifierButtonsself, intindex) -> Any: ...
    def matches(self, ModifierButtonsself, constModifierButtonsother) -> Any: ...
    def output(self, ModifierButtonsself, ostreamout) -> Any: ...
    def removeButton(self, *args, **kwargs): ...
    def remove_button(self, constModifierButtonsself, ButtonHandlebutton) -> Any: ...
    def setButtonList(self, *args, **kwargs): ...
    def set_button_list(self, constModifierButtonsself, constModifierButtonsother) -> Any: ...
    def write(self, ModifierButtonsself, ostreamout) -> Any: ...
    def __and__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ior__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __ror__(self, other): ...

class MouseAndKeyboard(DataNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def setSource(self, *args, **kwargs): ...
    def set_source(self, constMouseAndKeyboardself, GraphicsWindowwindow, intdevice) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class MouseButton(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def button(intbutton_number) -> Any: ...
    @staticmethod
    def five() -> Any: ...
    @staticmethod
    def four() -> Any: ...
    @staticmethod
    def isMouseButton(*args, **kwargs): ...
    @staticmethod
    def is_mouse_button(ButtonHandlebutton) -> Any: ...
    @staticmethod
    def one() -> Any: ...
    @staticmethod
    def three() -> Any: ...
    @staticmethod
    def two() -> Any: ...
    @staticmethod
    def wheelDown(*args, **kwargs): ...
    @staticmethod
    def wheelLeft(*args, **kwargs): ...
    @staticmethod
    def wheelRight(*args, **kwargs): ...
    @staticmethod
    def wheelUp(*args, **kwargs): ...
    @staticmethod
    def wheel_down() -> Any: ...
    @staticmethod
    def wheel_left() -> Any: ...
    @staticmethod
    def wheel_right() -> Any: ...
    @staticmethod
    def wheel_up() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class MouseInterfaceNode(DataNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearAllButtons(self, *args, **kwargs): ...
    def clearButton(self, *args, **kwargs): ...
    def clear_all_buttons(self, constMouseInterfaceNodeself) -> Any: ...
    def clear_button(self, constMouseInterfaceNodeself, constButtonHandlebutton) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def requireButton(self, *args, **kwargs): ...
    def require_button(self, constMouseInterfaceNodeself, constButtonHandlebutton, boolis_down) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class MouseRecorder(DataNode, RecorderBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def upcastToDataNode(self, *args, **kwargs): ...
    def upcastToRecorderBase(self, *args, **kwargs): ...
    def upcast_to_DataNode(self, constMouseRecorderself) -> Any: ...
    def upcast_to_RecorderBase(self, constMouseRecorderself) -> Any: ...

class MouseSubregion(MouseInterfaceNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getBottom(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLeft(self, *args, **kwargs): ...
    def getRight(self, *args, **kwargs): ...
    def getTop(self, *args, **kwargs): ...
    def get_bottom(self, MouseSubregionself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_left(self, MouseSubregionself) -> Any: ...
    def get_right(self, MouseSubregionself) -> Any: ...
    def get_top(self, MouseSubregionself) -> Any: ...
    def setDimensions(self, *args, **kwargs): ...
    def set_dimensions(self, constMouseSubregionself, floatl, floatr, floatb, floatt) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class MouseWatcher(DataNode, MouseWatcherBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addGroup(self, *args, **kwargs): ...
    def add_group(self, constMouseWatcherself, MouseWatcherGroupgroup) -> Any: ...
    def clearDisplayRegion(self, *args, **kwargs): ...
    def clearGeometry(self, *args, **kwargs): ...
    def clearInactivityTimeout(self, *args, **kwargs): ...
    def clearTrailLog(self, *args, **kwargs): ...
    def clearTrailNode(self, *args, **kwargs): ...
    def clear_display_region(self, constMouseWatcherself) -> Any: ...
    def clear_geometry(self, constMouseWatcherself) -> Any: ...
    def clear_inactivity_timeout(self, constMouseWatcherself) -> Any: ...
    def clear_trail_log(self, constMouseWatcherself) -> Any: ...
    def clear_trail_node(self, constMouseWatcherself) -> Any: ...
    def getButtonDownPattern(self, *args, **kwargs): ...
    def getButtonRepeatPattern(self, *args, **kwargs): ...
    def getButtonUpPattern(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDisplayRegion(self, *args, **kwargs): ...
    def getEnterPattern(self, *args, **kwargs): ...
    def getExtraHandler(self, *args, **kwargs): ...
    def getFrame(self, *args, **kwargs): ...
    def getGeometry(self, *args, **kwargs): ...
    def getGroup(self, *args, **kwargs): ...
    def getGroups(self, *args, **kwargs): ...
    def getInactivityTimeout(self, *args, **kwargs): ...
    def getInactivityTimeoutEvent(self, *args, **kwargs): ...
    def getLeavePattern(self, *args, **kwargs): ...
    def getModifierButtons(self, *args, **kwargs): ...
    def getMouse(self, *args, **kwargs): ...
    def getMouseX(self, *args, **kwargs): ...
    def getMouseY(self, *args, **kwargs): ...
    def getNumGroups(self, *args, **kwargs): ...
    def getOverRegion(self, *args, **kwargs): ...
    def getTrailLog(self, *args, **kwargs): ...
    def getTrailNode(self, *args, **kwargs): ...
    def getWithinPattern(self, *args, **kwargs): ...
    def getWithoutPattern(self, *args, **kwargs): ...
    def get_button_down_pattern(self, MouseWatcherself) -> Any: ...
    def get_button_repeat_pattern(self, MouseWatcherself) -> Any: ...
    def get_button_up_pattern(self, MouseWatcherself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_display_region(self, MouseWatcherself) -> Any: ...
    def get_enter_pattern(self, MouseWatcherself) -> Any: ...
    def get_extra_handler(self, MouseWatcherself) -> Any: ...
    def get_frame(self, MouseWatcherself) -> Any: ...
    def get_geometry(self, MouseWatcherself) -> Any: ...
    def get_group(self, MouseWatcherself, intn) -> Any: ...
    def get_groups(self, *args, **kwargs): ...
    def get_inactivity_timeout(self, MouseWatcherself) -> Any: ...
    def get_inactivity_timeout_event(self, MouseWatcherself) -> Any: ...
    def get_leave_pattern(self, MouseWatcherself) -> Any: ...
    def get_modifier_buttons(self, MouseWatcherself) -> Any: ...
    def get_mouse(self, MouseWatcherself) -> Any: ...
    def get_mouse_x(self, MouseWatcherself) -> Any: ...
    def get_mouse_y(self, MouseWatcherself) -> Any: ...
    def get_num_groups(self, MouseWatcherself) -> Any: ...
    @overload
    def get_over_region(self, MouseWatcherself) -> Any: ...
    @overload
    def get_over_region(self, MouseWatcherself, constLPoint2fpos) -> Any: ...
    @overload
    def get_over_region(self, MouseWatcherself, floatx, floaty) -> Any: ...
    def get_trail_log(self, MouseWatcherself) -> Any: ...
    def get_trail_node(self, constMouseWatcherself) -> Any: ...
    def get_within_pattern(self, MouseWatcherself) -> Any: ...
    def get_without_pattern(self, MouseWatcherself) -> Any: ...
    def hasDisplayRegion(self, *args, **kwargs): ...
    def hasGeometry(self, *args, **kwargs): ...
    def hasInactivityTimeout(self, *args, **kwargs): ...
    def hasMouse(self, *args, **kwargs): ...
    def has_display_region(self, MouseWatcherself) -> Any: ...
    def has_geometry(self, MouseWatcherself) -> Any: ...
    def has_inactivity_timeout(self, MouseWatcherself) -> Any: ...
    def has_mouse(self, MouseWatcherself) -> Any: ...
    def isButtonDown(self, *args, **kwargs): ...
    def isMouseOpen(self, *args, **kwargs): ...
    def isOverRegion(self, *args, **kwargs): ...
    def isRawButtonDown(self, *args, **kwargs): ...
    def is_button_down(self, MouseWatcherself, ButtonHandlebutton) -> Any: ...
    def is_mouse_open(self, MouseWatcherself) -> Any: ...
    @overload
    def is_over_region(self, MouseWatcherself) -> Any: ...
    @overload
    def is_over_region(self, MouseWatcherself, constLPoint2fpos) -> Any: ...
    @overload
    def is_over_region(self, MouseWatcherself, floatx, floaty) -> Any: ...
    def is_raw_button_down(self, MouseWatcherself, ButtonHandlebutton) -> Any: ...
    def noteActivity(self, *args, **kwargs): ...
    @overload
    def note_activity(self, constMouseWatcherself) -> Any: ...
    @overload
    def note_activity(self) -> Any: ...
    def numTrailRecent(self, *args, **kwargs): ...
    def num_trail_recent(self, MouseWatcherself) -> Any: ...
    def removeGroup(self, *args, **kwargs): ...
    def removeRegion(self, *args, **kwargs): ...
    def remove_group(self, constMouseWatcherself, MouseWatcherGroupgroup) -> Any: ...
    def remove_region(self, constMouseWatcherself, MouseWatcherRegionregion) -> Any: ...
    def replaceGroup(self, *args, **kwargs): ...
    def replace_group(self, constMouseWatcherself, MouseWatcherGroupold_group, MouseWatcherGroupnew_group) -> Any: ...
    def setButtonDownPattern(self, *args, **kwargs): ...
    def setButtonRepeatPattern(self, *args, **kwargs): ...
    def setButtonUpPattern(self, *args, **kwargs): ...
    def setDisplayRegion(self, *args, **kwargs): ...
    def setEnterPattern(self, *args, **kwargs): ...
    def setExtraHandler(self, *args, **kwargs): ...
    def setFrame(self, *args, **kwargs): ...
    def setGeometry(self, *args, **kwargs): ...
    def setInactivityTimeout(self, *args, **kwargs): ...
    def setInactivityTimeoutEvent(self, *args, **kwargs): ...
    def setLeavePattern(self, *args, **kwargs): ...
    def setModifierButtons(self, *args, **kwargs): ...
    def setTrailLogDuration(self, *args, **kwargs): ...
    def setWithinPattern(self, *args, **kwargs): ...
    def setWithoutPattern(self, *args, **kwargs): ...
    def set_button_down_pattern(self, constMouseWatcherself, strpattern) -> Any: ...
    def set_button_repeat_pattern(self, constMouseWatcherself, strpattern) -> Any: ...
    def set_button_up_pattern(self, constMouseWatcherself, strpattern) -> Any: ...
    def set_display_region(self, constMouseWatcherself, DisplayRegiondr) -> Any: ...
    def set_enter_pattern(self, constMouseWatcherself, strpattern) -> Any: ...
    def set_extra_handler(self, constMouseWatcherself, EventHandlereh) -> Any: ...
    @overload
    def set_frame(self, constMouseWatcherself, constLVecBase4fframe) -> Any: ...
    @overload
    def set_frame(self, constMouseWatcherself, floatleft, floatright, floatbottom, floattop) -> Any: ...
    def set_geometry(self, constMouseWatcherself, PandaNodenode) -> Any: ...
    def set_inactivity_timeout(self, constMouseWatcherself, doubletimeout) -> Any: ...
    def set_inactivity_timeout_event(self, constMouseWatcherself, strevent) -> Any: ...
    def set_leave_pattern(self, constMouseWatcherself, strpattern) -> Any: ...
    def set_modifier_buttons(self, constMouseWatcherself, constModifierButtonsmods) -> Any: ...
    def set_trail_log_duration(self, constMouseWatcherself, doubleduration) -> Any: ...
    def set_within_pattern(self, constMouseWatcherself, strpattern) -> Any: ...
    def set_without_pattern(self, constMouseWatcherself, strpattern) -> Any: ...
    def upcastToDataNode(self, *args, **kwargs): ...
    def upcastToMouseWatcherBase(self, *args, **kwargs): ...
    def upcast_to_DataNode(self, constMouseWatcherself) -> Any: ...
    def upcast_to_MouseWatcherBase(self, constMouseWatcherself) -> Any: ...

class MouseWatcherBase(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    regions: Incomplete
    sorted: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addRegion(self, *args, **kwargs): ...
    def add_region(self, constMouseWatcherBaseself, MouseWatcherRegionregion) -> Any: ...
    def clearRegions(self, *args, **kwargs): ...
    def clear_regions(self, constMouseWatcherBaseself) -> Any: ...
    def findRegion(self, *args, **kwargs): ...
    def find_region(self, MouseWatcherBaseself, strname) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumRegions(self, *args, **kwargs): ...
    def getRegion(self, *args, **kwargs): ...
    def getRegions(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_regions(self, MouseWatcherBaseself) -> Any: ...
    def get_region(self, MouseWatcherBaseself, intn) -> Any: ...
    def get_regions(self, *args, **kwargs): ...
    def hasRegion(self, *args, **kwargs): ...
    def has_region(self, MouseWatcherBaseself, MouseWatcherRegionregion) -> Any: ...
    def hideRegions(self, *args, **kwargs): ...
    def hide_regions(self, constMouseWatcherBaseself) -> Any: ...
    def isSorted(self, *args, **kwargs): ...
    def is_sorted(self, MouseWatcherBaseself) -> Any: ...
    def output(self, MouseWatcherBaseself, ostreamout) -> Any: ...
    def removeRegion(self, *args, **kwargs): ...
    def remove_region(self, constMouseWatcherBaseself, MouseWatcherRegionregion) -> Any: ...
    def setColor(self, *args, **kwargs): ...
    def set_color(self, constMouseWatcherBaseself, constLVecBase4fcolor) -> Any: ...
    def showRegions(self, *args, **kwargs): ...
    def show_regions(self, constMouseWatcherBaseself, constNodePathrender2d, strbin_name, intdraw_order) -> Any: ...
    def sortRegions(self, *args, **kwargs): ...
    def sort_regions(self, constMouseWatcherBaseself) -> Any: ...
    def updateRegions(self, *args, **kwargs): ...
    def update_regions(self, constMouseWatcherBaseself) -> Any: ...
    def write(self, MouseWatcherBaseself, ostreamout, intindent_level) -> Any: ...

class MouseWatcherGroup(MouseWatcherBase, ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def upcastToMouseWatcherBase(self, *args, **kwargs): ...
    def upcastToReferenceCount(self, *args, **kwargs): ...
    def upcast_to_MouseWatcherBase(self, constMouseWatcherGroupself) -> Any: ...
    def upcast_to_ReferenceCount(self, constMouseWatcherGroupself) -> Any: ...

class MouseWatcherParameter(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getButton(self, *args, **kwargs): ...
    def getCandidateStringEncoded(self, *args, **kwargs): ...
    def getCursorPos(self, *args, **kwargs): ...
    def getHighlightEnd(self, *args, **kwargs): ...
    def getHighlightStart(self, *args, **kwargs): ...
    def getKeycode(self, *args, **kwargs): ...
    def getModifierButtons(self, *args, **kwargs): ...
    def getMouse(self, *args, **kwargs): ...
    def get_button(self, MouseWatcherParameterself) -> Any: ...
    @overload
    def get_candidate_string_encoded(self, MouseWatcherParameterself) -> Any: ...
    @overload
    def get_candidate_string_encoded(self, MouseWatcherParameterself, intencoding) -> Any: ...
    def get_cursor_pos(self, MouseWatcherParameterself) -> Any: ...
    def get_highlight_end(self, MouseWatcherParameterself) -> Any: ...
    def get_highlight_start(self, MouseWatcherParameterself) -> Any: ...
    def get_keycode(self, MouseWatcherParameterself) -> Any: ...
    def get_modifier_buttons(self, MouseWatcherParameterself) -> Any: ...
    def get_mouse(self, MouseWatcherParameterself) -> Any: ...
    def hasButton(self, *args, **kwargs): ...
    def hasCandidate(self, *args, **kwargs): ...
    def hasKeycode(self, *args, **kwargs): ...
    def hasMouse(self, *args, **kwargs): ...
    def has_button(self, MouseWatcherParameterself) -> Any: ...
    def has_candidate(self, MouseWatcherParameterself) -> Any: ...
    def has_keycode(self, MouseWatcherParameterself) -> Any: ...
    def has_mouse(self, MouseWatcherParameterself) -> Any: ...
    def isKeyrepeat(self, *args, **kwargs): ...
    def isOutside(self, *args, **kwargs): ...
    def is_keyrepeat(self, MouseWatcherParameterself) -> Any: ...
    def is_outside(self, MouseWatcherParameterself) -> Any: ...
    def output(self, MouseWatcherParameterself, ostreamout) -> Any: ...

class MouseWatcherRegion(TypedWritableReferenceCount, Namable):
    DtoolClassDict: ClassVar[dict] = ...
    SFAnyButton: ClassVar[int] = ...
    SFMouseButton: ClassVar[int] = ...
    SFMousePosition: ClassVar[int] = ...
    SFOtherButton: ClassVar[int] = ...
    SF_any_button: ClassVar[int] = ...
    SF_mouse_button: ClassVar[int] = ...
    SF_mouse_position: ClassVar[int] = ...
    SF_other_button: ClassVar[int] = ...
    active: Incomplete
    area: Incomplete
    frame: Incomplete
    keyboard: Incomplete
    sort: Incomplete
    suppress_flags: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getActive(self, *args, **kwargs): ...
    def getArea(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFrame(self, *args, **kwargs): ...
    def getKeyboard(self, *args, **kwargs): ...
    def getSort(self, *args, **kwargs): ...
    def getSuppressFlags(self, *args, **kwargs): ...
    def get_active(self, MouseWatcherRegionself) -> Any: ...
    def get_area(self, MouseWatcherRegionself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_frame(self, MouseWatcherRegionself) -> Any: ...
    def get_keyboard(self, MouseWatcherRegionself) -> Any: ...
    def get_sort(self, MouseWatcherRegionself) -> Any: ...
    def get_suppress_flags(self, MouseWatcherRegionself) -> Any: ...
    def output(self, MouseWatcherRegionself, ostreamout) -> Any: ...
    def setActive(self, *args, **kwargs): ...
    def setFrame(self, *args, **kwargs): ...
    def setKeyboard(self, *args, **kwargs): ...
    def setSort(self, *args, **kwargs): ...
    def setSuppressFlags(self, *args, **kwargs): ...
    def set_active(self, constMouseWatcherRegionself, boolactive) -> Any: ...
    @overload
    def set_frame(self, constMouseWatcherRegionself, constLVecBase4fframe) -> Any: ...
    @overload
    def set_frame(self, constMouseWatcherRegionself, floatleft, floatright, floatbottom, floattop) -> Any: ...
    def set_keyboard(self, constMouseWatcherRegionself, boolkeyboard) -> Any: ...
    def set_sort(self, constMouseWatcherRegionself, intsort) -> Any: ...
    def set_suppress_flags(self, constMouseWatcherRegionself, intsuppress_flags) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constMouseWatcherRegionself) -> Any: ...
    def upcast_to_TypedWritableReferenceCount(self, constMouseWatcherRegionself) -> Any: ...
    def write(self, MouseWatcherRegionself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class MovieAudio(TypedWritableReferenceCount, Namable):
    DtoolClassDict: ClassVar[dict] = ...
    filename: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def get(constFilenamename) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_filename(self, MovieAudioself) -> Any: ...
    def open(self, constMovieAudioself) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constMovieAudioself) -> Any: ...
    def upcast_to_TypedWritableReferenceCount(self, constMovieAudioself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class MovieAudioCursor(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def aborted(self, MovieAudioCursorself) -> Any: ...
    def audioChannels(self, *args, **kwargs): ...
    def audioRate(self, *args, **kwargs): ...
    def audio_channels(self, MovieAudioCursorself) -> Any: ...
    def audio_rate(self, MovieAudioCursorself) -> Any: ...
    def canSeek(self, *args, **kwargs): ...
    def canSeekFast(self, *args, **kwargs): ...
    def can_seek(self, MovieAudioCursorself) -> Any: ...
    def can_seek_fast(self, MovieAudioCursorself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getSource(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_source(self, MovieAudioCursorself) -> Any: ...
    def length(self, MovieAudioCursorself) -> Any: ...
    def readSamples(self, *args, **kwargs): ...
    @overload
    def read_samples(self, constMovieAudioCursorself, intn) -> Any: ...
    @overload
    def read_samples(self, constMovieAudioCursorself, intn, Datagramdg) -> Any: ...
    def ready(self, MovieAudioCursorself) -> Any: ...
    def seek(self, constMovieAudioCursorself, doubleoffset) -> Any: ...
    def skipSamples(self, *args, **kwargs): ...
    def skip_samples(self, constMovieAudioCursorself, intn) -> Any: ...
    def tell(self, MovieAudioCursorself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class MovieTexture(Texture):
    DtoolClassDict: ClassVar[dict] = ...
    loop: Incomplete
    loop_count: Incomplete
    play_rate: Incomplete
    playing: Incomplete
    time: Incomplete
    video_height: Incomplete
    video_length: Incomplete
    video_width: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getAlphaCursor(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColorCursor(self, *args, **kwargs): ...
    def getLoop(self, *args, **kwargs): ...
    def getLoopCount(self, *args, **kwargs): ...
    def getPlayRate(self, *args, **kwargs): ...
    def getTime(self, *args, **kwargs): ...
    def getVideoHeight(self, *args, **kwargs): ...
    def getVideoLength(self, *args, **kwargs): ...
    def getVideoWidth(self, *args, **kwargs): ...
    def get_alpha_cursor(self, constMovieTextureself, intpage) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_color_cursor(self, constMovieTextureself, intpage) -> Any: ...
    def get_loop(self, MovieTextureself) -> Any: ...
    def get_loop_count(self, MovieTextureself) -> Any: ...
    def get_play_rate(self, MovieTextureself) -> Any: ...
    def get_time(self, MovieTextureself) -> Any: ...
    def get_video_height(self, MovieTextureself) -> Any: ...
    def get_video_length(self, MovieTextureself) -> Any: ...
    def get_video_width(self, MovieTextureself) -> Any: ...
    def isPlaying(self, *args, **kwargs): ...
    def is_playing(self, MovieTextureself) -> Any: ...
    def play(self, constMovieTextureself) -> Any: ...
    def restart(self, constMovieTextureself) -> Any: ...
    def setLoop(self, *args, **kwargs): ...
    def setLoopCount(self, *args, **kwargs): ...
    def setPlayRate(self, *args, **kwargs): ...
    def setTime(self, *args, **kwargs): ...
    def set_loop(self, constMovieTextureself, boolenable) -> Any: ...
    def set_loop_count(self, constMovieTextureself, intcount) -> Any: ...
    def set_play_rate(self, constMovieTextureself, doubleplay_rate) -> Any: ...
    def set_time(self, constMovieTextureself, doublet) -> Any: ...
    def stop(self, constMovieTextureself) -> Any: ...
    def synchronizeTo(self, *args, **kwargs): ...
    def synchronize_to(self, constMovieTextureself, AudioSoundsound) -> Any: ...
    def unsynchronize(self, constMovieTextureself) -> Any: ...

class MovieVideo(TypedWritableReferenceCount, Namable):
    DtoolClassDict: ClassVar[dict] = ...
    filename: Incomplete
    subfile_info: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def get(constFilenamename) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getSubfileInfo(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_filename(self, MovieVideoself) -> Any: ...
    def get_subfile_info(self, MovieVideoself) -> Any: ...
    def open(self, constMovieVideoself) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constMovieVideoself) -> Any: ...
    def upcast_to_TypedWritableReferenceCount(self, constMovieVideoself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class MovieVideoCursor(TypedWritableReferenceCount):
    class Buffer(TypedReferenceCount):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def compareTimestamp(self, *args, **kwargs): ...
        def compare_timestamp(self, Bufferself, constBufferother) -> Any: ...
        @staticmethod
        def getClassType(*args, **kwargs): ...
        def getTimestamp(self, *args, **kwargs): ...
        @staticmethod
        def get_class_type() -> Any: ...
        def get_timestamp(self, Bufferself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...

    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def aborted(self, MovieVideoCursorself) -> Any: ...
    def applyToTexture(self, *args, **kwargs): ...
    def applyToTextureAlpha(self, *args, **kwargs): ...
    def applyToTextureRgb(self, *args, **kwargs): ...
    def apply_to_texture(self, constMovieVideoCursorself, constBufferbuffer, Texturet, intpage) -> Any: ...
    def apply_to_texture_alpha(
        self, constMovieVideoCursorself, constBufferbuffer, Texturet, intpage, intalpha_src
    ) -> Any: ...
    def apply_to_texture_rgb(self, constMovieVideoCursorself, constBufferbuffer, Texturet, intpage) -> Any: ...
    def canSeek(self, *args, **kwargs): ...
    def canSeekFast(self, *args, **kwargs): ...
    def can_seek(self, MovieVideoCursorself) -> Any: ...
    def can_seek_fast(self, MovieVideoCursorself) -> Any: ...
    def fetchBuffer(self, *args, **kwargs): ...
    def fetch_buffer(self, constMovieVideoCursorself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getSource(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_components(self, MovieVideoCursorself) -> Any: ...
    def get_source(self, MovieVideoCursorself) -> Any: ...
    def length(self, MovieVideoCursorself) -> Any: ...
    def ready(self, MovieVideoCursorself) -> Any: ...
    def setTime(self, *args, **kwargs): ...
    def set_time(self, constMovieVideoCursorself, doubletimestamp, intloop_count) -> Any: ...
    def setupTexture(self, *args, **kwargs): ...
    def setup_texture(self, MovieVideoCursorself, Texturetex) -> Any: ...
    def sizeX(self, *args, **kwargs): ...
    def sizeY(self, *args, **kwargs): ...
    def size_x(self, MovieVideoCursorself) -> Any: ...
    def size_y(self, MovieVideoCursorself) -> Any: ...
    def streaming(self, MovieVideoCursorself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class MovingPartACMatrixSwitchType(MovingPartBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_default_value(self, MovingPartself) -> Any: ...
    def get_value(self, MovingPartself) -> Any: ...

class MovingPartACScalarSwitchType(MovingPartBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_default_value(self, MovingPartself) -> Any: ...
    def get_value(self, MovingPartself) -> Any: ...

class MovingPartBase(PartGroup):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getBound(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMaxBound(self, *args, **kwargs): ...
    def get_bound(self, MovingPartBaseself, intn) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_max_bound(self, MovingPartBaseself) -> Any: ...
    @overload
    def get_max_bound(self) -> Any: ...
    def outputValue(self, *args, **kwargs): ...
    def output_value(self, MovingPartBaseself, ostreamout) -> Any: ...

class MovingPartMatrix(MovingPart_ACMatrixSwitchType):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class MovingPartScalar(MovingPart_ACScalarSwitchType):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class MovingPart_ACMatrixSwitchType(MovingPartBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_default_value(self, MovingPartself) -> Any: ...
    def get_value(self, MovingPartself) -> Any: ...

class MovingPart_ACScalarSwitchType(MovingPartBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_default_value(self, MovingPartself) -> Any: ...
    def get_value(self, MovingPartself) -> Any: ...

class Multifile(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    magic_number: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addSignature(self, *args, **kwargs): ...
    def addSubfile(self, *args, **kwargs): ...
    @overload
    def add_signature(self, constMultifileself, constFilenamecomposite) -> Any: ...
    @overload
    def add_signature(self, constMultifileself, constFilenamecomposite, strpassword) -> Any: ...
    @overload
    def add_signature(
        self, constMultifileself, constFilenamecertificate, constFilenamechain, constFilenamepkey, strpassword
    ) -> Any: ...
    @overload
    def add_signature(self) -> Any: ...
    @overload
    def add_signature(self) -> Any: ...
    @overload
    def add_subfile(self, constMultifileself, strsubfile_name, constFilenamefilename, intcompression_level) -> Any: ...
    @overload
    def add_subfile(self, constMultifileself, strsubfile_name, istreamsubfile_data, intcompression_level) -> Any: ...
    def close(self, constMultifileself) -> Any: ...
    @staticmethod
    def closeReadSubfile(*args, **kwargs): ...
    @staticmethod
    def close_read_subfile(istreamstream) -> Any: ...
    def compareSubfile(self, *args, **kwargs): ...
    def compare_subfile(self, constMultifileself, intindex, constFilenamefilename) -> Any: ...
    def extractSubfile(self, *args, **kwargs): ...
    def extractSubfileTo(self, *args, **kwargs): ...
    def extract_subfile(self, constMultifileself, intindex, constFilenamefilename) -> Any: ...
    def extract_subfile_to(self, constMultifileself, intindex, ostreamout) -> Any: ...
    def findSubfile(self, *args, **kwargs): ...
    def find_subfile(self, Multifileself, strsubfile_name) -> Any: ...
    @overload
    def flush(self, constMultifileself) -> Any: ...
    @overload
    def flush(self) -> Any: ...
    @overload
    def flush(self) -> Any: ...
    @overload
    def flush(self) -> Any: ...
    def getEncryptionAlgorithm(self, *args, **kwargs): ...
    def getEncryptionFlag(self, *args, **kwargs): ...
    def getEncryptionIterationCount(self, *args, **kwargs): ...
    def getEncryptionKeyLength(self, *args, **kwargs): ...
    def getEncryptionPassword(self, *args, **kwargs): ...
    def getHeaderPrefix(self, *args, **kwargs): ...
    def getIndexEnd(self, *args, **kwargs): ...
    @staticmethod
    def getMagicNumber(*args, **kwargs): ...
    def getMultifileName(self, *args, **kwargs): ...
    def getNumSignatures(self, *args, **kwargs): ...
    def getNumSubfiles(self, *args, **kwargs): ...
    def getRecordTimestamp(self, *args, **kwargs): ...
    def getScaleFactor(self, *args, **kwargs): ...
    def getSignatureFriendlyName(self, *args, **kwargs): ...
    def getSignaturePublicKey(self, *args, **kwargs): ...
    def getSignatureSubjectName(self, *args, **kwargs): ...
    def getSubfileInternalLength(self, *args, **kwargs): ...
    def getSubfileInternalStart(self, *args, **kwargs): ...
    def getSubfileLength(self, *args, **kwargs): ...
    def getSubfileName(self, *args, **kwargs): ...
    def getSubfileNames(self, *args, **kwargs): ...
    def getSubfileTimestamp(self, *args, **kwargs): ...
    def getTimestamp(self, *args, **kwargs): ...
    def get_encryption_algorithm(self, Multifileself) -> Any: ...
    def get_encryption_flag(self, Multifileself) -> Any: ...
    def get_encryption_iteration_count(self, Multifileself) -> Any: ...
    def get_encryption_key_length(self, Multifileself) -> Any: ...
    def get_encryption_password(self, Multifileself) -> Any: ...
    def get_header_prefix(self, Multifileself) -> Any: ...
    def get_index_end(self, Multifileself) -> Any: ...
    @staticmethod
    def get_magic_number() -> Any: ...
    def get_multifile_name(self, Multifileself) -> Any: ...
    def get_num_signatures(self, Multifileself) -> Any: ...
    @overload
    def get_num_subfiles(self, Multifileself) -> Any: ...
    @overload
    def get_num_subfiles(self) -> Any: ...
    def get_record_timestamp(self, Multifileself) -> Any: ...
    def get_scale_factor(self, Multifileself) -> Any: ...
    def get_signature_friendly_name(self, Multifileself, intn) -> Any: ...
    def get_signature_public_key(self, Multifileself, intn) -> Any: ...
    def get_signature_subject_name(self, Multifileself, intn) -> Any: ...
    def get_subfile_internal_length(self, Multifileself, intindex) -> Any: ...
    def get_subfile_internal_start(self, Multifileself, intindex) -> Any: ...
    def get_subfile_length(self, Multifileself, intindex) -> Any: ...
    def get_subfile_name(self, Multifileself, intindex) -> Any: ...
    def get_subfile_names(self, *args, **kwargs): ...
    def get_subfile_timestamp(self, Multifileself, intindex) -> Any: ...
    def get_timestamp(self, Multifileself) -> Any: ...
    def hasDirectory(self, *args, **kwargs): ...
    def has_directory(self, Multifileself, strsubfile_name) -> Any: ...
    def isReadValid(self, *args, **kwargs): ...
    def isSubfileCompressed(self, *args, **kwargs): ...
    def isSubfileEncrypted(self, *args, **kwargs): ...
    def isSubfileText(self, *args, **kwargs): ...
    def isWriteValid(self, *args, **kwargs): ...
    def is_read_valid(self, Multifileself) -> Any: ...
    def is_subfile_compressed(self, Multifileself, intindex) -> Any: ...
    def is_subfile_encrypted(self, Multifileself, intindex) -> Any: ...
    def is_subfile_text(self, Multifileself, intindex) -> Any: ...
    def is_write_valid(self, Multifileself) -> Any: ...
    def ls(self, Multifileself, ostreamout) -> Any: ...
    def needsRepack(self, *args, **kwargs): ...
    def needs_repack(self, Multifileself) -> Any: ...
    def openRead(self, *args, **kwargs): ...
    def openReadSubfile(self, *args, **kwargs): ...
    def openReadWrite(self, *args, **kwargs): ...
    def openWrite(self, *args, **kwargs): ...
    @overload
    def open_read(self, constMultifileself, IStreamWrappermultifile_stream, boolowns_pointer, longoffset) -> Any: ...
    @overload
    def open_read(self) -> Any: ...
    def open_read_subfile(self, constMultifileself, intindex) -> Any: ...
    @overload
    def open_read_write(self, constMultifileself, iostreammultifile_stream, boolowns_pointer) -> Any: ...
    @overload
    def open_read_write(self) -> Any: ...
    @overload
    def open_write(self, constMultifileself, ostreammultifile_stream, boolowns_pointer) -> Any: ...
    @overload
    def open_write(self) -> Any: ...
    def output(self, Multifileself, ostreamout) -> Any: ...
    def printSignatureCertificate(self, *args, **kwargs): ...
    def print_signature_certificate(self, Multifileself, intn, ostreamout) -> Any: ...
    def readSubfile(self, *args, **kwargs): ...
    def read_subfile(self, constMultifileself, intindex) -> Any: ...
    def removeSubfile(self, *args, **kwargs): ...
    @overload
    def remove_subfile(self, constMultifileself, strsubfile_name) -> Any: ...
    @overload
    def remove_subfile(self, constMultifileself, intindex) -> Any: ...
    def repack(self, constMultifileself) -> Any: ...
    def setEncryptionAlgorithm(self, *args, **kwargs): ...
    def setEncryptionFlag(self, *args, **kwargs): ...
    def setEncryptionIterationCount(self, *args, **kwargs): ...
    def setEncryptionKeyLength(self, *args, **kwargs): ...
    def setEncryptionPassword(self, *args, **kwargs): ...
    def setHeaderPrefix(self, *args, **kwargs): ...
    def setMultifileName(self, *args, **kwargs): ...
    def setRecordTimestamp(self, *args, **kwargs): ...
    def setScaleFactor(self, *args, **kwargs): ...
    def setTimestamp(self, *args, **kwargs): ...
    def set_encryption_algorithm(self, constMultifileself, strencryption_algorithm) -> Any: ...
    def set_encryption_flag(self, constMultifileself, boolflag) -> Any: ...
    def set_encryption_iteration_count(self, constMultifileself, intencryption_iteration_count) -> Any: ...
    def set_encryption_key_length(self, constMultifileself, intencryption_key_length) -> Any: ...
    def set_encryption_password(self, Multifileself, objectencryption_password) -> Any: ...
    def set_header_prefix(self, constMultifileself, strheader_prefix) -> Any: ...
    def set_multifile_name(self, constMultifileself, constFilenamemultifile_name) -> Any: ...
    def set_record_timestamp(self, constMultifileself, boolrecord_timestamp) -> Any: ...
    def set_scale_factor(self, constMultifileself, intscale_factor) -> Any: ...
    def set_timestamp(self, constMultifileself, inttimestamp) -> Any: ...
    def updateSubfile(self, *args, **kwargs): ...
    def update_subfile(
        self, constMultifileself, strsubfile_name, constFilenamefilename, intcompression_level
    ) -> Any: ...
    def validateSignatureCertificate(self, *args, **kwargs): ...
    def validate_signature_certificate(self, Multifileself, intn) -> Any: ...
    def writeSignatureCertificate(self, *args, **kwargs): ...
    def write_signature_certificate(self, Multifileself, intn, ostreamout) -> Any: ...

class MultiplexStream(ostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addFile(self, *args, **kwargs): ...
    def addOstream(self, *args, **kwargs): ...
    def addStandardOutput(self, *args, **kwargs): ...
    def addSystemDebug(self, *args, **kwargs): ...
    def add_file(self, constMultiplexStreamself, Filenamefile) -> Any: ...
    def add_ostream(self, constMultiplexStreamself, ostreamout, booldelete_later) -> Any: ...
    def add_standard_output(self, constMultiplexStreamself) -> Any: ...
    def add_system_debug(self, constMultiplexStreamself) -> Any: ...
    def flush(self, constMultiplexStreamself) -> Any: ...

class MultitexReducer(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constMultitexReducerself) -> Any: ...
    def flatten(self, constMultitexReducerself, GraphicsOutputwindow) -> Any: ...
    @overload
    def scan(self, constMultitexReducerself, constNodePathnode) -> Any: ...
    @overload
    def scan(self, constMultitexReducerself, constNodePathnode, constNodePathstate_from) -> Any: ...
    @overload
    def scan(
        self, constMultitexReducerself, PandaNodenode, constRenderStatestate, constTransformStatetransform
    ) -> Any: ...
    def setAllowTexMat(self, *args, **kwargs): ...
    def setTarget(self, *args, **kwargs): ...
    def setUseGeom(self, *args, **kwargs): ...
    def set_allow_tex_mat(self, constMultitexReducerself, boolallow_tex_mat) -> Any: ...
    def set_target(self, constMultitexReducerself, TextureStagestage) -> Any: ...
    def set_use_geom(self, constMultitexReducerself, booluse_geom) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Mutex(MutexDirect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Enter(self, *args, **kwargs): ...
    def Exit(self, *args, **kwargs): ...
    def acquire(self, Mutexself, boolblocking) -> Any: ...
    def __enter__(self, constMutexself) -> Any: ...
    def __exit__(self, constMutexself, objectparam0, objectparam1, objectparam2) -> Any: ...

class MutexDirect(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def acquire(self, MutexDirectself) -> Any: ...
    def clearName(self, *args, **kwargs): ...
    def clear_name(self, constMutexDirectself) -> Any: ...
    def debugIsLocked(self, *args, **kwargs): ...
    def debug_is_locked(self, MutexDirectself) -> Any: ...
    def getName(self, *args, **kwargs): ...
    def get_name(self, MutexDirectself) -> Any: ...
    def hasName(self, *args, **kwargs): ...
    def has_name(self, MutexDirectself) -> Any: ...
    def output(self, MutexDirectself, ostreamout) -> Any: ...
    def release(self, MutexDirectself) -> Any: ...
    def setName(self, *args, **kwargs): ...
    def set_name(self, constMutexDirectself, strname) -> Any: ...
    def tryAcquire(self, *args, **kwargs): ...
    def try_acquire(self, MutexDirectself) -> Any: ...

class Namable(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    name: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearName(self, *args, **kwargs): ...
    def clear_name(self, constNamableself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_name(self, Namableself) -> Any: ...
    def hasName(self, *args, **kwargs): ...
    def has_name(self, Namableself) -> Any: ...
    def output(self, Namableself, ostreamout) -> Any: ...
    def setName(self, *args, **kwargs): ...
    def set_name(self, constNamableself, strname) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class NativeWindowHandle(WindowHandle):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def makeInt(*args, **kwargs): ...
    @staticmethod
    def makeSubprocess(*args, **kwargs): ...
    @staticmethod
    def make_int(intwindow) -> Any: ...
    @staticmethod
    def make_subprocess(constFilenamefilename) -> Any: ...

class NeverFreeMemory(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getTotalAlloc(*args, **kwargs): ...
    @staticmethod
    def getTotalUnused(*args, **kwargs): ...
    @staticmethod
    def getTotalUsed(*args, **kwargs): ...
    @staticmethod
    def get_total_alloc() -> Any: ...
    @staticmethod
    def get_total_unused() -> Any: ...
    @staticmethod
    def get_total_used() -> Any: ...

class NodeCachedReferenceCount(CachedTypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    RCache: ClassVar[int] = ...
    RNode: ClassVar[int] = ...
    R_cache: ClassVar[int] = ...
    R_node: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getReferencedBits(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_node_ref_count(self, NodeCachedReferenceCountself) -> Any: ...
    def get_referenced_bits(self, NodeCachedReferenceCountself) -> Any: ...
    def nodeRef(self, *args, **kwargs): ...
    def nodeUnref(self, *args, **kwargs): ...
    def node_ref(self, NodeCachedReferenceCountself) -> Any: ...
    def node_unref(self, NodeCachedReferenceCountself) -> Any: ...
    def testRefCountIntegrity(self, *args, **kwargs): ...
    def test_ref_count_integrity(self, NodeCachedReferenceCountself) -> Any: ...

class NodeCullCallbackData(CallbackData):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getData(self, *args, **kwargs): ...
    def getTrav(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_data(self, NodeCullCallbackDataself) -> Any: ...
    def get_trav(self, NodeCullCallbackDataself) -> Any: ...

class NodePath(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    ETFail: ClassVar[int] = ...
    ETNotFound: ClassVar[int] = ...
    ETOk: ClassVar[int] = ...
    ETRemoved: ClassVar[int] = ...
    ET_fail: ClassVar[int] = ...
    ET_not_found: ClassVar[int] = ...
    ET_ok: ClassVar[int] = ...
    ET_removed: ClassVar[int] = ...
    ancestors: Incomplete
    children: Incomplete
    error_type: Incomplete
    name: Incomplete
    net_tags: Incomplete
    nodes: Incomplete
    parent: Incomplete
    python_tags: Incomplete
    sort: Incomplete
    stashed_children: Incomplete
    tags: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addHash(self, *args, **kwargs): ...
    def add_hash(self, NodePathself, inthash) -> Any: ...
    def adjustAllPriorities(self, *args, **kwargs): ...
    def adjust_all_priorities(self, constNodePathself, intadjustment) -> Any: ...
    @staticmethod
    def anyPath(*args, **kwargs): ...
    @staticmethod
    def any_path(PandaNodenode, Threadcurrent_thread) -> Any: ...
    def applyTextureColors(self, *args, **kwargs): ...
    def apply_texture_colors(self, constNodePathself) -> Any: ...
    def assign(self, constNodePathself, constNodePathcopy) -> Any: ...
    def attachNewNode(self, *args, **kwargs): ...
    @overload
    def attach_new_node(self, NodePathself, PandaNodenode, intsort, Threadcurrent_thread) -> Any: ...
    @overload
    def attach_new_node(self, NodePathself, strname, intsort, Threadcurrent_thread) -> Any: ...
    def calcTightBounds(self, *args, **kwargs): ...
    def calc_tight_bounds(
        self, NodePathself, LPoint3fmin_point, LPoint3fmax_point, constNodePathother, Threadcurrent_thread
    ) -> Any: ...
    def clear(self, constNodePathself) -> Any: ...
    def clearAntialias(self, *args, **kwargs): ...
    def clearAttrib(self, *args, **kwargs): ...
    def clearAudioVolume(self, *args, **kwargs): ...
    def clearBillboard(self, *args, **kwargs): ...
    def clearBin(self, *args, **kwargs): ...
    def clearClipPlane(self, *args, **kwargs): ...
    def clearColor(self, *args, **kwargs): ...
    def clearColorScale(self, *args, **kwargs): ...
    def clearCompass(self, *args, **kwargs): ...
    def clearDepthBias(self, *args, **kwargs): ...
    def clearDepthOffset(self, *args, **kwargs): ...
    def clearDepthTest(self, *args, **kwargs): ...
    def clearDepthWrite(self, *args, **kwargs): ...
    def clearEffect(self, *args, **kwargs): ...
    def clearEffects(self, *args, **kwargs): ...
    def clearFog(self, *args, **kwargs): ...
    def clearLight(self, *args, **kwargs): ...
    def clearLogicOp(self, *args, **kwargs): ...
    def clearMat(self, *args, **kwargs): ...
    def clearMaterial(self, *args, **kwargs): ...
    def clearModelNodes(self, *args, **kwargs): ...
    def clearOccluder(self, *args, **kwargs): ...
    def clearProjectTexture(self, *args, **kwargs): ...
    def clearPythonTag(self, *args, **kwargs): ...
    def clearRenderMode(self, *args, **kwargs): ...
    def clearScissor(self, *args, **kwargs): ...
    def clearShader(self, *args, **kwargs): ...
    def clearShaderInput(self, *args, **kwargs): ...
    def clearTag(self, *args, **kwargs): ...
    def clearTexGen(self, *args, **kwargs): ...
    def clearTexProjector(self, *args, **kwargs): ...
    def clearTexTransform(self, *args, **kwargs): ...
    def clearTexture(self, *args, **kwargs): ...
    def clearTransform(self, *args, **kwargs): ...
    def clearTransparency(self, *args, **kwargs): ...
    def clearTwoSided(self, *args, **kwargs): ...
    def clear_antialias(self, constNodePathself) -> Any: ...
    def clear_attrib(self, constNodePathself, TypeHandletype) -> Any: ...
    def clear_audio_volume(self, constNodePathself) -> Any: ...
    def clear_billboard(self, constNodePathself) -> Any: ...
    def clear_bin(self, constNodePathself) -> Any: ...
    @overload
    def clear_clip_plane(self, constNodePathself) -> Any: ...
    @overload
    def clear_clip_plane(self, constNodePathself, constNodePathclip_plane) -> Any: ...
    def clear_color(self, constNodePathself) -> Any: ...
    def clear_color_scale(self, constNodePathself) -> Any: ...
    def clear_compass(self, constNodePathself) -> Any: ...
    def clear_depth_bias(self, constNodePathself) -> Any: ...
    def clear_depth_offset(self, constNodePathself) -> Any: ...
    def clear_depth_test(self, constNodePathself) -> Any: ...
    def clear_depth_write(self, constNodePathself) -> Any: ...
    def clear_effect(self, constNodePathself, TypeHandletype) -> Any: ...
    def clear_effects(self, constNodePathself) -> Any: ...
    def clear_fog(self, constNodePathself) -> Any: ...
    @overload
    def clear_light(self, constNodePathself) -> Any: ...
    @overload
    def clear_light(self, constNodePathself, constNodePathlight) -> Any: ...
    def clear_logic_op(self, constNodePathself) -> Any: ...
    def clear_mat(self, constNodePathself) -> Any: ...
    def clear_material(self, constNodePathself) -> Any: ...
    def clear_model_nodes(self, constNodePathself) -> Any: ...
    @overload
    def clear_occluder(self, constNodePathself) -> Any: ...
    @overload
    def clear_occluder(self, constNodePathself, constNodePathoccluder) -> Any: ...
    def clear_project_texture(self, constNodePathself, TextureStagestage) -> Any: ...
    def clear_python_tag(self, constNodePathself, objectkeys) -> Any: ...
    def clear_render_mode(self, constNodePathself) -> Any: ...
    def clear_scissor(self, constNodePathself) -> Any: ...
    def clear_shader(self, constNodePathself) -> Any: ...
    def clear_shader_input(self, constNodePathself, constInternalNameid) -> Any: ...
    @overload
    def clear_tag(self, constNodePathself, strkey) -> Any: ...
    @overload
    def clear_tag(self) -> Any: ...
    @overload
    def clear_tex_gen(self, constNodePathself) -> Any: ...
    @overload
    def clear_tex_gen(self, constNodePathself, TextureStagestage) -> Any: ...
    @overload
    def clear_tex_projector(self, constNodePathself) -> Any: ...
    @overload
    def clear_tex_projector(self, constNodePathself, TextureStagestage) -> Any: ...
    @overload
    def clear_tex_transform(self, constNodePathself) -> Any: ...
    @overload
    def clear_tex_transform(self, constNodePathself, TextureStagestage) -> Any: ...
    @overload
    def clear_texture(self, constNodePathself) -> Any: ...
    @overload
    def clear_texture(self, constNodePathself, TextureStagestage) -> Any: ...
    @overload
    def clear_transform(self, constNodePathself) -> Any: ...
    @overload
    def clear_transform(self, constNodePathself, constNodePathother, Threadcurrent_thread) -> Any: ...
    @overload
    def clear_transform(self, constNodePathself, Threadcurrent_thread) -> Any: ...
    def clear_transparency(self, constNodePathself) -> Any: ...
    def clear_two_sided(self, constNodePathself) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, NodePathself, constNodePathother) -> Any: ...
    @overload
    def compare_to(self, NodePathself, constWeakNodePathother) -> Any: ...
    def composeColorScale(self, *args, **kwargs): ...
    @overload
    def compose_color_scale(self, constNodePathself, constLVecBase4fscale) -> Any: ...
    @overload
    def compose_color_scale(self, constNodePathself, constLVecBase4fscale, intpriority) -> Any: ...
    @overload
    def compose_color_scale(self, constNodePathself, floatsx, floatsy, floatsz, floatsa, intpriority) -> Any: ...
    def copyTo(self, *args, **kwargs): ...
    def copy_to(self, NodePathself, constNodePathother, intsort, Threadcurrent_thread) -> Any: ...
    def countNumDescendants(self, *args, **kwargs): ...
    def count_num_descendants(self, NodePathself) -> Any: ...
    @staticmethod
    def decodeFromBamStream(*args, **kwargs): ...
    @staticmethod
    def decode_from_bam_stream(bytesdata, BamReaderreader) -> Any: ...
    def detachNode(self, *args, **kwargs): ...
    @overload
    def detach_node(self, constNodePathself, Threadcurrent_thread) -> Any: ...
    @overload
    def detach_node(self) -> Any: ...
    @overload
    def detach_node(self) -> Any: ...
    def doBillboardAxis(self, *args, **kwargs): ...
    def doBillboardPointEye(self, *args, **kwargs): ...
    def doBillboardPointWorld(self, *args, **kwargs): ...
    def do_billboard_axis(self, constNodePathself, constNodePathcamera, floatoffset) -> Any: ...
    def do_billboard_point_eye(self, constNodePathself, constNodePathcamera, floatoffset) -> Any: ...
    def do_billboard_point_world(self, constNodePathself, constNodePathcamera, floatoffset) -> Any: ...
    def encodeToBamStream(self, *args, **kwargs): ...
    @overload
    def encode_to_bam_stream(self, NodePathself) -> Any: ...
    @overload
    def encode_to_bam_stream(self) -> Any: ...
    @staticmethod
    def fail() -> Any: ...
    def find(self, NodePathself, strpath) -> Any: ...
    def findAllMatches(self, *args, **kwargs): ...
    def findAllMaterials(self, *args, **kwargs): ...
    def findAllPathsTo(self, *args, **kwargs): ...
    def findAllTexcoords(self, *args, **kwargs): ...
    def findAllTextureStages(self, *args, **kwargs): ...
    def findAllTextures(self, *args, **kwargs): ...
    def findAllVertexColumns(self, *args, **kwargs): ...
    def findMaterial(self, *args, **kwargs): ...
    def findNetPythonTag(self, *args, **kwargs): ...
    def findNetTag(self, *args, **kwargs): ...
    def findPathTo(self, *args, **kwargs): ...
    def findTexture(self, *args, **kwargs): ...
    def findTextureStage(self, *args, **kwargs): ...
    def find_all_matches(self, NodePathself, strpath) -> Any: ...
    @overload
    def find_all_materials(self, NodePathself) -> Any: ...
    @overload
    def find_all_materials(self, NodePathself, strname) -> Any: ...
    def find_all_paths_to(self, NodePathself, PandaNodenode) -> Any: ...
    @overload
    def find_all_texcoords(self, NodePathself) -> Any: ...
    @overload
    def find_all_texcoords(self, NodePathself, strname) -> Any: ...
    @overload
    def find_all_texture_stages(self, NodePathself) -> Any: ...
    @overload
    def find_all_texture_stages(self, NodePathself, strname) -> Any: ...
    @overload
    def find_all_textures(self, NodePathself) -> Any: ...
    @overload
    def find_all_textures(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def find_all_textures(self, NodePathself, strname) -> Any: ...
    @overload
    def find_all_vertex_columns(self, NodePathself) -> Any: ...
    @overload
    def find_all_vertex_columns(self, NodePathself, strname) -> Any: ...
    def find_material(self, NodePathself, strname) -> Any: ...
    def find_net_python_tag(self, NodePathself, objectkeys) -> Any: ...
    def find_net_tag(self, NodePathself, strkey) -> Any: ...
    def find_path_to(self, NodePathself, PandaNodenode) -> Any: ...
    @overload
    def find_texture(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def find_texture(self, NodePathself, strname) -> Any: ...
    def find_texture_stage(self, NodePathself, strname) -> Any: ...
    def flattenLight(self, *args, **kwargs): ...
    def flattenMedium(self, *args, **kwargs): ...
    def flattenStrong(self, *args, **kwargs): ...
    def flatten_light(self, constNodePathself) -> Any: ...
    def flatten_medium(self, constNodePathself) -> Any: ...
    def flatten_strong(self, constNodePathself) -> Any: ...
    def forceRecomputeBounds(self, *args, **kwargs): ...
    def force_recompute_bounds(self, constNodePathself) -> Any: ...
    def getAncestor(self, *args, **kwargs): ...
    def getAncestors(self, *args, **kwargs): ...
    def getAntialias(self, *args, **kwargs): ...
    def getAttrib(self, *args, **kwargs): ...
    def getAudioVolume(self, *args, **kwargs): ...
    def getBinDrawOrder(self, *args, **kwargs): ...
    def getBinName(self, *args, **kwargs): ...
    def getBounds(self, *args, **kwargs): ...
    def getChild(self, *args, **kwargs): ...
    def getChildren(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCollideMask(self, *args, **kwargs): ...
    def getColor(self, *args, **kwargs): ...
    def getColorScale(self, *args, **kwargs): ...
    def getCommonAncestor(self, *args, **kwargs): ...
    def getDepthOffset(self, *args, **kwargs): ...
    def getDepthTest(self, *args, **kwargs): ...
    def getDepthWrite(self, *args, **kwargs): ...
    def getDistance(self, *args, **kwargs): ...
    def getEffect(self, *args, **kwargs): ...
    def getEffects(self, *args, **kwargs): ...
    def getErrorType(self, *args, **kwargs): ...
    def getFog(self, *args, **kwargs): ...
    def getH(self, *args, **kwargs): ...
    def getHiddenAncestor(self, *args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getInstanceCount(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLogicOp(self, *args, **kwargs): ...
    def getMat(self, *args, **kwargs): ...
    def getMaterial(self, *args, **kwargs): ...
    @staticmethod
    def getMaxSearchDepth(*args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNetAudioVolume(self, *args, **kwargs): ...
    def getNetPrevTransform(self, *args, **kwargs): ...
    def getNetPythonTag(self, *args, **kwargs): ...
    def getNetState(self, *args, **kwargs): ...
    def getNetTag(self, *args, **kwargs): ...
    def getNetTransform(self, *args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getNodes(self, *args, **kwargs): ...
    def getNumChildren(self, *args, **kwargs): ...
    def getNumNodes(self, *args, **kwargs): ...
    def getP(self, *args, **kwargs): ...
    def getParent(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getPosDelta(self, *args, **kwargs): ...
    def getPrevTransform(self, *args, **kwargs): ...
    def getPythonTag(self, *args, **kwargs): ...
    def getPythonTagKeys(self, *args, **kwargs): ...
    def getPythonTags(self, *args, **kwargs): ...
    def getQuat(self, *args, **kwargs): ...
    def getR(self, *args, **kwargs): ...
    def getRelativePoint(self, *args, **kwargs): ...
    def getRelativeVector(self, *args, **kwargs): ...
    def getRenderMode(self, *args, **kwargs): ...
    def getRenderModePerspective(self, *args, **kwargs): ...
    def getRenderModeThickness(self, *args, **kwargs): ...
    def getSa(self, *args, **kwargs): ...
    def getSb(self, *args, **kwargs): ...
    def getScale(self, *args, **kwargs): ...
    def getSg(self, *args, **kwargs): ...
    def getShader(self, *args, **kwargs): ...
    def getShaderInput(self, *args, **kwargs): ...
    def getShear(self, *args, **kwargs): ...
    def getShxy(self, *args, **kwargs): ...
    def getShxz(self, *args, **kwargs): ...
    def getShyz(self, *args, **kwargs): ...
    def getSort(self, *args, **kwargs): ...
    def getSr(self, *args, **kwargs): ...
    def getStashedAncestor(self, *args, **kwargs): ...
    def getStashedChildren(self, *args, **kwargs): ...
    def getState(self, *args, **kwargs): ...
    def getSx(self, *args, **kwargs): ...
    def getSy(self, *args, **kwargs): ...
    def getSz(self, *args, **kwargs): ...
    def getTag(self, *args, **kwargs): ...
    def getTagKeys(self, *args, **kwargs): ...
    def getTags(self, *args, **kwargs): ...
    def getTexGen(self, *args, **kwargs): ...
    def getTexHpr(self, *args, **kwargs): ...
    def getTexOffset(self, *args, **kwargs): ...
    def getTexPos(self, *args, **kwargs): ...
    def getTexProjectorFrom(self, *args, **kwargs): ...
    def getTexProjectorTo(self, *args, **kwargs): ...
    def getTexRotate(self, *args, **kwargs): ...
    def getTexScale(self, *args, **kwargs): ...
    def getTexScale3d(self, *args, **kwargs): ...
    def getTexTransform(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    def getTextureSampler(self, *args, **kwargs): ...
    def getTightBounds(self, *args, **kwargs): ...
    def getTop(self, *args, **kwargs): ...
    def getTopNode(self, *args, **kwargs): ...
    def getTransform(self, *args, **kwargs): ...
    def getTransparency(self, *args, **kwargs): ...
    def getTwoSided(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_ancestor(self, NodePathself, intindex, Threadcurrent_thread) -> Any: ...
    def get_ancestors(self, *args, **kwargs): ...
    def get_antialias(self, NodePathself) -> Any: ...
    def get_attrib(self, NodePathself, TypeHandletype) -> Any: ...
    def get_audio_volume(self, NodePathself) -> Any: ...
    def get_bin_draw_order(self, NodePathself) -> Any: ...
    def get_bin_name(self, NodePathself) -> Any: ...
    def get_bounds(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def get_child(self, NodePathself, intn, Threadcurrent_thread) -> Any: ...
    def get_children(self, NodePathself, Threadcurrent_thread) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_collide_mask(self, NodePathself) -> Any: ...
    def get_color(self, NodePathself) -> Any: ...
    def get_color_scale(self, NodePathself) -> Any: ...
    def get_common_ancestor(self, NodePathself, constNodePathother, Threadcurrent_thread) -> Any: ...
    def get_depth_offset(self, NodePathself) -> Any: ...
    def get_depth_test(self, NodePathself) -> Any: ...
    def get_depth_write(self, NodePathself) -> Any: ...
    def get_distance(self, NodePathself, constNodePathother) -> Any: ...
    def get_effect(self, NodePathself, TypeHandletype) -> Any: ...
    def get_effects(self, NodePathself) -> Any: ...
    def get_error_type(self, NodePathself) -> Any: ...
    def get_fog(self, NodePathself) -> Any: ...
    @overload
    def get_h(self, NodePathself) -> Any: ...
    @overload
    def get_h(self, NodePathself, constNodePathother) -> Any: ...
    def get_hidden_ancestor(self, NodePathself, BitMaskcamera_mask, Threadcurrent_thread) -> Any: ...
    @overload
    def get_hpr(self, NodePathself) -> Any: ...
    @overload
    def get_hpr(self, NodePathself, constNodePathother) -> Any: ...
    def get_instance_count(self, NodePathself) -> Any: ...
    def get_key(self, NodePathself) -> Any: ...
    def get_logic_op(self, NodePathself) -> Any: ...
    @overload
    def get_mat(self, NodePathself) -> Any: ...
    @overload
    def get_mat(self, NodePathself, constNodePathother) -> Any: ...
    def get_material(self, NodePathself) -> Any: ...
    @staticmethod
    def get_max_search_depth() -> Any: ...
    def get_name(self, NodePathself) -> Any: ...
    def get_net_audio_volume(self, NodePathself) -> Any: ...
    def get_net_prev_transform(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def get_net_python_tag(self, NodePathself, objectkeys) -> Any: ...
    def get_net_state(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def get_net_tag(self, NodePathself, strkey) -> Any: ...
    def get_net_transform(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def get_node(self, NodePathself, intindex, Threadcurrent_thread) -> Any: ...
    def get_nodes(self, *args, **kwargs): ...
    def get_num_children(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def get_num_nodes(self, NodePathself, Threadcurrent_thread) -> Any: ...
    @overload
    def get_p(self, NodePathself) -> Any: ...
    @overload
    def get_p(self, NodePathself, constNodePathother) -> Any: ...
    def get_parent(self, NodePathself, Threadcurrent_thread) -> Any: ...
    @overload
    def get_pos(self, NodePathself) -> Any: ...
    @overload
    def get_pos(self, NodePathself, constNodePathother) -> Any: ...
    @overload
    def get_pos_delta(self, NodePathself) -> Any: ...
    @overload
    def get_pos_delta(self, NodePathself, constNodePathother) -> Any: ...
    @overload
    def get_prev_transform(self, NodePathself) -> Any: ...
    @overload
    def get_prev_transform(self, NodePathself, constNodePathother, Threadcurrent_thread) -> Any: ...
    @overload
    def get_prev_transform(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def get_python_tag(self, NodePathself, objectkeys) -> Any: ...
    def get_python_tag_keys(self, NodePathself) -> Any: ...
    def get_python_tags(self, constNodePathself) -> Any: ...
    @overload
    def get_quat(self, NodePathself) -> Any: ...
    @overload
    def get_quat(self, NodePathself, constNodePathother) -> Any: ...
    @overload
    def get_r(self, NodePathself) -> Any: ...
    @overload
    def get_r(self, NodePathself, constNodePathother) -> Any: ...
    def get_relative_point(self, NodePathself, constNodePathother, constLVecBase3fpoint) -> Any: ...
    def get_relative_vector(self, NodePathself, constNodePathother, constLVecBase3fvec) -> Any: ...
    def get_render_mode(self, NodePathself) -> Any: ...
    def get_render_mode_perspective(self, NodePathself) -> Any: ...
    def get_render_mode_thickness(self, NodePathself) -> Any: ...
    def get_sa(self, NodePathself) -> Any: ...
    def get_sb(self, NodePathself) -> Any: ...
    @overload
    def get_scale(self, NodePathself) -> Any: ...
    @overload
    def get_scale(self, NodePathself, constNodePathother) -> Any: ...
    def get_sg(self, NodePathself) -> Any: ...
    def get_shader(self, NodePathself) -> Any: ...
    def get_shader_input(self, NodePathself, constInternalNameid) -> Any: ...
    @overload
    def get_shear(self, NodePathself) -> Any: ...
    @overload
    def get_shear(self, NodePathself, constNodePathother) -> Any: ...
    @overload
    def get_shxy(self, NodePathself) -> Any: ...
    @overload
    def get_shxy(self, NodePathself, constNodePathother) -> Any: ...
    @overload
    def get_shxz(self, NodePathself) -> Any: ...
    @overload
    def get_shxz(self, NodePathself, constNodePathother) -> Any: ...
    @overload
    def get_shyz(self, NodePathself) -> Any: ...
    @overload
    def get_shyz(self, NodePathself, constNodePathother) -> Any: ...
    def get_sort(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def get_sr(self, NodePathself) -> Any: ...
    def get_stashed_ancestor(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def get_stashed_children(self, NodePathself, Threadcurrent_thread) -> Any: ...
    @overload
    def get_state(self, NodePathself) -> Any: ...
    @overload
    def get_state(self, NodePathself, constNodePathother, Threadcurrent_thread) -> Any: ...
    @overload
    def get_state(self, NodePathself, Threadcurrent_thread) -> Any: ...
    @overload
    def get_sx(self, NodePathself) -> Any: ...
    @overload
    def get_sx(self, NodePathself, constNodePathother) -> Any: ...
    @overload
    def get_sy(self, NodePathself) -> Any: ...
    @overload
    def get_sy(self, NodePathself, constNodePathother) -> Any: ...
    @overload
    def get_sz(self, NodePathself) -> Any: ...
    @overload
    def get_sz(self, NodePathself, constNodePathother) -> Any: ...
    def get_tag(self, NodePathself, strkey) -> Any: ...
    def get_tag_keys(self, NodePathself) -> Any: ...
    def get_tags(self, NodePathself) -> Any: ...
    def get_tex_gen(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def get_tex_hpr(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def get_tex_hpr(self, NodePathself, constNodePathother, TextureStagestage) -> Any: ...
    @overload
    def get_tex_offset(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def get_tex_offset(self, NodePathself, constNodePathother, TextureStagestage) -> Any: ...
    @overload
    def get_tex_pos(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def get_tex_pos(self, NodePathself, constNodePathother, TextureStagestage) -> Any: ...
    def get_tex_projector_from(self, NodePathself, TextureStagestage) -> Any: ...
    def get_tex_projector_to(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def get_tex_rotate(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def get_tex_rotate(self, NodePathself, constNodePathother, TextureStagestage) -> Any: ...
    @overload
    def get_tex_scale(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def get_tex_scale(self, NodePathself, constNodePathother, TextureStagestage) -> Any: ...
    @overload
    def get_tex_scale_3d(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def get_tex_scale_3d(self, NodePathself, constNodePathother, TextureStagestage) -> Any: ...
    @overload
    def get_tex_transform(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def get_tex_transform(self, NodePathself, constNodePathother, TextureStagestage) -> Any: ...
    @overload
    def get_texture(self, NodePathself) -> Any: ...
    @overload
    def get_texture(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def get_texture_sampler(self, NodePathself) -> Any: ...
    @overload
    def get_texture_sampler(self, NodePathself, TextureStagestage) -> Any: ...
    def get_tight_bounds(self, NodePathself, constNodePathother) -> Any: ...
    def get_top(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def get_top_node(self, NodePathself, Threadcurrent_thread) -> Any: ...
    @overload
    def get_transform(self, NodePathself) -> Any: ...
    @overload
    def get_transform(self, NodePathself, constNodePathother, Threadcurrent_thread) -> Any: ...
    @overload
    def get_transform(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def get_transparency(self, NodePathself) -> Any: ...
    def get_two_sided(self, NodePathself) -> Any: ...
    @overload
    def get_x(self, NodePathself) -> Any: ...
    @overload
    def get_x(self, NodePathself, constNodePathother) -> Any: ...
    @overload
    def get_y(self, NodePathself) -> Any: ...
    @overload
    def get_y(self, NodePathself, constNodePathother) -> Any: ...
    @overload
    def get_z(self, NodePathself) -> Any: ...
    @overload
    def get_z(self, NodePathself, constNodePathother) -> Any: ...
    def hasAntialias(self, *args, **kwargs): ...
    def hasAttrib(self, *args, **kwargs): ...
    def hasAudioVolume(self, *args, **kwargs): ...
    def hasBillboard(self, *args, **kwargs): ...
    def hasBin(self, *args, **kwargs): ...
    def hasClipPlane(self, *args, **kwargs): ...
    def hasClipPlaneOff(self, *args, **kwargs): ...
    def hasColor(self, *args, **kwargs): ...
    def hasColorScale(self, *args, **kwargs): ...
    def hasCompass(self, *args, **kwargs): ...
    def hasDepthBias(self, *args, **kwargs): ...
    def hasDepthOffset(self, *args, **kwargs): ...
    def hasDepthTest(self, *args, **kwargs): ...
    def hasDepthWrite(self, *args, **kwargs): ...
    def hasEffect(self, *args, **kwargs): ...
    def hasFog(self, *args, **kwargs): ...
    def hasFogOff(self, *args, **kwargs): ...
    def hasLight(self, *args, **kwargs): ...
    def hasLightOff(self, *args, **kwargs): ...
    def hasLogicOp(self, *args, **kwargs): ...
    def hasMat(self, *args, **kwargs): ...
    def hasMaterial(self, *args, **kwargs): ...
    def hasNetPythonTag(self, *args, **kwargs): ...
    def hasNetTag(self, *args, **kwargs): ...
    def hasOccluder(self, *args, **kwargs): ...
    def hasParent(self, *args, **kwargs): ...
    def hasPythonTag(self, *args, **kwargs): ...
    def hasRenderMode(self, *args, **kwargs): ...
    def hasScissor(self, *args, **kwargs): ...
    def hasTag(self, *args, **kwargs): ...
    def hasTexGen(self, *args, **kwargs): ...
    def hasTexProjector(self, *args, **kwargs): ...
    def hasTexTransform(self, *args, **kwargs): ...
    def hasTexcoord(self, *args, **kwargs): ...
    def hasTexture(self, *args, **kwargs): ...
    def hasTextureOff(self, *args, **kwargs): ...
    def hasTransparency(self, *args, **kwargs): ...
    def hasTwoSided(self, *args, **kwargs): ...
    def hasVertexColumn(self, *args, **kwargs): ...
    def has_antialias(self, NodePathself) -> Any: ...
    def has_attrib(self, NodePathself, TypeHandletype) -> Any: ...
    def has_audio_volume(self, NodePathself) -> Any: ...
    def has_billboard(self, NodePathself) -> Any: ...
    def has_bin(self, NodePathself) -> Any: ...
    def has_clip_plane(self, NodePathself, constNodePathclip_plane) -> Any: ...
    @overload
    def has_clip_plane_off(self, NodePathself) -> Any: ...
    @overload
    def has_clip_plane_off(self, NodePathself, constNodePathclip_plane) -> Any: ...
    def has_color(self, NodePathself) -> Any: ...
    def has_color_scale(self, NodePathself) -> Any: ...
    def has_compass(self, NodePathself) -> Any: ...
    def has_depth_bias(self, NodePathself) -> Any: ...
    def has_depth_offset(self, NodePathself) -> Any: ...
    def has_depth_test(self, NodePathself) -> Any: ...
    def has_depth_write(self, NodePathself) -> Any: ...
    def has_effect(self, NodePathself, TypeHandletype) -> Any: ...
    def has_fog(self, NodePathself) -> Any: ...
    def has_fog_off(self, NodePathself) -> Any: ...
    def has_light(self, NodePathself, constNodePathlight) -> Any: ...
    @overload
    def has_light_off(self, NodePathself) -> Any: ...
    @overload
    def has_light_off(self, NodePathself, constNodePathlight) -> Any: ...
    def has_logic_op(self, NodePathself) -> Any: ...
    def has_mat(self, NodePathself) -> Any: ...
    def has_material(self, NodePathself) -> Any: ...
    def has_net_python_tag(self, NodePathself, objectkeys) -> Any: ...
    def has_net_tag(self, NodePathself, strkey) -> Any: ...
    def has_occluder(self, NodePathself, constNodePathoccluder) -> Any: ...
    def has_parent(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def has_python_tag(self, NodePathself, objectkeys) -> Any: ...
    def has_render_mode(self, NodePathself) -> Any: ...
    def has_scissor(self, NodePathself) -> Any: ...
    def has_tag(self, NodePathself, strkey) -> Any: ...
    def has_tex_gen(self, NodePathself, TextureStagestage) -> Any: ...
    def has_tex_projector(self, NodePathself, TextureStagestage) -> Any: ...
    def has_tex_transform(self, NodePathself, TextureStagestage) -> Any: ...
    def has_texcoord(self, NodePathself, strtexcoord_name) -> Any: ...
    @overload
    def has_texture(self, NodePathself) -> Any: ...
    @overload
    def has_texture(self, NodePathself, TextureStagestage) -> Any: ...
    @overload
    def has_texture_off(self, NodePathself) -> Any: ...
    @overload
    def has_texture_off(self, NodePathself, TextureStagestage) -> Any: ...
    def has_transparency(self, NodePathself) -> Any: ...
    def has_two_sided(self, NodePathself) -> Any: ...
    def has_vertex_column(self, NodePathself, constInternalNamename) -> Any: ...
    def headsUp(self, *args, **kwargs): ...
    @overload
    def heads_up(self, constNodePathself, constNodePathother) -> Any: ...
    @overload
    def heads_up(self, constNodePathself, constLPoint3fpoint) -> Any: ...
    @overload
    def heads_up(self, constNodePathself, constNodePathother, constLPoint3fpoint) -> Any: ...
    @overload
    def heads_up(self, constNodePathself, constLPoint3fpoint, constLVector3fup) -> Any: ...
    @overload
    def heads_up(self, constNodePathself, constNodePathother, constLPoint3fpoint, constLVector3fup) -> Any: ...
    @overload
    def heads_up(self, constNodePathself, floatx, floaty, floatz) -> Any: ...
    @overload
    def heads_up(self, constNodePathself, constNodePathother, floatx, floaty, floatz) -> Any: ...
    @overload
    def hide(self, constNodePathself) -> Any: ...
    @overload
    def hide(self, constNodePathself, BitMaskcamera_mask) -> Any: ...
    def hideBounds(self, *args, **kwargs): ...
    def hide_bounds(self, constNodePathself) -> Any: ...
    def instanceTo(self, *args, **kwargs): ...
    def instanceUnderNode(self, *args, **kwargs): ...
    def instance_to(self, NodePathself, constNodePathother, intsort, Threadcurrent_thread) -> Any: ...
    def instance_under_node(self, NodePathself, constNodePathother, strname, intsort, Threadcurrent_thread) -> Any: ...
    def isAncestorOf(self, *args, **kwargs): ...
    def isEmpty(self, *args, **kwargs): ...
    def isHidden(self, *args, **kwargs): ...
    def isSameGraph(self, *args, **kwargs): ...
    def isSingleton(self, *args, **kwargs): ...
    def isStashed(self, *args, **kwargs): ...
    def is_ancestor_of(self, NodePathself, constNodePathother, Threadcurrent_thread) -> Any: ...
    def is_empty(self, NodePathself) -> Any: ...
    def is_hidden(self, NodePathself, BitMaskcamera_mask) -> Any: ...
    def is_same_graph(self, NodePathself, constNodePathother, Threadcurrent_thread) -> Any: ...
    def is_singleton(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def is_stashed(self, NodePathself) -> Any: ...
    def listTags(self, *args, **kwargs): ...
    @overload
    def list_tags(self, NodePathself) -> Any: ...
    @overload
    def list_tags(self) -> Any: ...
    def lookAt(self, *args, **kwargs): ...
    @overload
    def look_at(self, constNodePathself, constNodePathother) -> Any: ...
    @overload
    def look_at(self, constNodePathself, constLPoint3fpoint) -> Any: ...
    @overload
    def look_at(self, constNodePathself, constNodePathother, constLPoint3fpoint) -> Any: ...
    @overload
    def look_at(self, constNodePathself, constLPoint3fpoint, constLVector3fup) -> Any: ...
    @overload
    def look_at(self, constNodePathself, constNodePathother, constLPoint3fpoint, constLVector3fup) -> Any: ...
    @overload
    def look_at(self, constNodePathself, floatx, floaty, floatz) -> Any: ...
    @overload
    def look_at(self, constNodePathself, constNodePathother, floatx, floaty, floatz) -> Any: ...
    @overload
    def ls(self, NodePathself) -> Any: ...
    @overload
    def ls(self, NodePathself, ostreamout, intindent_level) -> Any: ...
    def node(self, NodePathself) -> Any: ...
    @staticmethod
    def notFound(*args, **kwargs): ...
    @staticmethod
    def not_found() -> Any: ...
    def output(self, NodePathself, ostreamout) -> Any: ...
    def premungeScene(self, *args, **kwargs): ...
    def premunge_scene(self, constNodePathself, GraphicsStateGuardianBasegsg) -> Any: ...
    def prepareScene(self, *args, **kwargs): ...
    def prepare_scene(self, constNodePathself, GraphicsStateGuardianBasegsg) -> Any: ...
    def projectTexture(self, *args, **kwargs): ...
    def project_texture(self, constNodePathself, TextureStagestage, Texturetex, constNodePathprojector) -> Any: ...
    def removeNode(self, *args, **kwargs): ...
    @overload
    def remove_node(self, constNodePathself, Threadcurrent_thread) -> Any: ...
    @overload
    def remove_node(self) -> Any: ...
    @overload
    def remove_node(self) -> Any: ...
    @staticmethod
    def removed() -> Any: ...
    def reparentTo(self, *args, **kwargs): ...
    def reparent_to(self, constNodePathself, constNodePathother, intsort, Threadcurrent_thread) -> Any: ...
    def replaceMaterial(self, *args, **kwargs): ...
    def replaceTexture(self, *args, **kwargs): ...
    @overload
    def replace_material(self, constNodePathself, Materialmat, Materialnew_mat) -> Any: ...
    @overload
    def replace_material(self, constNodePathself, Materialmat, NoneTypenew_mat) -> Any: ...
    @overload
    def replace_texture(self, constNodePathself, Texturetex, Texturenew_tex) -> Any: ...
    @overload
    def replace_texture(self, constNodePathself, Texturetex, NoneTypenew_tex) -> Any: ...
    def reverseLs(self, *args, **kwargs): ...
    @overload
    def reverse_ls(self, NodePathself) -> Any: ...
    @overload
    def reverse_ls(self, NodePathself, ostreamout, intindent_level) -> Any: ...
    def setAllColorScale(self, *args, **kwargs): ...
    def setAlphaScale(self, *args, **kwargs): ...
    def setAntialias(self, *args, **kwargs): ...
    def setAttrib(self, *args, **kwargs): ...
    def setAudioVolume(self, *args, **kwargs): ...
    def setAudioVolumeOff(self, *args, **kwargs): ...
    def setBillboardAxis(self, *args, **kwargs): ...
    def setBillboardPointEye(self, *args, **kwargs): ...
    def setBillboardPointWorld(self, *args, **kwargs): ...
    def setBin(self, *args, **kwargs): ...
    def setClipPlane(self, *args, **kwargs): ...
    def setClipPlaneOff(self, *args, **kwargs): ...
    def setCollideMask(self, *args, **kwargs): ...
    def setCollideOwner(self, *args, **kwargs): ...
    def setColor(self, *args, **kwargs): ...
    def setColorOff(self, *args, **kwargs): ...
    def setColorScale(self, *args, **kwargs): ...
    def setColorScaleOff(self, *args, **kwargs): ...
    def setCompass(self, *args, **kwargs): ...
    def setDepthBias(self, *args, **kwargs): ...
    def setDepthOffset(self, *args, **kwargs): ...
    def setDepthTest(self, *args, **kwargs): ...
    def setDepthWrite(self, *args, **kwargs): ...
    def setEffect(self, *args, **kwargs): ...
    def setEffects(self, *args, **kwargs): ...
    def setFluidPos(self, *args, **kwargs): ...
    def setFluidX(self, *args, **kwargs): ...
    def setFluidY(self, *args, **kwargs): ...
    def setFluidZ(self, *args, **kwargs): ...
    def setFog(self, *args, **kwargs): ...
    def setFogOff(self, *args, **kwargs): ...
    def setH(self, *args, **kwargs): ...
    def setHpr(self, *args, **kwargs): ...
    def setHprScale(self, *args, **kwargs): ...
    def setInstanceCount(self, *args, **kwargs): ...
    def setLight(self, *args, **kwargs): ...
    def setLightOff(self, *args, **kwargs): ...
    def setLogicOp(self, *args, **kwargs): ...
    def setMat(self, *args, **kwargs): ...
    def setMaterial(self, *args, **kwargs): ...
    def setMaterialOff(self, *args, **kwargs): ...
    @staticmethod
    def setMaxSearchDepth(*args, **kwargs): ...
    def setName(self, *args, **kwargs): ...
    def setOccluder(self, *args, **kwargs): ...
    def setP(self, *args, **kwargs): ...
    def setPos(self, *args, **kwargs): ...
    def setPosHpr(self, *args, **kwargs): ...
    def setPosHprScale(self, *args, **kwargs): ...
    def setPosHprScaleShear(self, *args, **kwargs): ...
    def setPosQuat(self, *args, **kwargs): ...
    def setPosQuatScale(self, *args, **kwargs): ...
    def setPosQuatScaleShear(self, *args, **kwargs): ...
    def setPrevTransform(self, *args, **kwargs): ...
    def setPythonTag(self, *args, **kwargs): ...
    def setQuat(self, *args, **kwargs): ...
    def setQuatScale(self, *args, **kwargs): ...
    def setR(self, *args, **kwargs): ...
    def setRenderMode(self, *args, **kwargs): ...
    def setRenderModeFilled(self, *args, **kwargs): ...
    def setRenderModeFilledWireframe(self, *args, **kwargs): ...
    def setRenderModePerspective(self, *args, **kwargs): ...
    def setRenderModeThickness(self, *args, **kwargs): ...
    def setRenderModeWireframe(self, *args, **kwargs): ...
    def setSa(self, *args, **kwargs): ...
    def setSb(self, *args, **kwargs): ...
    def setScale(self, *args, **kwargs): ...
    def setScissor(self, *args, **kwargs): ...
    def setSg(self, *args, **kwargs): ...
    def setShader(self, *args, **kwargs): ...
    def setShaderAuto(self, *args, **kwargs): ...
    def setShaderInput(self, *args, **kwargs): ...
    def setShaderInputs(self, *args, **kwargs): ...
    def setShaderOff(self, *args, **kwargs): ...
    def setShear(self, *args, **kwargs): ...
    def setShxy(self, *args, **kwargs): ...
    def setShxz(self, *args, **kwargs): ...
    def setShyz(self, *args, **kwargs): ...
    def setSr(self, *args, **kwargs): ...
    def setState(self, *args, **kwargs): ...
    def setSx(self, *args, **kwargs): ...
    def setSy(self, *args, **kwargs): ...
    def setSz(self, *args, **kwargs): ...
    def setTag(self, *args, **kwargs): ...
    def setTexGen(self, *args, **kwargs): ...
    def setTexHpr(self, *args, **kwargs): ...
    def setTexOffset(self, *args, **kwargs): ...
    def setTexPos(self, *args, **kwargs): ...
    def setTexProjector(self, *args, **kwargs): ...
    def setTexRotate(self, *args, **kwargs): ...
    def setTexScale(self, *args, **kwargs): ...
    def setTexTransform(self, *args, **kwargs): ...
    def setTexture(self, *args, **kwargs): ...
    def setTextureOff(self, *args, **kwargs): ...
    def setTransform(self, *args, **kwargs): ...
    def setTransparency(self, *args, **kwargs): ...
    def setTwoSided(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_all_color_scale(self, constNodePathself, floatscale, intpriority) -> Any: ...
    def set_alpha_scale(self, constNodePathself, floatscale, intpriority) -> Any: ...
    def set_antialias(self, constNodePathself, intmode, intpriority) -> Any: ...
    def set_attrib(self, constNodePathself, constRenderAttribattrib, intpriority) -> Any: ...
    def set_audio_volume(self, constNodePathself, floatvolume, intpriority) -> Any: ...
    def set_audio_volume_off(self, constNodePathself, intpriority) -> Any: ...
    @overload
    def set_billboard_axis(self, constNodePathself) -> Any: ...
    @overload
    def set_billboard_axis(self, constNodePathself, floatoffset) -> Any: ...
    @overload
    def set_billboard_axis(self, constNodePathself, constNodePathcamera, floatoffset) -> Any: ...
    @overload
    def set_billboard_point_eye(self, constNodePathself) -> Any: ...
    @overload
    def set_billboard_point_eye(self, constNodePathself, floatoffset) -> Any: ...
    @overload
    def set_billboard_point_eye(self, constNodePathself, constNodePathcamera, floatoffset, boolfixed_depth) -> Any: ...
    @overload
    def set_billboard_point_eye(self, constNodePathself, floatoffset, boolfixed_depth) -> Any: ...
    @overload
    def set_billboard_point_world(self, constNodePathself) -> Any: ...
    @overload
    def set_billboard_point_world(self, constNodePathself, floatoffset) -> Any: ...
    @overload
    def set_billboard_point_world(self, constNodePathself, constNodePathcamera, floatoffset) -> Any: ...
    def set_bin(self, constNodePathself, strbin_name, intdraw_order, intpriority) -> Any: ...
    def set_clip_plane(self, constNodePathself, constNodePathclip_plane, intpriority) -> Any: ...
    @overload
    def set_clip_plane_off(self, constNodePathself) -> Any: ...
    @overload
    def set_clip_plane_off(self, constNodePathself, constNodePathclip_plane, intpriority) -> Any: ...
    @overload
    def set_clip_plane_off(self, constNodePathself, intpriority) -> Any: ...
    def set_collide_mask(
        self, constNodePathself, BitMasknew_mask, BitMaskbits_to_change, TypeHandlenode_type
    ) -> Any: ...
    def set_collide_owner(self, constNodePathself, objectowner) -> Any: ...
    @overload
    def set_color(self, constNodePathself, constLVecBase4fcolor) -> Any: ...
    @overload
    def set_color(self, constNodePathself, constLVecBase4fcolor, intpriority) -> Any: ...
    @overload
    def set_color(self, constNodePathself, floatr, floatg, floatb, floata, intpriority) -> Any: ...
    def set_color_off(self, constNodePathself, intpriority) -> Any: ...
    @overload
    def set_color_scale(self, constNodePathself, constLVecBase4fscale) -> Any: ...
    @overload
    def set_color_scale(self, constNodePathself, constLVecBase4fscale, intpriority) -> Any: ...
    @overload
    def set_color_scale(self, constNodePathself, floatsx, floatsy, floatsz, floatsa, intpriority) -> Any: ...
    def set_color_scale_off(self, constNodePathself, intpriority) -> Any: ...
    def set_compass(self, constNodePathself, constNodePathreference) -> Any: ...
    def set_depth_bias(
        self, constNodePathself, floatslope_factor, floatconstant_factor, floatclamp, intpriority
    ) -> Any: ...
    def set_depth_offset(self, constNodePathself, intbias, intpriority) -> Any: ...
    def set_depth_test(self, constNodePathself, booldepth_test, intpriority) -> Any: ...
    def set_depth_write(self, constNodePathself, booldepth_write, intpriority) -> Any: ...
    def set_effect(self, constNodePathself, constRenderEffecteffect) -> Any: ...
    def set_effects(self, constNodePathself, constRenderEffectseffects) -> Any: ...
    @overload
    def set_fluid_pos(self, constNodePathself, constLVecBase3fpos) -> Any: ...
    @overload
    def set_fluid_pos(self, constNodePathself, constNodePathother, constLVecBase3fpos) -> Any: ...
    @overload
    def set_fluid_pos(self, constNodePathself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_fluid_pos(self, constNodePathself, constNodePathother, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_fluid_x(self, constNodePathself, floatx) -> Any: ...
    @overload
    def set_fluid_x(self, constNodePathself, constNodePathother, floatx) -> Any: ...
    @overload
    def set_fluid_y(self, constNodePathself, floaty) -> Any: ...
    @overload
    def set_fluid_y(self, constNodePathself, constNodePathother, floaty) -> Any: ...
    @overload
    def set_fluid_z(self, constNodePathself, floatz) -> Any: ...
    @overload
    def set_fluid_z(self, constNodePathself, constNodePathother, floatz) -> Any: ...
    def set_fog(self, constNodePathself, Fogfog, intpriority) -> Any: ...
    def set_fog_off(self, constNodePathself, intpriority) -> Any: ...
    @overload
    def set_h(self, constNodePathself, floath) -> Any: ...
    @overload
    def set_h(self, constNodePathself, constNodePathother, floath) -> Any: ...
    @overload
    def set_hpr(self, constNodePathself, constLVecBase3fhpr) -> Any: ...
    @overload
    def set_hpr(self, constNodePathself, constNodePathother, constLVecBase3fhpr) -> Any: ...
    @overload
    def set_hpr(self, constNodePathself, floath, floatp, floatr) -> Any: ...
    @overload
    def set_hpr(self, constNodePathself, constNodePathother, floath, floatp, floatr) -> Any: ...
    @overload
    def set_hpr_scale(self, constNodePathself, constLVecBase3fhpr, constLVecBase3fscale) -> Any: ...
    @overload
    def set_hpr_scale(self, constNodePathself, constNodePathother, constLVecBase3fhpr, constLVecBase3fscale) -> Any: ...
    @overload
    def set_hpr_scale(self, constNodePathself, floath, floatp, floatr, floatsx, floatsy, floatsz) -> Any: ...
    @overload
    def set_hpr_scale(
        self, constNodePathself, constNodePathother, floath, floatp, floatr, floatsx, floatsy, floatsz
    ) -> Any: ...
    def set_instance_count(self, constNodePathself, intinstance_count) -> Any: ...
    def set_light(self, constNodePathself, constNodePathlight, intpriority) -> Any: ...
    @overload
    def set_light_off(self, constNodePathself) -> Any: ...
    @overload
    def set_light_off(self, constNodePathself, constNodePathlight, intpriority) -> Any: ...
    @overload
    def set_light_off(self, constNodePathself, intpriority) -> Any: ...
    def set_logic_op(self, constNodePathself, intop, intpriority) -> Any: ...
    @overload
    def set_mat(self, constNodePathself, constLMatrix4fmat) -> Any: ...
    @overload
    def set_mat(self, constNodePathself, constNodePathother, constLMatrix4fmat) -> Any: ...
    def set_material(self, constNodePathself, Materialtex, intpriority) -> Any: ...
    def set_material_off(self, constNodePathself, intpriority) -> Any: ...
    @staticmethod
    def set_max_search_depth(intmax_search_depth) -> Any: ...
    def set_name(self, constNodePathself, strname) -> Any: ...
    def set_occluder(self, constNodePathself, constNodePathoccluder) -> Any: ...
    @overload
    def set_p(self, constNodePathself, floatp) -> Any: ...
    @overload
    def set_p(self, constNodePathself, constNodePathother, floatp) -> Any: ...
    @overload
    def set_pos(self, constNodePathself, constLVecBase3fpos) -> Any: ...
    @overload
    def set_pos(self, constNodePathself, constNodePathother, constLVecBase3fpos) -> Any: ...
    @overload
    def set_pos(self, constNodePathself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_pos(self, constNodePathself, constNodePathother, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_pos_hpr(self, constNodePathself, constLVecBase3fpos, constLVecBase3fhpr) -> Any: ...
    @overload
    def set_pos_hpr(self, constNodePathself, constNodePathother, constLVecBase3fpos, constLVecBase3fhpr) -> Any: ...
    @overload
    def set_pos_hpr(self, constNodePathself, floatx, floaty, floatz, floath, floatp, floatr) -> Any: ...
    @overload
    def set_pos_hpr(
        self, constNodePathself, constNodePathother, floatx, floaty, floatz, floath, floatp, floatr
    ) -> Any: ...
    @overload
    def set_pos_hpr_scale(
        self, constNodePathself, constLVecBase3fpos, constLVecBase3fhpr, constLVecBase3fscale
    ) -> Any: ...
    @overload
    def set_pos_hpr_scale(
        self, constNodePathself, constNodePathother, constLVecBase3fpos, constLVecBase3fhpr, constLVecBase3fscale
    ) -> Any: ...
    @overload
    def set_pos_hpr_scale(
        self, constNodePathself, floatx, floaty, floatz, floath, floatp, floatr, floatsx, floatsy, floatsz
    ) -> Any: ...
    @overload
    def set_pos_hpr_scale(
        self,
        constNodePathself,
        constNodePathother,
        floatx,
        floaty,
        floatz,
        floath,
        floatp,
        floatr,
        floatsx,
        floatsy,
        floatsz,
    ) -> Any: ...
    @overload
    def set_pos_hpr_scale_shear(
        self, constNodePathself, constLVecBase3fpos, constLVecBase3fhpr, constLVecBase3fscale, constLVecBase3fshear
    ) -> Any: ...
    @overload
    def set_pos_hpr_scale_shear(
        self,
        constNodePathself,
        constNodePathother,
        constLVecBase3fpos,
        constLVecBase3fhpr,
        constLVecBase3fscale,
        constLVecBase3fshear,
    ) -> Any: ...
    @overload
    def set_pos_quat(self, constNodePathself, constLVecBase3fpos, constLQuaternionfquat) -> Any: ...
    @overload
    def set_pos_quat(self, constNodePathself, constNodePathother, constLVecBase3fpos, constLQuaternionfquat) -> Any: ...
    @overload
    def set_pos_quat_scale(
        self, constNodePathself, constLVecBase3fpos, constLQuaternionfquat, constLVecBase3fscale
    ) -> Any: ...
    @overload
    def set_pos_quat_scale(
        self, constNodePathself, constNodePathother, constLVecBase3fpos, constLQuaternionfquat, constLVecBase3fscale
    ) -> Any: ...
    @overload
    def set_pos_quat_scale_shear(
        self, constNodePathself, constLVecBase3fpos, constLQuaternionfquat, constLVecBase3fscale, constLVecBase3fshear
    ) -> Any: ...
    @overload
    def set_pos_quat_scale_shear(
        self,
        constNodePathself,
        constNodePathother,
        constLVecBase3fpos,
        constLQuaternionfquat,
        constLVecBase3fscale,
        constLVecBase3fshear,
    ) -> Any: ...
    @overload
    def set_prev_transform(self, constNodePathself, constTransformStatetransform) -> Any: ...
    @overload
    def set_prev_transform(
        self, constNodePathself, constNodePathother, constTransformStatetransform, Threadcurrent_thread
    ) -> Any: ...
    @overload
    def set_prev_transform(self, constNodePathself, constTransformStatetransform, Threadcurrent_thread) -> Any: ...
    def set_python_tag(self, constNodePathself, objectkeys, objectvalue) -> Any: ...
    @overload
    def set_quat(self, constNodePathself, constLQuaternionfquat) -> Any: ...
    @overload
    def set_quat(self, constNodePathself, constNodePathother, constLQuaternionfquat) -> Any: ...
    @overload
    def set_quat_scale(self, constNodePathself, constLQuaternionfquat, constLVecBase3fscale) -> Any: ...
    @overload
    def set_quat_scale(
        self, constNodePathself, constNodePathother, constLQuaternionfquat, constLVecBase3fscale
    ) -> Any: ...
    @overload
    def set_r(self, constNodePathself, floatr) -> Any: ...
    @overload
    def set_r(self, constNodePathself, constNodePathother, floatr) -> Any: ...
    def set_render_mode(self, constNodePathself, intmode, floatthickness, intpriority) -> Any: ...
    def set_render_mode_filled(self, constNodePathself, intpriority) -> Any: ...
    def set_render_mode_filled_wireframe(
        self, constNodePathself, constLVecBase4fwireframe_color, intpriority
    ) -> Any: ...
    def set_render_mode_perspective(self, constNodePathself, boolperspective, intpriority) -> Any: ...
    def set_render_mode_thickness(self, constNodePathself, floatthickness, intpriority) -> Any: ...
    def set_render_mode_wireframe(self, constNodePathself, intpriority) -> Any: ...
    def set_sa(self, constNodePathself, floatsa) -> Any: ...
    def set_sb(self, constNodePathself, floatsb) -> Any: ...
    @overload
    def set_scale(self, constNodePathself, constLVecBase3fscale) -> Any: ...
    @overload
    def set_scale(self, constNodePathself, floatscale) -> Any: ...
    @overload
    def set_scale(self, constNodePathself, constNodePathother, constLVecBase3fscale) -> Any: ...
    @overload
    def set_scale(self, constNodePathself, constNodePathother, floatscale) -> Any: ...
    @overload
    def set_scale(self, constNodePathself, floatsx, floatsy, floatsz) -> Any: ...
    @overload
    def set_scale(self, constNodePathself, constNodePathother, floatsx, floatsy, floatsz) -> Any: ...
    @overload
    def set_scissor(self, constNodePathself, constLPoint3fa, constLPoint3fb) -> Any: ...
    @overload
    def set_scissor(self, constNodePathself, constNodePathother, constLPoint3fa, constLPoint3fb) -> Any: ...
    @overload
    def set_scissor(self, constNodePathself, constLPoint3fa, constLPoint3fb, constLPoint3fc, constLPoint3fd) -> Any: ...
    @overload
    def set_scissor(self, constNodePathself, floatleft, floatright, floatbottom, floattop) -> Any: ...
    @overload
    def set_scissor(
        self, constNodePathself, constNodePathother, constLPoint3fa, constLPoint3fb, constLPoint3fc, constLPoint3fd
    ) -> Any: ...
    def set_sg(self, constNodePathself, floatsg) -> Any: ...
    def set_shader(self, constNodePathself, constShadersha, intpriority) -> Any: ...
    @overload
    def set_shader_auto(self, constNodePathself) -> Any: ...
    @overload
    def set_shader_auto(self, constNodePathself, BitMaskshader_switch, intpriority) -> Any: ...
    @overload
    def set_shader_auto(self, constNodePathself, intpriority) -> Any: ...
    @overload
    def set_shader_input(self, constNodePathself, constShaderInputinput) -> Any: ...
    @overload
    def set_shader_input(self, constNodePathself, constInternalNameparam0, objectparam1) -> Any: ...
    @overload
    def set_shader_input(self, constNodePathself, constInternalNameid, intn1, intn2) -> Any: ...
    @overload
    def set_shader_input(self, constNodePathself, constInternalNameid, floatn1, floatn2) -> Any: ...
    @overload
    def set_shader_input(self, constNodePathself, constInternalNameid, Texturetex, constSamplerStatesampler) -> Any: ...
    @overload
    def set_shader_input(self, constNodePathself, constInternalNameparam0, objectparam1, intpriority) -> Any: ...
    @overload
    def set_shader_input(
        self, constNodePathself, constInternalNameid, Texturetex, boolread, boolwrite, intz, intn, intpriority
    ) -> Any: ...
    @overload
    def set_shader_input(
        self, constNodePathself, constInternalNameid, intn1, intn2, intn3, intn4, intpriority
    ) -> Any: ...
    @overload
    def set_shader_input(
        self, constNodePathself, constInternalNameid, floatn1, floatn2, floatn3, floatn4, intpriority
    ) -> Any: ...
    @overload
    def set_shader_input(
        self, constNodePathself, constInternalNameid, Texturetex, constSamplerStatesampler, intpriority
    ) -> Any: ...
    def set_shader_inputs(self, *args, **kwargs): ...
    def set_shader_off(self, constNodePathself, intpriority) -> Any: ...
    @overload
    def set_shear(self, constNodePathself, constLVecBase3fshear) -> Any: ...
    @overload
    def set_shear(self, constNodePathself, constNodePathother, constLVecBase3fshear) -> Any: ...
    @overload
    def set_shear(self, constNodePathself, floatshxy, floatshxz, floatshyz) -> Any: ...
    @overload
    def set_shear(self, constNodePathself, constNodePathother, floatshxy, floatshxz, floatshyz) -> Any: ...
    @overload
    def set_shxy(self, constNodePathself, floatshxy) -> Any: ...
    @overload
    def set_shxy(self, constNodePathself, constNodePathother, floatshxy) -> Any: ...
    @overload
    def set_shxz(self, constNodePathself, floatshxz) -> Any: ...
    @overload
    def set_shxz(self, constNodePathself, constNodePathother, floatshxz) -> Any: ...
    @overload
    def set_shyz(self, constNodePathself, floatshyz) -> Any: ...
    @overload
    def set_shyz(self, constNodePathself, constNodePathother, floatshyz) -> Any: ...
    def set_sr(self, constNodePathself, floatsr) -> Any: ...
    @overload
    def set_state(self, constNodePathself, constRenderStatestate) -> Any: ...
    @overload
    def set_state(self, constNodePathself, constNodePathother, constRenderStatestate, Threadcurrent_thread) -> Any: ...
    @overload
    def set_state(self, constNodePathself, constRenderStatestate, Threadcurrent_thread) -> Any: ...
    @overload
    def set_sx(self, constNodePathself, floatsx) -> Any: ...
    @overload
    def set_sx(self, constNodePathself, constNodePathother, floatsx) -> Any: ...
    @overload
    def set_sy(self, constNodePathself, floatsy) -> Any: ...
    @overload
    def set_sy(self, constNodePathself, constNodePathother, floatsy) -> Any: ...
    @overload
    def set_sz(self, constNodePathself, floatsz) -> Any: ...
    @overload
    def set_sz(self, constNodePathself, constNodePathother, floatsz) -> Any: ...
    def set_tag(self, constNodePathself, strkey, strvalue) -> Any: ...
    @overload
    def set_tex_gen(self, constNodePathself, TextureStagestage, intmode) -> Any: ...
    @overload
    def set_tex_gen(
        self, constNodePathself, TextureStagestage, intmode, constLPoint3fconstant_value, intpriority
    ) -> Any: ...
    @overload
    def set_tex_gen(self, constNodePathself, TextureStagestage, intmode, intpriority) -> Any: ...
    @overload
    def set_tex_hpr(self, constNodePathself, TextureStagestage, constLVecBase3fhpr) -> Any: ...
    @overload
    def set_tex_hpr(self, constNodePathself, constNodePathother, TextureStagestage, constLVecBase3fhpr) -> Any: ...
    @overload
    def set_tex_hpr(self, constNodePathself, TextureStagestage, floath, floatp, floatr) -> Any: ...
    @overload
    def set_tex_hpr(self, constNodePathself, constNodePathother, TextureStagestage, floath, floatp, floatr) -> Any: ...
    @overload
    def set_tex_offset(self, constNodePathself, TextureStagestage, constLVecBase2fuv) -> Any: ...
    @overload
    def set_tex_offset(self, constNodePathself, TextureStagestage, floatu, floatv) -> Any: ...
    @overload
    def set_tex_offset(self, constNodePathself, constNodePathother, TextureStagestage, floatu, floatv) -> Any: ...
    @overload
    def set_tex_pos(self, constNodePathself, TextureStagestage, constLVecBase3fuvw) -> Any: ...
    @overload
    def set_tex_pos(self, constNodePathself, constNodePathother, TextureStagestage, constLVecBase3fuvw) -> Any: ...
    @overload
    def set_tex_pos(self, constNodePathself, TextureStagestage, floatu, floatv, floatw) -> Any: ...
    @overload
    def set_tex_pos(self, constNodePathself, constNodePathother, TextureStagestage, floatu, floatv, floatw) -> Any: ...
    def set_tex_projector(
        self, constNodePathself, TextureStagestage, constNodePathfrom, constNodePathto, intlens_index
    ) -> Any: ...
    @overload
    def set_tex_rotate(self, constNodePathself, TextureStagestage, floatr) -> Any: ...
    @overload
    def set_tex_rotate(self, constNodePathself, constNodePathother, TextureStagestage, floatr) -> Any: ...
    @overload
    def set_tex_scale(self, constNodePathself, TextureStagestage, constLVecBase2fscale) -> Any: ...
    @overload
    def set_tex_scale(self, constNodePathself, TextureStagestage, constLVecBase3fscale) -> Any: ...
    @overload
    def set_tex_scale(self, constNodePathself, TextureStagestage, floatscale) -> Any: ...
    @overload
    def set_tex_scale(self, constNodePathself, TextureStagestage, floatsu, floatsv) -> Any: ...
    @overload
    def set_tex_scale(self, constNodePathself, constNodePathother, TextureStagestage, constLVecBase2fscale) -> Any: ...
    @overload
    def set_tex_scale(self, constNodePathself, constNodePathother, TextureStagestage, constLVecBase3fscale) -> Any: ...
    @overload
    def set_tex_scale(self, constNodePathself, constNodePathother, TextureStagestage, floatscale) -> Any: ...
    @overload
    def set_tex_scale(self, constNodePathself, TextureStagestage, floatsu, floatsv, floatsw) -> Any: ...
    @overload
    def set_tex_scale(self, constNodePathself, constNodePathother, TextureStagestage, floatsu, floatsv) -> Any: ...
    @overload
    def set_tex_scale(
        self, constNodePathself, constNodePathother, TextureStagestage, floatsu, floatsv, floatsw
    ) -> Any: ...
    @overload
    def set_tex_transform(self, constNodePathself, TextureStagestage, constTransformStatetransform) -> Any: ...
    @overload
    def set_tex_transform(
        self, constNodePathself, constNodePathother, TextureStagestage, constTransformStatetransform
    ) -> Any: ...
    @overload
    def set_texture(self, constNodePathself, Texturetex) -> Any: ...
    @overload
    def set_texture(self, constNodePathself, TextureStagestage, Texturetex) -> Any: ...
    @overload
    def set_texture(self, constNodePathself, Texturetex, constSamplerStatesampler) -> Any: ...
    @overload
    def set_texture(self, constNodePathself, Texturetex, intpriority) -> Any: ...
    @overload
    def set_texture(
        self, constNodePathself, TextureStagestage, Texturetex, constSamplerStatesampler, intpriority
    ) -> Any: ...
    @overload
    def set_texture(self, constNodePathself, TextureStagestage, Texturetex, intpriority) -> Any: ...
    @overload
    def set_texture(self, constNodePathself, Texturetex, constSamplerStatesampler, intpriority) -> Any: ...
    @overload
    def set_texture(self) -> Any: ...
    @overload
    def set_texture(self) -> Any: ...
    @overload
    def set_texture_off(self, constNodePathself) -> Any: ...
    @overload
    def set_texture_off(self, constNodePathself, TextureStagestage, intpriority) -> Any: ...
    @overload
    def set_texture_off(self, constNodePathself, intpriority) -> Any: ...
    @overload
    def set_transform(self, constNodePathself, constTransformStatetransform) -> Any: ...
    @overload
    def set_transform(
        self, constNodePathself, constNodePathother, constTransformStatetransform, Threadcurrent_thread
    ) -> Any: ...
    @overload
    def set_transform(self, constNodePathself, constTransformStatetransform, Threadcurrent_thread) -> Any: ...
    def set_transparency(self, constNodePathself, intmode, intpriority) -> Any: ...
    def set_two_sided(self, constNodePathself, booltwo_sided, intpriority) -> Any: ...
    @overload
    def set_x(self, constNodePathself, floatx) -> Any: ...
    @overload
    def set_x(self, constNodePathself, constNodePathother, floatx) -> Any: ...
    @overload
    def set_y(self, constNodePathself, floaty) -> Any: ...
    @overload
    def set_y(self, constNodePathself, constNodePathother, floaty) -> Any: ...
    @overload
    def set_z(self, constNodePathself, floatz) -> Any: ...
    @overload
    def set_z(self, constNodePathself, constNodePathother, floatz) -> Any: ...
    @overload
    def show(self, constNodePathself) -> Any: ...
    @overload
    def show(self, constNodePathself, BitMaskcamera_mask) -> Any: ...
    def showBounds(self, *args, **kwargs): ...
    def showThrough(self, *args, **kwargs): ...
    def showTightBounds(self, *args, **kwargs): ...
    def show_bounds(self, constNodePathself) -> Any: ...
    @overload
    def show_through(self, constNodePathself) -> Any: ...
    @overload
    def show_through(self, constNodePathself, BitMaskcamera_mask) -> Any: ...
    def show_tight_bounds(self, constNodePathself) -> Any: ...
    def stash(self, constNodePathself, intsort, Threadcurrent_thread) -> Any: ...
    def stashTo(self, *args, **kwargs): ...
    def stash_to(self, constNodePathself, constNodePathother, intsort, Threadcurrent_thread) -> Any: ...
    def unifyTextureStages(self, *args, **kwargs): ...
    def unify_texture_stages(self, constNodePathself, TextureStagestage) -> Any: ...
    def unstash(self, constNodePathself, intsort, Threadcurrent_thread) -> Any: ...
    def unstashAll(self, *args, **kwargs): ...
    def unstash_all(self, constNodePathself, Threadcurrent_thread) -> Any: ...
    def verifyComplete(self, *args, **kwargs): ...
    def verify_complete(self, NodePathself, Threadcurrent_thread) -> Any: ...
    def writeBamFile(self, *args, **kwargs): ...
    def writeBamStream(self, *args, **kwargs): ...
    def writeBounds(self, *args, **kwargs): ...
    def write_bam_file(self, NodePathself, constFilenamefilename) -> Any: ...
    def write_bam_stream(self, NodePathself, ostreamout) -> Any: ...
    def write_bounds(self, NodePathself, ostreamout) -> Any: ...
    def wrtReparentTo(self, *args, **kwargs): ...
    def wrt_reparent_to(self, constNodePathself, constNodePathother, intsort, Threadcurrent_thread) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self, NodePathself) -> Any: ...
    def __deepcopy__(self, NodePathself, objectmemo) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, NodePathself) -> Any: ...
    def __reduce_persist__(self, NodePathself, objectpickler) -> Any: ...

class NodePathCollection(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addPath(self, *args, **kwargs): ...
    def addPathsFrom(self, *args, **kwargs): ...
    def add_path(self, constNodePathCollectionself, constNodePathnode_path) -> Any: ...
    def add_paths_from(self, constNodePathCollectionself, constNodePathCollectionother) -> Any: ...
    def append(self, constNodePathCollectionself, constNodePathnode_path) -> Any: ...
    def calcTightBounds(self, *args, **kwargs): ...
    def calc_tight_bounds(self, NodePathCollectionself, LPoint3fmin_point, LPoint3fmax_point) -> Any: ...
    def clear(self, constNodePathCollectionself) -> Any: ...
    def composeColorScale(self, *args, **kwargs): ...
    @overload
    def compose_color_scale(self, constNodePathCollectionself, constLVecBase4fscale) -> Any: ...
    @overload
    def compose_color_scale(self, constNodePathCollectionself, constLVecBase4fscale, intpriority) -> Any: ...
    @overload
    def compose_color_scale(self, constNodePathCollectionself, floatr, floatg, floatb, floata, intpriority) -> Any: ...
    def detach(self, constNodePathCollectionself) -> Any: ...
    def extend(self, constNodePathCollectionself, constNodePathCollectionother) -> Any: ...
    def findAllMatches(self, *args, **kwargs): ...
    def find_all_matches(self, NodePathCollectionself, strpath) -> Any: ...
    def getCollideMask(self, *args, **kwargs): ...
    def getNumPaths(self, *args, **kwargs): ...
    def getPath(self, *args, **kwargs): ...
    def getPaths(self, *args, **kwargs): ...
    def getTightBounds(self, *args, **kwargs): ...
    def get_collide_mask(self, NodePathCollectionself) -> Any: ...
    def get_num_paths(self, NodePathCollectionself) -> Any: ...
    def get_path(self, NodePathCollectionself, intindex) -> Any: ...
    def get_paths(self, *args, **kwargs): ...
    def get_tight_bounds(self, NodePathCollectionself) -> Any: ...
    def hasPath(self, *args, **kwargs): ...
    def has_path(self, NodePathCollectionself, constNodePathpath) -> Any: ...
    def hide(self, constNodePathCollectionself) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, NodePathCollectionself) -> Any: ...
    @overload
    def ls(self, NodePathCollectionself) -> Any: ...
    @overload
    def ls(self, NodePathCollectionself, ostreamout, intindent_level) -> Any: ...
    def output(self, NodePathCollectionself, ostreamout) -> Any: ...
    def removeDuplicatePaths(self, *args, **kwargs): ...
    def removePath(self, *args, **kwargs): ...
    def removePathsFrom(self, *args, **kwargs): ...
    def remove_duplicate_paths(self, constNodePathCollectionself) -> Any: ...
    def remove_path(self, constNodePathCollectionself, constNodePathnode_path) -> Any: ...
    def remove_paths_from(self, constNodePathCollectionself, constNodePathCollectionother) -> Any: ...
    def reparentTo(self, *args, **kwargs): ...
    def reparent_to(self, constNodePathCollectionself, constNodePathother) -> Any: ...
    def reserve(self, constNodePathCollectionself, intnum) -> Any: ...
    def setAttrib(self, *args, **kwargs): ...
    def setCollideMask(self, *args, **kwargs): ...
    def setColor(self, *args, **kwargs): ...
    def setColorScale(self, *args, **kwargs): ...
    def setTexture(self, *args, **kwargs): ...
    def setTextureOff(self, *args, **kwargs): ...
    def set_attrib(self, constNodePathCollectionself, constRenderAttribattrib, intpriority) -> Any: ...
    def set_collide_mask(
        self, constNodePathCollectionself, BitMasknew_mask, BitMaskbits_to_change, TypeHandlenode_type
    ) -> Any: ...
    @overload
    def set_color(self, constNodePathCollectionself, constLVecBase4fcolor) -> Any: ...
    @overload
    def set_color(self, constNodePathCollectionself, constLVecBase4fcolor, intpriority) -> Any: ...
    @overload
    def set_color(self, constNodePathCollectionself, floatr, floatg, floatb, floata, intpriority) -> Any: ...
    @overload
    def set_color_scale(self, constNodePathCollectionself, constLVecBase4fscale) -> Any: ...
    @overload
    def set_color_scale(self, constNodePathCollectionself, constLVecBase4fscale, intpriority) -> Any: ...
    @overload
    def set_color_scale(self, constNodePathCollectionself, floatr, floatg, floatb, floata, intpriority) -> Any: ...
    @overload
    def set_texture(self, constNodePathCollectionself, Texturetex) -> Any: ...
    @overload
    def set_texture(self, constNodePathCollectionself, TextureStagestage, Texturetex, intpriority) -> Any: ...
    @overload
    def set_texture(self, constNodePathCollectionself, Texturetex, intpriority) -> Any: ...
    @overload
    def set_texture(self) -> Any: ...
    @overload
    def set_texture_off(self, constNodePathCollectionself) -> Any: ...
    @overload
    def set_texture_off(self, constNodePathCollectionself, TextureStagestage, intpriority) -> Any: ...
    @overload
    def set_texture_off(self, constNodePathCollectionself, intpriority) -> Any: ...
    def show(self, constNodePathCollectionself) -> Any: ...
    def stash(self, constNodePathCollectionself) -> Any: ...
    def unstash(self, constNodePathCollectionself) -> Any: ...
    def write(self, NodePathCollectionself, ostreamout, intindent_level) -> Any: ...
    def wrtReparentTo(self, *args, **kwargs): ...
    def wrt_reparent_to(self, constNodePathCollectionself, constNodePathother) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __iadd__(self, other): ...
    def __len__(self) -> int: ...
    def __radd__(self, other): ...
    def __reduce__(self, NodePathCollectionself) -> Any: ...

class NodeReferenceCount(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_node_ref_count(self, NodeReferenceCountself) -> Any: ...
    def nodeRef(self, *args, **kwargs): ...
    def nodeUnref(self, *args, **kwargs): ...
    def nodeUnrefOnly(self, *args, **kwargs): ...
    def node_ref(self, NodeReferenceCountself) -> Any: ...
    def node_unref(self, NodeReferenceCountself) -> Any: ...
    def node_unref_only(self, NodeReferenceCountself) -> Any: ...
    def testRefCountIntegrity(self, *args, **kwargs): ...
    def test_ref_count_integrity(self, NodeReferenceCountself) -> Any: ...

class NodeVertexTransform(VertexTransform):
    DtoolClassDict: ClassVar[dict] = ...
    node: Incomplete
    prev: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getPrev(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_node(self, NodeVertexTransformself) -> Any: ...
    def get_prev(self, NodeVertexTransformself) -> Any: ...

class Notify(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearAssertFailed(self, *args, **kwargs): ...
    def clearAssertHandler(self, *args, **kwargs): ...
    def clear_assert_failed(self, constNotifyself) -> Any: ...
    def clear_assert_handler(self, constNotifyself) -> Any: ...
    def getAssertErrorMessage(self, *args, **kwargs): ...
    def getCategory(self, *args, **kwargs): ...
    def getOstreamPtr(self, *args, **kwargs): ...
    def getTopCategory(self, *args, **kwargs): ...
    def get_assert_error_message(self, Notifyself) -> Any: ...
    @overload
    def get_category(self, constNotifyself, strfullname) -> Any: ...
    @overload
    def get_category(self, constNotifyself, strbasename, NotifyCategoryparent_category) -> Any: ...
    @overload
    def get_category(self, constNotifyself, strbasename, strparent_fullname) -> Any: ...
    def get_ostream_ptr(self, Notifyself) -> Any: ...
    def get_top_category(self, constNotifyself) -> Any: ...
    def hasAssertFailed(self, *args, **kwargs): ...
    def hasAssertHandler(self, *args, **kwargs): ...
    def has_assert_failed(self, Notifyself) -> Any: ...
    def has_assert_handler(self, Notifyself) -> Any: ...
    @staticmethod
    def null() -> Any: ...
    @overload
    @staticmethod
    def out() -> Any: ...
    @overload
    @staticmethod
    def out(intseverity) -> Any: ...
    @overload
    @staticmethod
    def out() -> Any: ...
    @overload
    @staticmethod
    def out() -> Any: ...
    @staticmethod
    def ptr() -> Any: ...
    def setOstreamPtr(self, *args, **kwargs): ...
    def set_ostream_ptr(self, constNotifyself, objectostream_ptr, booldelete_later) -> Any: ...
    @staticmethod
    def writeString(*args, **kwargs): ...
    @staticmethod
    def write_string(strstr) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class NotifyCategory(ConfigFlags):
    DtoolClassDict: ClassVar[dict] = ...
    basename: Incomplete
    children: Incomplete
    fullname: Incomplete
    severity: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def debug(self, NotifyCategoryself, boolprefix) -> Any: ...
    def error(self, NotifyCategoryself, boolprefix) -> Any: ...
    def fatal(self, NotifyCategoryself, boolprefix) -> Any: ...
    def getBasename(self, *args, **kwargs): ...
    def getChild(self, *args, **kwargs): ...
    def getChildren(self, *args, **kwargs): ...
    def getFullname(self, *args, **kwargs): ...
    def getNumChildren(self, *args, **kwargs): ...
    def getSeverity(self, *args, **kwargs): ...
    def get_basename(self, NotifyCategoryself) -> Any: ...
    def get_child(self, NotifyCategoryself, inti) -> Any: ...
    def get_children(self, *args, **kwargs): ...
    def get_fullname(self, NotifyCategoryself) -> Any: ...
    def get_num_children(self, NotifyCategoryself) -> Any: ...
    def get_severity(self, NotifyCategoryself) -> Any: ...
    def info(self, NotifyCategoryself, boolprefix) -> Any: ...
    def isDebug(self, *args, **kwargs): ...
    def isError(self, *args, **kwargs): ...
    def isFatal(self, *args, **kwargs): ...
    def isInfo(self, *args, **kwargs): ...
    def isOn(self, *args, **kwargs): ...
    def isSpam(self, *args, **kwargs): ...
    def isWarning(self, *args, **kwargs): ...
    def is_debug(self, NotifyCategoryself) -> Any: ...
    def is_error(self, NotifyCategoryself) -> Any: ...
    def is_fatal(self, NotifyCategoryself) -> Any: ...
    def is_info(self, NotifyCategoryself) -> Any: ...
    def is_on(self, NotifyCategoryself, intseverity) -> Any: ...
    def is_spam(self, NotifyCategoryself) -> Any: ...
    def is_warning(self, NotifyCategoryself) -> Any: ...
    @overload
    def out(self, NotifyCategoryself, intseverity, boolprefix) -> Any: ...
    @overload
    def out(self) -> Any: ...
    @staticmethod
    def setServerDelta(*args, **kwargs): ...
    def setSeverity(self, *args, **kwargs): ...
    @staticmethod
    def set_server_delta(intdelta) -> Any: ...
    def set_severity(self, constNotifyCategoryself, intseverity) -> Any: ...
    def spam(self, NotifyCategoryself, boolprefix) -> Any: ...
    def upcastToConfigFlags(self, *args, **kwargs): ...
    def upcast_to_ConfigFlags(self, constNotifyCategoryself) -> Any: ...
    def warning(self, NotifyCategoryself, boolprefix) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class NurbsCurve(PiecewiseCurve, NurbsCurveInterface):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def upcastToNurbsCurveInterface(self, *args, **kwargs): ...
    def upcastToPiecewiseCurve(self, *args, **kwargs): ...
    def upcast_to_NurbsCurveInterface(self, constNurbsCurveself) -> Any: ...
    def upcast_to_PiecewiseCurve(self, constNurbsCurveself) -> Any: ...

class NurbsCurveEvaluator(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def evaluate(self, NurbsCurveEvaluatorself) -> Any: ...
    @overload
    def evaluate(self, NurbsCurveEvaluatorself, constNodePathrel_to) -> Any: ...
    @overload
    def evaluate(self, NurbsCurveEvaluatorself, constNodePathrel_to, constLMatrix4fmat) -> Any: ...
    def getExtendedVertex(self, *args, **kwargs): ...
    def getKnot(self, *args, **kwargs): ...
    def getKnots(self, *args, **kwargs): ...
    def getNumKnots(self, *args, **kwargs): ...
    def getNumSegments(self, *args, **kwargs): ...
    def getNumVertices(self, *args, **kwargs): ...
    def getOrder(self, *args, **kwargs): ...
    def getVertex(self, *args, **kwargs): ...
    def getVertexSpace(self, *args, **kwargs): ...
    def getVertices(self, *args, **kwargs): ...
    def get_extended_vertex(self, NurbsCurveEvaluatorself, inti, intd) -> Any: ...
    def get_knot(self, NurbsCurveEvaluatorself, inti) -> Any: ...
    def get_knots(self, *args, **kwargs): ...
    def get_num_knots(self, NurbsCurveEvaluatorself) -> Any: ...
    def get_num_segments(self, NurbsCurveEvaluatorself) -> Any: ...
    def get_num_vertices(self, NurbsCurveEvaluatorself) -> Any: ...
    def get_order(self, NurbsCurveEvaluatorself) -> Any: ...
    @overload
    def get_vertex(self, NurbsCurveEvaluatorself, inti) -> Any: ...
    @overload
    def get_vertex(self, NurbsCurveEvaluatorself, inti, constNodePathrel_to) -> Any: ...
    def get_vertex_space(self, NurbsCurveEvaluatorself, inti, constNodePathrel_to) -> Any: ...
    def get_vertices(self, *args, **kwargs): ...
    def normalizeKnots(self, *args, **kwargs): ...
    def normalize_knots(self, constNurbsCurveEvaluatorself) -> Any: ...
    def output(self, NurbsCurveEvaluatorself, ostreamout) -> Any: ...
    def reset(self, constNurbsCurveEvaluatorself, intnum_vertices) -> Any: ...
    def setExtendedVertex(self, *args, **kwargs): ...
    def setExtendedVertices(self, *args, **kwargs): ...
    def setKnot(self, *args, **kwargs): ...
    def setOrder(self, *args, **kwargs): ...
    def setVertex(self, *args, **kwargs): ...
    def setVertexSpace(self, *args, **kwargs): ...
    def set_extended_vertex(self, constNurbsCurveEvaluatorself, inti, intd, floatvalue) -> Any: ...
    def set_extended_vertices(self, constNurbsCurveEvaluatorself, inti, intd, buffervalues, intnum_values) -> Any: ...
    def set_knot(self, constNurbsCurveEvaluatorself, inti, floatknot) -> Any: ...
    def set_order(self, constNurbsCurveEvaluatorself, intorder) -> Any: ...
    @overload
    def set_vertex(self, constNurbsCurveEvaluatorself, inti, constLVecBase3fvertex, floatweight) -> Any: ...
    @overload
    def set_vertex(self, constNurbsCurveEvaluatorself, inti, constLVecBase4fvertex) -> Any: ...
    @overload
    def set_vertex_space(self, constNurbsCurveEvaluatorself, inti, constNodePathspace) -> Any: ...
    @overload
    def set_vertex_space(self, constNurbsCurveEvaluatorself, inti, strspace) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class NurbsCurveInterface(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def appendCv(self, *args, **kwargs): ...
    @overload
    def append_cv(self, constNurbsCurveInterfaceself, constLVecBase4fv) -> Any: ...
    @overload
    def append_cv(self, constNurbsCurveInterfaceself, constLVecBase3fv) -> Any: ...
    @overload
    def append_cv(self, constNurbsCurveInterfaceself, floatx, floaty, floatz) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCv(self, *args, **kwargs): ...
    def getCvPoint(self, *args, **kwargs): ...
    def getCvWeight(self, *args, **kwargs): ...
    def getCvs(self, *args, **kwargs): ...
    def getKnot(self, *args, **kwargs): ...
    def getKnots(self, *args, **kwargs): ...
    def getNumCvs(self, *args, **kwargs): ...
    def getNumKnots(self, *args, **kwargs): ...
    def getOrder(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_cv(self, NurbsCurveInterfaceself, intn) -> Any: ...
    def get_cv_point(self, NurbsCurveInterfaceself, intn) -> Any: ...
    def get_cv_weight(self, NurbsCurveInterfaceself, intn) -> Any: ...
    def get_cvs(self, *args, **kwargs): ...
    def get_knot(self, NurbsCurveInterfaceself, intn) -> Any: ...
    def get_knots(self, *args, **kwargs): ...
    def get_num_cvs(self, NurbsCurveInterfaceself) -> Any: ...
    def get_num_knots(self, NurbsCurveInterfaceself) -> Any: ...
    def get_order(self, NurbsCurveInterfaceself) -> Any: ...
    def insertCv(self, *args, **kwargs): ...
    def insert_cv(self, constNurbsCurveInterfaceself, floatt) -> Any: ...
    def removeAllCvs(self, *args, **kwargs): ...
    def removeCv(self, *args, **kwargs): ...
    def remove_all_cvs(self, constNurbsCurveInterfaceself) -> Any: ...
    def remove_cv(self, constNurbsCurveInterfaceself, intn) -> Any: ...
    def setCv(self, *args, **kwargs): ...
    def setCvPoint(self, *args, **kwargs): ...
    def setCvWeight(self, *args, **kwargs): ...
    def setKnot(self, *args, **kwargs): ...
    def setOrder(self, *args, **kwargs): ...
    def set_cv(self, constNurbsCurveInterfaceself, intn, constLVecBase4fv) -> Any: ...
    @overload
    def set_cv_point(self, constNurbsCurveInterfaceself, intn, constLVecBase3fv) -> Any: ...
    @overload
    def set_cv_point(self, constNurbsCurveInterfaceself, intn, floatx, floaty, floatz) -> Any: ...
    def set_cv_weight(self, constNurbsCurveInterfaceself, intn, floatw) -> Any: ...
    def set_knot(self, constNurbsCurveInterfaceself, intn, floatt) -> Any: ...
    def set_order(self, constNurbsCurveInterfaceself, intorder) -> Any: ...
    def writeCv(self, *args, **kwargs): ...
    def write_cv(self, NurbsCurveInterfaceself, ostreamout, intn) -> Any: ...

class NurbsCurveResult(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def adaptiveSample(self, *args, **kwargs): ...
    def adaptive_sample(self, constNurbsCurveResultself, floattolerance) -> Any: ...
    def evalExtendedPoint(self, *args, **kwargs): ...
    def evalExtendedPoints(self, *args, **kwargs): ...
    def evalPoint(self, *args, **kwargs): ...
    def evalSegmentExtendedPoint(self, *args, **kwargs): ...
    def evalSegmentExtendedPoints(self, *args, **kwargs): ...
    def evalSegmentPoint(self, *args, **kwargs): ...
    def evalSegmentTangent(self, *args, **kwargs): ...
    def evalTangent(self, *args, **kwargs): ...
    def eval_extended_point(self, constNurbsCurveResultself, floatt, intd) -> Any: ...
    def eval_extended_points(self, constNurbsCurveResultself, floatt, intd, bufferresult, intnum_values) -> Any: ...
    def eval_point(self, constNurbsCurveResultself, floatt, LVecBase3fpoint) -> Any: ...
    def eval_segment_extended_point(self, NurbsCurveResultself, intsegment, floatt, intd) -> Any: ...
    def eval_segment_extended_points(
        self, NurbsCurveResultself, intsegment, floatt, intd, bufferresult, intnum_values
    ) -> Any: ...
    @overload
    def eval_segment_point(self, NurbsCurveResultself, intsegment, floatt, LVecBase3fpoint) -> Any: ...
    @overload
    def eval_segment_point(self) -> Any: ...
    def eval_segment_tangent(self, NurbsCurveResultself, intsegment, floatt, LVecBase3ftangent) -> Any: ...
    def eval_tangent(self, constNurbsCurveResultself, floatt, LVecBase3ftangent) -> Any: ...
    def getEndT(self, *args, **kwargs): ...
    def getNumSamples(self, *args, **kwargs): ...
    def getNumSegments(self, *args, **kwargs): ...
    def getSamplePoint(self, *args, **kwargs): ...
    def getSamplePoints(self, *args, **kwargs): ...
    def getSampleT(self, *args, **kwargs): ...
    def getSampleTs(self, *args, **kwargs): ...
    def getSegmentT(self, *args, **kwargs): ...
    def getStartT(self, *args, **kwargs): ...
    def get_end_t(self, NurbsCurveResultself) -> Any: ...
    def get_num_samples(self, NurbsCurveResultself) -> Any: ...
    def get_num_segments(self, NurbsCurveResultself) -> Any: ...
    def get_sample_point(self, NurbsCurveResultself, intn) -> Any: ...
    def get_sample_points(self, *args, **kwargs): ...
    def get_sample_t(self, NurbsCurveResultself, intn) -> Any: ...
    def get_sample_ts(self, *args, **kwargs): ...
    def get_segment_t(self, NurbsCurveResultself, intsegment, floatt) -> Any: ...
    def get_start_t(self, NurbsCurveResultself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class NurbsSurfaceEvaluator(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    u_knots: Incomplete
    u_order: Incomplete
    v_knots: Incomplete
    v_order: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def evaluate(self, NurbsSurfaceEvaluatorself, constNodePathrel_to) -> Any: ...
    def getExtendedVertex(self, *args, **kwargs): ...
    def getNumUKnots(self, *args, **kwargs): ...
    def getNumUSegments(self, *args, **kwargs): ...
    def getNumUVertices(self, *args, **kwargs): ...
    def getNumVKnots(self, *args, **kwargs): ...
    def getNumVSegments(self, *args, **kwargs): ...
    def getNumVVertices(self, *args, **kwargs): ...
    def getUKnot(self, *args, **kwargs): ...
    def getUKnots(self, *args, **kwargs): ...
    def getUOrder(self, *args, **kwargs): ...
    def getVKnot(self, *args, **kwargs): ...
    def getVKnots(self, *args, **kwargs): ...
    def getVOrder(self, *args, **kwargs): ...
    def getVertex(self, *args, **kwargs): ...
    def getVertexSpace(self, *args, **kwargs): ...
    def get_extended_vertex(self, NurbsSurfaceEvaluatorself, intui, intvi, intd) -> Any: ...
    def get_num_u_knots(self, NurbsSurfaceEvaluatorself) -> Any: ...
    def get_num_u_segments(self, NurbsSurfaceEvaluatorself) -> Any: ...
    def get_num_u_vertices(self, NurbsSurfaceEvaluatorself) -> Any: ...
    def get_num_v_knots(self, NurbsSurfaceEvaluatorself) -> Any: ...
    def get_num_v_segments(self, NurbsSurfaceEvaluatorself) -> Any: ...
    def get_num_v_vertices(self, NurbsSurfaceEvaluatorself) -> Any: ...
    def get_u_knot(self, NurbsSurfaceEvaluatorself, inti) -> Any: ...
    def get_u_knots(self, *args, **kwargs): ...
    def get_u_order(self, NurbsSurfaceEvaluatorself) -> Any: ...
    def get_v_knot(self, NurbsSurfaceEvaluatorself, inti) -> Any: ...
    def get_v_knots(self, *args, **kwargs): ...
    def get_v_order(self, NurbsSurfaceEvaluatorself) -> Any: ...
    @overload
    def get_vertex(self, NurbsSurfaceEvaluatorself, intui, intvi) -> Any: ...
    @overload
    def get_vertex(self, NurbsSurfaceEvaluatorself, intui, intvi, constNodePathrel_to) -> Any: ...
    def get_vertex_space(self, NurbsSurfaceEvaluatorself, intui, intvi, constNodePathrel_to) -> Any: ...
    def normalizeUKnots(self, *args, **kwargs): ...
    def normalizeVKnots(self, *args, **kwargs): ...
    def normalize_u_knots(self, constNurbsSurfaceEvaluatorself) -> Any: ...
    def normalize_v_knots(self, constNurbsSurfaceEvaluatorself) -> Any: ...
    def output(self, NurbsSurfaceEvaluatorself, ostreamout) -> Any: ...
    def reset(self, constNurbsSurfaceEvaluatorself, intnum_u_vertices, intnum_v_vertices) -> Any: ...
    def setExtendedVertex(self, *args, **kwargs): ...
    def setExtendedVertices(self, *args, **kwargs): ...
    def setUKnot(self, *args, **kwargs): ...
    def setUOrder(self, *args, **kwargs): ...
    def setVKnot(self, *args, **kwargs): ...
    def setVOrder(self, *args, **kwargs): ...
    def setVertex(self, *args, **kwargs): ...
    def setVertexSpace(self, *args, **kwargs): ...
    def set_extended_vertex(self, constNurbsSurfaceEvaluatorself, intui, intvi, intd, floatvalue) -> Any: ...
    def set_extended_vertices(
        self, constNurbsSurfaceEvaluatorself, intui, intvi, intd, buffervalues, intnum_values
    ) -> Any: ...
    def set_u_knot(self, constNurbsSurfaceEvaluatorself, inti, floatknot) -> Any: ...
    def set_u_order(self, constNurbsSurfaceEvaluatorself, intu_order) -> Any: ...
    def set_v_knot(self, constNurbsSurfaceEvaluatorself, inti, floatknot) -> Any: ...
    def set_v_order(self, constNurbsSurfaceEvaluatorself, intv_order) -> Any: ...
    @overload
    def set_vertex(self, constNurbsSurfaceEvaluatorself, intui, intvi, constLVecBase3fvertex, floatweight) -> Any: ...
    @overload
    def set_vertex(self, constNurbsSurfaceEvaluatorself, intui, intvi, constLVecBase4fvertex) -> Any: ...
    @overload
    def set_vertex_space(self, constNurbsSurfaceEvaluatorself, intui, intvi, constNodePathspace) -> Any: ...
    @overload
    def set_vertex_space(self, constNurbsSurfaceEvaluatorself, intui, intvi, strspace) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class NurbsSurfaceResult(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def evalExtendedPoint(self, *args, **kwargs): ...
    def evalExtendedPoints(self, *args, **kwargs): ...
    def evalNormal(self, *args, **kwargs): ...
    def evalPoint(self, *args, **kwargs): ...
    def evalSegmentExtendedPoint(self, *args, **kwargs): ...
    def evalSegmentExtendedPoints(self, *args, **kwargs): ...
    def evalSegmentNormal(self, *args, **kwargs): ...
    def evalSegmentPoint(self, *args, **kwargs): ...
    def eval_extended_point(self, constNurbsSurfaceResultself, floatu, floatv, intd) -> Any: ...
    def eval_extended_points(
        self, constNurbsSurfaceResultself, floatu, floatv, intd, bufferresult, intnum_values
    ) -> Any: ...
    def eval_normal(self, constNurbsSurfaceResultself, floatu, floatv, LVecBase3fnormal) -> Any: ...
    def eval_point(self, constNurbsSurfaceResultself, floatu, floatv, LVecBase3fpoint) -> Any: ...
    def eval_segment_extended_point(self, NurbsSurfaceResultself, intui, intvi, floatu, floatv, intd) -> Any: ...
    def eval_segment_extended_points(
        self, NurbsSurfaceResultself, intui, intvi, floatu, floatv, intd, bufferresult, intnum_values
    ) -> Any: ...
    def eval_segment_normal(self, NurbsSurfaceResultself, intui, intvi, floatu, floatv, LVecBase3fnormal) -> Any: ...
    @overload
    def eval_segment_point(self, NurbsSurfaceResultself, intui, intvi, floatu, floatv, LVecBase3fpoint) -> Any: ...
    @overload
    def eval_segment_point(self) -> Any: ...
    def getEndU(self, *args, **kwargs): ...
    def getEndV(self, *args, **kwargs): ...
    def getNumUSegments(self, *args, **kwargs): ...
    def getNumVSegments(self, *args, **kwargs): ...
    def getSegmentU(self, *args, **kwargs): ...
    def getSegmentV(self, *args, **kwargs): ...
    def getStartU(self, *args, **kwargs): ...
    def getStartV(self, *args, **kwargs): ...
    def get_end_u(self, NurbsSurfaceResultself) -> Any: ...
    def get_end_v(self, NurbsSurfaceResultself) -> Any: ...
    def get_num_u_segments(self, NurbsSurfaceResultself) -> Any: ...
    def get_num_v_segments(self, NurbsSurfaceResultself) -> Any: ...
    def get_segment_u(self, NurbsSurfaceResultself, intui, floatu) -> Any: ...
    def get_segment_v(self, NurbsSurfaceResultself, intvi, floatv) -> Any: ...
    def get_start_u(self, NurbsSurfaceResultself) -> Any: ...
    def get_start_v(self, NurbsSurfaceResultself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class OCompressStream(ostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constOCompressStreamself) -> Any: ...
    def open(self, constOCompressStreamself, ostreamdest, boolowns_dest, intcompression_level, boolheader) -> Any: ...

class OEncryptStream(ostream):
    DtoolClassDict: ClassVar[dict] = ...
    algorithm: Incomplete
    iteration_count: Incomplete
    key_length: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constOEncryptStreamself) -> Any: ...
    def open(self, constOEncryptStreamself, ostreamdest, boolowns_dest, strpassword) -> Any: ...
    def setAlgorithm(self, *args, **kwargs): ...
    def setIterationCount(self, *args, **kwargs): ...
    def setKeyLength(self, *args, **kwargs): ...
    def set_algorithm(self, constOEncryptStreamself, stralgorithm) -> Any: ...
    def set_iteration_count(self, constOEncryptStreamself, intiteration_count) -> Any: ...
    def set_key_length(self, constOEncryptStreamself, intkey_length) -> Any: ...

class OFileStream(ostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constOFileStreamself) -> Any: ...
    def open(self, constOFileStreamself, strfilename, intmode) -> Any: ...

class OSocketStream(ostream, SSWriter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constOSocketStreamself) -> Any: ...
    def flush(self, constOSocketStreamself) -> Any: ...
    def isClosed(self, *args, **kwargs): ...
    def is_closed(self, constOSocketStreamself) -> Any: ...
    def upcastToOstream(self, *args, **kwargs): ...
    def upcastToSSWriter(self, *args, **kwargs): ...
    def upcast_to_SSWriter(self, constOSocketStreamself) -> Any: ...
    def upcast_to_ostream(self, constOSocketStreamself) -> Any: ...

class OStreamWrapper(StreamWrapperBase):
    DtoolClassDict: ClassVar[dict] = ...
    ostream: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getOstream(self, *args, **kwargs): ...
    def get_ostream(self, OStreamWrapperself) -> Any: ...
    def upcastToStreamWrapperBase(self, *args, **kwargs): ...
    def upcast_to_StreamWrapperBase(self, constOStreamWrapperself) -> Any: ...

class OSubStream(ostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constOSubStreamself) -> Any: ...
    def open(self, constOSubStreamself, OStreamWrapperdest, longstart, longend, boolappend) -> Any: ...

class OccluderEffect(RenderEffect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addOnOccluder(self, *args, **kwargs): ...
    def add_on_occluder(self, OccluderEffectself, constNodePathoccluder) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumOnOccluders(self, *args, **kwargs): ...
    def getOnOccluder(self, *args, **kwargs): ...
    def getOnOccluders(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_on_occluders(self, OccluderEffectself) -> Any: ...
    def get_on_occluder(self, OccluderEffectself, intn) -> Any: ...
    def get_on_occluders(self, *args, **kwargs): ...
    def hasOnOccluder(self, *args, **kwargs): ...
    def has_on_occluder(self, OccluderEffectself, constNodePathoccluder) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def is_identity(self, OccluderEffectself) -> Any: ...
    @staticmethod
    def make() -> Any: ...
    def removeOnOccluder(self, *args, **kwargs): ...
    def remove_on_occluder(self, OccluderEffectself, constNodePathoccluder) -> Any: ...

class OccluderNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    double_sided: Incomplete
    min_coverage: Incomplete
    vertices: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMinCoverage(self, *args, **kwargs): ...
    def getNumVertices(self, *args, **kwargs): ...
    def getVertex(self, *args, **kwargs): ...
    def getVertices(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_min_coverage(self, constOccluderNodeself) -> Any: ...
    def get_num_vertices(self, OccluderNodeself) -> Any: ...
    def get_vertex(self, OccluderNodeself, intn) -> Any: ...
    def get_vertices(self, *args, **kwargs): ...
    def isDoubleSided(self, *args, **kwargs): ...
    def is_double_sided(self, constOccluderNodeself) -> Any: ...
    def setDoubleSided(self, *args, **kwargs): ...
    def setMinCoverage(self, *args, **kwargs): ...
    def setVertex(self, *args, **kwargs): ...
    def setVertices(self, *args, **kwargs): ...
    def set_double_sided(self, constOccluderNodeself, boolvalue) -> Any: ...
    def set_min_coverage(self, constOccluderNodeself, floatvalue) -> Any: ...
    def set_vertex(self, constOccluderNodeself, intn, constLPoint3fv) -> Any: ...
    def set_vertices(
        self, constOccluderNodeself, constLPoint3fv0, constLPoint3fv1, constLPoint3fv2, constLPoint3fv3
    ) -> Any: ...

class Ofstream(ostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constofstreamself) -> Any: ...

class OmniBoundingVolume(GeometricBoundingVolume):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class OpenSSLWrapper(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearCertificates(self, *args, **kwargs): ...
    def clear_certificates(self, constOpenSSLWrapperself) -> Any: ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def loadCertificates(self, *args, **kwargs): ...
    def loadCertificatesFromDerRam(self, *args, **kwargs): ...
    def loadCertificatesFromPemRam(self, *args, **kwargs): ...
    def load_certificates(self, constOpenSSLWrapperself, constFilenamefilename) -> Any: ...
    @overload
    def load_certificates_from_der_ram(self, constOpenSSLWrapperself, strdata) -> Any: ...
    @overload
    def load_certificates_from_der_ram(self, constOpenSSLWrapperself, strdata, intdata_size) -> Any: ...
    @overload
    def load_certificates_from_pem_ram(self, constOpenSSLWrapperself, strdata) -> Any: ...
    @overload
    def load_certificates_from_pem_ram(self, constOpenSSLWrapperself, strdata, intdata_size) -> Any: ...
    def notifyDebugSslErrors(self, *args, **kwargs): ...
    def notifySslErrors(self, *args, **kwargs): ...
    def notify_debug_ssl_errors(self, constOpenSSLWrapperself) -> Any: ...
    def notify_ssl_errors(self, constOpenSSLWrapperself) -> Any: ...

class OpusAudio(MovieAudio):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def make(constFilenamename) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class OpusAudioCursor(MovieAudioCursor):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class OrthographicLens(Lens):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class Ostream(basic_ios_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def flush(self, constostreamself) -> Any: ...
    def put(self, constostreamself, charc) -> Any: ...
    @overload
    def seekp(self, constostreamself, longpos) -> Any: ...
    @overload
    def seekp(self, constostreamself, longoff, intdir) -> Any: ...
    def tellp(self, constostreamself) -> Any: ...
    def upcastToBasicIosChar(self, *args, **kwargs): ...
    def upcast_to_basic_ios_char(self, constostreamself) -> Any: ...
    def write(self, constostreamself, objectb) -> Any: ...
    def writelines(self, constostreamself, objectlines) -> Any: ...

class PGButton(PGItem):
    DtoolClassDict: ClassVar[dict] = ...
    SDepressed: ClassVar[int] = ...
    SInactive: ClassVar[int] = ...
    SReady: ClassVar[int] = ...
    SRollover: ClassVar[int] = ...
    S_depressed: ClassVar[int] = ...
    S_inactive: ClassVar[int] = ...
    S_ready: ClassVar[int] = ...
    S_rollover: ClassVar[int] = ...
    click_prefix: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addClickButton(self, *args, **kwargs): ...
    def add_click_button(self, constPGButtonself, constButtonHandlebutton) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getClickEvent(self, *args, **kwargs): ...
    @staticmethod
    def getClickPrefix(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_click_event(self, PGButtonself, constButtonHandlebutton) -> Any: ...
    @staticmethod
    def get_click_prefix() -> Any: ...
    def hasClickButton(self, *args, **kwargs): ...
    def has_click_button(self, constPGButtonself, constButtonHandlebutton) -> Any: ...
    def isButtonDown(self, *args, **kwargs): ...
    def is_button_down(self, constPGButtonself) -> Any: ...
    def removeClickButton(self, *args, **kwargs): ...
    def remove_click_button(self, constPGButtonself, constButtonHandlebutton) -> Any: ...
    @overload
    def setup(self, constPGButtonself, strlabel) -> Any: ...
    @overload
    def setup(self, constPGButtonself, constNodePathready) -> Any: ...
    @overload
    def setup(self, constPGButtonself, constNodePathready, constNodePathdepressed) -> Any: ...
    @overload
    def setup(self, constPGButtonself, strlabel, floatbevel) -> Any: ...
    @overload
    def setup(self, constPGButtonself, constNodePathready, constNodePathdepressed, constNodePathrollover) -> Any: ...
    @overload
    def setup(
        self,
        constPGButtonself,
        constNodePathready,
        constNodePathdepressed,
        constNodePathrollover,
        constNodePathinactive,
    ) -> Any: ...

class PGEntry(PGItem):
    DtoolClassDict: ClassVar[dict] = ...
    SFocus: ClassVar[int] = ...
    SInactive: ClassVar[int] = ...
    SNoFocus: ClassVar[int] = ...
    S_focus: ClassVar[int] = ...
    S_inactive: ClassVar[int] = ...
    S_no_focus: ClassVar[int] = ...
    accept_failed_prefix: Incomplete
    accept_prefix: Incomplete
    active: Incomplete
    blink_rate: Incomplete
    candidate_active: Incomplete
    candidate_inactive: Incomplete
    cursor_def: Incomplete
    cursor_keys_active: Incomplete
    cursor_position: Incomplete
    cursormove_prefix: Incomplete
    erase_prefix: Incomplete
    focus: Incomplete
    max_chars: Incomplete
    max_width: Incomplete
    num_lines: Incomplete
    obscure_mode: Incomplete
    overflow_mode: Incomplete
    overflow_prefix: Incomplete
    type_prefix: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearCursorDef(self, *args, **kwargs): ...
    def clear_cursor_def(self, constPGEntryself) -> Any: ...
    def getAcceptEvent(self, *args, **kwargs): ...
    def getAcceptFailedEvent(self, *args, **kwargs): ...
    @staticmethod
    def getAcceptFailedPrefix(*args, **kwargs): ...
    @staticmethod
    def getAcceptPrefix(*args, **kwargs): ...
    def getBlinkRate(self, *args, **kwargs): ...
    def getCandidateActive(self, *args, **kwargs): ...
    def getCandidateInactive(self, *args, **kwargs): ...
    def getCharacter(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCursorDef(self, *args, **kwargs): ...
    def getCursorKeysActive(self, *args, **kwargs): ...
    def getCursorPosition(self, *args, **kwargs): ...
    def getCursorX(self, *args, **kwargs): ...
    def getCursorY(self, *args, **kwargs): ...
    def getCursormoveEvent(self, *args, **kwargs): ...
    @staticmethod
    def getCursormovePrefix(*args, **kwargs): ...
    def getEraseEvent(self, *args, **kwargs): ...
    @staticmethod
    def getErasePrefix(*args, **kwargs): ...
    def getGraphic(self, *args, **kwargs): ...
    def getMaxChars(self, *args, **kwargs): ...
    def getMaxWidth(self, *args, **kwargs): ...
    def getNumCharacters(self, *args, **kwargs): ...
    def getNumLines(self, *args, **kwargs): ...
    def getObscureMode(self, *args, **kwargs): ...
    def getOverflowEvent(self, *args, **kwargs): ...
    def getOverflowMode(self, *args, **kwargs): ...
    @staticmethod
    def getOverflowPrefix(*args, **kwargs): ...
    def getPlainText(self, *args, **kwargs): ...
    def getPlainWtext(self, *args, **kwargs): ...
    def getProperties(self, *args, **kwargs): ...
    def getText(self, *args, **kwargs): ...
    def getTextDef(self, *args, **kwargs): ...
    def getTypeEvent(self, *args, **kwargs): ...
    @staticmethod
    def getTypePrefix(*args, **kwargs): ...
    def getWtext(self, *args, **kwargs): ...
    def get_accept_event(self, PGEntryself, constButtonHandlebutton) -> Any: ...
    def get_accept_failed_event(self, PGEntryself, constButtonHandlebutton) -> Any: ...
    @staticmethod
    def get_accept_failed_prefix() -> Any: ...
    @staticmethod
    def get_accept_prefix() -> Any: ...
    def get_blink_rate(self, PGEntryself) -> Any: ...
    def get_candidate_active(self, PGEntryself) -> Any: ...
    def get_candidate_inactive(self, PGEntryself) -> Any: ...
    def get_character(self, PGEntryself, intn) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_cursor_X(self, PGEntryself) -> Any: ...
    def get_cursor_Y(self, PGEntryself) -> Any: ...
    def get_cursor_def(self, constPGEntryself) -> Any: ...
    def get_cursor_keys_active(self, PGEntryself) -> Any: ...
    def get_cursor_position(self, PGEntryself) -> Any: ...
    def get_cursormove_event(self, PGEntryself) -> Any: ...
    @staticmethod
    def get_cursormove_prefix() -> Any: ...
    def get_erase_event(self, PGEntryself) -> Any: ...
    @staticmethod
    def get_erase_prefix() -> Any: ...
    def get_graphic(self, PGEntryself, intn) -> Any: ...
    def get_max_chars(self, PGEntryself) -> Any: ...
    def get_max_width(self, PGEntryself) -> Any: ...
    def get_num_characters(self, PGEntryself) -> Any: ...
    def get_num_lines(self, PGEntryself) -> Any: ...
    def get_obscure_mode(self, PGEntryself) -> Any: ...
    def get_overflow_event(self, PGEntryself) -> Any: ...
    def get_overflow_mode(self, PGEntryself) -> Any: ...
    @staticmethod
    def get_overflow_prefix() -> Any: ...
    def get_plain_text(self, PGEntryself) -> Any: ...
    def get_plain_wtext(self, PGEntryself) -> Any: ...
    def get_properties(self, PGEntryself, intn) -> Any: ...
    @overload
    def get_text(self, PGEntryself) -> Any: ...
    @overload
    def get_text(self) -> Any: ...
    def get_text_def(self, PGEntryself, intstate) -> Any: ...
    def get_type_event(self, PGEntryself) -> Any: ...
    @staticmethod
    def get_type_prefix() -> Any: ...
    def get_wtext(self, PGEntryself) -> Any: ...
    def isWtext(self, *args, **kwargs): ...
    def is_wtext(self, PGEntryself) -> Any: ...
    def setAcceptEnabled(self, *args, **kwargs): ...
    def setBlinkRate(self, *args, **kwargs): ...
    def setCandidateActive(self, *args, **kwargs): ...
    def setCandidateInactive(self, *args, **kwargs): ...
    def setCursorKeysActive(self, *args, **kwargs): ...
    def setCursorPosition(self, *args, **kwargs): ...
    def setMaxChars(self, *args, **kwargs): ...
    def setMaxWidth(self, *args, **kwargs): ...
    def setNumLines(self, *args, **kwargs): ...
    def setObscureMode(self, *args, **kwargs): ...
    def setOverflowMode(self, *args, **kwargs): ...
    def setText(self, *args, **kwargs): ...
    def setTextDef(self, *args, **kwargs): ...
    def setWtext(self, *args, **kwargs): ...
    def set_accept_enabled(self, constPGEntryself, boolenabled) -> Any: ...
    def set_blink_rate(self, constPGEntryself, floatblink_rate) -> Any: ...
    def set_candidate_active(self, constPGEntryself, strcandidate_active) -> Any: ...
    def set_candidate_inactive(self, constPGEntryself, strcandidate_inactive) -> Any: ...
    def set_cursor_keys_active(self, constPGEntryself, boolflag) -> Any: ...
    def set_cursor_position(self, constPGEntryself, intposition) -> Any: ...
    def set_max_chars(self, constPGEntryself, intmax_chars) -> Any: ...
    def set_max_width(self, constPGEntryself, floatmax_width) -> Any: ...
    def set_num_lines(self, constPGEntryself, intnum_lines) -> Any: ...
    def set_obscure_mode(self, constPGEntryself, boolflag) -> Any: ...
    def set_overflow_mode(self, constPGEntryself, boolflag) -> Any: ...
    @overload
    def set_text(self, constPGEntryself, strtext) -> Any: ...
    @overload
    def set_text(self) -> Any: ...
    def set_text_def(self, constPGEntryself, intstate, TextNodenode) -> Any: ...
    def set_wtext(self, constPGEntryself, unicodewtext) -> Any: ...
    def setup(self, constPGEntryself, floatwidth, intnum_lines) -> Any: ...
    def setupMinimal(self, *args, **kwargs): ...
    def setup_minimal(self, constPGEntryself, floatwidth, intnum_lines) -> Any: ...

class PGFrameStyle(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    TBevelIn: ClassVar[int] = ...
    TBevelOut: ClassVar[int] = ...
    TFlat: ClassVar[int] = ...
    TGroove: ClassVar[int] = ...
    TNone: ClassVar[int] = ...
    TRidge: ClassVar[int] = ...
    TTextureBorder: ClassVar[int] = ...
    T_bevel_in: ClassVar[int] = ...
    T_bevel_out: ClassVar[int] = ...
    T_flat: ClassVar[int] = ...
    T_groove: ClassVar[int] = ...
    T_none: ClassVar[int] = ...
    T_ridge: ClassVar[int] = ...
    T_texture_border: ClassVar[int] = ...
    color: Incomplete
    texture: Incomplete
    type: Incomplete
    uv_width: Incomplete
    visible_scale: Incomplete
    width: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constPGFrameStyleself, constPGFrameStylecopy) -> Any: ...
    def clearTexture(self, *args, **kwargs): ...
    def clear_texture(self, constPGFrameStyleself) -> Any: ...
    def getColor(self, *args, **kwargs): ...
    def getInternalFrame(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    def getType(self, *args, **kwargs): ...
    def getUvWidth(self, *args, **kwargs): ...
    def getVisibleScale(self, *args, **kwargs): ...
    def getWidth(self, *args, **kwargs): ...
    def get_color(self, PGFrameStyleself) -> Any: ...
    def get_internal_frame(self, PGFrameStyleself, constLVecBase4fframe) -> Any: ...
    def get_texture(self, PGFrameStyleself) -> Any: ...
    def get_type(self, PGFrameStyleself) -> Any: ...
    def get_uv_width(self, PGFrameStyleself) -> Any: ...
    def get_visible_scale(self, PGFrameStyleself) -> Any: ...
    def get_width(self, PGFrameStyleself) -> Any: ...
    def hasTexture(self, *args, **kwargs): ...
    def has_texture(self, PGFrameStyleself) -> Any: ...
    def output(self, PGFrameStyleself, ostreamout) -> Any: ...
    def setColor(self, *args, **kwargs): ...
    def setTexture(self, *args, **kwargs): ...
    def setType(self, *args, **kwargs): ...
    def setUvWidth(self, *args, **kwargs): ...
    def setVisibleScale(self, *args, **kwargs): ...
    def setWidth(self, *args, **kwargs): ...
    @overload
    def set_color(self, constPGFrameStyleself, constLVecBase4fcolor) -> Any: ...
    @overload
    def set_color(self, constPGFrameStyleself, floatr, floatg, floatb, floata) -> Any: ...
    def set_texture(self, constPGFrameStyleself, Texturetexture) -> Any: ...
    def set_type(self, constPGFrameStyleself, inttype) -> Any: ...
    @overload
    def set_uv_width(self, constPGFrameStyleself, constLVecBase2fuv_width) -> Any: ...
    @overload
    def set_uv_width(self, constPGFrameStyleself, floatu, floatv) -> Any: ...
    @overload
    def set_visible_scale(self, constPGFrameStyleself, constLVecBase2fvisible_scale) -> Any: ...
    @overload
    def set_visible_scale(self, constPGFrameStyleself, floatx, floaty) -> Any: ...
    @overload
    def set_width(self, constPGFrameStyleself, constLVecBase2fwidth) -> Any: ...
    @overload
    def set_width(self, constPGFrameStyleself, floatx, floaty) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PGItem(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    active: Incomplete
    background_focus: Incomplete
    enter_prefix: Incomplete
    exit_prefix: Incomplete
    focus: Incomplete
    focus_in_prefix: Incomplete
    focus_out_prefix: Incomplete
    frame: Incomplete
    id: Incomplete
    keystroke_prefix: Incomplete
    name: Incomplete
    press_prefix: Incomplete
    release_prefix: Incomplete
    repeat_prefix: Incomplete
    state: Incomplete
    state_defs: Incomplete
    suppress_flags: Incomplete
    within_prefix: Incomplete
    without_prefix: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearFrame(self, *args, **kwargs): ...
    def clearSound(self, *args, **kwargs): ...
    def clearStateDef(self, *args, **kwargs): ...
    def clear_frame(self, constPGItemself) -> Any: ...
    def clear_sound(self, constPGItemself, strevent) -> Any: ...
    def clear_state_def(self, constPGItemself, intstate) -> Any: ...
    def getActive(self, *args, **kwargs): ...
    def getBackgroundFocus(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getEnterEvent(self, *args, **kwargs): ...
    @staticmethod
    def getEnterPrefix(*args, **kwargs): ...
    def getExitEvent(self, *args, **kwargs): ...
    @staticmethod
    def getExitPrefix(*args, **kwargs): ...
    def getFocus(self, *args, **kwargs): ...
    def getFocusInEvent(self, *args, **kwargs): ...
    @staticmethod
    def getFocusInPrefix(*args, **kwargs): ...
    @staticmethod
    def getFocusItem(*args, **kwargs): ...
    def getFocusOutEvent(self, *args, **kwargs): ...
    @staticmethod
    def getFocusOutPrefix(*args, **kwargs): ...
    def getFrame(self, *args, **kwargs): ...
    def getFrameInvXform(self, *args, **kwargs): ...
    def getFrameStyle(self, *args, **kwargs): ...
    def getId(self, *args, **kwargs): ...
    def getKeystrokeEvent(self, *args, **kwargs): ...
    @staticmethod
    def getKeystrokePrefix(*args, **kwargs): ...
    def getNumStateDefs(self, *args, **kwargs): ...
    def getPressEvent(self, *args, **kwargs): ...
    @staticmethod
    def getPressPrefix(*args, **kwargs): ...
    def getReleaseEvent(self, *args, **kwargs): ...
    @staticmethod
    def getReleasePrefix(*args, **kwargs): ...
    def getRepeatEvent(self, *args, **kwargs): ...
    @staticmethod
    def getRepeatPrefix(*args, **kwargs): ...
    def getSound(self, *args, **kwargs): ...
    def getState(self, *args, **kwargs): ...
    def getStateDef(self, *args, **kwargs): ...
    def getStateDefs(self, *args, **kwargs): ...
    def getSuppressFlags(self, *args, **kwargs): ...
    @staticmethod
    def getTextNode(*args, **kwargs): ...
    def getWithinEvent(self, *args, **kwargs): ...
    @staticmethod
    def getWithinPrefix(*args, **kwargs): ...
    def getWithoutEvent(self, *args, **kwargs): ...
    @staticmethod
    def getWithoutPrefix(*args, **kwargs): ...
    def get_active(self, PGItemself) -> Any: ...
    def get_background_focus(self, PGItemself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_enter_event(self, PGItemself) -> Any: ...
    @staticmethod
    def get_enter_prefix() -> Any: ...
    def get_exit_event(self, PGItemself) -> Any: ...
    @staticmethod
    def get_exit_prefix() -> Any: ...
    def get_focus(self, PGItemself) -> Any: ...
    def get_focus_in_event(self, PGItemself) -> Any: ...
    @staticmethod
    def get_focus_in_prefix() -> Any: ...
    @staticmethod
    def get_focus_item() -> Any: ...
    def get_focus_out_event(self, PGItemself) -> Any: ...
    @staticmethod
    def get_focus_out_prefix() -> Any: ...
    def get_frame(self, PGItemself) -> Any: ...
    def get_frame_inv_xform(self, PGItemself) -> Any: ...
    def get_frame_style(self, constPGItemself, intstate) -> Any: ...
    def get_id(self, PGItemself) -> Any: ...
    def get_keystroke_event(self, PGItemself) -> Any: ...
    @staticmethod
    def get_keystroke_prefix() -> Any: ...
    @overload
    def get_num_state_defs(self, PGItemself) -> Any: ...
    @overload
    def get_num_state_defs(self) -> Any: ...
    def get_press_event(self, PGItemself, constButtonHandlebutton) -> Any: ...
    @staticmethod
    def get_press_prefix() -> Any: ...
    def get_release_event(self, PGItemself, constButtonHandlebutton) -> Any: ...
    @staticmethod
    def get_release_prefix() -> Any: ...
    def get_repeat_event(self, PGItemself, constButtonHandlebutton) -> Any: ...
    @staticmethod
    def get_repeat_prefix() -> Any: ...
    def get_sound(self, PGItemself, strevent) -> Any: ...
    def get_state(self, PGItemself) -> Any: ...
    def get_state_def(self, constPGItemself, intstate) -> Any: ...
    def get_state_defs(self, *args, **kwargs): ...
    @overload
    def get_suppress_flags(self, PGItemself) -> Any: ...
    @overload
    def get_suppress_flags(self) -> Any: ...
    @staticmethod
    def get_text_node() -> Any: ...
    def get_within_event(self, PGItemself) -> Any: ...
    @staticmethod
    def get_within_prefix() -> Any: ...
    def get_without_event(self, PGItemself) -> Any: ...
    @staticmethod
    def get_without_prefix() -> Any: ...
    def hasFrame(self, *args, **kwargs): ...
    def hasSound(self, *args, **kwargs): ...
    def hasStateDef(self, *args, **kwargs): ...
    def has_frame(self, PGItemself) -> Any: ...
    def has_sound(self, PGItemself, strevent) -> Any: ...
    def has_state_def(self, PGItemself, intstate) -> Any: ...
    def instanceToStateDef(self, *args, **kwargs): ...
    def instance_to_state_def(self, constPGItemself, intstate, constNodePathpath) -> Any: ...
    def setActive(self, *args, **kwargs): ...
    def setBackgroundFocus(self, *args, **kwargs): ...
    def setFocus(self, *args, **kwargs): ...
    def setFrame(self, *args, **kwargs): ...
    def setFrameStyle(self, *args, **kwargs): ...
    def setId(self, *args, **kwargs): ...
    def setName(self, *args, **kwargs): ...
    def setSound(self, *args, **kwargs): ...
    def setState(self, *args, **kwargs): ...
    def setSuppressFlags(self, *args, **kwargs): ...
    @staticmethod
    def setTextNode(*args, **kwargs): ...
    def set_active(self, constPGItemself, boolactive) -> Any: ...
    def set_background_focus(self, constPGItemself, boolfocus) -> Any: ...
    def set_focus(self, constPGItemself, boolfocus) -> Any: ...
    @overload
    def set_frame(self, constPGItemself, constLVecBase4fframe) -> Any: ...
    @overload
    def set_frame(self, constPGItemself, floatleft, floatright, floatbottom, floattop) -> Any: ...
    def set_frame_style(self, constPGItemself, intstate, constPGFrameStylestyle) -> Any: ...
    def set_id(self, constPGItemself, strid) -> Any: ...
    def set_name(self, constPGItemself, strname) -> Any: ...
    def set_sound(self, constPGItemself, strevent, AudioSoundsound) -> Any: ...
    def set_state(self, constPGItemself, intstate) -> Any: ...
    @overload
    def set_suppress_flags(self, constPGItemself, intsuppress_flags) -> Any: ...
    @overload
    def set_suppress_flags(self) -> Any: ...
    @staticmethod
    def set_text_node(TextNodenode) -> Any: ...

class PGMouseWatcherBackground(MouseWatcherRegion):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PGMouseWatcherParameter(TypedWritableReferenceCount, MouseWatcherParameter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def output(self, PGMouseWatcherParameterself, ostreamout) -> Any: ...
    def upcastToMouseWatcherParameter(self, *args, **kwargs): ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_MouseWatcherParameter(self, constPGMouseWatcherParameterself) -> Any: ...
    def upcast_to_TypedWritableReferenceCount(self, constPGMouseWatcherParameterself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PGScrollFrame(PGVirtualFrame):
    DtoolClassDict: ClassVar[dict] = ...
    auto_hide: Incomplete
    horizontal_slider: Incomplete
    manage_pieces: Incomplete
    vertical_slider: Incomplete
    virtual_frame: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearHorizontalSlider(self, *args, **kwargs): ...
    def clearVerticalSlider(self, *args, **kwargs): ...
    def clearVirtualFrame(self, *args, **kwargs): ...
    def clear_horizontal_slider(self, constPGScrollFrameself) -> Any: ...
    def clear_vertical_slider(self, constPGScrollFrameself) -> Any: ...
    def clear_virtual_frame(self, constPGScrollFrameself) -> Any: ...
    def getAutoHide(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHorizontalSlider(self, *args, **kwargs): ...
    def getManagePieces(self, *args, **kwargs): ...
    def getVerticalSlider(self, *args, **kwargs): ...
    def getVirtualFrame(self, *args, **kwargs): ...
    def get_auto_hide(self, PGScrollFrameself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_horizontal_slider(self, PGScrollFrameself) -> Any: ...
    def get_manage_pieces(self, PGScrollFrameself) -> Any: ...
    def get_vertical_slider(self, PGScrollFrameself) -> Any: ...
    def get_virtual_frame(self, PGScrollFrameself) -> Any: ...
    def hasVirtualFrame(self, *args, **kwargs): ...
    def has_virtual_frame(self, PGScrollFrameself) -> Any: ...
    def recompute(self, constPGScrollFrameself) -> Any: ...
    def remanage(self, constPGScrollFrameself) -> Any: ...
    def setAutoHide(self, *args, **kwargs): ...
    def setHorizontalSlider(self, *args, **kwargs): ...
    def setManagePieces(self, *args, **kwargs): ...
    def setVerticalSlider(self, *args, **kwargs): ...
    def setVirtualFrame(self, *args, **kwargs): ...
    def set_auto_hide(self, constPGScrollFrameself, boolauto_hide) -> Any: ...
    def set_horizontal_slider(self, constPGScrollFrameself, PGSliderBarhorizontal_slider) -> Any: ...
    def set_manage_pieces(self, constPGScrollFrameself, boolmanage_pieces) -> Any: ...
    def set_vertical_slider(self, constPGScrollFrameself, PGSliderBarvertical_slider) -> Any: ...
    @overload
    def set_virtual_frame(self, constPGScrollFrameself, constLVecBase4fvirtual_frame) -> Any: ...
    @overload
    def set_virtual_frame(self, constPGScrollFrameself, floatleft, floatright, floatbottom, floattop) -> Any: ...
    def setup(
        self,
        constPGScrollFrameself,
        floatwidth,
        floatheight,
        floatleft,
        floatright,
        floatbottom,
        floattop,
        floatslider_width,
        floatbevel,
    ) -> Any: ...
    def upcastToPGVirtualFrame(self, *args, **kwargs): ...
    def upcast_to_PGVirtualFrame(self, constPGScrollFrameself) -> Any: ...

class PGSliderBar(PGItem):
    DtoolClassDict: ClassVar[dict] = ...
    active: Incomplete
    adjust_prefix: Incomplete
    axis: Incomplete
    button_down: Incomplete
    left_button: Incomplete
    manage_pieces: Incomplete
    page_size: Incomplete
    ratio: Incomplete
    resize_thumb: Incomplete
    right_button: Incomplete
    scroll_size: Incomplete
    thumb_button: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearLeftButton(self, *args, **kwargs): ...
    def clearRightButton(self, *args, **kwargs): ...
    def clearThumbButton(self, *args, **kwargs): ...
    def clear_left_button(self, constPGSliderBarself) -> Any: ...
    def clear_right_button(self, constPGSliderBarself) -> Any: ...
    def clear_thumb_button(self, constPGSliderBarself) -> Any: ...
    def getAdjustEvent(self, *args, **kwargs): ...
    @staticmethod
    def getAdjustPrefix(*args, **kwargs): ...
    def getAxis(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLeftButton(self, *args, **kwargs): ...
    def getManagePieces(self, *args, **kwargs): ...
    def getMaxValue(self, *args, **kwargs): ...
    def getMinValue(self, *args, **kwargs): ...
    def getPageSize(self, *args, **kwargs): ...
    def getRatio(self, *args, **kwargs): ...
    def getResizeThumb(self, *args, **kwargs): ...
    def getRightButton(self, *args, **kwargs): ...
    def getScrollSize(self, *args, **kwargs): ...
    def getThumbButton(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def get_adjust_event(self, PGSliderBarself) -> Any: ...
    @staticmethod
    def get_adjust_prefix() -> Any: ...
    def get_axis(self, PGSliderBarself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_left_button(self, PGSliderBarself) -> Any: ...
    def get_manage_pieces(self, PGSliderBarself) -> Any: ...
    def get_max_value(self, PGSliderBarself) -> Any: ...
    def get_min_value(self, PGSliderBarself) -> Any: ...
    def get_page_size(self, PGSliderBarself) -> Any: ...
    def get_ratio(self, PGSliderBarself) -> Any: ...
    def get_resize_thumb(self, PGSliderBarself) -> Any: ...
    def get_right_button(self, PGSliderBarself) -> Any: ...
    def get_scroll_size(self, PGSliderBarself) -> Any: ...
    def get_thumb_button(self, PGSliderBarself) -> Any: ...
    def get_value(self, PGSliderBarself) -> Any: ...
    def isButtonDown(self, *args, **kwargs): ...
    def is_button_down(self, PGSliderBarself) -> Any: ...
    def recompute(self, constPGSliderBarself) -> Any: ...
    def remanage(self, constPGSliderBarself) -> Any: ...
    def setActive(self, *args, **kwargs): ...
    def setAxis(self, *args, **kwargs): ...
    def setLeftButton(self, *args, **kwargs): ...
    def setManagePieces(self, *args, **kwargs): ...
    def setPageSize(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRatio(self, *args, **kwargs): ...
    def setResizeThumb(self, *args, **kwargs): ...
    def setRightButton(self, *args, **kwargs): ...
    def setScrollSize(self, *args, **kwargs): ...
    def setThumbButton(self, *args, **kwargs): ...
    def setValue(self, *args, **kwargs): ...
    def set_active(self, constPGSliderBarself, boolactive) -> Any: ...
    def set_axis(self, constPGSliderBarself, constLVector3faxis) -> Any: ...
    def set_left_button(self, constPGSliderBarself, PGButtonleft_button) -> Any: ...
    def set_manage_pieces(self, constPGSliderBarself, boolmanage_pieces) -> Any: ...
    def set_page_size(self, constPGSliderBarself, floatpage_size) -> Any: ...
    def set_range(self, constPGSliderBarself, floatmin_value, floatmax_value) -> Any: ...
    def set_ratio(self, constPGSliderBarself, floatratio) -> Any: ...
    def set_resize_thumb(self, constPGSliderBarself, boolresize_thumb) -> Any: ...
    def set_right_button(self, constPGSliderBarself, PGButtonright_button) -> Any: ...
    def set_scroll_size(self, constPGSliderBarself, floatscroll_size) -> Any: ...
    def set_thumb_button(self, constPGSliderBarself, PGButtonthumb_button) -> Any: ...
    def set_value(self, constPGSliderBarself, floatvalue) -> Any: ...
    def setupScrollBar(self, *args, **kwargs): ...
    def setupSlider(self, *args, **kwargs): ...
    def setup_scroll_bar(self, constPGSliderBarself, boolvertical, floatlength, floatwidth, floatbevel) -> Any: ...
    def setup_slider(self, constPGSliderBarself, boolvertical, floatlength, floatwidth, floatbevel) -> Any: ...
    def upcastToPGItem(self, *args, **kwargs): ...
    def upcast_to_PGItem(self, constPGSliderBarself) -> Any: ...

class PGTop(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    group: Incomplete
    mouse_watcher: Incomplete
    start_sort: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getGroup(self, *args, **kwargs): ...
    def getMouseWatcher(self, *args, **kwargs): ...
    def getStartSort(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_group(self, PGTopself) -> Any: ...
    def get_mouse_watcher(self, PGTopself) -> Any: ...
    def get_start_sort(self, PGTopself) -> Any: ...
    def setMouseWatcher(self, *args, **kwargs): ...
    def setStartSort(self, *args, **kwargs): ...
    def set_mouse_watcher(self, constPGTopself, MouseWatcherwatcher) -> Any: ...
    def set_start_sort(self, constPGTopself, intstart_sort) -> Any: ...

class PGVirtualFrame(PGItem):
    DtoolClassDict: ClassVar[dict] = ...
    canvas_node: Incomplete
    canvas_parent: Incomplete
    canvas_transform: Incomplete
    clip_frame: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearClipFrame(self, *args, **kwargs): ...
    def clear_clip_frame(self, constPGVirtualFrameself) -> Any: ...
    def getCanvasNode(self, *args, **kwargs): ...
    def getCanvasParent(self, *args, **kwargs): ...
    def getCanvasTransform(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getClipFrame(self, *args, **kwargs): ...
    def get_canvas_node(self, PGVirtualFrameself) -> Any: ...
    def get_canvas_parent(self, PGVirtualFrameself) -> Any: ...
    def get_canvas_transform(self, PGVirtualFrameself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_clip_frame(self, PGVirtualFrameself) -> Any: ...
    def hasClipFrame(self, *args, **kwargs): ...
    def has_clip_frame(self, PGVirtualFrameself) -> Any: ...
    def setCanvasTransform(self, *args, **kwargs): ...
    def setClipFrame(self, *args, **kwargs): ...
    def set_canvas_transform(self, constPGVirtualFrameself, constTransformStatetransform) -> Any: ...
    @overload
    def set_clip_frame(self, constPGVirtualFrameself, constLVecBase4fclip_frame) -> Any: ...
    @overload
    def set_clip_frame(self, constPGVirtualFrameself, floatleft, floatright, floatbottom, floattop) -> Any: ...
    def setup(self, constPGVirtualFrameself, floatwidth, floatheight) -> Any: ...

class PGWaitBar(PGItem):
    DtoolClassDict: ClassVar[dict] = ...
    bar_style: Incomplete
    range: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getBarStyle(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPercent(self, *args, **kwargs): ...
    def getRange(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def get_bar_style(self, PGWaitBarself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_percent(self, PGWaitBarself) -> Any: ...
    def get_range(self, PGWaitBarself) -> Any: ...
    def get_value(self, PGWaitBarself) -> Any: ...
    def setBarStyle(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setValue(self, *args, **kwargs): ...
    def set_bar_style(self, constPGWaitBarself, constPGFrameStylestyle) -> Any: ...
    def set_range(self, constPGWaitBarself, floatrange) -> Any: ...
    def set_value(self, constPGWaitBarself, floatvalue) -> Any: ...
    def setup(self, constPGWaitBarself, floatwidth, floatheight, floatrange) -> Any: ...

class PNMBrush(ReferenceCount):
    BEAdd: ClassVar[int] = ...
    BEBlend: ClassVar[int] = ...
    BEDarken: ClassVar[int] = ...
    BELighten: ClassVar[int] = ...
    BESet: ClassVar[int] = ...
    BE_add: ClassVar[int] = ...
    BE_blend: ClassVar[int] = ...
    BE_darken: ClassVar[int] = ...
    BE_lighten: ClassVar[int] = ...
    BE_set: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def makeImage(*args, **kwargs): ...
    @staticmethod
    def makePixel(*args, **kwargs): ...
    @staticmethod
    def makeSpot(*args, **kwargs): ...
    @staticmethod
    def makeTransparent(*args, **kwargs): ...
    @staticmethod
    def make_image(constPNMImageimage, floatxc, floatyc, inteffect) -> Any: ...
    @staticmethod
    def make_pixel(constLVecBase4fcolor, inteffect) -> Any: ...
    @staticmethod
    def make_spot(constLVecBase4fcolor, floatradius, boolfuzzy, inteffect) -> Any: ...
    @staticmethod
    def make_transparent() -> Any: ...

class PNMFileType(TypedWritable):
    DtoolClassDict: ClassVar[dict] = ...
    extensions: Incomplete
    name: Incomplete
    suggested_extension: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getExtension(self, *args, **kwargs): ...
    def getExtensions(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumExtensions(self, *args, **kwargs): ...
    def getSuggestedExtension(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_extension(self, PNMFileTypeself, intn) -> Any: ...
    def get_extensions(self, *args, **kwargs): ...
    def get_name(self, PNMFileTypeself) -> Any: ...
    def get_num_extensions(self, PNMFileTypeself) -> Any: ...
    def get_suggested_extension(self, PNMFileTypeself) -> Any: ...

class PNMFileTypeRegistry(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    types: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getNumTypes(self, *args, **kwargs): ...
    def getType(self, *args, **kwargs): ...
    def getTypeByHandle(self, *args, **kwargs): ...
    def getTypeFromExtension(self, *args, **kwargs): ...
    def getTypeFromMagicNumber(self, *args, **kwargs): ...
    def getTypes(self, *args, **kwargs): ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_num_types(self, PNMFileTypeRegistryself) -> Any: ...
    def get_type(self, PNMFileTypeRegistryself, intn) -> Any: ...
    def get_type_by_handle(self, PNMFileTypeRegistryself, TypeHandlehandle) -> Any: ...
    def get_type_from_extension(self, PNMFileTypeRegistryself, strfilename) -> Any: ...
    def get_type_from_magic_number(self, PNMFileTypeRegistryself, strmagic_number) -> Any: ...
    def get_types(self, *args, **kwargs): ...
    def write(self, PNMFileTypeRegistryself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PNMImage(PNMImageHeader):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def getAlphaVal(self, *args, **kwargs): ...
        def getXelVal(self, *args, **kwargs): ...
        def get_alpha_val(self, CRowself, intx) -> Any: ...
        def get_xel_val(self, CRowself, intx) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def getAlphaVal(self, *args, **kwargs): ...
        def getXelVal(self, *args, **kwargs): ...
        def get_alpha_val(self, Rowself, intx) -> Any: ...
        def get_xel_val(self, constRowself, intx) -> Any: ...
        def setAlphaVal(self, *args, **kwargs): ...
        def setXelVal(self, *args, **kwargs): ...
        def set_alpha_val(self, constRowself, intx, intv) -> Any: ...
        def set_xel_val(self, constRowself, intx, constpixelv) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addAlpha(self, *args, **kwargs): ...
    def addSubImage(self, *args, **kwargs): ...
    def add_alpha(self, constPNMImageself) -> Any: ...
    def add_sub_image(
        self,
        constPNMImageself,
        constPNMImagecopy,
        intxto,
        intyto,
        intxfrom,
        intyfrom,
        intx_size,
        inty_size,
        floatpixel_scale,
    ) -> Any: ...
    def alphaFill(self, *args, **kwargs): ...
    def alphaFillVal(self, *args, **kwargs): ...
    def alpha_fill(self, constPNMImageself, floatalpha) -> Any: ...
    def alpha_fill_val(self, constPNMImageself, intalpha) -> Any: ...
    def applyExponent(self, *args, **kwargs): ...
    @overload
    def apply_exponent(self, constPNMImageself, floatgray_exponent) -> Any: ...
    @overload
    def apply_exponent(self, constPNMImageself, floatgray_exponent, floatalpha_exponent) -> Any: ...
    @overload
    def apply_exponent(self, constPNMImageself, floatred_exponent, floatgreen_exponent, floatblue_exponent) -> Any: ...
    @overload
    def apply_exponent(
        self, constPNMImageself, floatred_exponent, floatgreen_exponent, floatblue_exponent, floatalpha_exponent
    ) -> Any: ...
    def assign(self, constPNMImageself, constPNMImagecopy) -> Any: ...
    @overload
    def blend(self, constPNMImageself, intx, inty, constLVecBase3fval, floatalpha) -> Any: ...
    @overload
    def blend(self, constPNMImageself, intx, inty, floatr, floatg, floatb, floatalpha) -> Any: ...
    def blendSubImage(self, *args, **kwargs): ...
    def blend_sub_image(
        self,
        constPNMImageself,
        constPNMImagecopy,
        intxto,
        intyto,
        intxfrom,
        intyfrom,
        intx_size,
        inty_size,
        floatpixel_scale,
    ) -> Any: ...
    def boxFilter(self, *args, **kwargs): ...
    def boxFilterFrom(self, *args, **kwargs): ...
    @overload
    def box_filter(self, constPNMImageself, floatradius) -> Any: ...
    @overload
    def box_filter(self) -> Any: ...
    def box_filter_from(self, constPNMImageself, floatradius, constPNMImagecopy) -> Any: ...
    def clampVal(self, *args, **kwargs): ...
    def clamp_val(self, PNMImageself, intinput_value) -> Any: ...
    @overload
    def clear(self, constPNMImageself) -> Any: ...
    @overload
    def clear(
        self, constPNMImageself, intx_size, inty_size, intnum_channels, intmaxval, PNMFileTypetype, intcolor_space
    ) -> Any: ...
    @overload
    def clear(self) -> Any: ...
    def clearReadSize(self, *args, **kwargs): ...
    def clear_read_size(self, constPNMImageself) -> Any: ...
    def copyChannel(self, *args, **kwargs): ...
    def copyChannelBits(self, *args, **kwargs): ...
    def copyFrom(self, *args, **kwargs): ...
    def copyHeaderFrom(self, *args, **kwargs): ...
    def copySubImage(self, *args, **kwargs): ...
    @overload
    def copy_channel(self, constPNMImageself, constPNMImagecopy, intsrc_channel, intdest_channel) -> Any: ...
    @overload
    def copy_channel(
        self,
        constPNMImageself,
        constPNMImagecopy,
        intxto,
        intyto,
        intcto,
        intxfrom,
        intyfrom,
        intcfrom,
        intx_size,
        inty_size,
    ) -> Any: ...
    def copy_channel_bits(
        self, constPNMImageself, constPNMImagecopy, intsrc_channel, intdest_channel, intsrc_mask, intright_shift
    ) -> Any: ...
    def copy_from(self, constPNMImageself, constPNMImagecopy) -> Any: ...
    def copy_header_from(self, constPNMImageself, constPNMImageHeaderheader) -> Any: ...
    def copy_sub_image(
        self, constPNMImageself, constPNMImagecopy, intxto, intyto, intxfrom, intyfrom, intx_size, inty_size
    ) -> Any: ...
    def darkenSubImage(self, *args, **kwargs): ...
    def darken_sub_image(
        self,
        constPNMImageself,
        constPNMImagecopy,
        intxto,
        intyto,
        intxfrom,
        intyfrom,
        intx_size,
        inty_size,
        floatpixel_scale,
    ) -> Any: ...
    def doFillDistance(self, *args, **kwargs): ...
    def do_fill_distance(self, constPNMImageself, intxi, intyi, intd) -> Any: ...
    def expandBorder(self, *args, **kwargs): ...
    def expand_border(self, constPNMImageself, intleft, intright, intbottom, inttop, constLVecBase4fcolor) -> Any: ...
    @overload
    def fill(self, constPNMImageself) -> Any: ...
    @overload
    def fill(self, constPNMImageself, floatgray) -> Any: ...
    @overload
    def fill(self, constPNMImageself, floatred, floatgreen, floatblue) -> Any: ...
    def fillDistanceInside(self, *args, **kwargs): ...
    def fillDistanceOutside(self, *args, **kwargs): ...
    def fillVal(self, *args, **kwargs): ...
    def fill_distance_inside(
        self, constPNMImageself, constPNMImagemask, floatthreshold, intradius, boolshrink_from_border
    ) -> Any: ...
    def fill_distance_outside(self, constPNMImageself, constPNMImagemask, floatthreshold, intradius) -> Any: ...
    @overload
    def fill_val(self, constPNMImageself) -> Any: ...
    @overload
    def fill_val(self, constPNMImageself, intgray) -> Any: ...
    @overload
    def fill_val(self, constPNMImageself, intred, intgreen, intblue) -> Any: ...
    def flip(self, constPNMImageself, boolflip_x, boolflip_y, booltranspose) -> Any: ...
    def fromAlphaVal(self, *args, **kwargs): ...
    def fromVal(self, *args, **kwargs): ...
    def from_alpha_val(self, PNMImageself, intinput_value) -> Any: ...
    @overload
    def from_val(self, PNMImageself, constpixelinput_value) -> Any: ...
    @overload
    def from_val(self, PNMImageself, intinput_value) -> Any: ...
    def gammaCorrect(self, *args, **kwargs): ...
    def gammaCorrectAlpha(self, *args, **kwargs): ...
    def gamma_correct(self, constPNMImageself, floatfrom_gamma, floatto_gamma) -> Any: ...
    def gamma_correct_alpha(self, constPNMImageself, floatfrom_gamma, floatto_gamma) -> Any: ...
    def gaussianFilter(self, *args, **kwargs): ...
    def gaussianFilterFrom(self, *args, **kwargs): ...
    @overload
    def gaussian_filter(self, constPNMImageself, floatradius) -> Any: ...
    @overload
    def gaussian_filter(self) -> Any: ...
    def gaussian_filter_from(self, constPNMImageself, floatradius, constPNMImagecopy) -> Any: ...
    def getAlpha(self, *args, **kwargs): ...
    def getAlphaVal(self, *args, **kwargs): ...
    def getAverageGray(self, *args, **kwargs): ...
    def getAverageXel(self, *args, **kwargs): ...
    def getAverageXelA(self, *args, **kwargs): ...
    def getBlue(self, *args, **kwargs): ...
    def getBlueVal(self, *args, **kwargs): ...
    def getBright(self, *args, **kwargs): ...
    def getChannel(self, *args, **kwargs): ...
    def getChannelVal(self, *args, **kwargs): ...
    def getColorSpace(self, *args, **kwargs): ...
    def getGray(self, *args, **kwargs): ...
    def getGrayVal(self, *args, **kwargs): ...
    def getGreen(self, *args, **kwargs): ...
    def getGreenVal(self, *args, **kwargs): ...
    def getPixel(self, *args, **kwargs): ...
    def getReadXSize(self, *args, **kwargs): ...
    def getReadYSize(self, *args, **kwargs): ...
    def getRed(self, *args, **kwargs): ...
    def getRedVal(self, *args, **kwargs): ...
    def getXel(self, *args, **kwargs): ...
    def getXelA(self, *args, **kwargs): ...
    def getXelVal(self, *args, **kwargs): ...
    def get_alpha(self, PNMImageself, intx, inty) -> Any: ...
    def get_alpha_val(self, PNMImageself, intx, inty) -> Any: ...
    def get_average_gray(self, PNMImageself) -> Any: ...
    def get_average_xel(self, PNMImageself) -> Any: ...
    def get_average_xel_a(self, PNMImageself) -> Any: ...
    def get_blue(self, PNMImageself, intx, inty) -> Any: ...
    def get_blue_val(self, PNMImageself, intx, inty) -> Any: ...
    @overload
    def get_bright(self, PNMImageself, intx, inty) -> Any: ...
    @overload
    def get_bright(self, PNMImageself, intx, inty, floatrc, floatgc, floatbc) -> Any: ...
    @overload
    def get_bright(self, PNMImageself, intx, inty, floatrc, floatgc, floatbc, floatac) -> Any: ...
    @overload
    def get_bright(self) -> Any: ...
    @overload
    def get_bright(self) -> Any: ...
    @overload
    def get_bright(self) -> Any: ...
    def get_channel(self, PNMImageself, intx, inty, intchannel) -> Any: ...
    def get_channel_val(self, PNMImageself, intx, inty, intchannel) -> Any: ...
    def get_color_space(self, PNMImageself) -> Any: ...
    def get_gray(self, PNMImageself, intx, inty) -> Any: ...
    def get_gray_val(self, PNMImageself, intx, inty) -> Any: ...
    def get_green(self, PNMImageself, intx, inty) -> Any: ...
    def get_green_val(self, PNMImageself, intx, inty) -> Any: ...
    def get_pixel(self, PNMImageself, intx, inty) -> Any: ...
    def get_read_x_size(self, PNMImageself) -> Any: ...
    def get_read_y_size(self, PNMImageself) -> Any: ...
    def get_red(self, PNMImageself, intx, inty) -> Any: ...
    def get_red_val(self, PNMImageself, intx, inty) -> Any: ...
    def get_xel(self, PNMImageself, intx, inty) -> Any: ...
    def get_xel_a(self, PNMImageself, intx, inty) -> Any: ...
    @overload
    def get_xel_val(self, constPNMImageself, intx, inty) -> Any: ...
    @overload
    def get_xel_val(self, PNMImageself, intx, inty) -> Any: ...
    def hasReadSize(self, *args, **kwargs): ...
    def has_read_size(self, PNMImageself) -> Any: ...
    def indirect1dLookup(self, *args, **kwargs): ...
    def indirect_1d_lookup(
        self, constPNMImageself, constPNMImageindex_image, intchannel, constPNMImagepixel_values
    ) -> Any: ...
    def isValid(self, *args, **kwargs): ...
    def is_valid(self, PNMImageself) -> Any: ...
    def lightenSubImage(self, *args, **kwargs): ...
    def lighten_sub_image(
        self,
        constPNMImageself,
        constPNMImagecopy,
        intxto,
        intyto,
        intxfrom,
        intyfrom,
        intx_size,
        inty_size,
        floatpixel_scale,
    ) -> Any: ...
    def makeGrayscale(self, *args, **kwargs): ...
    def makeHistogram(self, *args, **kwargs): ...
    def makeRgb(self, *args, **kwargs): ...
    @overload
    def make_grayscale(self, constPNMImageself) -> Any: ...
    @overload
    def make_grayscale(self, constPNMImageself, floatrc, floatgc, floatbc) -> Any: ...
    def make_histogram(self, constPNMImageself, Histogramhist) -> Any: ...
    def make_rgb(self, constPNMImageself) -> Any: ...
    def multSubImage(self, *args, **kwargs): ...
    def mult_sub_image(
        self,
        constPNMImageself,
        constPNMImagecopy,
        intxto,
        intyto,
        intxfrom,
        intyfrom,
        intx_size,
        inty_size,
        floatpixel_scale,
    ) -> Any: ...
    def perlinNoiseFill(self, *args, **kwargs): ...
    @overload
    def perlin_noise_fill(self, constPNMImageself, StackedPerlinNoise2perlin) -> Any: ...
    @overload
    def perlin_noise_fill(
        self, constPNMImageself, floatsx, floatsy, inttable_size, intseed, floatox, floatoy
    ) -> Any: ...
    def premultiplyAlpha(self, *args, **kwargs): ...
    def premultiply_alpha(self, constPNMImageself) -> Any: ...
    def quantize(self, constPNMImageself, intmax_colors) -> Any: ...
    def quickFilterFrom(self, *args, **kwargs): ...
    def quick_filter_from(self, constPNMImageself, constPNMImagecopy, intxborder, intyborder) -> Any: ...
    @overload
    def read(self, constPNMImageself, istreamdata, strfilename, PNMFileTypetype, boolreport_unknown_type) -> Any: ...
    @overload
    def read(self) -> Any: ...
    def remixChannels(self, *args, **kwargs): ...
    def remix_channels(self, constPNMImageself, constLMatrix4fconv) -> Any: ...
    def removeAlpha(self, *args, **kwargs): ...
    def remove_alpha(self, constPNMImageself) -> Any: ...
    def renderSpot(self, *args, **kwargs): ...
    def render_spot(
        self, constPNMImageself, constLVecBase4ffg, constLVecBase4fbg, floatmin_radius, floatmax_radius
    ) -> Any: ...
    def rescale(self, constPNMImageself, floatmin_val, floatmax_val) -> Any: ...
    def reverseRows(self, *args, **kwargs): ...
    def reverse_rows(self, constPNMImageself) -> Any: ...
    def setAlpha(self, *args, **kwargs): ...
    def setAlphaVal(self, *args, **kwargs): ...
    def setBlue(self, *args, **kwargs): ...
    def setBlueVal(self, *args, **kwargs): ...
    def setChannel(self, *args, **kwargs): ...
    def setChannelVal(self, *args, **kwargs): ...
    def setColorSpace(self, *args, **kwargs): ...
    def setColorType(self, *args, **kwargs): ...
    def setGray(self, *args, **kwargs): ...
    def setGrayVal(self, *args, **kwargs): ...
    def setGreen(self, *args, **kwargs): ...
    def setGreenVal(self, *args, **kwargs): ...
    def setMaxval(self, *args, **kwargs): ...
    def setNumChannels(self, *args, **kwargs): ...
    def setPixel(self, *args, **kwargs): ...
    def setReadSize(self, *args, **kwargs): ...
    def setRed(self, *args, **kwargs): ...
    def setRedVal(self, *args, **kwargs): ...
    def setXel(self, *args, **kwargs): ...
    def setXelA(self, *args, **kwargs): ...
    def setXelVal(self, *args, **kwargs): ...
    def set_alpha(self, constPNMImageself, intx, inty, floata) -> Any: ...
    def set_alpha_val(self, constPNMImageself, intx, inty, inta) -> Any: ...
    def set_blue(self, constPNMImageself, intx, inty, floatb) -> Any: ...
    def set_blue_val(self, constPNMImageself, intx, inty, intb) -> Any: ...
    def set_channel(self, constPNMImageself, intx, inty, intchannel, floatvalue) -> Any: ...
    def set_channel_val(self, constPNMImageself, intx, inty, intchannel, intvalue) -> Any: ...
    def set_color_space(self, constPNMImageself, intcolor_space) -> Any: ...
    def set_color_type(self, constPNMImageself, intcolor_type) -> Any: ...
    def set_gray(self, constPNMImageself, intx, inty, floatgray) -> Any: ...
    def set_gray_val(self, constPNMImageself, intx, inty, intgray) -> Any: ...
    def set_green(self, constPNMImageself, intx, inty, floatg) -> Any: ...
    def set_green_val(self, constPNMImageself, intx, inty, intg) -> Any: ...
    def set_maxval(self, constPNMImageself, intmaxval) -> Any: ...
    def set_num_channels(self, constPNMImageself, intnum_channels) -> Any: ...
    def set_pixel(self, constPNMImageself, intx, inty, constPixelSpecpixel) -> Any: ...
    def set_read_size(self, constPNMImageself, intx_size, inty_size) -> Any: ...
    def set_red(self, constPNMImageself, intx, inty, floatr) -> Any: ...
    def set_red_val(self, constPNMImageself, intx, inty, intr) -> Any: ...
    @overload
    def set_xel(self, constPNMImageself, intx, inty, constLVecBase3fvalue) -> Any: ...
    @overload
    def set_xel(self, constPNMImageself, intx, inty, floatgray) -> Any: ...
    @overload
    def set_xel(self, constPNMImageself, intx, inty, floatr, floatg, floatb) -> Any: ...
    @overload
    def set_xel_a(self, constPNMImageself, intx, inty, constLVecBase4fvalue) -> Any: ...
    @overload
    def set_xel_a(self, constPNMImageself, intx, inty, floatr, floatg, floatb, floata) -> Any: ...
    @overload
    def set_xel_val(self, constPNMImageself, intx, inty, constpixelvalue) -> Any: ...
    @overload
    def set_xel_val(self, constPNMImageself, intx, inty, intgray) -> Any: ...
    @overload
    def set_xel_val(self, constPNMImageself, intx, inty, intr, intg, intb) -> Any: ...
    def takeFrom(self, *args, **kwargs): ...
    def take_from(self, constPNMImageself, PNMImageorig) -> Any: ...
    def threshold(
        self, constPNMImageself, constPNMImageselect_image, intchannel, floatthreshold, constPNMImagelt, constPNMImagege
    ) -> Any: ...
    def toAlphaVal(self, *args, **kwargs): ...
    def toVal(self, *args, **kwargs): ...
    def to_alpha_val(self, PNMImageself, floatinput_value) -> Any: ...
    @overload
    def to_val(self, PNMImageself, constLVecBase3finput_value) -> Any: ...
    @overload
    def to_val(self, PNMImageself, floatinput_value) -> Any: ...
    def unfilteredStretchFrom(self, *args, **kwargs): ...
    def unfiltered_stretch_from(self, constPNMImageself, constPNMImagecopy) -> Any: ...
    def unpremultiplyAlpha(self, *args, **kwargs): ...
    def unpremultiply_alpha(self, constPNMImageself) -> Any: ...
    @overload
    def write(self, PNMImageself, ostreamdata, strfilename, PNMFileTypetype) -> Any: ...
    @overload
    def write(self) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __invert__(self): ...
    def __isub__(self, other): ...
    def __mul__(self, other): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __sub__(self, other): ...

class PNMImageHeader(dtoolconfig.DTOOL_SUPER_BASE):
    class Histogram(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def getCount(self, *args, **kwargs): ...
        def getNumPixels(self, *args, **kwargs): ...
        def getPixel(self, *args, **kwargs): ...
        def getPixels(self, *args, **kwargs): ...
        @overload
        def get_count(self, Histogramself, constPixelSpecpixel) -> Any: ...
        @overload
        def get_count(self, Histogramself, intn) -> Any: ...
        def get_num_pixels(self, Histogramself) -> Any: ...
        def get_pixel(self, Histogramself, intn) -> Any: ...
        def get_pixels(self, *args, **kwargs): ...
        def write(self, Histogramself, ostreamout) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...

    class PixelSpec(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def compareTo(self, *args, **kwargs): ...
        def compare_to(self, PixelSpecself, constPixelSpecother) -> Any: ...
        def getAlpha(self, *args, **kwargs): ...
        def getBlue(self, *args, **kwargs): ...
        def getGreen(self, *args, **kwargs): ...
        def getRed(self, *args, **kwargs): ...
        def get_alpha(self, PixelSpecself) -> Any: ...
        def get_blue(self, PixelSpecself) -> Any: ...
        def get_green(self, PixelSpecself) -> Any: ...
        def get_red(self, PixelSpecself) -> Any: ...
        def output(self, PixelSpecself, ostreamout) -> Any: ...
        def setAlpha(self, *args, **kwargs): ...
        def setBlue(self, *args, **kwargs): ...
        def setGreen(self, *args, **kwargs): ...
        def setRed(self, *args, **kwargs): ...
        def set_alpha(self, constPixelSpecself, intalpha) -> Any: ...
        def set_blue(self, constPixelSpecself, intblue) -> Any: ...
        def set_green(self, constPixelSpecself, intgreen) -> Any: ...
        def set_red(self, constPixelSpecself, intred) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __getitem__(self, index): ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __len__(self) -> int: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...

    class PixelSpecCount(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...

    CTColor: ClassVar[int] = ...
    CTFourChannel: ClassVar[int] = ...
    CTGrayscale: ClassVar[int] = ...
    CTInvalid: ClassVar[int] = ...
    CTTwoChannel: ClassVar[int] = ...
    CT_color: ClassVar[int] = ...
    CT_four_channel: ClassVar[int] = ...
    CT_grayscale: ClassVar[int] = ...
    CT_invalid: ClassVar[int] = ...
    CT_two_channel: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    color_space: Incomplete
    comment: Incomplete
    maxval: Incomplete
    num_channels: Incomplete
    size: Incomplete
    type: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constPNMImageHeaderself, constPNMImageHeadercopy) -> Any: ...
    def getColorSpace(self, *args, **kwargs): ...
    def getColorType(self, *args, **kwargs): ...
    def getComment(self, *args, **kwargs): ...
    def getMaxval(self, *args, **kwargs): ...
    def getNumChannels(self, *args, **kwargs): ...
    def getSize(self, *args, **kwargs): ...
    def getType(self, *args, **kwargs): ...
    def getXSize(self, *args, **kwargs): ...
    def getYSize(self, *args, **kwargs): ...
    def get_color_space(self, PNMImageHeaderself) -> Any: ...
    def get_color_type(self, PNMImageHeaderself) -> Any: ...
    def get_comment(self, PNMImageHeaderself) -> Any: ...
    def get_maxval(self, PNMImageHeaderself) -> Any: ...
    def get_num_channels(self, PNMImageHeaderself) -> Any: ...
    def get_size(self, PNMImageHeaderself) -> Any: ...
    def get_type(self, PNMImageHeaderself) -> Any: ...
    def get_x_size(self, PNMImageHeaderself) -> Any: ...
    def get_y_size(self, PNMImageHeaderself) -> Any: ...
    def hasAlpha(self, *args, **kwargs): ...
    def hasType(self, *args, **kwargs): ...
    @overload
    def has_alpha(self, PNMImageHeaderself) -> Any: ...
    @overload
    def has_alpha(self, intcolor_type) -> Any: ...
    @overload
    def has_alpha(self) -> Any: ...
    def has_type(self, PNMImageHeaderself) -> Any: ...
    def isGrayscale(self, *args, **kwargs): ...
    @overload
    def is_grayscale(self, PNMImageHeaderself) -> Any: ...
    @overload
    def is_grayscale(self, intcolor_type) -> Any: ...
    @overload
    def is_grayscale(self) -> Any: ...
    def output(self, PNMImageHeaderself, ostreamout) -> Any: ...
    def readHeader(self, *args, **kwargs): ...
    def read_header(
        self, constPNMImageHeaderself, istreamdata, strfilename, PNMFileTypetype, boolreport_unknown_type
    ) -> Any: ...
    def setComment(self, *args, **kwargs): ...
    def setType(self, *args, **kwargs): ...
    def set_comment(self, constPNMImageHeaderself, strcomment) -> Any: ...
    def set_type(self, constPNMImageHeaderself, PNMFileTypetype) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PNMPainter(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    fill: Incomplete
    pen: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def drawLine(self, *args, **kwargs): ...
    def drawPoint(self, *args, **kwargs): ...
    def drawRectangle(self, *args, **kwargs): ...
    def draw_line(self, constPNMPainterself, floatxa, floatya, floatxb, floatyb) -> Any: ...
    def draw_point(self, constPNMPainterself, floatx, floaty) -> Any: ...
    def draw_rectangle(self, constPNMPainterself, floatxa, floatya, floatxb, floatyb) -> Any: ...
    def getFill(self, *args, **kwargs): ...
    def getPen(self, *args, **kwargs): ...
    def get_fill(self, PNMPainterself) -> Any: ...
    def get_pen(self, PNMPainterself) -> Any: ...
    def setFill(self, *args, **kwargs): ...
    def setPen(self, *args, **kwargs): ...
    def set_fill(self, constPNMPainterself, PNMBrushfill) -> Any: ...
    def set_pen(self, constPNMPainterself, PNMBrushpen) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PNMTextGlyph(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAdvance(self, *args, **kwargs): ...
    def getBottom(self, *args, **kwargs): ...
    def getHeight(self, *args, **kwargs): ...
    def getInteriorFlag(self, *args, **kwargs): ...
    def getLeft(self, *args, **kwargs): ...
    def getRight(self, *args, **kwargs): ...
    def getTop(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def getWidth(self, *args, **kwargs): ...
    def get_advance(self, PNMTextGlyphself) -> Any: ...
    def get_bottom(self, PNMTextGlyphself) -> Any: ...
    def get_height(self, PNMTextGlyphself) -> Any: ...
    def get_interior_flag(self, PNMTextGlyphself, intx, inty) -> Any: ...
    def get_left(self, PNMTextGlyphself) -> Any: ...
    def get_right(self, PNMTextGlyphself) -> Any: ...
    def get_top(self, PNMTextGlyphself) -> Any: ...
    def get_value(self, PNMTextGlyphself, intx, inty) -> Any: ...
    def get_width(self, PNMTextGlyphself) -> Any: ...
    @overload
    def place(self, constPNMTextGlyphself, PNMImagedest_image, intxp, intyp, constLVecBase4ffg) -> Any: ...
    @overload
    def place(
        self, constPNMTextGlyphself, PNMImagedest_image, intxp, intyp, constLVecBase4ffg, constLVecBase4finterior
    ) -> Any: ...
    @overload
    def place(self) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PNMTextMaker(FreetypeFont):
    ACenter: ClassVar[int] = ...
    ALeft: ClassVar[int] = ...
    ARight: ClassVar[int] = ...
    A_center: ClassVar[int] = ...
    A_left: ClassVar[int] = ...
    A_right: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def calcWidth(self, *args, **kwargs): ...
    @overload
    def calc_width(self, constPNMTextMakerself, unicodetext) -> Any: ...
    @overload
    def calc_width(self, constPNMTextMakerself, strtext) -> Any: ...
    def generateInto(self, *args, **kwargs): ...
    @overload
    def generate_into(self, constPNMTextMakerself, unicodetext, PNMImagedest_image, intx, inty) -> Any: ...
    @overload
    def generate_into(self, constPNMTextMakerself, strtext, PNMImagedest_image, intx, inty) -> Any: ...
    def getAlign(self, *args, **kwargs): ...
    def getDistanceFieldRadius(self, *args, **kwargs): ...
    def getFg(self, *args, **kwargs): ...
    def getGlyph(self, *args, **kwargs): ...
    def getInterior(self, *args, **kwargs): ...
    def getInteriorFlag(self, *args, **kwargs): ...
    def get_align(self, PNMTextMakerself) -> Any: ...
    def get_distance_field_radius(self, PNMTextMakerself) -> Any: ...
    def get_fg(self, PNMTextMakerself) -> Any: ...
    def get_glyph(self, constPNMTextMakerself, intcharacter) -> Any: ...
    def get_interior(self, PNMTextMakerself) -> Any: ...
    def get_interior_flag(self, PNMTextMakerself) -> Any: ...
    def isValid(self, *args, **kwargs): ...
    def is_valid(self, PNMTextMakerself) -> Any: ...
    def setAlign(self, *args, **kwargs): ...
    def setDistanceFieldRadius(self, *args, **kwargs): ...
    def setFg(self, *args, **kwargs): ...
    def setInterior(self, *args, **kwargs): ...
    def setInteriorFlag(self, *args, **kwargs): ...
    def set_align(self, constPNMTextMakerself, intalign_type) -> Any: ...
    def set_distance_field_radius(self, constPNMTextMakerself, intradius) -> Any: ...
    def set_fg(self, constPNMTextMakerself, constLVecBase4ffg) -> Any: ...
    def set_interior(self, constPNMTextMakerself, constLVecBase4finterior) -> Any: ...
    def set_interior_flag(self, constPNMTextMakerself, boolinterior_flag) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PStatClient(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    client_name: Incomplete
    collectors: Incomplete
    current_thread: Incomplete
    main_thread: Incomplete
    max_rate: Incomplete
    real_time: Incomplete
    threads: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clientConnect(self, *args, **kwargs): ...
    def clientDisconnect(self, *args, **kwargs): ...
    def clientIsConnected(self, *args, **kwargs): ...
    def clientMainTick(self, *args, **kwargs): ...
    def clientResumeAfterPause(self, *args, **kwargs): ...
    def clientThreadTick(self, *args, **kwargs): ...
    def client_connect(self, constPStatClientself, strhostname, intport) -> Any: ...
    def client_disconnect(self, constPStatClientself) -> Any: ...
    def client_is_connected(self, PStatClientself) -> Any: ...
    def client_main_tick(self, constPStatClientself) -> Any: ...
    def client_resume_after_pause(self, constPStatClientself) -> Any: ...
    @overload
    def client_thread_tick(self, constPStatClientself) -> Any: ...
    @overload
    def client_thread_tick(self, constPStatClientself, strsync_name) -> Any: ...
    @staticmethod
    def connect(strhostname, intport) -> Any: ...
    @staticmethod
    def disconnect() -> Any: ...
    def getClientName(self, *args, **kwargs): ...
    def getCollector(self, *args, **kwargs): ...
    def getCollectorFullname(self, *args, **kwargs): ...
    def getCollectorName(self, *args, **kwargs): ...
    def getCollectors(self, *args, **kwargs): ...
    def getCurrentThread(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalPstats(*args, **kwargs): ...
    def getMainThread(self, *args, **kwargs): ...
    def getMaxRate(self, *args, **kwargs): ...
    def getNumCollectors(self, *args, **kwargs): ...
    def getNumThreads(self, *args, **kwargs): ...
    def getRealTime(self, *args, **kwargs): ...
    def getThread(self, *args, **kwargs): ...
    def getThreadName(self, *args, **kwargs): ...
    def getThreadObject(self, *args, **kwargs): ...
    def getThreadSyncName(self, *args, **kwargs): ...
    def getThreads(self, *args, **kwargs): ...
    def get_client_name(self, PStatClientself) -> Any: ...
    def get_collector(self, PStatClientself, intindex) -> Any: ...
    def get_collector_fullname(self, PStatClientself, intindex) -> Any: ...
    def get_collector_name(self, PStatClientself, intindex) -> Any: ...
    def get_collectors(self, *args, **kwargs): ...
    def get_current_thread(self, PStatClientself) -> Any: ...
    @staticmethod
    def get_global_pstats() -> Any: ...
    def get_main_thread(self, PStatClientself) -> Any: ...
    def get_max_rate(self, PStatClientself) -> Any: ...
    def get_num_collectors(self, PStatClientself) -> Any: ...
    def get_num_threads(self, PStatClientself) -> Any: ...
    def get_real_time(self, PStatClientself) -> Any: ...
    def get_thread(self, PStatClientself, intindex) -> Any: ...
    def get_thread_name(self, PStatClientself, intindex) -> Any: ...
    def get_thread_object(self, PStatClientself, intindex) -> Any: ...
    def get_thread_sync_name(self, PStatClientself, intindex) -> Any: ...
    def get_threads(self, *args, **kwargs): ...
    @staticmethod
    def isConnected(*args, **kwargs): ...
    @staticmethod
    def is_connected() -> Any: ...
    @staticmethod
    def mainTick(*args, **kwargs): ...
    @staticmethod
    def main_tick() -> Any: ...
    @staticmethod
    def resumeAfterPause(*args, **kwargs): ...
    @staticmethod
    def resume_after_pause() -> Any: ...
    def setClientName(self, *args, **kwargs): ...
    def setMaxRate(self, *args, **kwargs): ...
    def set_client_name(self, constPStatClientself, strname) -> Any: ...
    def set_max_rate(self, constPStatClientself, doublerate) -> Any: ...
    @staticmethod
    def threadTick(*args, **kwargs): ...
    @overload
    @staticmethod
    def thread_tick() -> Any: ...
    @overload
    @staticmethod
    def thread_tick(strsync_name) -> Any: ...

class PStatCollector(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addLevel(self, *args, **kwargs): ...
    def addLevelNow(self, *args, **kwargs): ...
    def addThreadLevel(self, *args, **kwargs): ...
    @overload
    def add_level(self, constPStatCollectorself, doubleincrement) -> Any: ...
    @overload
    def add_level(self, constPStatCollectorself, constPStatThreadthread, doubleincrement) -> Any: ...
    def add_level_now(self, constPStatCollectorself, doubleincrement) -> Any: ...
    def add_thread_level(self, constPStatCollectorself, doubleincrement) -> Any: ...
    def assign(self, constPStatCollectorself, constPStatCollectorcopy) -> Any: ...
    def clearLevel(self, *args, **kwargs): ...
    def clearThreadLevel(self, *args, **kwargs): ...
    @overload
    def clear_level(self, constPStatCollectorself) -> Any: ...
    @overload
    def clear_level(self, constPStatCollectorself, constPStatThreadthread) -> Any: ...
    def clear_thread_level(self, constPStatCollectorself) -> Any: ...
    def flushLevel(self, *args, **kwargs): ...
    def flush_level(self, constPStatCollectorself) -> Any: ...
    def getFullname(self, *args, **kwargs): ...
    def getIndex(self, *args, **kwargs): ...
    def getLevel(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getThreadLevel(self, *args, **kwargs): ...
    def get_fullname(self, PStatCollectorself) -> Any: ...
    def get_index(self, PStatCollectorself) -> Any: ...
    @overload
    def get_level(self, constPStatCollectorself) -> Any: ...
    @overload
    def get_level(self, constPStatCollectorself, constPStatThreadthread) -> Any: ...
    def get_name(self, PStatCollectorself) -> Any: ...
    def get_thread_level(self, constPStatCollectorself) -> Any: ...
    def isActive(self, *args, **kwargs): ...
    def isStarted(self, *args, **kwargs): ...
    def isValid(self, *args, **kwargs): ...
    @overload
    def is_active(self, constPStatCollectorself) -> Any: ...
    @overload
    def is_active(self, constPStatCollectorself, constPStatThreadthread) -> Any: ...
    @overload
    def is_started(self, constPStatCollectorself) -> Any: ...
    @overload
    def is_started(self, constPStatCollectorself, constPStatThreadthread) -> Any: ...
    def is_valid(self, PStatCollectorself) -> Any: ...
    def output(self, PStatCollectorself, ostreamout) -> Any: ...
    def setLevel(self, *args, **kwargs): ...
    def setThreadLevel(self, *args, **kwargs): ...
    @overload
    def set_level(self, constPStatCollectorself, doublelevel) -> Any: ...
    @overload
    def set_level(self, constPStatCollectorself, constPStatThreadthread, doublelevel) -> Any: ...
    def set_thread_level(self, constPStatCollectorself, doublelevel) -> Any: ...
    @overload
    def start(self, constPStatCollectorself) -> Any: ...
    @overload
    def start(self, constPStatCollectorself, constPStatThreadthread) -> Any: ...
    @overload
    def start(self, constPStatCollectorself, constPStatThreadthread, doubleas_of) -> Any: ...
    @overload
    def stop(self, constPStatCollectorself) -> Any: ...
    @overload
    def stop(self, constPStatCollectorself, constPStatThreadthread) -> Any: ...
    @overload
    def stop(self, constPStatCollectorself, constPStatThreadthread, doubleas_of) -> Any: ...
    def subLevel(self, *args, **kwargs): ...
    def subLevelNow(self, *args, **kwargs): ...
    def subThreadLevel(self, *args, **kwargs): ...
    @overload
    def sub_level(self, constPStatCollectorself, doubledecrement) -> Any: ...
    @overload
    def sub_level(self, constPStatCollectorself, constPStatThreadthread, doubledecrement) -> Any: ...
    def sub_level_now(self, constPStatCollectorself, doubledecrement) -> Any: ...
    def sub_thread_level(self, constPStatCollectorself, doubledecrement) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PStatCollectorForward(PStatCollectorForwardBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class PStatCollectorForwardBase(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addLevel(self, *args, **kwargs): ...
    def add_level(self, constPStatCollectorForwardBaseself, doublelevel) -> Any: ...

class PStatThread(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    index: Incomplete
    thread: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constPStatThreadself, constPStatThreadcopy) -> Any: ...
    def getIndex(self, *args, **kwargs): ...
    def getThread(self, *args, **kwargs): ...
    def get_index(self, PStatThreadself) -> Any: ...
    def get_thread(self, PStatThreadself) -> Any: ...
    def newFrame(self, *args, **kwargs): ...
    def new_frame(self, constPStatThreadself, intframe_number) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PTADouble(PointerToArrayBase_double):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, doubleparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, doublex) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, doublevalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAFloat(PointerToArrayBase_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, floatparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, floatx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, floatvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAInt(PointerToArrayBase_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, intparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, intx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, intvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALMatrix3(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALMatrix3d(PointerToArrayBase_LMatrix3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix3dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix3dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix3dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALMatrix3f(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALMatrix4(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALMatrix4d(PointerToArrayBase_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix4dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix4dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix4dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALMatrix4f(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALVecBase2(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALVecBase2d(PointerToArrayBase_LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALVecBase2f(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALVecBase2i(PointerToArrayBase_LVecBase2i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2iparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2ix) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2ivalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALVecBase3(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALVecBase3d(PointerToArrayBase_LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALVecBase3f(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALVecBase3i(PointerToArrayBase_LVecBase3i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3iparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3ix) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3ivalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALVecBase4(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALVecBase4d(PointerToArrayBase_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALVecBase4f(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTALVecBase4i(PointerToArrayBase_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4iparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4ix) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4ivalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAMat3(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAMat3d(PointerToArrayBase_LMatrix3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix3dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix3dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix3dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAMat4(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAMat4d(PointerToArrayBase_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix4dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix4dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix4dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAStdfloat(PointerToArrayBase_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, floatparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, floatx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, floatvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAUchar(PointerToArrayBase_unsigned_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, intparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, intx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, intvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAUshort(PointerToArrayBase_unsigned_short_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, intparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, intx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, intvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAVecBase2d(PointerToArrayBase_LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAVecBase2f(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAVecBase3d(PointerToArrayBase_LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAVecBase3f(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAVecBase4d(PointerToArrayBase_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTAVecBase4f(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LMatrix3(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LMatrix3d(PointerToArrayBase_LMatrix3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix3dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix3dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix3dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LMatrix3f(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LMatrix4(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LMatrix4d(PointerToArrayBase_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix4dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix4dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix4dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LMatrix4f(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LVecBase2(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LVecBase2d(PointerToArrayBase_LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LVecBase2f(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LVecBase2i(PointerToArrayBase_LVecBase2i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2iparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2ix) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2ivalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LVecBase3(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LVecBase3d(PointerToArrayBase_LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LVecBase3f(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LVecBase3i(PointerToArrayBase_LVecBase3i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3iparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3ix) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3ivalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LVecBase4(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LVecBase4d(PointerToArrayBase_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LVecBase4f(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_LVecBase4i(PointerToArrayBase_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4iparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4ix) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4ivalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_double(PointerToArrayBase_double):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, doubleparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, doublex) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, doublevalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_float(PointerToArrayBase_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, floatparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, floatx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, floatvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_int(PointerToArrayBase_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, intparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, intx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, intvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_stdfloat(PointerToArrayBase_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, floatparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, floatx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, floatvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_uchar(PointerToArrayBase_unsigned_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, intparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, intx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, intvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PTA_ushort(PointerToArrayBase_unsigned_short_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, intparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, intx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, intvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PandaNode(TypedWritableReferenceCount, Namable):
    class Children(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Parents(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Stashed(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    DtoolClassDict: ClassVar[dict] = ...
    FBCullCallback: ClassVar[int] = ...
    FBDecal: ClassVar[int] = ...
    FBDrawMask: ClassVar[int] = ...
    FBEffects: ClassVar[int] = ...
    FBRenderable: ClassVar[int] = ...
    FBShowBounds: ClassVar[int] = ...
    FBShowTightBounds: ClassVar[int] = ...
    FBState: ClassVar[int] = ...
    FBTag: ClassVar[int] = ...
    FBTransform: ClassVar[int] = ...
    FB_cull_callback: ClassVar[int] = ...
    FB_decal: ClassVar[int] = ...
    FB_draw_mask: ClassVar[int] = ...
    FB_effects: ClassVar[int] = ...
    FB_renderable: ClassVar[int] = ...
    FB_show_bounds: ClassVar[int] = ...
    FB_show_tight_bounds: ClassVar[int] = ...
    FB_state: ClassVar[int] = ...
    FB_tag: ClassVar[int] = ...
    FB_transform: ClassVar[int] = ...
    UCChildren: ClassVar[int] = ...
    UCDrawMask: ClassVar[int] = ...
    UCParents: ClassVar[int] = ...
    UCState: ClassVar[int] = ...
    UCTransform: ClassVar[int] = ...
    UC_children: ClassVar[int] = ...
    UC_draw_mask: ClassVar[int] = ...
    UC_parents: ClassVar[int] = ...
    UC_state: ClassVar[int] = ...
    UC_transform: ClassVar[int] = ...
    all_camera_mask: Incomplete
    bounds_stale: Incomplete
    bounds_type: Incomplete
    children: Incomplete
    draw_control_mask: Incomplete
    draw_show_mask: Incomplete
    effects: Incomplete
    final: Incomplete
    internal_bounds: Incomplete
    internal_vertices: Incomplete
    into_collide_mask: Incomplete
    legal_collide_mask: Incomplete
    nested_vertices: Incomplete
    overall_bit: Incomplete
    overall_hidden: Incomplete
    parents: Incomplete
    prev_transform: Incomplete
    python_tags: Incomplete
    stashed: Incomplete
    state: Incomplete
    tags: Incomplete
    transform: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addChild(self, *args, **kwargs): ...
    def addStashed(self, *args, **kwargs): ...
    def add_child(self, constPandaNodeself, PandaNodechild_node, intsort, Threadcurrent_thread) -> Any: ...
    def add_stashed(self, constPandaNodeself, PandaNodechild_node, intsort, Threadcurrent_thread) -> Any: ...
    def adjustDrawMask(self, *args, **kwargs): ...
    def adjust_draw_mask(self, constPandaNodeself, BitMaskshow_mask, BitMaskhide_mask, BitMaskclear_mask) -> Any: ...
    def asLight(self, *args, **kwargs): ...
    def as_light(self, constPandaNodeself) -> Any: ...
    def clearAttrib(self, *args, **kwargs): ...
    def clearBounds(self, *args, **kwargs): ...
    def clearEffect(self, *args, **kwargs): ...
    def clearEffects(self, *args, **kwargs): ...
    def clearPythonTag(self, *args, **kwargs): ...
    def clearState(self, *args, **kwargs): ...
    def clearTag(self, *args, **kwargs): ...
    def clearTransform(self, *args, **kwargs): ...
    def clearUnexpectedChange(self, *args, **kwargs): ...
    @overload
    def clear_attrib(self, constPandaNodeself, TypeHandletype) -> Any: ...
    @overload
    def clear_attrib(self, constPandaNodeself, intslot) -> Any: ...
    def clear_bounds(self, constPandaNodeself) -> Any: ...
    def clear_effect(self, constPandaNodeself, TypeHandletype) -> Any: ...
    def clear_effects(self, constPandaNodeself, Threadcurrent_thread) -> Any: ...
    def clear_python_tag(self, constPandaNodeself, objectkey) -> Any: ...
    def clear_state(self, constPandaNodeself, Threadcurrent_thread) -> Any: ...
    @overload
    def clear_tag(self, constPandaNodeself, strkey, Threadcurrent_thread) -> Any: ...
    @overload
    def clear_tag(self) -> Any: ...
    def clear_transform(self, constPandaNodeself, Threadcurrent_thread) -> Any: ...
    def clear_unexpected_change(self, constPandaNodeself, intflags) -> Any: ...
    def combineWith(self, *args, **kwargs): ...
    def combine_with(self, constPandaNodeself, PandaNodeother) -> Any: ...
    def compareTags(self, *args, **kwargs): ...
    def compare_tags(self, PandaNodeself, constPandaNodeother) -> Any: ...
    def copyAllProperties(self, *args, **kwargs): ...
    def copyChildren(self, *args, **kwargs): ...
    def copySubgraph(self, *args, **kwargs): ...
    def copyTags(self, *args, **kwargs): ...
    def copy_all_properties(self, constPandaNodeself, PandaNodeother) -> Any: ...
    def copy_children(self, constPandaNodeself, PandaNodeother, Threadcurrent_thread) -> Any: ...
    def copy_subgraph(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def copy_tags(self, constPandaNodeself, PandaNodeother) -> Any: ...
    def countNumDescendants(self, *args, **kwargs): ...
    def count_num_descendants(self, PandaNodeself) -> Any: ...
    @staticmethod
    def decodeFromBamStream(*args, **kwargs): ...
    @staticmethod
    def decode_from_bam_stream(bytesdata, BamReaderreader) -> Any: ...
    def findChild(self, *args, **kwargs): ...
    def findParent(self, *args, **kwargs): ...
    def findStashed(self, *args, **kwargs): ...
    def find_child(self, PandaNodeself, PandaNodenode, Threadcurrent_thread) -> Any: ...
    def find_parent(self, PandaNodeself, PandaNodenode, Threadcurrent_thread) -> Any: ...
    def find_stashed(self, PandaNodeself, PandaNodenode, Threadcurrent_thread) -> Any: ...
    @staticmethod
    def getAllCameraMask(*args, **kwargs): ...
    def getAttrib(self, *args, **kwargs): ...
    def getBounds(self, *args, **kwargs): ...
    def getBoundsType(self, *args, **kwargs): ...
    def getChild(self, *args, **kwargs): ...
    def getChildSort(self, *args, **kwargs): ...
    def getChildren(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDrawControlMask(self, *args, **kwargs): ...
    def getDrawShowMask(self, *args, **kwargs): ...
    def getEffect(self, *args, **kwargs): ...
    def getEffects(self, *args, **kwargs): ...
    def getFancyBits(self, *args, **kwargs): ...
    def getInternalBounds(self, *args, **kwargs): ...
    def getInternalVertices(self, *args, **kwargs): ...
    def getIntoCollideMask(self, *args, **kwargs): ...
    def getLegalCollideMask(self, *args, **kwargs): ...
    def getNestedVertices(self, *args, **kwargs): ...
    def getNetCollideMask(self, *args, **kwargs): ...
    def getNetDrawControlMask(self, *args, **kwargs): ...
    def getNetDrawShowMask(self, *args, **kwargs): ...
    def getNumChildren(self, *args, **kwargs): ...
    def getNumParents(self, *args, **kwargs): ...
    def getNumStashed(self, *args, **kwargs): ...
    def getOffClipPlanes(self, *args, **kwargs): ...
    @staticmethod
    def getOverallBit(*args, **kwargs): ...
    def getParent(self, *args, **kwargs): ...
    def getParents(self, *args, **kwargs): ...
    def getPrevTransform(self, *args, **kwargs): ...
    def getPythonTag(self, *args, **kwargs): ...
    def getPythonTagKeys(self, *args, **kwargs): ...
    def getPythonTags(self, *args, **kwargs): ...
    def getStashed(self, *args, **kwargs): ...
    def getStashedSort(self, *args, **kwargs): ...
    def getState(self, *args, **kwargs): ...
    def getTag(self, *args, **kwargs): ...
    def getTagKeys(self, *args, **kwargs): ...
    def getTransform(self, *args, **kwargs): ...
    def getUnexpectedChange(self, *args, **kwargs): ...
    @staticmethod
    def get_all_camera_mask() -> Any: ...
    @overload
    def get_attrib(self, PandaNodeself, TypeHandletype) -> Any: ...
    @overload
    def get_attrib(self, PandaNodeself, intslot) -> Any: ...
    @overload
    def get_bounds(self, PandaNodeself) -> Any: ...
    @overload
    def get_bounds(self, PandaNodeself, UpdateSeqseq, Threadcurrent_thread) -> Any: ...
    @overload
    def get_bounds(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_bounds_type(self, PandaNodeself) -> Any: ...
    def get_child(self, PandaNodeself, intn, Threadcurrent_thread) -> Any: ...
    def get_child_sort(self, PandaNodeself, intn, Threadcurrent_thread) -> Any: ...
    def get_children(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_draw_control_mask(self, PandaNodeself) -> Any: ...
    def get_draw_show_mask(self, PandaNodeself) -> Any: ...
    def get_effect(self, PandaNodeself, TypeHandletype) -> Any: ...
    def get_effects(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_fancy_bits(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_internal_bounds(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_internal_vertices(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_into_collide_mask(self, PandaNodeself) -> Any: ...
    def get_legal_collide_mask(self, PandaNodeself) -> Any: ...
    def get_nested_vertices(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_net_collide_mask(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_net_draw_control_mask(self, PandaNodeself) -> Any: ...
    def get_net_draw_show_mask(self, PandaNodeself) -> Any: ...
    def get_num_children(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_num_parents(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_num_stashed(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_off_clip_planes(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    @staticmethod
    def get_overall_bit() -> Any: ...
    def get_parent(self, PandaNodeself, intn, Threadcurrent_thread) -> Any: ...
    def get_parents(self, *args, **kwargs): ...
    def get_prev_transform(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_python_tag(self, PandaNodeself, objectkey) -> Any: ...
    def get_python_tag_keys(self, PandaNodeself) -> Any: ...
    def get_python_tags(self, constPandaNodeself) -> Any: ...
    @overload
    def get_stashed(self, PandaNodeself) -> Any: ...
    @overload
    def get_stashed(self, PandaNodeself, intn, Threadcurrent_thread) -> Any: ...
    @overload
    def get_stashed(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    @overload
    def get_stashed(self) -> Any: ...
    @overload
    def get_stashed(self) -> Any: ...
    @overload
    def get_stashed(self) -> Any: ...
    def get_stashed_sort(self, PandaNodeself, intn, Threadcurrent_thread) -> Any: ...
    def get_state(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_tag(self, PandaNodeself, strkey, Threadcurrent_thread) -> Any: ...
    def get_tag_keys(self, PandaNodeself) -> Any: ...
    def get_transform(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def get_unexpected_change(self, PandaNodeself, intflags) -> Any: ...
    def hasAttrib(self, *args, **kwargs): ...
    def hasDirtyPrevTransform(self, *args, **kwargs): ...
    def hasEffect(self, *args, **kwargs): ...
    def hasPythonTag(self, *args, **kwargs): ...
    def hasTag(self, *args, **kwargs): ...
    def hasTags(self, *args, **kwargs): ...
    @overload
    def has_attrib(self, PandaNodeself, TypeHandletype) -> Any: ...
    @overload
    def has_attrib(self, PandaNodeself, intslot) -> Any: ...
    def has_dirty_prev_transform(self, PandaNodeself) -> Any: ...
    def has_effect(self, PandaNodeself, TypeHandletype) -> Any: ...
    def has_python_tag(self, PandaNodeself, objectkey) -> Any: ...
    def has_tag(self, PandaNodeself, strkey, Threadcurrent_thread) -> Any: ...
    def has_tags(self, PandaNodeself) -> Any: ...
    def isAmbientLight(self, *args, **kwargs): ...
    def isBoundsStale(self, *args, **kwargs): ...
    def isCollisionNode(self, *args, **kwargs): ...
    def isFinal(self, *args, **kwargs): ...
    def isGeomNode(self, *args, **kwargs): ...
    def isLodNode(self, *args, **kwargs): ...
    def isOverallHidden(self, *args, **kwargs): ...
    def isSceneRoot(self, *args, **kwargs): ...
    def isUnderSceneRoot(self, *args, **kwargs): ...
    def is_ambient_light(self, PandaNodeself) -> Any: ...
    def is_bounds_stale(self, PandaNodeself) -> Any: ...
    def is_collision_node(self, PandaNodeself) -> Any: ...
    def is_final(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def is_geom_node(self, PandaNodeself) -> Any: ...
    def is_lod_node(self, PandaNodeself) -> Any: ...
    def is_overall_hidden(self, PandaNodeself) -> Any: ...
    def is_scene_root(self, PandaNodeself) -> Any: ...
    def is_under_scene_root(self, PandaNodeself) -> Any: ...
    def listTags(self, *args, **kwargs): ...
    def list_tags(self, PandaNodeself, ostreamout, strseparator) -> Any: ...
    def ls(self, PandaNodeself, ostreamout, intindent_level) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, PandaNodeself) -> Any: ...
    def markBoundsStale(self, *args, **kwargs): ...
    def markInternalBoundsStale(self, *args, **kwargs): ...
    def mark_bounds_stale(self, PandaNodeself, Threadcurrent_thread) -> Any: ...
    def mark_internal_bounds_stale(self, constPandaNodeself, Threadcurrent_thread) -> Any: ...
    def output(self, PandaNodeself, ostreamout) -> Any: ...
    def prepareScene(self, *args, **kwargs): ...
    def prepare_scene(self, constPandaNodeself, GraphicsStateGuardianBasegsg, constRenderStatenode_state) -> Any: ...
    def removeAllChildren(self, *args, **kwargs): ...
    def removeChild(self, *args, **kwargs): ...
    def removeStashed(self, *args, **kwargs): ...
    def remove_all_children(self, constPandaNodeself, Threadcurrent_thread) -> Any: ...
    @overload
    def remove_child(self, constPandaNodeself, PandaNodechild_node, Threadcurrent_thread) -> Any: ...
    @overload
    def remove_child(self, constPandaNodeself, intchild_index, Threadcurrent_thread) -> Any: ...
    def remove_stashed(self, constPandaNodeself, intchild_index, Threadcurrent_thread) -> Any: ...
    def replaceChild(self, *args, **kwargs): ...
    def replaceNode(self, *args, **kwargs): ...
    def replace_child(
        self, constPandaNodeself, PandaNodeorig_child, PandaNodenew_child, Threadcurrent_thread
    ) -> Any: ...
    def replace_node(self, constPandaNodeself, PandaNodeother) -> Any: ...
    @staticmethod
    def resetAllPrevTransform(*args, **kwargs): ...
    def resetPrevTransform(self, *args, **kwargs): ...
    @staticmethod
    def reset_all_prev_transform(Threadcurrent_thread) -> Any: ...
    def reset_prev_transform(self, constPandaNodeself, Threadcurrent_thread) -> Any: ...
    def setAttrib(self, *args, **kwargs): ...
    def setBounds(self, *args, **kwargs): ...
    def setBoundsType(self, *args, **kwargs): ...
    def setEffect(self, *args, **kwargs): ...
    def setEffects(self, *args, **kwargs): ...
    def setFinal(self, *args, **kwargs): ...
    def setIntoCollideMask(self, *args, **kwargs): ...
    def setOverallHidden(self, *args, **kwargs): ...
    def setPrevTransform(self, *args, **kwargs): ...
    def setPythonTag(self, *args, **kwargs): ...
    def setState(self, *args, **kwargs): ...
    def setTag(self, *args, **kwargs): ...
    def setTransform(self, *args, **kwargs): ...
    def setUnexpectedChange(self, *args, **kwargs): ...
    def set_attrib(self, constPandaNodeself, constRenderAttribattrib, intoverride) -> Any: ...
    def set_bounds(self, constPandaNodeself, constBoundingVolumevolume) -> Any: ...
    def set_bounds_type(self, constPandaNodeself, intbounds_type) -> Any: ...
    def set_effect(self, constPandaNodeself, constRenderEffecteffect) -> Any: ...
    def set_effects(self, constPandaNodeself, constRenderEffectseffects, Threadcurrent_thread) -> Any: ...
    def set_final(self, constPandaNodeself, boolflag) -> Any: ...
    def set_into_collide_mask(self, constPandaNodeself, BitMaskmask) -> Any: ...
    def set_overall_hidden(self, constPandaNodeself, booloverall_hidden) -> Any: ...
    def set_prev_transform(self, constPandaNodeself, constTransformStatetransform, Threadcurrent_thread) -> Any: ...
    def set_python_tag(self, constPandaNodeself, objectkey, objectvalue) -> Any: ...
    def set_state(self, constPandaNodeself, constRenderStatestate, Threadcurrent_thread) -> Any: ...
    def set_tag(self, constPandaNodeself, strkey, strvalue, Threadcurrent_thread) -> Any: ...
    def set_transform(self, constPandaNodeself, constTransformStatetransform, Threadcurrent_thread) -> Any: ...
    def set_unexpected_change(self, constPandaNodeself, intflags) -> Any: ...
    def stashChild(self, *args, **kwargs): ...
    @overload
    def stash_child(self, constPandaNodeself, PandaNodechild_node, Threadcurrent_thread) -> Any: ...
    @overload
    def stash_child(self, constPandaNodeself, intchild_index, Threadcurrent_thread) -> Any: ...
    def stealChildren(self, *args, **kwargs): ...
    def steal_children(self, constPandaNodeself, PandaNodeother, Threadcurrent_thread) -> Any: ...
    def unstashChild(self, *args, **kwargs): ...
    @overload
    def unstash_child(self, constPandaNodeself, PandaNodechild_node, Threadcurrent_thread) -> Any: ...
    @overload
    def unstash_child(self, constPandaNodeself, intstashed_index, Threadcurrent_thread) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constPandaNodeself) -> Any: ...
    def upcast_to_TypedWritableReferenceCount(self, constPandaNodeself) -> Any: ...
    def write(self, PandaNodeself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self, PandaNodeself) -> Any: ...
    def __deepcopy__(self, PandaNodeself, objectmemo) -> Any: ...

class PandaSystem(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    build_date: Incomplete
    compiler: Incomplete
    distributor: Incomplete
    git_commit: Incomplete
    major_version: Incomplete
    memory_alignment: Incomplete
    minor_version: Incomplete
    official_version: Incomplete
    platform: Incomplete
    sequence_version: Incomplete
    systems: Incomplete
    version_string: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addSystem(self, *args, **kwargs): ...
    def add_system(self, constPandaSystemself, strsystem) -> Any: ...
    @staticmethod
    def getBuildDate(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getCompiler(*args, **kwargs): ...
    @staticmethod
    def getDistributor(*args, **kwargs): ...
    @staticmethod
    def getGitCommit(*args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    @staticmethod
    def getMajorVersion(*args, **kwargs): ...
    @staticmethod
    def getMemoryAlignment(*args, **kwargs): ...
    @staticmethod
    def getMinorVersion(*args, **kwargs): ...
    def getNumSystems(self, *args, **kwargs): ...
    @staticmethod
    def getPlatform(*args, **kwargs): ...
    @staticmethod
    def getSequenceVersion(*args, **kwargs): ...
    def getSystem(self, *args, **kwargs): ...
    def getSystemTag(self, *args, **kwargs): ...
    def getSystems(self, *args, **kwargs): ...
    @staticmethod
    def getVersionString(*args, **kwargs): ...
    @staticmethod
    def get_build_date() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_compiler() -> Any: ...
    @staticmethod
    def get_distributor() -> Any: ...
    @staticmethod
    def get_git_commit() -> Any: ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    @staticmethod
    def get_major_version() -> Any: ...
    @staticmethod
    def get_memory_alignment() -> Any: ...
    @staticmethod
    def get_minor_version() -> Any: ...
    def get_num_systems(self, PandaSystemself) -> Any: ...
    @staticmethod
    def get_platform() -> Any: ...
    @staticmethod
    def get_sequence_version() -> Any: ...
    def get_system(self, PandaSystemself, intn) -> Any: ...
    def get_system_tag(self, PandaSystemself, strsystem, strtag) -> Any: ...
    def get_systems(self, *args, **kwargs): ...
    @staticmethod
    def get_version_string() -> Any: ...
    def hasSystem(self, *args, **kwargs): ...
    def has_system(self, PandaSystemself, strsystem) -> Any: ...
    def heapTrim(self, *args, **kwargs): ...
    def heap_trim(self, constPandaSystemself, intpad) -> Any: ...
    @staticmethod
    def isOfficialVersion(*args, **kwargs): ...
    @staticmethod
    def is_official_version() -> Any: ...
    def output(self, PandaSystemself, ostreamout) -> Any: ...
    def setSystemTag(self, *args, **kwargs): ...
    def set_system_tag(self, constPandaSystemself, strsystem, strtag, strvalue) -> Any: ...
    def write(self, PandaSystemself, ostreamout) -> Any: ...

class ParamMatrix3(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix3fvalue) -> Any: ...

class ParamMatrix3d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix3dvalue) -> Any: ...

class ParamMatrix3f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix3fvalue) -> Any: ...

class ParamMatrix4(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix4fvalue) -> Any: ...

class ParamMatrix4d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix4dvalue) -> Any: ...

class ParamMatrix4f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix4fvalue) -> Any: ...

class ParamNodePath(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamNodePathself) -> Any: ...

class ParamString(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, strvalue) -> Any: ...

class ParamTextureImage(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    bind_layer: Incomplete
    bind_level: Incomplete
    read_access: Incomplete
    texture: Incomplete
    write_access: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getBindLayer(self, *args, **kwargs): ...
    def getBindLayered(self, *args, **kwargs): ...
    def getBindLevel(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    def get_bind_layer(self, ParamTextureImageself) -> Any: ...
    def get_bind_layered(self, ParamTextureImageself) -> Any: ...
    def get_bind_level(self, ParamTextureImageself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_texture(self, ParamTextureImageself) -> Any: ...
    def hasReadAccess(self, *args, **kwargs): ...
    def hasWriteAccess(self, *args, **kwargs): ...
    def has_read_access(self, ParamTextureImageself) -> Any: ...
    def has_write_access(self, ParamTextureImageself) -> Any: ...

class ParamTextureSampler(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    sampler: Incomplete
    texture: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getSampler(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_sampler(self, ParamTextureSamplerself) -> Any: ...
    def get_texture(self, ParamTextureSamplerself) -> Any: ...

class ParamTypedRefCount(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamTypedRefCountself) -> Any: ...

class ParamValueBase(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValueType(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value_type(self, ParamValueBaseself) -> Any: ...
    def output(self, ParamValueBaseself, ostreamout) -> Any: ...

class ParamValueLMatrix3d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix3dvalue) -> Any: ...

class ParamValueLMatrix3f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix3fvalue) -> Any: ...

class ParamValueLMatrix4d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix4dvalue) -> Any: ...

class ParamValueLMatrix4f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix4fvalue) -> Any: ...

class ParamValueLVecBase2d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase2dvalue) -> Any: ...

class ParamValueLVecBase2f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase2fvalue) -> Any: ...

class ParamValueLVecBase2i(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase2ivalue) -> Any: ...

class ParamValueLVecBase3d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase3dvalue) -> Any: ...

class ParamValueLVecBase3f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase3fvalue) -> Any: ...

class ParamValueLVecBase3i(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase3ivalue) -> Any: ...

class ParamValueLVecBase4d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase4dvalue) -> Any: ...

class ParamValueLVecBase4f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase4fvalue) -> Any: ...

class ParamValueLVecBase4i(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase4ivalue) -> Any: ...

class ParamValueString(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, strvalue) -> Any: ...

class ParamValueWstring(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, unicodevalue) -> Any: ...

class ParamValue_LMatrix3d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix3dvalue) -> Any: ...

class ParamValue_LMatrix3f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix3fvalue) -> Any: ...

class ParamValue_LMatrix4d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix4dvalue) -> Any: ...

class ParamValue_LMatrix4f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLMatrix4fvalue) -> Any: ...

class ParamValue_LVecBase2d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase2dvalue) -> Any: ...

class ParamValue_LVecBase2f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase2fvalue) -> Any: ...

class ParamValue_LVecBase2i(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase2ivalue) -> Any: ...

class ParamValue_LVecBase3d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase3dvalue) -> Any: ...

class ParamValue_LVecBase3f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase3fvalue) -> Any: ...

class ParamValue_LVecBase3i(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase3ivalue) -> Any: ...

class ParamValue_LVecBase4d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase4dvalue) -> Any: ...

class ParamValue_LVecBase4f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase4fvalue) -> Any: ...

class ParamValue_LVecBase4i(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase4ivalue) -> Any: ...

class ParamValue_string(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, strvalue) -> Any: ...

class ParamValue_wstring(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, unicodevalue) -> Any: ...

class ParamVecBase2(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase2fvalue) -> Any: ...

class ParamVecBase2d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase2dvalue) -> Any: ...

class ParamVecBase2f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase2fvalue) -> Any: ...

class ParamVecBase2i(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase2ivalue) -> Any: ...

class ParamVecBase3(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase3fvalue) -> Any: ...

class ParamVecBase3d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase3dvalue) -> Any: ...

class ParamVecBase3f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase3fvalue) -> Any: ...

class ParamVecBase3i(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase3ivalue) -> Any: ...

class ParamVecBase4(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase4fvalue) -> Any: ...

class ParamVecBase4d(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase4dvalue) -> Any: ...

class ParamVecBase4f(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase4fvalue) -> Any: ...

class ParamVecBase4i(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, constLVecBase4ivalue) -> Any: ...

class ParamWstring(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, ParamValueself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constParamValueself, unicodevalue) -> Any: ...

class ParametricCurve(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def adjustPoint(self, *args, **kwargs): ...
    def adjustPt(self, *args, **kwargs): ...
    def adjustTangent(self, *args, **kwargs): ...
    def adjust_point(self, constParametricCurveself, floatt, floatpx, floatpy, floatpz) -> Any: ...
    def adjust_pt(
        self, constParametricCurveself, floatt, floatpx, floatpy, floatpz, floattx, floatty, floattz
    ) -> Any: ...
    def adjust_tangent(self, constParametricCurveself, floatt, floattx, floatty, floattz) -> Any: ...
    def calcLength(self, *args, **kwargs): ...
    @overload
    def calc_length(self, ParametricCurveself) -> Any: ...
    @overload
    def calc_length(self, ParametricCurveself, floatfrom, floatto) -> Any: ...
    def findLength(self, *args, **kwargs): ...
    def find_length(self, ParametricCurveself, floatstart_t, floatlength_offset) -> Any: ...
    def get2ndtangent(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCurveType(self, *args, **kwargs): ...
    def getMaxT(self, *args, **kwargs): ...
    def getNumDimensions(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getPt(self, *args, **kwargs): ...
    def getTangent(self, *args, **kwargs): ...
    def get_2ndtangent(self, ParametricCurveself, floatt, LVecBase3ftangent2) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_curve_type(self, ParametricCurveself) -> Any: ...
    @overload
    def get_max_t(self, ParametricCurveself) -> Any: ...
    @overload
    def get_max_t(self) -> Any: ...
    def get_num_dimensions(self, ParametricCurveself) -> Any: ...
    def get_point(self, ParametricCurveself, floatt, LVecBase3fpoint) -> Any: ...
    def get_pt(self, ParametricCurveself, floatt, LVecBase3fpoint, LVecBase3ftangent) -> Any: ...
    def get_tangent(self, ParametricCurveself, floatt, LVecBase3ftangent) -> Any: ...
    def isValid(self, *args, **kwargs): ...
    def is_valid(self, ParametricCurveself) -> Any: ...
    def recompute(self, constParametricCurveself) -> Any: ...
    def setCurveType(self, *args, **kwargs): ...
    def setNumDimensions(self, *args, **kwargs): ...
    def set_curve_type(self, constParametricCurveself, inttype) -> Any: ...
    def set_num_dimensions(self, constParametricCurveself, intnum) -> Any: ...
    def stitch(self, constParametricCurveself, constParametricCurvea, constParametricCurveb) -> Any: ...
    def writeEgg(self, *args, **kwargs): ...
    @overload
    def write_egg(self, constParametricCurveself, Filenamefilename) -> Any: ...
    @overload
    def write_egg(self, constParametricCurveself, Filenamefilename, intcs) -> Any: ...
    @overload
    def write_egg(self, constParametricCurveself, ostreamout, constFilenamefilename, intcs) -> Any: ...

class ParametricCurveCollection(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    curves: Incomplete
    default_curve: Incomplete
    hpr_curve: Incomplete
    max_t: Incomplete
    timewarp_curves: Incomplete
    xyz_curve: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addCurve(self, *args, **kwargs): ...
    def addCurves(self, *args, **kwargs): ...
    @overload
    def add_curve(self, constParametricCurveCollectionself, ParametricCurvecurve) -> Any: ...
    @overload
    def add_curve(self, constParametricCurveCollectionself, ParametricCurvecurve, intindex) -> Any: ...
    def add_curves(self, constParametricCurveCollectionself, PandaNodenode) -> Any: ...
    def adjustHpr(self, *args, **kwargs): ...
    def adjustXyz(self, *args, **kwargs): ...
    @overload
    def adjust_hpr(self, constParametricCurveCollectionself, floatt, constLVecBase3fxyz) -> Any: ...
    @overload
    def adjust_hpr(self, constParametricCurveCollectionself, floatt, floath, floatp, floatr) -> Any: ...
    @overload
    def adjust_xyz(self, constParametricCurveCollectionself, floatt, constLVecBase3fxyz) -> Any: ...
    @overload
    def adjust_xyz(self, constParametricCurveCollectionself, floatt, floatx, floaty, floatz) -> Any: ...
    def clear(self, constParametricCurveCollectionself) -> Any: ...
    def clearTimewarps(self, *args, **kwargs): ...
    def clear_timewarps(self, constParametricCurveCollectionself) -> Any: ...
    @overload
    def evaluate(self, ParametricCurveCollectionself, floatt, LMatrix4fresult) -> Any: ...
    @overload
    def evaluate(self, ParametricCurveCollectionself, floatt, LMatrix4fresult, intcs) -> Any: ...
    @overload
    def evaluate(self, ParametricCurveCollectionself, floatt, LVecBase3fxyz, LVecBase3fhpr) -> Any: ...
    def evaluateHpr(self, *args, **kwargs): ...
    def evaluateT(self, *args, **kwargs): ...
    def evaluateXyz(self, *args, **kwargs): ...
    def evaluate_hpr(self, ParametricCurveCollectionself, floatt, LVecBase3fhpr) -> Any: ...
    def evaluate_t(self, ParametricCurveCollectionself, floatt) -> Any: ...
    def evaluate_xyz(self, ParametricCurveCollectionself, floatt, LVecBase3fxyz) -> Any: ...
    def faceForward(self, *args, **kwargs): ...
    def face_forward(self, constParametricCurveCollectionself, floatsegments_per_unit) -> Any: ...
    def getCurve(self, *args, **kwargs): ...
    def getCurves(self, *args, **kwargs): ...
    def getDefaultCurve(self, *args, **kwargs): ...
    def getHprCurve(self, *args, **kwargs): ...
    def getMaxT(self, *args, **kwargs): ...
    def getNumCurves(self, *args, **kwargs): ...
    def getNumTimewarps(self, *args, **kwargs): ...
    def getTimewarpCurve(self, *args, **kwargs): ...
    def getTimewarpCurves(self, *args, **kwargs): ...
    def getXyzCurve(self, *args, **kwargs): ...
    def get_curve(self, ParametricCurveCollectionself, intindex) -> Any: ...
    def get_curves(self, *args, **kwargs): ...
    def get_default_curve(self, ParametricCurveCollectionself) -> Any: ...
    def get_hpr_curve(self, ParametricCurveCollectionself) -> Any: ...
    def get_max_t(self, ParametricCurveCollectionself) -> Any: ...
    def get_num_curves(self, ParametricCurveCollectionself) -> Any: ...
    def get_num_timewarps(self, ParametricCurveCollectionself) -> Any: ...
    def get_timewarp_curve(self, ParametricCurveCollectionself, intn) -> Any: ...
    def get_timewarp_curves(self, *args, **kwargs): ...
    def get_xyz_curve(self, ParametricCurveCollectionself) -> Any: ...
    def hasCurve(self, *args, **kwargs): ...
    def has_curve(self, ParametricCurveCollectionself, ParametricCurvecurve) -> Any: ...
    def insertCurve(self, *args, **kwargs): ...
    def insert_curve(self, constParametricCurveCollectionself, intindex, ParametricCurvecurve) -> Any: ...
    def makeEven(self, *args, **kwargs): ...
    def make_even(self, constParametricCurveCollectionself, floatmax_t, floatsegments_per_unit) -> Any: ...
    def output(self, ParametricCurveCollectionself, ostreamout) -> Any: ...
    def recompute(self, constParametricCurveCollectionself) -> Any: ...
    def removeCurve(self, *args, **kwargs): ...
    @overload
    def remove_curve(self, constParametricCurveCollectionself, ParametricCurvecurve) -> Any: ...
    @overload
    def remove_curve(self, constParametricCurveCollectionself, intindex) -> Any: ...
    def resetMaxT(self, *args, **kwargs): ...
    def reset_max_t(self, constParametricCurveCollectionself, floatmax_t) -> Any: ...
    def setCurve(self, *args, **kwargs): ...
    def set_curve(self, constParametricCurveCollectionself, intindex, ParametricCurvecurve) -> Any: ...
    def stitch(
        self, constParametricCurveCollectionself, constParametricCurveCollectiona, constParametricCurveCollectionb
    ) -> Any: ...
    def write(self, ParametricCurveCollectionself, ostreamout, intindent_level) -> Any: ...
    def writeEgg(self, *args, **kwargs): ...
    @overload
    def write_egg(self, constParametricCurveCollectionself, Filenamefilename) -> Any: ...
    @overload
    def write_egg(self, constParametricCurveCollectionself, Filenamefilename, intcs) -> Any: ...
    @overload
    def write_egg(self, constParametricCurveCollectionself, ostreamout, constFilenamefilename, intcs) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ParasiteBuffer(GraphicsOutput):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def setSize(self, *args, **kwargs): ...
    def set_size(self, constParasiteBufferself, intx, inty) -> Any: ...

class PartBundle(PartGroup):
    BTComponentwise: ClassVar[int] = ...
    BTComponentwiseQuat: ClassVar[int] = ...
    BTLinear: ClassVar[int] = ...
    BTNormalizedLinear: ClassVar[int] = ...
    BT_componentwise: ClassVar[int] = ...
    BT_componentwise_quat: ClassVar[int] = ...
    BT_linear: ClassVar[int] = ...
    BT_normalized_linear: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    anim_blend_flag: Incomplete
    blend_type: Incomplete
    frame_blend_flag: Incomplete
    nodes: Incomplete
    root_xform: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def applyTransform(self, *args, **kwargs): ...
    def apply_transform(self, constPartBundleself, constTransformStatetransform) -> Any: ...
    def bindAnim(self, *args, **kwargs): ...
    def bind_anim(
        self, constPartBundleself, AnimBundleanim, inthierarchy_match_flags, constPartSubsetsubset
    ) -> Any: ...
    def clearAnimPreload(self, *args, **kwargs): ...
    def clearControlEffects(self, *args, **kwargs): ...
    def clear_anim_preload(self, constPartBundleself) -> Any: ...
    def clear_control_effects(self, constPartBundleself) -> Any: ...
    def controlJoint(self, *args, **kwargs): ...
    def control_joint(self, constPartBundleself, strjoint_name, PandaNodenode) -> Any: ...
    def forceUpdate(self, *args, **kwargs): ...
    def force_update(self, constPartBundleself) -> Any: ...
    def freezeJoint(self, *args, **kwargs): ...
    @overload
    def freeze_joint(self, constPartBundleself, strjoint_name, constTransformStatetransform) -> Any: ...
    @overload
    def freeze_joint(self, constPartBundleself, strjoint_name, floatvalue) -> Any: ...
    @overload
    def freeze_joint(
        self, constPartBundleself, strjoint_name, constLVecBase3fpos, constLVecBase3fhpr, constLVecBase3fscale
    ) -> Any: ...
    def getAnimBlendFlag(self, *args, **kwargs): ...
    def getAnimPreload(self, *args, **kwargs): ...
    def getBlendType(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getControlEffect(self, *args, **kwargs): ...
    def getFrameBlendFlag(self, *args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getNodes(self, *args, **kwargs): ...
    def getNumNodes(self, *args, **kwargs): ...
    def getRootXform(self, *args, **kwargs): ...
    def get_anim_blend_flag(self, PartBundleself) -> Any: ...
    def get_anim_preload(self, PartBundleself) -> Any: ...
    def get_blend_type(self, PartBundleself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_control_effect(self, PartBundleself, AnimControlcontrol) -> Any: ...
    def get_frame_blend_flag(self, PartBundleself) -> Any: ...
    def get_node(self, PartBundleself, intn) -> Any: ...
    def get_nodes(self, *args, **kwargs): ...
    def get_num_nodes(self, PartBundleself) -> Any: ...
    def get_root_xform(self, PartBundleself) -> Any: ...
    def loadBindAnim(self, *args, **kwargs): ...
    def load_bind_anim(
        self,
        constPartBundleself,
        Loaderloader,
        constFilenamefilename,
        inthierarchy_match_flags,
        constPartSubsetsubset,
        boolallow_async,
    ) -> Any: ...
    def mergeAnimPreloads(self, *args, **kwargs): ...
    def merge_anim_preloads(self, constPartBundleself, constPartBundleother) -> Any: ...
    def modifyAnimPreload(self, *args, **kwargs): ...
    def modify_anim_preload(self, constPartBundleself) -> Any: ...
    def output(self, PartBundleself, ostreamout) -> Any: ...
    def releaseJoint(self, *args, **kwargs): ...
    def release_joint(self, constPartBundleself, strjoint_name) -> Any: ...
    def setAnimBlendFlag(self, *args, **kwargs): ...
    def setAnimPreload(self, *args, **kwargs): ...
    def setBlendType(self, *args, **kwargs): ...
    def setControlEffect(self, *args, **kwargs): ...
    def setFrameBlendFlag(self, *args, **kwargs): ...
    def setRootXform(self, *args, **kwargs): ...
    def set_anim_blend_flag(self, constPartBundleself, boolanim_blend_flag) -> Any: ...
    def set_anim_preload(self, constPartBundleself, AnimPreloadTabletable) -> Any: ...
    def set_blend_type(self, constPartBundleself, intbt) -> Any: ...
    def set_control_effect(self, constPartBundleself, AnimControlcontrol, floateffect) -> Any: ...
    def set_frame_blend_flag(self, constPartBundleself, boolframe_blend_flag) -> Any: ...
    def set_root_xform(self, constPartBundleself, constLMatrix4froot_xform) -> Any: ...
    def update(self, constPartBundleself) -> Any: ...
    def waitPending(self, *args, **kwargs): ...
    def wait_pending(self, constPartBundleself) -> Any: ...
    def xform(self, constPartBundleself, constLMatrix4fmat) -> Any: ...

class PartBundleHandle(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    bundle: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getBundle(self, *args, **kwargs): ...
    def get_bundle(self, constPartBundleHandleself) -> Any: ...
    def setBundle(self, *args, **kwargs): ...
    def set_bundle(self, constPartBundleHandleself, PartBundlebundle) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PartBundleNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    bundle_handles: Incomplete
    bundles: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getBundle(self, *args, **kwargs): ...
    def getBundleHandle(self, *args, **kwargs): ...
    def getBundleHandles(self, *args, **kwargs): ...
    def getBundles(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumBundles(self, *args, **kwargs): ...
    def get_bundle(self, PartBundleNodeself, intn) -> Any: ...
    def get_bundle_handle(self, PartBundleNodeself, intn) -> Any: ...
    def get_bundle_handles(self, *args, **kwargs): ...
    def get_bundles(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_bundles(self, PartBundleNodeself) -> Any: ...

class PartGroup(TypedWritableReferenceCount, Namable):
    DtoolClassDict: ClassVar[dict] = ...
    HMFOkAnimExtra: ClassVar[int] = ...
    HMFOkPartExtra: ClassVar[int] = ...
    HMFOkWrongRootName: ClassVar[int] = ...
    HMF_ok_anim_extra: ClassVar[int] = ...
    HMF_ok_part_extra: ClassVar[int] = ...
    HMF_ok_wrong_root_name: ClassVar[int] = ...
    children: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def applyControl(self, *args, **kwargs): ...
    def applyFreeze(self, *args, **kwargs): ...
    def applyFreezeMatrix(self, *args, **kwargs): ...
    def applyFreezeScalar(self, *args, **kwargs): ...
    def apply_control(self, constPartGroupself, PandaNodenode) -> Any: ...
    def apply_freeze(self, constPartGroupself, constTransformStatetransform) -> Any: ...
    def apply_freeze_matrix(
        self, constPartGroupself, constLVecBase3fpos, constLVecBase3fhpr, constLVecBase3fscale
    ) -> Any: ...
    def apply_freeze_scalar(self, constPartGroupself, floatvalue) -> Any: ...
    def clearForcedChannel(self, *args, **kwargs): ...
    def clear_forced_channel(self, constPartGroupself) -> Any: ...
    def copySubgraph(self, *args, **kwargs): ...
    def copy_subgraph(self, PartGroupself) -> Any: ...
    def findChild(self, *args, **kwargs): ...
    def find_child(self, PartGroupself, strname) -> Any: ...
    def getChild(self, *args, **kwargs): ...
    def getChildNamed(self, *args, **kwargs): ...
    def getChildren(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getForcedChannel(self, *args, **kwargs): ...
    def getNumChildren(self, *args, **kwargs): ...
    def get_child(self, PartGroupself, intn) -> Any: ...
    def get_child_named(self, PartGroupself, strname) -> Any: ...
    def get_children(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_forced_channel(self, PartGroupself) -> Any: ...
    def get_num_children(self, PartGroupself) -> Any: ...
    def isCharacterJoint(self, *args, **kwargs): ...
    def is_character_joint(self, PartGroupself) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, PartGroupself) -> Any: ...
    def sortDescendants(self, *args, **kwargs): ...
    def sort_descendants(self, constPartGroupself) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constPartGroupself) -> Any: ...
    def upcast_to_TypedWritableReferenceCount(self, constPartGroupself) -> Any: ...
    def write(self, PartGroupself, ostreamout, intindent_level) -> Any: ...
    def writeWithValue(self, *args, **kwargs): ...
    def write_with_value(self, PartGroupself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PartSubset(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addExcludeJoint(self, *args, **kwargs): ...
    def addIncludeJoint(self, *args, **kwargs): ...
    def add_exclude_joint(self, constPartSubsetself, constGlobPatternname) -> Any: ...
    def add_include_joint(self, constPartSubsetself, constGlobPatternname) -> Any: ...
    def append(self, constPartSubsetself, constPartSubsetother) -> Any: ...
    def assign(self, constPartSubsetself, constPartSubsetcopy) -> Any: ...
    def isIncludeEmpty(self, *args, **kwargs): ...
    def is_include_empty(self, PartSubsetself) -> Any: ...
    def matchesExclude(self, *args, **kwargs): ...
    def matchesInclude(self, *args, **kwargs): ...
    def matches_exclude(self, PartSubsetself, strjoint_name) -> Any: ...
    def matches_include(self, PartSubsetself, strjoint_name) -> Any: ...
    def output(self, PartSubsetself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Patcher(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getProgress(self, *args, **kwargs): ...
    def get_progress(self, Patcherself) -> Any: ...
    def initiate(self, constPatcherself, Filenamepatch, Filenameinfile) -> Any: ...
    def run(self, constPatcherself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Patchfile(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    allow_multifile: Incomplete
    footprint_length: Incomplete
    progress: Incomplete
    result_hash: Incomplete
    source_hash: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def apply(self, constPatchfileself, Filenamepatch_file, Filenamefile) -> Any: ...
    @overload
    def apply(self, constPatchfileself, Filenamepatch_file, Filenameorig_file, constFilenametarget_file) -> Any: ...
    def build(self, constPatchfileself, Filenamefile_orig, Filenamefile_new, Filenamepatch_name) -> Any: ...
    def getAllowMultifile(self, *args, **kwargs): ...
    def getFootprintLength(self, *args, **kwargs): ...
    def getProgress(self, *args, **kwargs): ...
    def getResultHash(self, *args, **kwargs): ...
    def getSourceHash(self, *args, **kwargs): ...
    def get_allow_multifile(self, constPatchfileself) -> Any: ...
    def get_footprint_length(self, constPatchfileself) -> Any: ...
    def get_progress(self, Patchfileself) -> Any: ...
    def get_result_hash(self, Patchfileself) -> Any: ...
    def get_source_hash(self, Patchfileself) -> Any: ...
    def hasSourceHash(self, *args, **kwargs): ...
    def has_source_hash(self, Patchfileself) -> Any: ...
    @overload
    def initiate(self, constPatchfileself, constFilenamepatch_file, constFilenamefile) -> Any: ...
    @overload
    def initiate(
        self, constPatchfileself, constFilenamepatch_file, constFilenameorig_file, constFilenametarget_file
    ) -> Any: ...
    def readHeader(self, *args, **kwargs): ...
    def read_header(self, constPatchfileself, constFilenamepatch_file) -> Any: ...
    def resetFootprintLength(self, *args, **kwargs): ...
    def reset_footprint_length(self, constPatchfileself) -> Any: ...
    def run(self, constPatchfileself) -> Any: ...
    def setAllowMultifile(self, *args, **kwargs): ...
    def setFootprintLength(self, *args, **kwargs): ...
    def set_allow_multifile(self, constPatchfileself, boolallow_multifile) -> Any: ...
    def set_footprint_length(self, constPatchfileself, intlength) -> Any: ...

class PerlinNoise(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getSeed(self, *args, **kwargs): ...
    def get_seed(self, constPerlinNoiseself) -> Any: ...

class PerlinNoise2(PerlinNoise):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constPerlinNoise2self, constPerlinNoise2copy) -> Any: ...
    @overload
    def noise(self, PerlinNoise2self, constLVecBase2dvalue) -> Any: ...
    @overload
    def noise(self, PerlinNoise2self, constLVecBase2fvalue) -> Any: ...
    @overload
    def noise(self, PerlinNoise2self, doublex, doubley) -> Any: ...
    def setScale(self, *args, **kwargs): ...
    @overload
    def set_scale(self, constPerlinNoise2self, constLVecBase2dscale) -> Any: ...
    @overload
    def set_scale(self, constPerlinNoise2self, constLVecBase2fscale) -> Any: ...
    @overload
    def set_scale(self, constPerlinNoise2self, doublescale) -> Any: ...
    @overload
    def set_scale(self, constPerlinNoise2self, doublesx, doublesy) -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PerlinNoise3(PerlinNoise):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constPerlinNoise3self, constPerlinNoise3copy) -> Any: ...
    @overload
    def noise(self, PerlinNoise3self, constLVecBase3dvalue) -> Any: ...
    @overload
    def noise(self, PerlinNoise3self, constLVecBase3fvalue) -> Any: ...
    @overload
    def noise(self, PerlinNoise3self, doublex, doubley, doublez) -> Any: ...
    def setScale(self, *args, **kwargs): ...
    @overload
    def set_scale(self, constPerlinNoise3self, constLVecBase3dscale) -> Any: ...
    @overload
    def set_scale(self, constPerlinNoise3self, constLVecBase3fscale) -> Any: ...
    @overload
    def set_scale(self, constPerlinNoise3self, doublescale) -> Any: ...
    @overload
    def set_scale(self, constPerlinNoise3self, doublesx, doublesy, doublesz) -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PerspectiveLens(Lens):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class PfmFile(PNMImageHeader):
    DtoolClassDict: ClassVar[dict] = ...
    scale: Incomplete
    valid: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addSubImage(self, *args, **kwargs): ...
    def add_sub_image(
        self,
        constPfmFileself,
        constPfmFilecopy,
        intxto,
        intyto,
        intxfrom,
        intyfrom,
        intx_size,
        inty_size,
        floatpixel_scale,
    ) -> Any: ...
    def apply1dLut(self, *args, **kwargs): ...
    def applyCrop(self, *args, **kwargs): ...
    def applyExponent(self, *args, **kwargs): ...
    def applyMask(self, *args, **kwargs): ...
    def apply_1d_lut(self, constPfmFileself, intchannel, constPfmFilelut, floatx_scale) -> Any: ...
    def apply_crop(self, constPfmFileself, intx_begin, intx_end, inty_begin, inty_end) -> Any: ...
    @overload
    def apply_exponent(self, constPfmFileself, floatgray_exponent) -> Any: ...
    @overload
    def apply_exponent(self, constPfmFileself, floatgray_exponent, floatalpha_exponent) -> Any: ...
    @overload
    def apply_exponent(self, constPfmFileself, floatc0_exponent, floatc1_exponent, floatc2_exponent) -> Any: ...
    @overload
    def apply_exponent(
        self, constPfmFileself, floatc0_exponent, floatc1_exponent, floatc2_exponent, floatc3_exponent
    ) -> Any: ...
    def apply_mask(self, constPfmFileself, constPfmFileother) -> Any: ...
    def assign(self, constPfmFileself, constPfmFilecopy) -> Any: ...
    def boxFilterFrom(self, *args, **kwargs): ...
    def box_filter_from(self, constPfmFileself, floatradius, constPfmFilecopy) -> Any: ...
    def calcAutocrop(self, *args, **kwargs): ...
    def calcAveragePoint(self, *args, **kwargs): ...
    def calcBilinearPoint(self, *args, **kwargs): ...
    def calcMinMax(self, *args, **kwargs): ...
    def calcTightBounds(self, *args, **kwargs): ...
    @overload
    def calc_autocrop(self, PfmFileself, LVecBase4drange) -> Any: ...
    @overload
    def calc_autocrop(self, PfmFileself, LVecBase4frange) -> Any: ...
    def calc_average_point(self, PfmFileself, LPoint3fresult, floatx, floaty, floatradius) -> Any: ...
    def calc_bilinear_point(self, PfmFileself, LPoint3fresult, floatx, floaty) -> Any: ...
    def calc_min_max(self, PfmFileself, LVecBase3fmin_points, LVecBase3fmax_points) -> Any: ...
    def calc_tight_bounds(self, PfmFileself, LPoint3fmin_point, LPoint3fmax_point) -> Any: ...
    @overload
    def clear(self, constPfmFileself) -> Any: ...
    @overload
    def clear(self, constPfmFileself, intx_size, inty_size, intnum_channels) -> Any: ...
    def clearNoDataValue(self, *args, **kwargs): ...
    def clearToTexcoords(self, *args, **kwargs): ...
    def clear_no_data_value(self, constPfmFileself) -> Any: ...
    def clear_to_texcoords(self, constPfmFileself, intx_size, inty_size) -> Any: ...
    def computePlanarBounds(self, *args, **kwargs): ...
    def computeSamplePoint(self, *args, **kwargs): ...
    @overload
    def compute_planar_bounds(
        self, PfmFileself, constLPoint2dcenter, floatpoint_dist, floatsample_radius, boolpoints_only
    ) -> Any: ...
    @overload
    def compute_planar_bounds(
        self, PfmFileself, constLPoint2fcenter, floatpoint_dist, floatsample_radius, boolpoints_only
    ) -> Any: ...
    def compute_sample_point(self, PfmFileself, LPoint3fresult, floatx, floaty, floatsample_radius) -> Any: ...
    def copyChannel(self, *args, **kwargs): ...
    def copyChannelMasked(self, *args, **kwargs): ...
    def copySubImage(self, *args, **kwargs): ...
    def copy_channel(self, constPfmFileself, intto_channel, constPfmFileother, intfrom_channel) -> Any: ...
    def copy_channel_masked(self, constPfmFileself, intto_channel, constPfmFileother, intfrom_channel) -> Any: ...
    def copy_sub_image(
        self, constPfmFileself, constPfmFilecopy, intxto, intyto, intxfrom, intyfrom, intx_size, inty_size
    ) -> Any: ...
    def divideSubImage(self, *args, **kwargs): ...
    def divide_sub_image(
        self,
        constPfmFileself,
        constPfmFilecopy,
        intxto,
        intyto,
        intxfrom,
        intyfrom,
        intx_size,
        inty_size,
        floatpixel_scale,
    ) -> Any: ...
    @overload
    def fill(self, constPfmFileself, constLPoint4fvalue) -> Any: ...
    @overload
    def fill(self, constPfmFileself, constLPoint2fvalue) -> Any: ...
    @overload
    def fill(self, constPfmFileself, constLPoint3fvalue) -> Any: ...
    @overload
    def fill(self, constPfmFileself, floatvalue) -> Any: ...
    def fillChannel(self, *args, **kwargs): ...
    def fillChannelMasked(self, *args, **kwargs): ...
    def fillChannelMaskedNan(self, *args, **kwargs): ...
    def fillChannelNan(self, *args, **kwargs): ...
    def fillNan(self, *args, **kwargs): ...
    def fillNoDataValue(self, *args, **kwargs): ...
    def fill_channel(self, constPfmFileself, intchannel, floatvalue) -> Any: ...
    def fill_channel_masked(self, constPfmFileself, intchannel, floatvalue) -> Any: ...
    def fill_channel_masked_nan(self, constPfmFileself, intchannel) -> Any: ...
    def fill_channel_nan(self, constPfmFileself, intchannel) -> Any: ...
    def fill_nan(self, constPfmFileself) -> Any: ...
    def fill_no_data_value(self, constPfmFileself) -> Any: ...
    def flip(self, constPfmFileself, boolflip_x, boolflip_y, booltranspose) -> Any: ...
    def forwardDistort(self, *args, **kwargs): ...
    def forward_distort(self, constPfmFileself, constPfmFiledist, floatscale_factor) -> Any: ...
    def gammaCorrect(self, *args, **kwargs): ...
    def gammaCorrectAlpha(self, *args, **kwargs): ...
    def gamma_correct(self, constPfmFileself, floatfrom_gamma, floatto_gamma) -> Any: ...
    def gamma_correct_alpha(self, constPfmFileself, floatfrom_gamma, floatto_gamma) -> Any: ...
    def gaussianFilterFrom(self, *args, **kwargs): ...
    def gaussian_filter_from(self, constPfmFileself, floatradius, constPfmFilecopy) -> Any: ...
    def getChannel(self, *args, **kwargs): ...
    def getNoDataValue(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getPoint1(self, *args, **kwargs): ...
    def getPoint2(self, *args, **kwargs): ...
    def getPoint3(self, *args, **kwargs): ...
    def getPoint4(self, *args, **kwargs): ...
    def getPoints(self, *args, **kwargs): ...
    def getScale(self, *args, **kwargs): ...
    def get_channel(self, PfmFileself, intx, inty, intc) -> Any: ...
    def get_no_data_value(self, PfmFileself) -> Any: ...
    def get_point(self, PfmFileself, intx, inty) -> Any: ...
    def get_point1(self, PfmFileself, intx, inty) -> Any: ...
    def get_point2(self, PfmFileself, intx, inty) -> Any: ...
    def get_point3(self, PfmFileself, intx, inty) -> Any: ...
    def get_point4(self, PfmFileself, intx, inty) -> Any: ...
    def get_points(self, PfmFileself) -> Any: ...
    def get_scale(self, PfmFileself) -> Any: ...
    def hasNoDataThreshold(self, *args, **kwargs): ...
    def hasNoDataValue(self, *args, **kwargs): ...
    def hasPoint(self, *args, **kwargs): ...
    def has_no_data_threshold(self, PfmFileself) -> Any: ...
    def has_no_data_value(self, PfmFileself) -> Any: ...
    def has_point(self, PfmFileself, intx, inty) -> Any: ...
    def indirect1dLookup(self, *args, **kwargs): ...
    def indirect_1d_lookup(
        self, constPfmFileself, constPfmFileindex_image, intchannel, constPfmFilepixel_values
    ) -> Any: ...
    def isColumnEmpty(self, *args, **kwargs): ...
    def isRowEmpty(self, *args, **kwargs): ...
    def isValid(self, *args, **kwargs): ...
    def is_column_empty(self, PfmFileself, intx, inty_begin, inty_end) -> Any: ...
    def is_row_empty(self, PfmFileself, inty, intx_begin, intx_end) -> Any: ...
    def is_valid(self, PfmFileself) -> Any: ...
    def load(self, constPfmFileself, constPNMImagepnmimage) -> Any: ...
    def merge(self, constPfmFileself, constPfmFileother) -> Any: ...
    def modifyPoint(self, *args, **kwargs): ...
    def modifyPoint2(self, *args, **kwargs): ...
    def modifyPoint3(self, *args, **kwargs): ...
    def modifyPoint4(self, *args, **kwargs): ...
    def modify_point(self, constPfmFileself, intx, inty) -> Any: ...
    def modify_point2(self, constPfmFileself, intx, inty) -> Any: ...
    def modify_point3(self, constPfmFileself, intx, inty) -> Any: ...
    def modify_point4(self, constPfmFileself, intx, inty) -> Any: ...
    def multSubImage(self, *args, **kwargs): ...
    def mult_sub_image(
        self,
        constPfmFileself,
        constPfmFilecopy,
        intxto,
        intyto,
        intxfrom,
        intyfrom,
        intx_size,
        inty_size,
        floatpixel_scale,
    ) -> Any: ...
    def output(self, PfmFileself, ostreamout) -> Any: ...
    def pullSpot(self, *args, **kwargs): ...
    def pull_spot(
        self, constPfmFileself, constLPoint4fdelta, floatxc, floatyc, floatxr, floatyr, floatexponent
    ) -> Any: ...
    def quickFilterFrom(self, *args, **kwargs): ...
    def quick_filter_from(self, constPfmFileself, constPfmFilecopy) -> Any: ...
    @overload
    def read(self, constPfmFileself, istreamin, constFilenamefullpath) -> Any: ...
    @overload
    def read(self, constPfmFileself, constFilenamefullpath) -> Any: ...
    def resize(self, constPfmFileself, intnew_x_size, intnew_y_size) -> Any: ...
    def reverseDistort(self, *args, **kwargs): ...
    def reverseRows(self, *args, **kwargs): ...
    def reverse_distort(self, constPfmFileself, constPfmFiledist, floatscale_factor) -> Any: ...
    def reverse_rows(self, constPfmFileself) -> Any: ...
    def setChannel(self, *args, **kwargs): ...
    def setNoDataChan4(self, *args, **kwargs): ...
    def setNoDataNan(self, *args, **kwargs): ...
    def setNoDataThreshold(self, *args, **kwargs): ...
    def setNoDataValue(self, *args, **kwargs): ...
    def setPoint(self, *args, **kwargs): ...
    def setPoint1(self, *args, **kwargs): ...
    def setPoint2(self, *args, **kwargs): ...
    def setPoint3(self, *args, **kwargs): ...
    def setPoint4(self, *args, **kwargs): ...
    def setScale(self, *args, **kwargs): ...
    def setZeroSpecial(self, *args, **kwargs): ...
    def set_channel(self, constPfmFileself, intx, inty, intc, floatvalue) -> Any: ...
    def set_no_data_chan4(self, constPfmFileself, boolchan4) -> Any: ...
    def set_no_data_nan(self, constPfmFileself, intnum_channels) -> Any: ...
    @overload
    def set_no_data_threshold(self, constPfmFileself, constLPoint4dno_data_value) -> Any: ...
    @overload
    def set_no_data_threshold(self, constPfmFileself, constLPoint4fno_data_value) -> Any: ...
    @overload
    def set_no_data_value(self, constPfmFileself, constLPoint4dno_data_value) -> Any: ...
    @overload
    def set_no_data_value(self, constPfmFileself, constLPoint4fno_data_value) -> Any: ...
    @overload
    def set_point(self, constPfmFileself, intx, inty, constLVecBase3dpoint) -> Any: ...
    @overload
    def set_point(self, constPfmFileself, intx, inty, constLVecBase3fpoint) -> Any: ...
    def set_point1(self, constPfmFileself, intx, inty, floatpoint) -> Any: ...
    @overload
    def set_point2(self, constPfmFileself, intx, inty, constLVecBase2dpoint) -> Any: ...
    @overload
    def set_point2(self, constPfmFileself, intx, inty, constLVecBase2fpoint) -> Any: ...
    @overload
    def set_point3(self, constPfmFileself, intx, inty, constLVecBase3dpoint) -> Any: ...
    @overload
    def set_point3(self, constPfmFileself, intx, inty, constLVecBase3fpoint) -> Any: ...
    @overload
    def set_point4(self, constPfmFileself, intx, inty, constLVecBase4dpoint) -> Any: ...
    @overload
    def set_point4(self, constPfmFileself, intx, inty, constLVecBase4fpoint) -> Any: ...
    def set_scale(self, constPfmFileself, floatscale) -> Any: ...
    def set_zero_special(self, constPfmFileself, boolzero_special) -> Any: ...
    def store(self, PfmFileself, PNMImagepnmimage) -> Any: ...
    def storeMask(self, *args, **kwargs): ...
    @overload
    def store_mask(self, PfmFileself, PNMImagepnmimage) -> Any: ...
    @overload
    def store_mask(self, PfmFileself, PNMImagepnmimage, constLVecBase4fmin_point, constLVecBase4fmax_point) -> Any: ...
    @overload
    def write(self, constPfmFileself, ostreamout, constFilenamefullpath) -> Any: ...
    @overload
    def write(self, constPfmFileself, constFilenamefullpath) -> Any: ...
    @overload
    def xform(self, constPfmFileself, constLMatrix4dtransform) -> Any: ...
    @overload
    def xform(self, constPfmFileself, constLMatrix4ftransform) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...

class PfmVizzer(dtoolconfig.DTOOL_SUPER_BASE):
    CTAuxVertex1: ClassVar[int] = ...
    CTAuxVertex2: ClassVar[int] = ...
    CTAuxVertex3: ClassVar[int] = ...
    CTBlend1: ClassVar[int] = ...
    CTNormal3: ClassVar[int] = ...
    CTTexcoord2: ClassVar[int] = ...
    CTTexcoord3: ClassVar[int] = ...
    CTVertex1: ClassVar[int] = ...
    CTVertex2: ClassVar[int] = ...
    CTVertex3: ClassVar[int] = ...
    CT_aux_vertex1: ClassVar[int] = ...
    CT_aux_vertex2: ClassVar[int] = ...
    CT_aux_vertex3: ClassVar[int] = ...
    CT_blend1: ClassVar[int] = ...
    CT_normal3: ClassVar[int] = ...
    CT_texcoord2: ClassVar[int] = ...
    CT_texcoord3: ClassVar[int] = ...
    CT_vertex1: ClassVar[int] = ...
    CT_vertex2: ClassVar[int] = ...
    CT_vertex3: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    MFBack: ClassVar[int] = ...
    MFBoth: ClassVar[int] = ...
    MFFront: ClassVar[int] = ...
    MF_back: ClassVar[int] = ...
    MF_both: ClassVar[int] = ...
    MF_front: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addVisColumn(self, *args, **kwargs): ...
    @overload
    def add_vis_column(
        self,
        constPfmVizzerself,
        intsource,
        inttarget,
        InternalNamename,
        constTransformStatetransform,
        constLenslens,
        constPfmFileundist_lut,
    ) -> Any: ...
    @overload
    def add_vis_column(self) -> Any: ...
    @overload
    def add_vis_column(self) -> Any: ...
    def calcMaxUDisplacement(self, *args, **kwargs): ...
    def calcMaxVDisplacement(self, *args, **kwargs): ...
    def calc_max_u_displacement(self, PfmVizzerself) -> Any: ...
    def calc_max_v_displacement(self, PfmVizzerself) -> Any: ...
    def clearAuxPfm(self, *args, **kwargs): ...
    def clearFlatTexcoordName(self, *args, **kwargs): ...
    def clearVisBlend(self, *args, **kwargs): ...
    def clearVisColumns(self, *args, **kwargs): ...
    def clear_aux_pfm(self, constPfmVizzerself) -> Any: ...
    def clear_flat_texcoord_name(self, constPfmVizzerself) -> Any: ...
    def clear_vis_blend(self, constPfmVizzerself) -> Any: ...
    def clear_vis_columns(self, constPfmVizzerself) -> Any: ...
    def extrude(self, constPfmVizzerself, constLenslens) -> Any: ...
    def generateVisMesh(self, *args, **kwargs): ...
    def generateVisPoints(self, *args, **kwargs): ...
    def generate_vis_mesh(self, PfmVizzerself, intface) -> Any: ...
    def generate_vis_points(self, PfmVizzerself) -> Any: ...
    def getAuxPfm(self, *args, **kwargs): ...
    def getFlatTexcoordName(self, *args, **kwargs): ...
    def getKeepBeyondLens(self, *args, **kwargs): ...
    def getPfm(self, *args, **kwargs): ...
    def getVis2d(self, *args, **kwargs): ...
    def getVisBlend(self, *args, **kwargs): ...
    def getVisInverse(self, *args, **kwargs): ...
    def get_aux_pfm(self, PfmVizzerself) -> Any: ...
    def get_flat_texcoord_name(self, PfmVizzerself) -> Any: ...
    def get_keep_beyond_lens(self, PfmVizzerself) -> Any: ...
    @overload
    def get_pfm(self, constPfmVizzerself) -> Any: ...
    @overload
    def get_pfm(self, PfmVizzerself) -> Any: ...
    def get_vis_2d(self, PfmVizzerself) -> Any: ...
    def get_vis_blend(self, PfmVizzerself) -> Any: ...
    def get_vis_inverse(self, PfmVizzerself) -> Any: ...
    def makeDisplacement(self, *args, **kwargs): ...
    @overload
    def make_displacement(self, PfmVizzerself, PNMImageresult, doublemax_u, doublemax_v, boolfor_32bit) -> Any: ...
    @overload
    def make_displacement(self, PfmVizzerself, PfmFileresult, doublemax_u, doublemax_v, boolfor_32bit) -> Any: ...
    def project(self, constPfmVizzerself, constLenslens, constPfmFileundist_lut) -> Any: ...
    def setAuxPfm(self, *args, **kwargs): ...
    def setFlatTexcoordName(self, *args, **kwargs): ...
    def setKeepBeyondLens(self, *args, **kwargs): ...
    def setVis2d(self, *args, **kwargs): ...
    def setVisBlend(self, *args, **kwargs): ...
    def setVisInverse(self, *args, **kwargs): ...
    def set_aux_pfm(self, constPfmVizzerself, constPfmFilepfm) -> Any: ...
    def set_flat_texcoord_name(self, constPfmVizzerself, InternalNameflat_texcoord_name) -> Any: ...
    def set_keep_beyond_lens(self, constPfmVizzerself, boolkeep_beyond_lens) -> Any: ...
    def set_vis_2d(self, constPfmVizzerself, boolvis_2d) -> Any: ...
    def set_vis_blend(self, constPfmVizzerself, constPNMImagevis_blend) -> Any: ...
    def set_vis_inverse(self, constPfmVizzerself, boolvis_inverse) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Pfstream(iostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constFileStreamself) -> Any: ...
    def open(self, constFileStreamself, strfilename, intmode) -> Any: ...

class PiecewiseCurve(ParametricCurve):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class Pifstream(istream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constIFileStreamself) -> Any: ...
    def open(self, constIFileStreamself, strfilename, intmode) -> Any: ...

class PipeOcclusionCullTraverser(CullTraverser):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def endTraverse(self, *args, **kwargs): ...
    def end_traverse(self, constPipeOcclusionCullTraverserself) -> Any: ...
    def getBuffer(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getOcclusionMask(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    def get_buffer(self, PipeOcclusionCullTraverserself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_occlusion_mask(self, PipeOcclusionCullTraverserself) -> Any: ...
    def get_texture(self, constPipeOcclusionCullTraverserself) -> Any: ...
    def setOcclusionMask(self, *args, **kwargs): ...
    def setScene(self, *args, **kwargs): ...
    def set_occlusion_mask(self, constPipeOcclusionCullTraverserself, constBitMaskocclusion_mask) -> Any: ...
    def set_scene(
        self,
        constPipeOcclusionCullTraverserself,
        SceneSetupscene_setup,
        GraphicsStateGuardianBasegsg,
        booldr_incomplete_render,
    ) -> Any: ...
    def upcastToCullTraverser(self, *args, **kwargs): ...
    def upcast_to_CullTraverser(self, constPipeOcclusionCullTraverserself) -> Any: ...

class Pixel(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    b: Incomplete
    g: Incomplete
    r: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def output(self, pixelself, ostreamout) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...

class Plane(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def distToPlane(self, *args, **kwargs): ...
    def dist_to_plane(self, LPlanefself, constLPoint3fpoint) -> Any: ...
    def flip(self, constLPlanefself) -> Any: ...
    def getNormal(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getReflectionMat(self, *args, **kwargs): ...
    def get_normal(self, LPlanefself) -> Any: ...
    def get_point(self, LPlanefself) -> Any: ...
    def get_reflection_mat(self, LPlanefself) -> Any: ...
    def intersectsLine(self, *args, **kwargs): ...
    def intersectsPlane(self, *args, **kwargs): ...
    @overload
    def intersects_line(self, LPlanefself, LPoint3fintersection_point, constLPoint3fp1, constLPoint3fp2) -> Any: ...
    @overload
    def intersects_line(self) -> Any: ...
    def intersects_plane(self, LPlanefself, LPoint3ffrom, LVector3fdelta, constLPlanefother) -> Any: ...
    def normalize(self, constLPlanefself) -> Any: ...
    def normalized(self, LPlanefself) -> Any: ...
    def output(self, LPlanefself, ostreamout) -> Any: ...
    def project(self, LPlanefself, constLPoint3fpoint) -> Any: ...
    def write(self, LPlanefself, ostreamout, intindent_level) -> Any: ...
    def xform(self, constLPlanefself, constLMatrix4fmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __rmul__(self, other): ...

class PlaneD(LVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def distToPlane(self, *args, **kwargs): ...
    def dist_to_plane(self, LPlanedself, constLPoint3dpoint) -> Any: ...
    def flip(self, constLPlanedself) -> Any: ...
    def getNormal(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getReflectionMat(self, *args, **kwargs): ...
    def get_normal(self, LPlanedself) -> Any: ...
    def get_point(self, LPlanedself) -> Any: ...
    def get_reflection_mat(self, LPlanedself) -> Any: ...
    def intersectsLine(self, *args, **kwargs): ...
    def intersectsPlane(self, *args, **kwargs): ...
    @overload
    def intersects_line(self, LPlanedself, LPoint3dintersection_point, constLPoint3dp1, constLPoint3dp2) -> Any: ...
    @overload
    def intersects_line(self) -> Any: ...
    def intersects_plane(self, LPlanedself, LPoint3dfrom, LVector3ddelta, constLPlanedother) -> Any: ...
    def normalize(self, constLPlanedself) -> Any: ...
    def normalized(self, LPlanedself) -> Any: ...
    def output(self, LPlanedself, ostreamout) -> Any: ...
    def project(self, LPlanedself, constLPoint3dpoint) -> Any: ...
    def write(self, LPlanedself, ostreamout, intindent_level) -> Any: ...
    def xform(self, constLPlanedself, constLMatrix4dmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __rmul__(self, other): ...

class PlaneF(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def distToPlane(self, *args, **kwargs): ...
    def dist_to_plane(self, LPlanefself, constLPoint3fpoint) -> Any: ...
    def flip(self, constLPlanefself) -> Any: ...
    def getNormal(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getReflectionMat(self, *args, **kwargs): ...
    def get_normal(self, LPlanefself) -> Any: ...
    def get_point(self, LPlanefself) -> Any: ...
    def get_reflection_mat(self, LPlanefself) -> Any: ...
    def intersectsLine(self, *args, **kwargs): ...
    def intersectsPlane(self, *args, **kwargs): ...
    @overload
    def intersects_line(self, LPlanefself, LPoint3fintersection_point, constLPoint3fp1, constLPoint3fp2) -> Any: ...
    @overload
    def intersects_line(self) -> Any: ...
    def intersects_plane(self, LPlanefself, LPoint3ffrom, LVector3fdelta, constLPlanefother) -> Any: ...
    def normalize(self, constLPlanefself) -> Any: ...
    def normalized(self, LPlanefself) -> Any: ...
    def output(self, LPlanefself, ostreamout) -> Any: ...
    def project(self, LPlanefself, constLPoint3fpoint) -> Any: ...
    def write(self, LPlanefself, ostreamout, intindent_level) -> Any: ...
    def xform(self, constLPlanefself, constLMatrix4fmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __rmul__(self, other): ...

class PlaneNode(PandaNode):
    CECollision: ClassVar[int] = ...
    CEVisible: ClassVar[int] = ...
    CE_collision: ClassVar[int] = ...
    CE_visible: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    clip_effect: Incomplete
    plane: Incomplete
    priority: Incomplete
    viz_scale: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getClipEffect(self, *args, **kwargs): ...
    def getPlane(self, *args, **kwargs): ...
    def getPriority(self, *args, **kwargs): ...
    def getVizScale(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_clip_effect(self, PlaneNodeself) -> Any: ...
    def get_plane(self, PlaneNodeself) -> Any: ...
    def get_priority(self, PlaneNodeself) -> Any: ...
    def get_viz_scale(self, PlaneNodeself) -> Any: ...
    def setClipEffect(self, *args, **kwargs): ...
    def setPlane(self, *args, **kwargs): ...
    def setPriority(self, *args, **kwargs): ...
    def setVizScale(self, *args, **kwargs): ...
    def set_clip_effect(self, constPlaneNodeself, intclip_effect) -> Any: ...
    def set_plane(self, constPlaneNodeself, constLPlanefplane) -> Any: ...
    @overload
    def set_priority(self, constPlaneNodeself, intpriority) -> Any: ...
    @overload
    def set_priority(self) -> Any: ...
    def set_viz_scale(self, constPlaneNodeself, floatviz_scale) -> Any: ...

class Pofstream(ostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constOFileStreamself) -> Any: ...
    def open(self, constOFileStreamself, strfilename, intmode) -> Any: ...

class Point2(LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LPoint2fself) -> Any: ...
    def project(self, LPoint2fself, constLVecBase2fonto) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Point2D(LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LPoint2dself) -> Any: ...
    def project(self, LPoint2dself, constLVecBase2donto) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Point2F(LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LPoint2fself) -> Any: ...
    def project(self, LPoint2fself, constLVecBase2fonto) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Point3(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3fself) -> Any: ...
    def get_xz(self, LPoint3fself) -> Any: ...
    def get_yz(self, LPoint3fself) -> Any: ...
    def normalized(self, LPoint3fself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    def project(self, LPoint3fself, constLVecBase3fonto) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Point3D(LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3dself, constLVecBase3dother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3dself) -> Any: ...
    def get_xz(self, LPoint3dself) -> Any: ...
    def get_yz(self, LPoint3dself) -> Any: ...
    def normalized(self, LPoint3dself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    def project(self, LPoint3dself, constLVecBase3donto) -> Any: ...
    @staticmethod
    def rfu(doubleright, doublefwd, doubleup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Point3F(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cross(self, LPoint3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint3fself) -> Any: ...
    def get_xz(self, LPoint3fself) -> Any: ...
    def get_yz(self, LPoint3fself) -> Any: ...
    def normalized(self, LPoint3fself) -> Any: ...
    @staticmethod
    def origin(intcs) -> Any: ...
    def project(self, LPoint3fself, constLVecBase3fonto) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Point4(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint4fself) -> Any: ...
    def get_xyz(self, LPoint4fself) -> Any: ...
    def normalized(self, LPoint4fself) -> Any: ...
    def project(self, LPoint4fself, constLVecBase4fonto) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Point4D(LVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint4dself) -> Any: ...
    def get_xyz(self, LPoint4dself) -> Any: ...
    def normalized(self, LPoint4dself) -> Any: ...
    def project(self, LPoint4dself, constLVecBase4donto) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Point4F(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LPoint4fself) -> Any: ...
    def get_xyz(self, LPoint4fself) -> Any: ...
    def normalized(self, LPoint4fself) -> Any: ...
    def project(self, LPoint4fself, constLVecBase4fonto) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class PointLight(LightLensNode):
    DtoolClassDict: ClassVar[dict] = ...
    attenuation: Incomplete
    max_distance: Incomplete
    point: Incomplete
    specular_color: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearSpecularColor(self, *args, **kwargs): ...
    def clear_specular_color(self, constPointLightself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMaxDistance(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_max_distance(self, PointLightself) -> Any: ...
    def get_point(self, PointLightself) -> Any: ...
    def setAttenuation(self, *args, **kwargs): ...
    def setMaxDistance(self, *args, **kwargs): ...
    def setPoint(self, *args, **kwargs): ...
    def setSpecularColor(self, *args, **kwargs): ...
    def set_attenuation(self, constPointLightself, constLVecBase3fattenuation) -> Any: ...
    def set_max_distance(self, constPointLightself, floatmax_distance) -> Any: ...
    def set_point(self, constPointLightself, constLPoint3fpoint) -> Any: ...
    def set_specular_color(self, constPointLightself, constLVecBase4fcolor) -> Any: ...

class PointerData(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    id: Incomplete
    in_window: Incomplete
    pressure: Incomplete
    type: Incomplete
    x: Incomplete
    y: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getInWindow(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def get_in_window(self, PointerDataself) -> Any: ...
    def get_x(self, PointerDataself) -> Any: ...
    def get_y(self, PointerDataself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PointerEventList(ParamValueBase):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addEvent(self, *args, **kwargs): ...
    @overload
    def add_event(self, constPointerEventListself, constPointerDatadata, intseq, doubletime) -> Any: ...
    @overload
    def add_event(self, constPointerEventListself, boolin_win, intxpos, intypos, intseq, doubletime) -> Any: ...
    @overload
    def add_event(
        self, constPointerEventListself, boolin_win, intxpos, intypos, doublexdelta, doubleydelta, intseq, doubletime
    ) -> Any: ...
    def clear(self, constPointerEventListself) -> Any: ...
    def encircles(self, PointerEventListself, intx, inty) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDirection(self, *args, **kwargs): ...
    def getDx(self, *args, **kwargs): ...
    def getDy(self, *args, **kwargs): ...
    def getInWindow(self, *args, **kwargs): ...
    def getLength(self, *args, **kwargs): ...
    def getNumEvents(self, *args, **kwargs): ...
    def getRotation(self, *args, **kwargs): ...
    def getSequence(self, *args, **kwargs): ...
    def getTime(self, *args, **kwargs): ...
    def getXpos(self, *args, **kwargs): ...
    def getYpos(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_direction(self, PointerEventListself, intn) -> Any: ...
    def get_dx(self, PointerEventListself, intn) -> Any: ...
    def get_dy(self, PointerEventListself, intn) -> Any: ...
    def get_in_window(self, PointerEventListself, intn) -> Any: ...
    def get_length(self, PointerEventListself, intn) -> Any: ...
    def get_num_events(self, PointerEventListself) -> Any: ...
    def get_rotation(self, PointerEventListself, intn) -> Any: ...
    def get_sequence(self, PointerEventListself, intn) -> Any: ...
    def get_time(self, PointerEventListself, intn) -> Any: ...
    def get_xpos(self, PointerEventListself, intn) -> Any: ...
    def get_ypos(self, PointerEventListself, intn) -> Any: ...
    def matchPattern(self, *args, **kwargs): ...
    def match_pattern(self, constPointerEventListself, strpattern, doublerot, doubleseglen) -> Any: ...
    def popFront(self, *args, **kwargs): ...
    def pop_front(self, constPointerEventListself) -> Any: ...
    def totalTurns(self, *args, **kwargs): ...
    def total_turns(self, PointerEventListself, doublesec) -> Any: ...

class PointerToArrayBaseDouble(PointerToBase_ReferenceCountedVector_double):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseFloat(PointerToBase_ReferenceCountedVector_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseInt(PointerToBase_ReferenceCountedVector_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseLMatrix3d(PointerToBase_ReferenceCountedVector_LMatrix3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseLMatrix3f(PointerToBase_ReferenceCountedVector_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseLVecBase2d(PointerToBase_ReferenceCountedVector_LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseLVecBase2f(PointerToBase_ReferenceCountedVector_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseLVecBase2i(PointerToBase_ReferenceCountedVector_LVecBase2i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseLVecBase3d(PointerToBase_ReferenceCountedVector_LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseLVecBase3f(PointerToBase_ReferenceCountedVector_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseLVecBase3i(PointerToBase_ReferenceCountedVector_LVecBase3i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseUnalignedLMatrix4d(PointerToBase_ReferenceCountedVector_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseUnalignedLMatrix4f(PointerToBase_ReferenceCountedVector_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseUnalignedLVecBase4d(PointerToBase_ReferenceCountedVector_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseUnalignedLVecBase4f(PointerToBase_ReferenceCountedVector_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseUnalignedLVecBase4i(PointerToBase_ReferenceCountedVector_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseUnsignedChar(PointerToBase_ReferenceCountedVector_unsigned_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBaseUnsignedShortInt(PointerToBase_ReferenceCountedVector_unsigned_short_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_LMatrix3d(PointerToBase_ReferenceCountedVector_LMatrix3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_LMatrix3f(PointerToBase_ReferenceCountedVector_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_LVecBase2d(PointerToBase_ReferenceCountedVector_LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_LVecBase2f(PointerToBase_ReferenceCountedVector_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_LVecBase2i(PointerToBase_ReferenceCountedVector_LVecBase2i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_LVecBase3d(PointerToBase_ReferenceCountedVector_LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_LVecBase3f(PointerToBase_ReferenceCountedVector_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_LVecBase3i(PointerToBase_ReferenceCountedVector_LVecBase3i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_UnalignedLMatrix4d(PointerToBase_ReferenceCountedVector_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_UnalignedLMatrix4f(PointerToBase_ReferenceCountedVector_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_UnalignedLVecBase4d(PointerToBase_ReferenceCountedVector_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_UnalignedLVecBase4f(PointerToBase_ReferenceCountedVector_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_UnalignedLVecBase4i(PointerToBase_ReferenceCountedVector_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_double(PointerToBase_ReferenceCountedVector_double):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_float(PointerToBase_ReferenceCountedVector_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_int(PointerToBase_ReferenceCountedVector_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_unsigned_char(PointerToBase_ReferenceCountedVector_unsigned_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayBase_unsigned_short_int(PointerToBase_ReferenceCountedVector_unsigned_short_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerToArrayDouble(PointerToArrayBase_double):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, doubleparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, doublex) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, doublevalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayFloat(PointerToArrayBase_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, floatparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, floatx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, floatvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayInt(PointerToArrayBase_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, intparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, intx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, intvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayLMatrix3d(PointerToArrayBase_LMatrix3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix3dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix3dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix3dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayLMatrix3f(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayLVecBase2d(PointerToArrayBase_LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayLVecBase2f(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayLVecBase2i(PointerToArrayBase_LVecBase2i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2iparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2ix) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2ivalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayLVecBase3d(PointerToArrayBase_LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayLVecBase3f(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayLVecBase3i(PointerToArrayBase_LVecBase3i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3iparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3ix) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3ivalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayUnalignedLMatrix4d(PointerToArrayBase_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix4dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix4dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix4dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayUnalignedLMatrix4f(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayUnalignedLVecBase4d(PointerToArrayBase_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayUnalignedLVecBase4f(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayUnalignedLVecBase4i(PointerToArrayBase_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4iparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4ix) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4ivalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayUnsignedChar(PointerToArrayBase_unsigned_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, intparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, intx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, intvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArrayUnsignedShortInt(PointerToArrayBase_unsigned_short_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, intparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, intx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, intvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_LMatrix3d(PointerToArrayBase_LMatrix3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix3dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix3dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix3dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_LMatrix3f(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_LVecBase2d(PointerToArrayBase_LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_LVecBase2f(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_LVecBase2i(PointerToArrayBase_LVecBase2i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase2iparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase2ix) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase2ivalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_LVecBase3d(PointerToArrayBase_LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_LVecBase3f(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_LVecBase3i(PointerToArrayBase_LVecBase3i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase3iparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase3ix) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase3ivalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_UnalignedLMatrix4d(PointerToArrayBase_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix4dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix4dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix4dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_UnalignedLMatrix4f(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLMatrix4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLMatrix4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLMatrix4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_UnalignedLVecBase4d(PointerToArrayBase_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4dparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4dx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4dvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_UnalignedLVecBase4f(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4fparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4fx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4fvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_UnalignedLVecBase4i(PointerToArrayBase_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, constLVecBase4iparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, constLVecBase4ix) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, constLVecBase4ivalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_double(PointerToArrayBase_double):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, doubleparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, doublex) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, doublevalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_float(PointerToArrayBase_float):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, floatparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, floatx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, floatvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_int(PointerToArrayBase_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, intparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, intx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, intvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_unsigned_char(PointerToArrayBase_unsigned_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, intparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, intx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, intvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToArray_unsigned_short_int(PointerToArrayBase_unsigned_short_int):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToArrayself) -> Any: ...
    def count(self, PointerToArrayself, intparam0) -> Any: ...
    @staticmethod
    def emptyArray(*args, **kwargs): ...
    @staticmethod
    def empty_array(intn, TypeHandletype_handle) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getElement(self, *args, **kwargs): ...
    def getNodeRefCount(self, *args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    def getSubdata(self, *args, **kwargs): ...
    def get_data(self, PointerToArrayself) -> Any: ...
    def get_element(self, PointerToArrayself, intn) -> Any: ...
    def get_node_ref_count(self, PointerToArrayself) -> Any: ...
    def get_ref_count(self, PointerToArrayself) -> Any: ...
    def get_subdata(self, PointerToArrayself, intn, intcount) -> Any: ...
    def popBack(self, *args, **kwargs): ...
    def pop_back(self, constPointerToArrayself) -> Any: ...
    def pushBack(self, *args, **kwargs): ...
    def push_back(self, constPointerToArrayself, intx) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setElement(self, *args, **kwargs): ...
    def setSubdata(self, *args, **kwargs): ...
    def set_data(self, constPointerToArrayself, objectdata) -> Any: ...
    def set_element(self, constPointerToArrayself, intn, intvalue) -> Any: ...
    def set_subdata(self, constPointerToArrayself, intn, intcount, strdata) -> Any: ...
    def __buffer__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self, PointerToArrayself, objectmemo) -> Any: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __reduce__(self, PointerToArrayself) -> Any: ...
    def __release_buffer__(self, *args, **kwargs): ...
    def __setitem__(self, index, object) -> None: ...

class PointerToBaseReferenceCountedVectorDouble(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorFloat(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorInt(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorLMatrix3d(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorLMatrix3f(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorLVecBase2d(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorLVecBase2f(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorLVecBase2i(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorLVecBase3d(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorLVecBase3f(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorLVecBase3i(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorUnalignedLMatrix4d(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorUnalignedLMatrix4f(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorUnalignedLVecBase4d(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorUnalignedLVecBase4f(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorUnalignedLVecBase4i(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorUnsignedChar(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseReferenceCountedVectorUnsignedShortInt(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBaseVirtualFileMount(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_LMatrix3d(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_LMatrix3f(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_LVecBase2d(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_LVecBase2f(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_LVecBase2i(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_LVecBase3d(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_LVecBase3f(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_LVecBase3i(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_UnalignedLMatrix4d(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_UnalignedLMatrix4f(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_UnalignedLVecBase4d(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_UnalignedLVecBase4f(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_UnalignedLVecBase4i(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_double(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_float(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_int(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_unsigned_char(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_ReferenceCountedVector_unsigned_short_int(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToBase_VirtualFileMount(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constPointerToBaseself) -> Any: ...
    def output(self, PointerToBaseself, ostreamout) -> Any: ...

class PointerToVirtualFileMount(PointerToBase_VirtualFileMount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def assign(self, constPointerToself, constVirtualFileMountcopy) -> Any: ...
    @overload
    def assign(self, constPointerToself, VirtualFileMountptr) -> Any: ...
    def clear(self, constPointerToself) -> Any: ...
    def isNull(self, *args, **kwargs): ...
    def is_null(self, PointerToself) -> Any: ...
    def p(self, PointerToself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PointerToVoid(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getHash(self, *args, **kwargs): ...
    def get_hash(self, PointerToVoidself) -> Any: ...
    def isNull(self, *args, **kwargs): ...
    def is_null(self, PointerToVoidself) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PointerTo_VirtualFileMount(PointerToBase_VirtualFileMount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def assign(self, constPointerToself, constVirtualFileMountcopy) -> Any: ...
    @overload
    def assign(self, constPointerToself, VirtualFileMountptr) -> Any: ...
    def clear(self, constPointerToself) -> Any: ...
    def isNull(self, *args, **kwargs): ...
    def is_null(self, PointerToself) -> Any: ...
    def p(self, PointerToself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class PointerType(enum.Enum):
    __new__: ClassVar[Callable] = ...
    ERASER: ClassVar[PointerType] = ...
    FINGER: ClassVar[PointerType] = ...
    MOUSE: ClassVar[PointerType] = ...
    STYLUS: ClassVar[PointerType] = ...
    UNKNOWN: ClassVar[PointerType] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[object]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    _value_repr_: ClassVar[None] = ...
    eraser: ClassVar[PointerType] = ...
    finger: ClassVar[PointerType] = ...
    mouse: ClassVar[PointerType] = ...
    stylus: ClassVar[PointerType] = ...
    unknown: ClassVar[PointerType] = ...

class PolylightEffect(RenderEffect):
    CTAll: ClassVar[int] = ...
    CTProximal: ClassVar[int] = ...
    CT_all: ClassVar[int] = ...
    CT_proximal: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addLight(self, *args, **kwargs): ...
    def add_light(self, PolylightEffectself, constNodePathnewlight) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getContrib(self, *args, **kwargs): ...
    def getEffectCenter(self, *args, **kwargs): ...
    def getWeight(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_contrib(self, PolylightEffectself) -> Any: ...
    def get_effect_center(self, PolylightEffectself) -> Any: ...
    def get_weight(self, PolylightEffectself) -> Any: ...
    def hasLight(self, *args, **kwargs): ...
    def has_light(self, PolylightEffectself, constNodePathlight) -> Any: ...
    @overload
    @staticmethod
    def make() -> Any: ...
    @overload
    @staticmethod
    def make(floatweight, intcontrib, constLPoint3feffect_center) -> Any: ...
    def removeLight(self, *args, **kwargs): ...
    def remove_light(self, PolylightEffectself, constNodePathnewlight) -> Any: ...
    def setContrib(self, *args, **kwargs): ...
    def setEffectCenter(self, *args, **kwargs): ...
    def setWeight(self, *args, **kwargs): ...
    def set_contrib(self, PolylightEffectself, intc) -> Any: ...
    def set_effect_center(self, PolylightEffectself, constLPoint3fec) -> Any: ...
    def set_weight(self, PolylightEffectself, floatw) -> Any: ...

class PolylightNode(PandaNode):
    ALINEAR: ClassVar[int] = ...
    AQUADRATIC: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    FCUSTOM: ClassVar[int] = ...
    FRANDOM: ClassVar[int] = ...
    FSIN: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, PolylightNodeself, constPolylightNodeother) -> Any: ...
    def disable(self, constPolylightNodeself) -> Any: ...
    def enable(self, constPolylightNodeself) -> Any: ...
    def flickerOff(self, *args, **kwargs): ...
    def flickerOn(self, *args, **kwargs): ...
    def flicker_off(self, constPolylightNodeself) -> Any: ...
    def flicker_on(self, constPolylightNodeself) -> Any: ...
    def getA0(self, *args, **kwargs): ...
    def getA1(self, *args, **kwargs): ...
    def getA2(self, *args, **kwargs): ...
    def getAttenuation(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColor(self, *args, **kwargs): ...
    def getColorScenegraph(self, *args, **kwargs): ...
    def getFlickerType(self, *args, **kwargs): ...
    def getFreq(self, *args, **kwargs): ...
    def getOffset(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    def getScale(self, *args, **kwargs): ...
    def getStepSize(self, *args, **kwargs): ...
    def get_a0(self, PolylightNodeself) -> Any: ...
    def get_a1(self, PolylightNodeself) -> Any: ...
    def get_a2(self, PolylightNodeself) -> Any: ...
    def get_attenuation(self, PolylightNodeself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_color(self, PolylightNodeself) -> Any: ...
    def get_color_scenegraph(self, PolylightNodeself) -> Any: ...
    def get_flicker_type(self, PolylightNodeself) -> Any: ...
    def get_freq(self, PolylightNodeself) -> Any: ...
    def get_offset(self, PolylightNodeself) -> Any: ...
    def get_pos(self, PolylightNodeself) -> Any: ...
    def get_radius(self, PolylightNodeself) -> Any: ...
    def get_scale(self, PolylightNodeself) -> Any: ...
    def get_step_size(self, PolylightNodeself) -> Any: ...
    def isEnabled(self, *args, **kwargs): ...
    def isFlickering(self, *args, **kwargs): ...
    def is_enabled(self, PolylightNodeself) -> Any: ...
    def is_flickering(self, PolylightNodeself) -> Any: ...
    def setA0(self, *args, **kwargs): ...
    def setA1(self, *args, **kwargs): ...
    def setA2(self, *args, **kwargs): ...
    def setAttenuation(self, *args, **kwargs): ...
    def setColor(self, *args, **kwargs): ...
    def setFlickerType(self, *args, **kwargs): ...
    def setFreq(self, *args, **kwargs): ...
    def setOffset(self, *args, **kwargs): ...
    def setPos(self, *args, **kwargs): ...
    def setRadius(self, *args, **kwargs): ...
    def setScale(self, *args, **kwargs): ...
    def setStepSize(self, *args, **kwargs): ...
    def set_a0(self, constPolylightNodeself, floata0) -> Any: ...
    def set_a1(self, constPolylightNodeself, floata1) -> Any: ...
    def set_a2(self, constPolylightNodeself, floata2) -> Any: ...
    def set_attenuation(self, constPolylightNodeself, inttype) -> Any: ...
    @overload
    def set_color(self, constPolylightNodeself, constLVecBase4fcolor) -> Any: ...
    @overload
    def set_color(self, constPolylightNodeself, floatr, floatg, floatb) -> Any: ...
    def set_flicker_type(self, constPolylightNodeself, inttype) -> Any: ...
    def set_freq(self, constPolylightNodeself, floatf) -> Any: ...
    def set_offset(self, constPolylightNodeself, floatoffset) -> Any: ...
    @overload
    def set_pos(self, constPolylightNodeself, constLPoint3fposition) -> Any: ...
    @overload
    def set_pos(self, constPolylightNodeself, floatx, floaty, floatz) -> Any: ...
    def set_radius(self, constPolylightNodeself, floatr) -> Any: ...
    def set_scale(self, constPolylightNodeself, floatscale) -> Any: ...
    def set_step_size(self, constPolylightNodeself, floatstep) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class PortalMask(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constBitMaskself, intindex) -> Any: ...
    def clear_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, BitMaskself, constBitMaskother) -> Any: ...
    def extract(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def floodBitsDown(self, *args, **kwargs): ...
    def floodBitsUp(self, *args, **kwargs): ...
    def floodDownInPlace(self, *args, **kwargs): ...
    def floodUpInPlace(self, *args, **kwargs): ...
    def flood_bits_down(self, BitMaskself) -> Any: ...
    def flood_bits_up(self, BitMaskself) -> Any: ...
    def flood_down_in_place(self, constBitMaskself) -> Any: ...
    def flood_up_in_place(self, constBitMaskself) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getKey(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getWord(self, *args, **kwargs): ...
    def get_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, BitMaskself) -> Any: ...
    def get_highest_on_bit(self, BitMaskself) -> Any: ...
    def get_key(self, BitMaskself) -> Any: ...
    def get_lowest_off_bit(self, BitMaskself) -> Any: ...
    def get_lowest_on_bit(self, BitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, BitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, BitMaskself) -> Any: ...
    def get_num_off_bits(self, BitMaskself) -> Any: ...
    def get_num_on_bits(self, BitMaskself) -> Any: ...
    def get_word(self, BitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, BitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, BitMaskself, constBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, BitMaskself) -> Any: ...
    def is_zero(self, BitMaskself) -> Any: ...
    def keepNextHighestBit(self, *args, **kwargs): ...
    def keepNextLowestBit(self, *args, **kwargs): ...
    @overload
    def keep_next_highest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_highest_bit(self, BitMaskself, intindex) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, constBitMaskother) -> Any: ...
    @overload
    def keep_next_lowest_bit(self, BitMaskself, intindex) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, BitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, BitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def setWord(self, *args, **kwargs): ...
    def set_bit(self, constBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def set_word(self, constBitMaskself, intvalue) -> Any: ...
    def store(self, constBitMaskself, intvalue, intlow_bit, intsize) -> Any: ...
    def write(self, BitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, BitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class PortalNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    cell_in: Incomplete
    cell_out: Incomplete
    clip_plane: Incomplete
    from_portal_mask: Incomplete
    into_portal_mask: Incomplete
    max_depth: Incomplete
    open: Incomplete
    portal_geom: Incomplete
    vertices: Incomplete
    visible: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addVertex(self, *args, **kwargs): ...
    def add_vertex(self, constPortalNodeself, constLPoint3fvertex) -> Any: ...
    def clearVertices(self, *args, **kwargs): ...
    def clear_vertices(self, constPortalNodeself) -> Any: ...
    def getCellIn(self, *args, **kwargs): ...
    def getCellOut(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFromPortalMask(self, *args, **kwargs): ...
    def getIntoPortalMask(self, *args, **kwargs): ...
    def getMaxDepth(self, *args, **kwargs): ...
    def getNumVertices(self, *args, **kwargs): ...
    def getPortalGeom(self, *args, **kwargs): ...
    def getVertex(self, *args, **kwargs): ...
    def getVertices(self, *args, **kwargs): ...
    def get_cell_in(self, PortalNodeself) -> Any: ...
    def get_cell_out(self, PortalNodeself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_from_portal_mask(self, PortalNodeself) -> Any: ...
    def get_into_portal_mask(self, PortalNodeself) -> Any: ...
    def get_max_depth(self, constPortalNodeself) -> Any: ...
    def get_num_vertices(self, PortalNodeself) -> Any: ...
    def get_portal_geom(self, PortalNodeself) -> Any: ...
    def get_vertex(self, PortalNodeself, intn) -> Any: ...
    def get_vertices(self, *args, **kwargs): ...
    def isClipPlane(self, *args, **kwargs): ...
    def isOpen(self, *args, **kwargs): ...
    def isVisible(self, *args, **kwargs): ...
    def is_clip_plane(self, constPortalNodeself) -> Any: ...
    def is_open(self, constPortalNodeself) -> Any: ...
    def is_visible(self, constPortalNodeself) -> Any: ...
    def setCellIn(self, *args, **kwargs): ...
    def setCellOut(self, *args, **kwargs): ...
    def setClipPlane(self, *args, **kwargs): ...
    def setFromPortalMask(self, *args, **kwargs): ...
    def setIntoPortalMask(self, *args, **kwargs): ...
    def setMaxDepth(self, *args, **kwargs): ...
    def setOpen(self, *args, **kwargs): ...
    def setPortalGeom(self, *args, **kwargs): ...
    def setPortalMask(self, *args, **kwargs): ...
    def setVisible(self, *args, **kwargs): ...
    def set_cell_in(self, constPortalNodeself, constNodePathcell) -> Any: ...
    def set_cell_out(self, constPortalNodeself, constNodePathcell) -> Any: ...
    def set_clip_plane(self, constPortalNodeself, boolvalue) -> Any: ...
    def set_from_portal_mask(self, constPortalNodeself, BitMaskmask) -> Any: ...
    def set_into_portal_mask(self, constPortalNodeself, BitMaskmask) -> Any: ...
    def set_max_depth(self, constPortalNodeself, intvalue) -> Any: ...
    def set_open(self, constPortalNodeself, boolvalue) -> Any: ...
    def set_portal_geom(self, constPortalNodeself, boolflag) -> Any: ...
    def set_portal_mask(self, constPortalNodeself, BitMaskmask) -> Any: ...
    def set_visible(self, constPortalNodeself, boolvalue) -> Any: ...

class PreparedGraphicsObjects(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def dequeueGeom(self, *args, **kwargs): ...
    def dequeueIndexBuffer(self, *args, **kwargs): ...
    def dequeueSampler(self, *args, **kwargs): ...
    def dequeueShader(self, *args, **kwargs): ...
    def dequeueShaderBuffer(self, *args, **kwargs): ...
    def dequeueTexture(self, *args, **kwargs): ...
    def dequeueVertexBuffer(self, *args, **kwargs): ...
    def dequeue_geom(self, constPreparedGraphicsObjectsself, Geomgeom) -> Any: ...
    def dequeue_index_buffer(self, constPreparedGraphicsObjectsself, GeomPrimitivedata) -> Any: ...
    def dequeue_sampler(self, constPreparedGraphicsObjectsself, constSamplerStatesampler) -> Any: ...
    def dequeue_shader(self, constPreparedGraphicsObjectsself, Shadershader) -> Any: ...
    def dequeue_shader_buffer(self, constPreparedGraphicsObjectsself, ShaderBufferdata) -> Any: ...
    def dequeue_texture(self, constPreparedGraphicsObjectsself, Texturetex) -> Any: ...
    def dequeue_vertex_buffer(self, constPreparedGraphicsObjectsself, GeomVertexArrayDatadata) -> Any: ...
    def enqueueGeom(self, *args, **kwargs): ...
    def enqueueIndexBuffer(self, *args, **kwargs): ...
    def enqueueSampler(self, *args, **kwargs): ...
    def enqueueShader(self, *args, **kwargs): ...
    def enqueueShaderBuffer(self, *args, **kwargs): ...
    def enqueueTexture(self, *args, **kwargs): ...
    def enqueueVertexBuffer(self, *args, **kwargs): ...
    def enqueue_geom(self, constPreparedGraphicsObjectsself, Geomgeom) -> Any: ...
    def enqueue_index_buffer(self, constPreparedGraphicsObjectsself, GeomPrimitivedata) -> Any: ...
    def enqueue_sampler(self, constPreparedGraphicsObjectsself, constSamplerStatesampler) -> Any: ...
    def enqueue_shader(self, constPreparedGraphicsObjectsself, Shadershader) -> Any: ...
    def enqueue_shader_buffer(self, constPreparedGraphicsObjectsself, ShaderBufferdata) -> Any: ...
    def enqueue_texture(self, constPreparedGraphicsObjectsself, Texturetex) -> Any: ...
    def enqueue_vertex_buffer(self, constPreparedGraphicsObjectsself, GeomVertexArrayDatadata) -> Any: ...
    def getGraphicsMemoryLimit(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumPrepared(self, *args, **kwargs): ...
    def getNumPreparedGeoms(self, *args, **kwargs): ...
    def getNumPreparedIndexBuffers(self, *args, **kwargs): ...
    def getNumPreparedSamplers(self, *args, **kwargs): ...
    def getNumPreparedShaderBuffers(self, *args, **kwargs): ...
    def getNumPreparedShaders(self, *args, **kwargs): ...
    def getNumPreparedTextures(self, *args, **kwargs): ...
    def getNumPreparedVertexBuffers(self, *args, **kwargs): ...
    def getNumQueued(self, *args, **kwargs): ...
    def getNumQueuedGeoms(self, *args, **kwargs): ...
    def getNumQueuedIndexBuffers(self, *args, **kwargs): ...
    def getNumQueuedSamplers(self, *args, **kwargs): ...
    def getNumQueuedShaderBuffers(self, *args, **kwargs): ...
    def getNumQueuedShaders(self, *args, **kwargs): ...
    def getNumQueuedTextures(self, *args, **kwargs): ...
    def getNumQueuedVertexBuffers(self, *args, **kwargs): ...
    def get_graphics_memory_limit(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_name(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_prepared(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_prepared_geoms(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_prepared_index_buffers(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_prepared_samplers(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_prepared_shader_buffers(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_prepared_shaders(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_prepared_textures(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_prepared_vertex_buffers(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_queued(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_queued_geoms(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_queued_index_buffers(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_queued_samplers(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_queued_shader_buffers(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_queued_shaders(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_queued_textures(self, PreparedGraphicsObjectsself) -> Any: ...
    def get_num_queued_vertex_buffers(self, PreparedGraphicsObjectsself) -> Any: ...
    def isGeomPrepared(self, *args, **kwargs): ...
    def isGeomQueued(self, *args, **kwargs): ...
    def isIndexBufferPrepared(self, *args, **kwargs): ...
    def isIndexBufferQueued(self, *args, **kwargs): ...
    def isSamplerPrepared(self, *args, **kwargs): ...
    def isSamplerQueued(self, *args, **kwargs): ...
    def isShaderBufferPrepared(self, *args, **kwargs): ...
    def isShaderBufferQueued(self, *args, **kwargs): ...
    def isShaderPrepared(self, *args, **kwargs): ...
    def isShaderQueued(self, *args, **kwargs): ...
    def isTexturePrepared(self, *args, **kwargs): ...
    def isTextureQueued(self, *args, **kwargs): ...
    def isVertexBufferPrepared(self, *args, **kwargs): ...
    def isVertexBufferQueued(self, *args, **kwargs): ...
    def is_geom_prepared(self, PreparedGraphicsObjectsself, constGeomgeom) -> Any: ...
    def is_geom_queued(self, PreparedGraphicsObjectsself, constGeomgeom) -> Any: ...
    def is_index_buffer_prepared(self, PreparedGraphicsObjectsself, constGeomPrimitivedata) -> Any: ...
    def is_index_buffer_queued(self, PreparedGraphicsObjectsself, constGeomPrimitivedata) -> Any: ...
    def is_sampler_prepared(self, PreparedGraphicsObjectsself, constSamplerStatesampler) -> Any: ...
    def is_sampler_queued(self, PreparedGraphicsObjectsself, constSamplerStatesampler) -> Any: ...
    def is_shader_buffer_prepared(self, PreparedGraphicsObjectsself, constShaderBufferdata) -> Any: ...
    def is_shader_buffer_queued(self, PreparedGraphicsObjectsself, constShaderBufferdata) -> Any: ...
    def is_shader_prepared(self, PreparedGraphicsObjectsself, constShadershader) -> Any: ...
    def is_shader_queued(self, PreparedGraphicsObjectsself, constShadershader) -> Any: ...
    def is_texture_prepared(self, PreparedGraphicsObjectsself, constTexturetex) -> Any: ...
    def is_texture_queued(self, PreparedGraphicsObjectsself, constTexturetex) -> Any: ...
    def is_vertex_buffer_prepared(self, PreparedGraphicsObjectsself, constGeomVertexArrayDatadata) -> Any: ...
    def is_vertex_buffer_queued(self, PreparedGraphicsObjectsself, constGeomVertexArrayDatadata) -> Any: ...
    def prepareGeomNow(self, *args, **kwargs): ...
    def prepareIndexBufferNow(self, *args, **kwargs): ...
    def prepareShaderBufferNow(self, *args, **kwargs): ...
    def prepareShaderNow(self, *args, **kwargs): ...
    def prepareTextureNow(self, *args, **kwargs): ...
    def prepareVertexBufferNow(self, *args, **kwargs): ...
    def prepare_geom_now(self, constPreparedGraphicsObjectsself, Geomgeom, GraphicsStateGuardianBasegsg) -> Any: ...
    def prepare_index_buffer_now(
        self, constPreparedGraphicsObjectsself, GeomPrimitivedata, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    def prepare_shader_buffer_now(
        self, constPreparedGraphicsObjectsself, ShaderBufferdata, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    def prepare_shader_now(
        self, constPreparedGraphicsObjectsself, Shadershader, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    def prepare_texture_now(
        self, constPreparedGraphicsObjectsself, Texturetex, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    def prepare_vertex_buffer_now(
        self, constPreparedGraphicsObjectsself, GeomVertexArrayDatadata, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    def releaseAll(self, *args, **kwargs): ...
    def releaseAllGeoms(self, *args, **kwargs): ...
    def releaseAllIndexBuffers(self, *args, **kwargs): ...
    def releaseAllSamplers(self, *args, **kwargs): ...
    def releaseAllShaderBuffers(self, *args, **kwargs): ...
    def releaseAllShaders(self, *args, **kwargs): ...
    def releaseAllTextures(self, *args, **kwargs): ...
    def releaseAllVertexBuffers(self, *args, **kwargs): ...
    def releaseGeom(self, *args, **kwargs): ...
    def releaseIndexBuffer(self, *args, **kwargs): ...
    def releaseSampler(self, *args, **kwargs): ...
    def releaseShader(self, *args, **kwargs): ...
    def releaseShaderBuffer(self, *args, **kwargs): ...
    def releaseTexture(self, *args, **kwargs): ...
    def releaseVertexBuffer(self, *args, **kwargs): ...
    def release_all(self, constPreparedGraphicsObjectsself) -> Any: ...
    def release_all_geoms(self, constPreparedGraphicsObjectsself) -> Any: ...
    def release_all_index_buffers(self, constPreparedGraphicsObjectsself) -> Any: ...
    def release_all_samplers(self, constPreparedGraphicsObjectsself) -> Any: ...
    def release_all_shader_buffers(self, constPreparedGraphicsObjectsself) -> Any: ...
    def release_all_shaders(self, constPreparedGraphicsObjectsself) -> Any: ...
    def release_all_textures(self, constPreparedGraphicsObjectsself) -> Any: ...
    def release_all_vertex_buffers(self, constPreparedGraphicsObjectsself) -> Any: ...
    def release_geom(self, constPreparedGraphicsObjectsself, GeomContextgc) -> Any: ...
    def release_index_buffer(self, constPreparedGraphicsObjectsself, IndexBufferContextibc) -> Any: ...
    def release_sampler(self, constPreparedGraphicsObjectsself, constSamplerStatesampler) -> Any: ...
    def release_shader(self, constPreparedGraphicsObjectsself, ShaderContextsc) -> Any: ...
    def release_shader_buffer(self, constPreparedGraphicsObjectsself, BufferContextbc) -> Any: ...
    @overload
    def release_texture(self, constPreparedGraphicsObjectsself, Texturetex) -> Any: ...
    @overload
    def release_texture(self, constPreparedGraphicsObjectsself, TextureContexttc) -> Any: ...
    def release_vertex_buffer(self, constPreparedGraphicsObjectsself, VertexBufferContextvbc) -> Any: ...
    def setGraphicsMemoryLimit(self, *args, **kwargs): ...
    def set_graphics_memory_limit(self, constPreparedGraphicsObjectsself, intlimit) -> Any: ...
    def showGraphicsMemoryLru(self, *args, **kwargs): ...
    def showResidencyTrackers(self, *args, **kwargs): ...
    def show_graphics_memory_lru(self, PreparedGraphicsObjectsself, ostreamout) -> Any: ...
    def show_residency_trackers(self, PreparedGraphicsObjectsself, ostreamout) -> Any: ...

class PythonCallbackObject(CallbackObject):
    DtoolClassDict: ClassVar[dict] = ...
    function: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFunction(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_function(self, constPythonCallbackObjectself) -> Any: ...
    def setFunction(self, *args, **kwargs): ...
    def set_function(self, constPythonCallbackObjectself, objectfunction) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __reduce__(self, PythonCallbackObjectself) -> Any: ...

class PythonTask(AsyncTask):
    DtoolClassDict: ClassVar[dict] = ...
    delayTime: Incomplete
    delay_time: Incomplete
    frame: Incomplete
    time: Incomplete
    wakeTime: Incomplete
    wake_time: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getArgs(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFunction(self, *args, **kwargs): ...
    def getOwner(self, *args, **kwargs): ...
    def getUponDeath(self, *args, **kwargs): ...
    def get_args(self, constPythonTaskself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_function(self, constPythonTaskself) -> Any: ...
    def get_owner(self, PythonTaskself) -> Any: ...
    def get_upon_death(self, constPythonTaskself) -> Any: ...
    def setArgs(self, *args, **kwargs): ...
    def setFunction(self, *args, **kwargs): ...
    def setOwner(self, *args, **kwargs): ...
    def setResult(self, *args, **kwargs): ...
    def setUponDeath(self, *args, **kwargs): ...
    def set_args(self, constPythonTaskself, objectargs, boolappend_task) -> Any: ...
    def set_function(self, constPythonTaskself, objectfunction) -> Any: ...
    def set_owner(self, constPythonTaskself, objectowner) -> Any: ...
    def set_result(self, constPythonTaskself, objectresult) -> Any: ...
    def set_upon_death(self, constPythonTaskself, objectupon_death) -> Any: ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...

class PythonThread(Thread):
    DtoolClassDict: ClassVar[dict] = ...
    args: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def join(self, constPythonThreadself) -> Any: ...

class QuadBitMaskNative(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constDoubleBitMaskself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constDoubleBitMaskself, intindex) -> Any: ...
    def clear_range(self, constDoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, DoubleBitMaskself, constDoubleBitMaskother) -> Any: ...
    def extract(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def get_bit(self, DoubleBitMaskself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_off_bit(self, DoubleBitMaskself) -> Any: ...
    def get_highest_on_bit(self, DoubleBitMaskself) -> Any: ...
    def get_lowest_off_bit(self, DoubleBitMaskself) -> Any: ...
    def get_lowest_on_bit(self, DoubleBitMaskself) -> Any: ...
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, DoubleBitMaskself, intlow_bit) -> Any: ...
    def get_num_bits(self, DoubleBitMaskself) -> Any: ...
    def get_num_off_bits(self, DoubleBitMaskself) -> Any: ...
    def get_num_on_bits(self, DoubleBitMaskself) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, DoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, DoubleBitMaskself, constDoubleBitMaskother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constDoubleBitMaskself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, DoubleBitMaskself) -> Any: ...
    def is_zero(self, DoubleBitMaskself) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, DoubleBitMaskself, ostreamout) -> Any: ...
    def outputBinary(self, *args, **kwargs): ...
    def outputHex(self, *args, **kwargs): ...
    def output_binary(self, DoubleBitMaskself, ostreamout, intspaces_every) -> Any: ...
    def output_hex(self, DoubleBitMaskself, ostreamout, intspaces_every) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def set_bit(self, constDoubleBitMaskself, intindex) -> Any: ...
    def set_bit_to(self, constDoubleBitMaskself, intindex, boolvalue) -> Any: ...
    def set_range(self, constDoubleBitMaskself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constDoubleBitMaskself, boolvalue, intlow_bit, intsize) -> Any: ...
    def store(self, constDoubleBitMaskself, longvalue, intlow_bit, intsize) -> Any: ...
    def write(self, DoubleBitMaskself, ostreamout, intindent_level) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __int__(self) -> int: ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self, DoubleBitMaskself) -> Any: ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class Quat(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def almostEqual(self, *args, **kwargs): ...
    def almostSameDirection(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    @overload
    def almost_equal(self, LQuaternionfself, constLQuaternionfother, floatthreshold) -> Any: ...
    def almost_same_direction(self, LQuaternionfself, constLQuaternionfother, floatthreshold) -> Any: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    def angle_rad(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    def conjugate(self, LQuaternionfself) -> Any: ...
    def conjugateFrom(self, *args, **kwargs): ...
    def conjugateInPlace(self, *args, **kwargs): ...
    def conjugate_from(self, constLQuaternionfself, constLQuaternionfother) -> Any: ...
    def conjugate_in_place(self, constLQuaternionfself) -> Any: ...
    def extractToMatrix(self, *args, **kwargs): ...
    @overload
    def extract_to_matrix(self, LQuaternionfself, LMatrix4fm) -> Any: ...
    @overload
    def extract_to_matrix(self, LQuaternionfself, LMatrix3fm) -> Any: ...
    def getAngle(self, *args, **kwargs): ...
    def getAngleRad(self, *args, **kwargs): ...
    def getAxis(self, *args, **kwargs): ...
    def getAxisNormalized(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getForward(self, *args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getI(self, *args, **kwargs): ...
    def getJ(self, *args, **kwargs): ...
    def getK(self, *args, **kwargs): ...
    def getR(self, *args, **kwargs): ...
    def getRight(self, *args, **kwargs): ...
    def getUp(self, *args, **kwargs): ...
    def get_angle(self, LQuaternionfself) -> Any: ...
    def get_angle_rad(self, LQuaternionfself) -> Any: ...
    def get_axis(self, LQuaternionfself) -> Any: ...
    def get_axis_normalized(self, LQuaternionfself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_forward(self, LQuaternionfself, intcs) -> Any: ...
    def get_hpr(self, LQuaternionfself, intcs) -> Any: ...
    def get_i(self, LQuaternionfself) -> Any: ...
    def get_j(self, LQuaternionfself) -> Any: ...
    def get_k(self, LQuaternionfself) -> Any: ...
    def get_r(self, LQuaternionfself) -> Any: ...
    def get_right(self, LQuaternionfself, intcs) -> Any: ...
    def get_up(self, LQuaternionfself, intcs) -> Any: ...
    @staticmethod
    def identQuat(*args, **kwargs): ...
    @staticmethod
    def ident_quat() -> Any: ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_from(self, constLQuaternionfself, constLQuaternionfother) -> Any: ...
    def invert_in_place(self, constLQuaternionfself) -> Any: ...
    def isAlmostIdentity(self, *args, **kwargs): ...
    def isIdentity(self, *args, **kwargs): ...
    def isSameDirection(self, *args, **kwargs): ...
    def is_almost_identity(self, LQuaternionfself, floattolerance) -> Any: ...
    def is_identity(self, LQuaternionfself) -> Any: ...
    def is_same_direction(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    def multiply(self, LQuaternionfself, constLQuaternionfrhs) -> Any: ...
    def normalize(self, constLQuaternionfself) -> Any: ...
    def output(self, LQuaternionfself, ostreamparam0) -> Any: ...
    @staticmethod
    def pureImaginary(*args, **kwargs): ...
    @staticmethod
    def pure_imaginary(constLVector3fv) -> Any: ...
    def setFromAxisAngle(self, *args, **kwargs): ...
    def setFromAxisAngleRad(self, *args, **kwargs): ...
    def setFromMatrix(self, *args, **kwargs): ...
    def setHpr(self, *args, **kwargs): ...
    def setI(self, *args, **kwargs): ...
    def setJ(self, *args, **kwargs): ...
    def setK(self, *args, **kwargs): ...
    def setR(self, *args, **kwargs): ...
    def set_from_axis_angle(self, constLQuaternionfself, floatangle_deg, constLVector3faxis) -> Any: ...
    def set_from_axis_angle_rad(self, constLQuaternionfself, floatangle_rad, constLVector3faxis) -> Any: ...
    @overload
    def set_from_matrix(self, constLQuaternionfself, constLMatrix4fm) -> Any: ...
    @overload
    def set_from_matrix(self, constLQuaternionfself, constLMatrix3fm) -> Any: ...
    def set_hpr(self, constLQuaternionfself, constLVecBase3fhpr, intcs) -> Any: ...
    def set_i(self, constLQuaternionfself, floati) -> Any: ...
    def set_j(self, constLQuaternionfself, floatj) -> Any: ...
    def set_k(self, constLQuaternionfself, floatk) -> Any: ...
    def set_r(self, constLQuaternionfself, floatr) -> Any: ...
    @overload
    def xform(self, LQuaternionfself, constLVecBase4fv) -> Any: ...
    @overload
    def xform(self, LQuaternionfself, constLVecBase3fv) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class QuatD(LVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def almostEqual(self, *args, **kwargs): ...
    def almostSameDirection(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LQuaterniondself, constLQuaterniondother) -> Any: ...
    @overload
    def almost_equal(self, LQuaterniondself, constLQuaterniondother, doublethreshold) -> Any: ...
    def almost_same_direction(self, LQuaterniondself, constLQuaterniondother, doublethreshold) -> Any: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LQuaterniondself, constLQuaterniondother) -> Any: ...
    def angle_rad(self, LQuaterniondself, constLQuaterniondother) -> Any: ...
    def conjugate(self, LQuaterniondself) -> Any: ...
    def conjugateFrom(self, *args, **kwargs): ...
    def conjugateInPlace(self, *args, **kwargs): ...
    def conjugate_from(self, constLQuaterniondself, constLQuaterniondother) -> Any: ...
    def conjugate_in_place(self, constLQuaterniondself) -> Any: ...
    def extractToMatrix(self, *args, **kwargs): ...
    @overload
    def extract_to_matrix(self, LQuaterniondself, LMatrix4dm) -> Any: ...
    @overload
    def extract_to_matrix(self, LQuaterniondself, LMatrix3dm) -> Any: ...
    def getAngle(self, *args, **kwargs): ...
    def getAngleRad(self, *args, **kwargs): ...
    def getAxis(self, *args, **kwargs): ...
    def getAxisNormalized(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getForward(self, *args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getI(self, *args, **kwargs): ...
    def getJ(self, *args, **kwargs): ...
    def getK(self, *args, **kwargs): ...
    def getR(self, *args, **kwargs): ...
    def getRight(self, *args, **kwargs): ...
    def getUp(self, *args, **kwargs): ...
    def get_angle(self, LQuaterniondself) -> Any: ...
    def get_angle_rad(self, LQuaterniondself) -> Any: ...
    def get_axis(self, LQuaterniondself) -> Any: ...
    def get_axis_normalized(self, LQuaterniondself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_forward(self, LQuaterniondself, intcs) -> Any: ...
    def get_hpr(self, LQuaterniondself, intcs) -> Any: ...
    def get_i(self, LQuaterniondself) -> Any: ...
    def get_j(self, LQuaterniondself) -> Any: ...
    def get_k(self, LQuaterniondself) -> Any: ...
    def get_r(self, LQuaterniondself) -> Any: ...
    def get_right(self, LQuaterniondself, intcs) -> Any: ...
    def get_up(self, LQuaterniondself, intcs) -> Any: ...
    @staticmethod
    def identQuat(*args, **kwargs): ...
    @staticmethod
    def ident_quat() -> Any: ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_from(self, constLQuaterniondself, constLQuaterniondother) -> Any: ...
    def invert_in_place(self, constLQuaterniondself) -> Any: ...
    def isAlmostIdentity(self, *args, **kwargs): ...
    def isIdentity(self, *args, **kwargs): ...
    def isSameDirection(self, *args, **kwargs): ...
    def is_almost_identity(self, LQuaterniondself, doubletolerance) -> Any: ...
    def is_identity(self, LQuaterniondself) -> Any: ...
    def is_same_direction(self, LQuaterniondself, constLQuaterniondother) -> Any: ...
    def multiply(self, LQuaterniondself, constLQuaterniondrhs) -> Any: ...
    def normalize(self, constLQuaterniondself) -> Any: ...
    def output(self, LQuaterniondself, ostreamparam0) -> Any: ...
    @staticmethod
    def pureImaginary(*args, **kwargs): ...
    @staticmethod
    def pure_imaginary(constLVector3dv) -> Any: ...
    def setFromAxisAngle(self, *args, **kwargs): ...
    def setFromAxisAngleRad(self, *args, **kwargs): ...
    def setFromMatrix(self, *args, **kwargs): ...
    def setHpr(self, *args, **kwargs): ...
    def setI(self, *args, **kwargs): ...
    def setJ(self, *args, **kwargs): ...
    def setK(self, *args, **kwargs): ...
    def setR(self, *args, **kwargs): ...
    def set_from_axis_angle(self, constLQuaterniondself, doubleangle_deg, constLVector3daxis) -> Any: ...
    def set_from_axis_angle_rad(self, constLQuaterniondself, doubleangle_rad, constLVector3daxis) -> Any: ...
    @overload
    def set_from_matrix(self, constLQuaterniondself, constLMatrix4dm) -> Any: ...
    @overload
    def set_from_matrix(self, constLQuaterniondself, constLMatrix3dm) -> Any: ...
    def set_hpr(self, constLQuaterniondself, constLVecBase3dhpr, intcs) -> Any: ...
    def set_i(self, constLQuaterniondself, doublei) -> Any: ...
    def set_j(self, constLQuaterniondself, doublej) -> Any: ...
    def set_k(self, constLQuaterniondself, doublek) -> Any: ...
    def set_r(self, constLQuaterniondself, doubler) -> Any: ...
    @overload
    def xform(self, LQuaterniondself, constLVecBase4dv) -> Any: ...
    @overload
    def xform(self, LQuaterniondself, constLVecBase3dv) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class QuatF(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def almostEqual(self, *args, **kwargs): ...
    def almostSameDirection(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    @overload
    def almost_equal(self, LQuaternionfself, constLQuaternionfother, floatthreshold) -> Any: ...
    def almost_same_direction(self, LQuaternionfself, constLQuaternionfother, floatthreshold) -> Any: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    def angle_rad(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    def conjugate(self, LQuaternionfself) -> Any: ...
    def conjugateFrom(self, *args, **kwargs): ...
    def conjugateInPlace(self, *args, **kwargs): ...
    def conjugate_from(self, constLQuaternionfself, constLQuaternionfother) -> Any: ...
    def conjugate_in_place(self, constLQuaternionfself) -> Any: ...
    def extractToMatrix(self, *args, **kwargs): ...
    @overload
    def extract_to_matrix(self, LQuaternionfself, LMatrix4fm) -> Any: ...
    @overload
    def extract_to_matrix(self, LQuaternionfself, LMatrix3fm) -> Any: ...
    def getAngle(self, *args, **kwargs): ...
    def getAngleRad(self, *args, **kwargs): ...
    def getAxis(self, *args, **kwargs): ...
    def getAxisNormalized(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getForward(self, *args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getI(self, *args, **kwargs): ...
    def getJ(self, *args, **kwargs): ...
    def getK(self, *args, **kwargs): ...
    def getR(self, *args, **kwargs): ...
    def getRight(self, *args, **kwargs): ...
    def getUp(self, *args, **kwargs): ...
    def get_angle(self, LQuaternionfself) -> Any: ...
    def get_angle_rad(self, LQuaternionfself) -> Any: ...
    def get_axis(self, LQuaternionfself) -> Any: ...
    def get_axis_normalized(self, LQuaternionfself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_forward(self, LQuaternionfself, intcs) -> Any: ...
    def get_hpr(self, LQuaternionfself, intcs) -> Any: ...
    def get_i(self, LQuaternionfself) -> Any: ...
    def get_j(self, LQuaternionfself) -> Any: ...
    def get_k(self, LQuaternionfself) -> Any: ...
    def get_r(self, LQuaternionfself) -> Any: ...
    def get_right(self, LQuaternionfself, intcs) -> Any: ...
    def get_up(self, LQuaternionfself, intcs) -> Any: ...
    @staticmethod
    def identQuat(*args, **kwargs): ...
    @staticmethod
    def ident_quat() -> Any: ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_from(self, constLQuaternionfself, constLQuaternionfother) -> Any: ...
    def invert_in_place(self, constLQuaternionfself) -> Any: ...
    def isAlmostIdentity(self, *args, **kwargs): ...
    def isIdentity(self, *args, **kwargs): ...
    def isSameDirection(self, *args, **kwargs): ...
    def is_almost_identity(self, LQuaternionfself, floattolerance) -> Any: ...
    def is_identity(self, LQuaternionfself) -> Any: ...
    def is_same_direction(self, LQuaternionfself, constLQuaternionfother) -> Any: ...
    def multiply(self, LQuaternionfself, constLQuaternionfrhs) -> Any: ...
    def normalize(self, constLQuaternionfself) -> Any: ...
    def output(self, LQuaternionfself, ostreamparam0) -> Any: ...
    @staticmethod
    def pureImaginary(*args, **kwargs): ...
    @staticmethod
    def pure_imaginary(constLVector3fv) -> Any: ...
    def setFromAxisAngle(self, *args, **kwargs): ...
    def setFromAxisAngleRad(self, *args, **kwargs): ...
    def setFromMatrix(self, *args, **kwargs): ...
    def setHpr(self, *args, **kwargs): ...
    def setI(self, *args, **kwargs): ...
    def setJ(self, *args, **kwargs): ...
    def setK(self, *args, **kwargs): ...
    def setR(self, *args, **kwargs): ...
    def set_from_axis_angle(self, constLQuaternionfself, floatangle_deg, constLVector3faxis) -> Any: ...
    def set_from_axis_angle_rad(self, constLQuaternionfself, floatangle_rad, constLVector3faxis) -> Any: ...
    @overload
    def set_from_matrix(self, constLQuaternionfself, constLMatrix4fm) -> Any: ...
    @overload
    def set_from_matrix(self, constLQuaternionfself, constLMatrix3fm) -> Any: ...
    def set_hpr(self, constLQuaternionfself, constLVecBase3fhpr, intcs) -> Any: ...
    def set_i(self, constLQuaternionfself, floati) -> Any: ...
    def set_j(self, constLQuaternionfself, floatj) -> Any: ...
    def set_k(self, constLQuaternionfself, floatk) -> Any: ...
    def set_r(self, constLQuaternionfself, floatr) -> Any: ...
    @overload
    def xform(self, LQuaternionfself, constLVecBase4fv) -> Any: ...
    @overload
    def xform(self, LQuaternionfself, constLVecBase3fv) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __imul__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Ramfile(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constRamfileself) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getDataSize(self, *args, **kwargs): ...
    def get_data(self, Ramfileself) -> Any: ...
    def get_data_size(self, Ramfileself) -> Any: ...
    def read(self, constRamfileself, intlength) -> Any: ...
    def readline(self, constRamfileself) -> Any: ...
    def readlines(self, constRamfileself) -> Any: ...
    def seek(self, constRamfileself, intpos) -> Any: ...
    def tell(self, Ramfileself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Randomizer(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constRandomizerself, constRandomizercopy) -> Any: ...
    @staticmethod
    def getNextSeed(*args, **kwargs): ...
    def getSeed(self, *args, **kwargs): ...
    @staticmethod
    def get_next_seed() -> Any: ...
    def get_seed(self, constRandomizerself) -> Any: ...
    def randomInt(self, *args, **kwargs): ...
    def randomReal(self, *args, **kwargs): ...
    def randomRealUnit(self, *args, **kwargs): ...
    def random_int(self, constRandomizerself, intrange) -> Any: ...
    def random_real(self, constRandomizerself, doublerange) -> Any: ...
    def random_real_unit(self, constRandomizerself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ReMutex(ReMutexDirect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Enter(self, *args, **kwargs): ...
    def Exit(self, *args, **kwargs): ...
    def acquire(self, ReMutexself, boolblocking) -> Any: ...
    def __enter__(self, constReMutexself) -> Any: ...
    def __exit__(self, constReMutexself, objectparam0, objectparam1, objectparam2) -> Any: ...

class ReMutexDirect(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def acquire(self, ReMutexDirectself) -> Any: ...
    @overload
    def acquire(self, ReMutexDirectself, Threadcurrent_thread) -> Any: ...
    @overload
    def acquire(self) -> Any: ...
    def clearName(self, *args, **kwargs): ...
    def clear_name(self, constReMutexDirectself) -> Any: ...
    def debugIsLocked(self, *args, **kwargs): ...
    def debug_is_locked(self, ReMutexDirectself) -> Any: ...
    def elevateLock(self, *args, **kwargs): ...
    def elevate_lock(self, ReMutexDirectself) -> Any: ...
    def getName(self, *args, **kwargs): ...
    def get_name(self, ReMutexDirectself) -> Any: ...
    def hasName(self, *args, **kwargs): ...
    def has_name(self, ReMutexDirectself) -> Any: ...
    def output(self, ReMutexDirectself, ostreamout) -> Any: ...
    def release(self, ReMutexDirectself) -> Any: ...
    def setName(self, *args, **kwargs): ...
    def set_name(self, constReMutexDirectself, strname) -> Any: ...
    def tryAcquire(self, *args, **kwargs): ...
    @overload
    def try_acquire(self, ReMutexDirectself) -> Any: ...
    @overload
    def try_acquire(self, ReMutexDirectself, Threadcurrent_thread) -> Any: ...

class RecorderBase(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def isPlaying(self, *args, **kwargs): ...
    def isRecording(self, *args, **kwargs): ...
    def is_playing(self, RecorderBaseself) -> Any: ...
    def is_recording(self, RecorderBaseself) -> Any: ...

class RecorderController(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addRecorder(self, *args, **kwargs): ...
    def add_recorder(self, constRecorderControllerself, strname, RecorderBaserecorder) -> Any: ...
    def beginPlayback(self, *args, **kwargs): ...
    def beginRecord(self, *args, **kwargs): ...
    def begin_playback(self, constRecorderControllerself, constFilenamefilename) -> Any: ...
    def begin_record(self, constRecorderControllerself, constFilenamefilename) -> Any: ...
    def close(self, constRecorderControllerself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getClockOffset(self, *args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getFrameOffset(self, *args, **kwargs): ...
    def getFrameTie(self, *args, **kwargs): ...
    def getRandomSeed(self, *args, **kwargs): ...
    def getRecorder(self, *args, **kwargs): ...
    def getStartTime(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_clock_offset(self, RecorderControllerself) -> Any: ...
    def get_filename(self, RecorderControllerself) -> Any: ...
    def get_frame_offset(self, RecorderControllerself) -> Any: ...
    def get_frame_tie(self, RecorderControllerself) -> Any: ...
    def get_random_seed(self, RecorderControllerself) -> Any: ...
    @overload
    def get_recorder(self, RecorderControllerself, strname) -> Any: ...
    @overload
    def get_recorder(self) -> Any: ...
    def get_start_time(self, RecorderControllerself) -> Any: ...
    def hasRecorder(self, *args, **kwargs): ...
    def has_recorder(self, RecorderControllerself, strname) -> Any: ...
    def isError(self, *args, **kwargs): ...
    def isOpen(self, *args, **kwargs): ...
    def isPlaying(self, *args, **kwargs): ...
    def isRecording(self, *args, **kwargs): ...
    def is_error(self, constRecorderControllerself) -> Any: ...
    def is_open(self, RecorderControllerself) -> Any: ...
    def is_playing(self, RecorderControllerself) -> Any: ...
    def is_recording(self, RecorderControllerself) -> Any: ...
    def playFrame(self, *args, **kwargs): ...
    def play_frame(self, constRecorderControllerself) -> Any: ...
    def recordFrame(self, *args, **kwargs): ...
    def record_frame(self, constRecorderControllerself) -> Any: ...
    def removeRecorder(self, *args, **kwargs): ...
    def remove_recorder(self, constRecorderControllerself, strname) -> Any: ...
    def setFrameTie(self, *args, **kwargs): ...
    def setRandomSeed(self, *args, **kwargs): ...
    def set_frame_tie(self, constRecorderControllerself, boolframe_tie) -> Any: ...
    def set_random_seed(self, constRecorderControllerself, intrandom_seed) -> Any: ...

class RectangleLight(LightLensNode):
    DtoolClassDict: ClassVar[dict] = ...
    max_distance: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMaxDistance(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_max_distance(self, RectangleLightself) -> Any: ...
    def setMaxDistance(self, *args, **kwargs): ...
    def set_max_distance(self, constRectangleLightself, floatmax_distance) -> Any: ...

class ReferenceCount(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    ref_count: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getRefCount(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_ref_count(self, ReferenceCountself) -> Any: ...
    @overload
    def ref(self, ReferenceCountself) -> Any: ...
    @overload
    def ref(self) -> Any: ...
    def testRefCountIntegrity(self, *args, **kwargs): ...
    def testRefCountNonzero(self, *args, **kwargs): ...
    def test_ref_count_integrity(self, ReferenceCountself) -> Any: ...
    def test_ref_count_nonzero(self, ReferenceCountself) -> Any: ...
    @overload
    def unref(self, ReferenceCountself) -> Any: ...
    @overload
    def unref(self) -> Any: ...
    @overload
    def unref(self) -> Any: ...

class RenderAttrib(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    MAlways: ClassVar[int] = ...
    MConstant: ClassVar[int] = ...
    MEqual: ClassVar[int] = ...
    MEyeCubeMap: ClassVar[int] = ...
    MEyeNormal: ClassVar[int] = ...
    MEyePosition: ClassVar[int] = ...
    MEyeSphereMap: ClassVar[int] = ...
    MGreater: ClassVar[int] = ...
    MGreaterEqual: ClassVar[int] = ...
    MLess: ClassVar[int] = ...
    MLessEqual: ClassVar[int] = ...
    MNever: ClassVar[int] = ...
    MNone: ClassVar[int] = ...
    MNotEqual: ClassVar[int] = ...
    MOff: ClassVar[int] = ...
    MPointSprite: ClassVar[int] = ...
    MUnused: ClassVar[int] = ...
    MUnused2: ClassVar[int] = ...
    MWorldCubeMap: ClassVar[int] = ...
    MWorldNormal: ClassVar[int] = ...
    MWorldPosition: ClassVar[int] = ...
    M_always: ClassVar[int] = ...
    M_constant: ClassVar[int] = ...
    M_equal: ClassVar[int] = ...
    M_eye_cube_map: ClassVar[int] = ...
    M_eye_normal: ClassVar[int] = ...
    M_eye_position: ClassVar[int] = ...
    M_eye_sphere_map: ClassVar[int] = ...
    M_greater: ClassVar[int] = ...
    M_greater_equal: ClassVar[int] = ...
    M_less: ClassVar[int] = ...
    M_less_equal: ClassVar[int] = ...
    M_never: ClassVar[int] = ...
    M_none: ClassVar[int] = ...
    M_not_equal: ClassVar[int] = ...
    M_off: ClassVar[int] = ...
    M_point_sprite: ClassVar[int] = ...
    M_unused: ClassVar[int] = ...
    M_unused2: ClassVar[int] = ...
    M_world_cube_map: ClassVar[int] = ...
    M_world_normal: ClassVar[int] = ...
    M_world_position: ClassVar[int] = ...
    slot: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, RenderAttribself, constRenderAttribother) -> Any: ...
    def compose(self, RenderAttribself, constRenderAttribother) -> Any: ...
    @staticmethod
    def garbageCollect(*args, **kwargs): ...
    @overload
    @staticmethod
    def garbage_collect() -> Any: ...
    @overload
    @staticmethod
    def garbage_collect() -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumAttribs(*args, **kwargs): ...
    def getSlot(self, *args, **kwargs): ...
    def getUnique(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_hash(self, RenderAttribself) -> Any: ...
    @staticmethod
    def get_num_attribs() -> Any: ...
    def get_slot(self, RenderAttribself) -> Any: ...
    def get_unique(self, RenderAttribself) -> Any: ...
    def invertCompose(self, *args, **kwargs): ...
    def invert_compose(self, RenderAttribself, constRenderAttribother) -> Any: ...
    @staticmethod
    def listAttribs(*args, **kwargs): ...
    @staticmethod
    def list_attribs(ostreamout) -> Any: ...
    def lowerAttribCanOverride(self, *args, **kwargs): ...
    def lower_attrib_can_override(self, RenderAttribself) -> Any: ...
    def output(self, RenderAttribself, ostreamout) -> Any: ...
    @staticmethod
    def validateAttribs(*args, **kwargs): ...
    @staticmethod
    def validate_attribs() -> Any: ...
    def write(self, RenderAttribself, ostreamout, intindent_level) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class RenderAttribRegistry(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    @staticmethod
    def getMaxSlots(*args, **kwargs): ...
    def getNumSlots(self, *args, **kwargs): ...
    def getNumSortedSlots(self, *args, **kwargs): ...
    def getSlot(self, *args, **kwargs): ...
    def getSlotDefault(self, *args, **kwargs): ...
    def getSlotSort(self, *args, **kwargs): ...
    def getSlotType(self, *args, **kwargs): ...
    def getSortedSlot(self, *args, **kwargs): ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    @staticmethod
    def get_max_slots() -> Any: ...
    def get_num_slots(self, RenderAttribRegistryself) -> Any: ...
    def get_num_sorted_slots(self, RenderAttribRegistryself) -> Any: ...
    def get_slot(self, RenderAttribRegistryself, TypeHandletype_handle) -> Any: ...
    def get_slot_default(self, RenderAttribRegistryself, intslot) -> Any: ...
    def get_slot_sort(self, RenderAttribRegistryself, intslot) -> Any: ...
    def get_slot_type(self, RenderAttribRegistryself, intslot) -> Any: ...
    def get_sorted_slot(self, RenderAttribRegistryself, intn) -> Any: ...
    def setSlotSort(self, *args, **kwargs): ...
    def set_slot_sort(self, constRenderAttribRegistryself, intslot, intsort) -> Any: ...

class RenderEffect(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, RenderEffectself, constRenderEffectother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getNumEffects(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_num_effects() -> Any: ...
    @staticmethod
    def listEffects(*args, **kwargs): ...
    @staticmethod
    def list_effects(ostreamout) -> Any: ...
    def output(self, RenderEffectself, ostreamout) -> Any: ...
    @staticmethod
    def validateEffects(*args, **kwargs): ...
    @staticmethod
    def validate_effects() -> Any: ...
    def write(self, RenderEffectself, ostreamout, intindent_level) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class RenderEffects(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addEffect(self, *args, **kwargs): ...
    def add_effect(self, RenderEffectsself, constRenderEffecteffect) -> Any: ...
    def findEffect(self, *args, **kwargs): ...
    def find_effect(self, RenderEffectsself, TypeHandletype) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getEffect(self, *args, **kwargs): ...
    def getNumEffects(self, *args, **kwargs): ...
    @staticmethod
    def getNumStates(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_effect(self, RenderEffectsself, TypeHandletype) -> Any: ...
    @overload
    def get_effect(self, RenderEffectsself, intn) -> Any: ...
    def get_num_effects(self, RenderEffectsself) -> Any: ...
    @staticmethod
    def get_num_states() -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, RenderEffectsself) -> Any: ...
    @staticmethod
    def listStates(*args, **kwargs): ...
    @staticmethod
    def list_states(ostreamout) -> Any: ...
    @overload
    @staticmethod
    def make(constRenderEffecteffect) -> Any: ...
    @overload
    @staticmethod
    def make(constRenderEffecteffect1, constRenderEffecteffect2) -> Any: ...
    @overload
    @staticmethod
    def make(constRenderEffecteffect1, constRenderEffecteffect2, constRenderEffecteffect3) -> Any: ...
    @overload
    @staticmethod
    def make(
        constRenderEffecteffect1, constRenderEffecteffect2, constRenderEffecteffect3, constRenderEffecteffect4
    ) -> Any: ...
    @staticmethod
    def makeEmpty(*args, **kwargs): ...
    @staticmethod
    def make_empty() -> Any: ...
    def output(self, RenderEffectsself, ostreamout) -> Any: ...
    def removeEffect(self, *args, **kwargs): ...
    def remove_effect(self, RenderEffectsself, TypeHandletype) -> Any: ...
    @staticmethod
    def validateStates(*args, **kwargs): ...
    @staticmethod
    def validate_states() -> Any: ...
    def write(self, RenderEffectsself, ostreamout, intindent_level) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class RenderModeAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    MFilled: ClassVar[int] = ...
    MFilledFlat: ClassVar[int] = ...
    MFilledWireframe: ClassVar[int] = ...
    MPoint: ClassVar[int] = ...
    MUnchanged: ClassVar[int] = ...
    MWireframe: ClassVar[int] = ...
    M_filled: ClassVar[int] = ...
    M_filled_flat: ClassVar[int] = ...
    M_filled_wireframe: ClassVar[int] = ...
    M_point: ClassVar[int] = ...
    M_unchanged: ClassVar[int] = ...
    M_wireframe: ClassVar[int] = ...
    class_slot: Incomplete
    mode: Incomplete
    perspective: Incomplete
    thickness: Incomplete
    wireframe_color: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getGeomRendering(self, *args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    def getPerspective(self, *args, **kwargs): ...
    def getThickness(self, *args, **kwargs): ...
    def getWireframeColor(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_geom_rendering(self, RenderModeAttribself, intgeom_rendering) -> Any: ...
    def get_mode(self, RenderModeAttribself) -> Any: ...
    def get_perspective(self, RenderModeAttribself) -> Any: ...
    def get_thickness(self, RenderModeAttribself) -> Any: ...
    def get_wireframe_color(self, RenderModeAttribself) -> Any: ...
    @staticmethod
    def make(intmode, floatthickness, boolperspective, constLVecBase4fwireframe_color) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class RenderState(NodeCachedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    attribs: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addAttrib(self, *args, **kwargs): ...
    def add_attrib(self, RenderStateself, constRenderAttribattrib, intoverride) -> Any: ...
    def adjustAllPriorities(self, *args, **kwargs): ...
    def adjust_all_priorities(self, RenderStateself, intadjustment) -> Any: ...
    def cacheRef(self, *args, **kwargs): ...
    def cacheUnref(self, *args, **kwargs): ...
    def cache_ref(self, RenderStateself) -> Any: ...
    def cache_unref(self, RenderStateself) -> Any: ...
    @staticmethod
    def clearCache(*args, **kwargs): ...
    @staticmethod
    def clearMungerCache(*args, **kwargs): ...
    @staticmethod
    def clear_cache() -> Any: ...
    @staticmethod
    def clear_munger_cache() -> Any: ...
    def compareMask(self, *args, **kwargs): ...
    def compareSort(self, *args, **kwargs): ...
    def compareTo(self, *args, **kwargs): ...
    def compare_mask(self, RenderStateself, constRenderStateother, BitMaskcompare_mask) -> Any: ...
    def compare_sort(self, RenderStateself, constRenderStateother) -> Any: ...
    def compare_to(self, RenderStateself, constRenderStateother) -> Any: ...
    def compose(self, RenderStateself, constRenderStateother) -> Any: ...
    def cullCallback(self, *args, **kwargs): ...
    @overload
    def cull_callback(self, RenderStateself, CullTraversertrav, constCullTraverserDatadata) -> Any: ...
    @overload
    def cull_callback(self) -> Any: ...
    @staticmethod
    def garbageCollect(*args, **kwargs): ...
    @overload
    @staticmethod
    def garbage_collect() -> Any: ...
    @overload
    @staticmethod
    def garbage_collect() -> Any: ...
    def getAttrib(self, *args, **kwargs): ...
    def getAttribDef(self, *args, **kwargs): ...
    def getBinIndex(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCompositionCache(self, *args, **kwargs): ...
    def getCompositionCacheNumEntries(self, *args, **kwargs): ...
    def getCompositionCacheResult(self, *args, **kwargs): ...
    def getCompositionCacheSize(self, *args, **kwargs): ...
    def getCompositionCacheSource(self, *args, **kwargs): ...
    def getDrawOrder(self, *args, **kwargs): ...
    def getGeomRendering(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getInvertCompositionCache(self, *args, **kwargs): ...
    def getInvertCompositionCacheNumEntries(self, *args, **kwargs): ...
    def getInvertCompositionCacheResult(self, *args, **kwargs): ...
    def getInvertCompositionCacheSize(self, *args, **kwargs): ...
    def getInvertCompositionCacheSource(self, *args, **kwargs): ...
    @staticmethod
    def getMaxPriority(*args, **kwargs): ...
    @staticmethod
    def getNumStates(*args, **kwargs): ...
    @staticmethod
    def getNumUnusedStates(*args, **kwargs): ...
    def getOverride(self, *args, **kwargs): ...
    @staticmethod
    def getStates(*args, **kwargs): ...
    def getUnique(self, *args, **kwargs): ...
    @staticmethod
    def getUnusedStates(*args, **kwargs): ...
    @overload
    def get_attrib(self, RenderStateself, TypeHandletype) -> Any: ...
    @overload
    def get_attrib(self, RenderStateself, intslot) -> Any: ...
    def get_attrib_def(self, RenderStateself, intslot) -> Any: ...
    def get_bin_index(self, RenderStateself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_composition_cache(self, RenderStateself) -> Any: ...
    def get_composition_cache_num_entries(self, RenderStateself) -> Any: ...
    def get_composition_cache_result(self, RenderStateself, intn) -> Any: ...
    def get_composition_cache_size(self, RenderStateself) -> Any: ...
    def get_composition_cache_source(self, RenderStateself, intn) -> Any: ...
    def get_draw_order(self, RenderStateself) -> Any: ...
    def get_geom_rendering(self, RenderStateself, intgeom_rendering) -> Any: ...
    def get_hash(self, RenderStateself) -> Any: ...
    def get_invert_composition_cache(self, RenderStateself) -> Any: ...
    def get_invert_composition_cache_num_entries(self, RenderStateself) -> Any: ...
    def get_invert_composition_cache_result(self, RenderStateself, intn) -> Any: ...
    def get_invert_composition_cache_size(self, RenderStateself) -> Any: ...
    def get_invert_composition_cache_source(self, RenderStateself, intn) -> Any: ...
    @staticmethod
    def get_max_priority() -> Any: ...
    @staticmethod
    def get_num_states() -> Any: ...
    @staticmethod
    def get_num_unused_states() -> Any: ...
    @overload
    def get_override(self, RenderStateself, TypeHandletype) -> Any: ...
    @overload
    def get_override(self, RenderStateself, intslot) -> Any: ...
    @staticmethod
    def get_states() -> Any: ...
    def get_unique(self, RenderStateself) -> Any: ...
    @staticmethod
    def get_unused_states() -> Any: ...
    def hasAttrib(self, *args, **kwargs): ...
    def hasCullCallback(self, *args, **kwargs): ...
    @overload
    def has_attrib(self, RenderStateself, TypeHandletype) -> Any: ...
    @overload
    def has_attrib(self, RenderStateself, intslot) -> Any: ...
    def has_cull_callback(self, RenderStateself) -> Any: ...
    def invertCompose(self, *args, **kwargs): ...
    def invert_compose(self, RenderStateself, constRenderStateother) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, RenderStateself) -> Any: ...
    @staticmethod
    def listCycles(*args, **kwargs): ...
    @staticmethod
    def listStates(*args, **kwargs): ...
    @staticmethod
    def list_cycles(ostreamout) -> Any: ...
    @staticmethod
    def list_states(ostreamout) -> Any: ...
    @staticmethod
    def make(*args, **kwargs): ...
    @staticmethod
    def makeEmpty(*args, **kwargs): ...
    @staticmethod
    def make_empty() -> Any: ...
    def nodeRef(self, *args, **kwargs): ...
    def nodeUnref(self, *args, **kwargs): ...
    def node_ref(self, RenderStateself) -> Any: ...
    def node_unref(self, RenderStateself) -> Any: ...
    def output(self, RenderStateself, ostreamout) -> Any: ...
    def removeAttrib(self, *args, **kwargs): ...
    @overload
    def remove_attrib(self, RenderStateself, TypeHandletype) -> Any: ...
    @overload
    def remove_attrib(self, RenderStateself, intslot) -> Any: ...
    def setAttrib(self, *args, **kwargs): ...
    @overload
    def set_attrib(self, RenderStateself, constRenderAttribattrib) -> Any: ...
    @overload
    def set_attrib(self, RenderStateself, constRenderAttribattrib, intoverride) -> Any: ...
    @staticmethod
    def validateStates(*args, **kwargs): ...
    @staticmethod
    def validate_states() -> Any: ...
    def write(self, RenderStateself, ostreamout, intindent_level) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class RescaleNormalAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    MAuto: ClassVar[int] = ...
    MNone: ClassVar[int] = ...
    MNormalize: ClassVar[int] = ...
    MRescale: ClassVar[int] = ...
    M_auto: ClassVar[int] = ...
    M_none: ClassVar[int] = ...
    M_normalize: ClassVar[int] = ...
    M_rescale: ClassVar[int] = ...
    class_slot: Incomplete
    mode: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_mode(self, RescaleNormalAttribself) -> Any: ...
    @staticmethod
    def make(intmode) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class RigidBodyCombiner(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    internal_scene: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def collect(self, constRigidBodyCombinerself) -> Any: ...
    @overload
    def collect(self) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getInternalScene(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_internal_scene(self, constRigidBodyCombinerself) -> Any: ...

class RopeNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    NMNone: ClassVar[int] = ...
    NMVertex: ClassVar[int] = ...
    NM_none: ClassVar[int] = ...
    NM_vertex: ClassVar[int] = ...
    RMBillboard: ClassVar[int] = ...
    RMTape: ClassVar[int] = ...
    RMThread: ClassVar[int] = ...
    RMTube: ClassVar[int] = ...
    RM_billboard: ClassVar[int] = ...
    RM_tape: ClassVar[int] = ...
    RM_thread: ClassVar[int] = ...
    RM_tube: ClassVar[int] = ...
    UVDistance: ClassVar[int] = ...
    UVDistance2: ClassVar[int] = ...
    UVNone: ClassVar[int] = ...
    UVParametric: ClassVar[int] = ...
    UV_distance: ClassVar[int] = ...
    UV_distance2: ClassVar[int] = ...
    UV_none: ClassVar[int] = ...
    UV_parametric: ClassVar[int] = ...
    curve: Incomplete
    matrix: Incomplete
    normal_mode: Incomplete
    num_slices: Incomplete
    num_subdiv: Incomplete
    render_mode: Incomplete
    thickness: Incomplete
    tube_up: Incomplete
    use_vertex_color: Incomplete
    use_vertex_thickness: Incomplete
    uv_direction: Incomplete
    uv_mode: Incomplete
    uv_scale: Incomplete
    vertex_color_dimension: Incomplete
    vertex_thickness_dimension: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearMatrix(self, *args, **kwargs): ...
    def clear_matrix(self, constRopeNodeself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCurve(self, *args, **kwargs): ...
    def getMatrix(self, *args, **kwargs): ...
    def getNormalMode(self, *args, **kwargs): ...
    def getNumSlices(self, *args, **kwargs): ...
    def getNumSubdiv(self, *args, **kwargs): ...
    def getRenderMode(self, *args, **kwargs): ...
    def getThickness(self, *args, **kwargs): ...
    def getTubeUp(self, *args, **kwargs): ...
    def getUseVertexColor(self, *args, **kwargs): ...
    def getUseVertexThickness(self, *args, **kwargs): ...
    def getUvDirection(self, *args, **kwargs): ...
    def getUvMode(self, *args, **kwargs): ...
    def getUvScale(self, *args, **kwargs): ...
    @staticmethod
    def getVertexColorDimension(*args, **kwargs): ...
    @staticmethod
    def getVertexThicknessDimension(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_curve(self, RopeNodeself) -> Any: ...
    def get_matrix(self, RopeNodeself) -> Any: ...
    def get_normal_mode(self, RopeNodeself) -> Any: ...
    def get_num_slices(self, RopeNodeself) -> Any: ...
    def get_num_subdiv(self, RopeNodeself) -> Any: ...
    def get_render_mode(self, RopeNodeself) -> Any: ...
    def get_thickness(self, RopeNodeself) -> Any: ...
    def get_tube_up(self, RopeNodeself) -> Any: ...
    def get_use_vertex_color(self, RopeNodeself) -> Any: ...
    def get_use_vertex_thickness(self, RopeNodeself) -> Any: ...
    def get_uv_direction(self, RopeNodeself) -> Any: ...
    def get_uv_mode(self, RopeNodeself) -> Any: ...
    def get_uv_scale(self, RopeNodeself) -> Any: ...
    @staticmethod
    def get_vertex_color_dimension() -> Any: ...
    @staticmethod
    def get_vertex_thickness_dimension() -> Any: ...
    def hasMatrix(self, *args, **kwargs): ...
    def has_matrix(self, RopeNodeself) -> Any: ...
    def resetBound(self, *args, **kwargs): ...
    def reset_bound(self, constRopeNodeself, constNodePathrel_to) -> Any: ...
    def setCurve(self, *args, **kwargs): ...
    def setMatrix(self, *args, **kwargs): ...
    def setNormalMode(self, *args, **kwargs): ...
    def setNumSlices(self, *args, **kwargs): ...
    def setNumSubdiv(self, *args, **kwargs): ...
    def setRenderMode(self, *args, **kwargs): ...
    def setThickness(self, *args, **kwargs): ...
    def setTubeUp(self, *args, **kwargs): ...
    def setUseVertexColor(self, *args, **kwargs): ...
    def setUseVertexThickness(self, *args, **kwargs): ...
    def setUvDirection(self, *args, **kwargs): ...
    def setUvMode(self, *args, **kwargs): ...
    def setUvScale(self, *args, **kwargs): ...
    def set_curve(self, constRopeNodeself, NurbsCurveEvaluatorcurve) -> Any: ...
    def set_matrix(self, constRopeNodeself, constLMatrix4fmatrix) -> Any: ...
    def set_normal_mode(self, constRopeNodeself, intnormal_mode) -> Any: ...
    def set_num_slices(self, constRopeNodeself, intnum_slices) -> Any: ...
    def set_num_subdiv(self, constRopeNodeself, intnum_subdiv) -> Any: ...
    def set_render_mode(self, constRopeNodeself, intrender_mode) -> Any: ...
    def set_thickness(self, constRopeNodeself, floatthickness) -> Any: ...
    def set_tube_up(self, constRopeNodeself, constLVector3ftube_up) -> Any: ...
    def set_use_vertex_color(self, constRopeNodeself, boolflag) -> Any: ...
    def set_use_vertex_thickness(self, constRopeNodeself, boolflag) -> Any: ...
    def set_uv_direction(self, constRopeNodeself, boolu_dominant) -> Any: ...
    def set_uv_mode(self, constRopeNodeself, intuv_mode) -> Any: ...
    def set_uv_scale(self, constRopeNodeself, floatscale) -> Any: ...

class SSReader(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constSSReaderself) -> Any: ...
    def getTcpHeaderSize(self, *args, **kwargs): ...
    def get_tcp_header_size(self, SSReaderself) -> Any: ...
    def isClosed(self, *args, **kwargs): ...
    def is_closed(self, constSSReaderself) -> Any: ...
    def receiveDatagram(self, *args, **kwargs): ...
    def receive_datagram(self, constSSReaderself, Datagramdg) -> Any: ...
    def setTcpHeaderSize(self, *args, **kwargs): ...
    def set_tcp_header_size(self, constSSReaderself, inttcp_header_size) -> Any: ...

class SSWriter(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constSSWriterself) -> Any: ...
    def considerFlush(self, *args, **kwargs): ...
    def consider_flush(self, constSSWriterself) -> Any: ...
    def flush(self, constSSWriterself) -> Any: ...
    def getCollectTcp(self, *args, **kwargs): ...
    def getCollectTcpInterval(self, *args, **kwargs): ...
    def getTcpHeaderSize(self, *args, **kwargs): ...
    def get_collect_tcp(self, SSWriterself) -> Any: ...
    def get_collect_tcp_interval(self, SSWriterself) -> Any: ...
    def get_tcp_header_size(self, SSWriterself) -> Any: ...
    def isClosed(self, *args, **kwargs): ...
    def is_closed(self, constSSWriterself) -> Any: ...
    def sendDatagram(self, *args, **kwargs): ...
    def send_datagram(self, constSSWriterself, constDatagramdg) -> Any: ...
    def setCollectTcp(self, *args, **kwargs): ...
    def setCollectTcpInterval(self, *args, **kwargs): ...
    def setTcpHeaderSize(self, *args, **kwargs): ...
    def set_collect_tcp(self, constSSWriterself, boolcollect_tcp) -> Any: ...
    def set_collect_tcp_interval(self, constSSWriterself, doubleinterval) -> Any: ...
    def set_tcp_header_size(self, constSSWriterself, inttcp_header_size) -> Any: ...

class SamplerState(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    FTDefault: ClassVar[int] = ...
    FTInvalid: ClassVar[int] = ...
    FTLinear: ClassVar[int] = ...
    FTLinearMipmapLinear: ClassVar[int] = ...
    FTLinearMipmapNearest: ClassVar[int] = ...
    FTNearest: ClassVar[int] = ...
    FTNearestMipmapLinear: ClassVar[int] = ...
    FTNearestMipmapNearest: ClassVar[int] = ...
    FTShadow: ClassVar[int] = ...
    FT_default: ClassVar[int] = ...
    FT_invalid: ClassVar[int] = ...
    FT_linear: ClassVar[int] = ...
    FT_linear_mipmap_linear: ClassVar[int] = ...
    FT_linear_mipmap_nearest: ClassVar[int] = ...
    FT_nearest: ClassVar[int] = ...
    FT_nearest_mipmap_linear: ClassVar[int] = ...
    FT_nearest_mipmap_nearest: ClassVar[int] = ...
    FT_shadow: ClassVar[int] = ...
    WMBorderColor: ClassVar[int] = ...
    WMClamp: ClassVar[int] = ...
    WMInvalid: ClassVar[int] = ...
    WMMirror: ClassVar[int] = ...
    WMMirrorOnce: ClassVar[int] = ...
    WMRepeat: ClassVar[int] = ...
    WM_border_color: ClassVar[int] = ...
    WM_clamp: ClassVar[int] = ...
    WM_invalid: ClassVar[int] = ...
    WM_mirror: ClassVar[int] = ...
    WM_mirror_once: ClassVar[int] = ...
    WM_repeat: ClassVar[int] = ...
    anisotropic_degree: Incomplete
    border_color: Incomplete
    effective_anisotropic_degree: Incomplete
    effective_magfilter: Incomplete
    effective_minfilter: Incomplete
    lod_bias: Incomplete
    magfilter: Incomplete
    max_lod: Incomplete
    min_lod: Incomplete
    minfilter: Incomplete
    wrap_u: Incomplete
    wrap_v: Incomplete
    wrap_w: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def formatFilterType(*args, **kwargs): ...
    @staticmethod
    def formatWrapMode(*args, **kwargs): ...
    @staticmethod
    def format_filter_type(intft) -> Any: ...
    @staticmethod
    def format_wrap_mode(intwm) -> Any: ...
    def getAnisotropicDegree(self, *args, **kwargs): ...
    def getBorderColor(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getDefault(*args, **kwargs): ...
    def getEffectiveAnisotropicDegree(self, *args, **kwargs): ...
    def getEffectiveMagfilter(self, *args, **kwargs): ...
    def getEffectiveMinfilter(self, *args, **kwargs): ...
    def getLodBias(self, *args, **kwargs): ...
    def getMagfilter(self, *args, **kwargs): ...
    def getMaxLod(self, *args, **kwargs): ...
    def getMinLod(self, *args, **kwargs): ...
    def getMinfilter(self, *args, **kwargs): ...
    def getWrapU(self, *args, **kwargs): ...
    def getWrapV(self, *args, **kwargs): ...
    def getWrapW(self, *args, **kwargs): ...
    def get_anisotropic_degree(self, SamplerStateself) -> Any: ...
    def get_border_color(self, SamplerStateself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_default() -> Any: ...
    def get_effective_anisotropic_degree(self, SamplerStateself) -> Any: ...
    def get_effective_magfilter(self, SamplerStateself) -> Any: ...
    def get_effective_minfilter(self, SamplerStateself) -> Any: ...
    def get_lod_bias(self, SamplerStateself) -> Any: ...
    def get_magfilter(self, SamplerStateself) -> Any: ...
    def get_max_lod(self, SamplerStateself) -> Any: ...
    def get_min_lod(self, SamplerStateself) -> Any: ...
    def get_minfilter(self, SamplerStateself) -> Any: ...
    def get_wrap_u(self, SamplerStateself) -> Any: ...
    def get_wrap_v(self, SamplerStateself) -> Any: ...
    def get_wrap_w(self, SamplerStateself) -> Any: ...
    @staticmethod
    def isMipmap(*args, **kwargs): ...
    def isPrepared(self, *args, **kwargs): ...
    @staticmethod
    def is_mipmap(inttype) -> Any: ...
    def is_prepared(self, SamplerStateself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def prepare(self, SamplerStateself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def release(self, SamplerStateself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def setAnisotropicDegree(self, *args, **kwargs): ...
    def setBorderColor(self, *args, **kwargs): ...
    def setLodBias(self, *args, **kwargs): ...
    def setMagfilter(self, *args, **kwargs): ...
    def setMaxLod(self, *args, **kwargs): ...
    def setMinLod(self, *args, **kwargs): ...
    def setMinfilter(self, *args, **kwargs): ...
    def setWrapU(self, *args, **kwargs): ...
    def setWrapV(self, *args, **kwargs): ...
    def setWrapW(self, *args, **kwargs): ...
    def set_anisotropic_degree(self, constSamplerStateself, intanisotropic_degree) -> Any: ...
    def set_border_color(self, constSamplerStateself, constLVecBase4fcolor) -> Any: ...
    def set_lod_bias(self, constSamplerStateself, floatlod_bias) -> Any: ...
    def set_magfilter(self, constSamplerStateself, intfilter) -> Any: ...
    def set_max_lod(self, constSamplerStateself, floatmax_lod) -> Any: ...
    def set_min_lod(self, constSamplerStateself, floatmin_lod) -> Any: ...
    def set_minfilter(self, constSamplerStateself, intfilter) -> Any: ...
    def set_wrap_u(self, constSamplerStateself, intwrap) -> Any: ...
    def set_wrap_v(self, constSamplerStateself, intwrap) -> Any: ...
    def set_wrap_w(self, constSamplerStateself, intwrap) -> Any: ...
    @staticmethod
    def stringFilterType(*args, **kwargs): ...
    @staticmethod
    def stringWrapMode(*args, **kwargs): ...
    @staticmethod
    def string_filter_type(strstr) -> Any: ...
    @staticmethod
    def string_wrap_mode(strstr) -> Any: ...
    def usesMipmaps(self, *args, **kwargs): ...
    def uses_mipmaps(self, SamplerStateself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class SavedContext(TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class SceneGraphAnalyzer(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    LMAll: ClassVar[int] = ...
    LMHighest: ClassVar[int] = ...
    LMLowest: ClassVar[int] = ...
    LMNone: ClassVar[int] = ...
    LM_all: ClassVar[int] = ...
    LM_highest: ClassVar[int] = ...
    LM_lowest: ClassVar[int] = ...
    LM_none: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addNode(self, *args, **kwargs): ...
    def add_node(self, constSceneGraphAnalyzerself, PandaNodenode) -> Any: ...
    def clear(self, constSceneGraphAnalyzerself) -> Any: ...
    def getLodMode(self, *args, **kwargs): ...
    def getNumColors(self, *args, **kwargs): ...
    def getNumGeomNodes(self, *args, **kwargs): ...
    def getNumGeomVertexDatas(self, *args, **kwargs): ...
    def getNumGeomVertexFormats(self, *args, **kwargs): ...
    def getNumGeoms(self, *args, **kwargs): ...
    def getNumIndividualTris(self, *args, **kwargs): ...
    def getNumInstances(self, *args, **kwargs): ...
    def getNumLines(self, *args, **kwargs): ...
    def getNumLodNodes(self, *args, **kwargs): ...
    def getNumLongNormals(self, *args, **kwargs): ...
    def getNumNodes(self, *args, **kwargs): ...
    def getNumNodesWithAttribs(self, *args, **kwargs): ...
    def getNumNormals(self, *args, **kwargs): ...
    def getNumPatches(self, *args, **kwargs): ...
    def getNumPoints(self, *args, **kwargs): ...
    def getNumShortNormals(self, *args, **kwargs): ...
    def getNumTexcoords(self, *args, **kwargs): ...
    def getNumTransforms(self, *args, **kwargs): ...
    def getNumTrianglesInFans(self, *args, **kwargs): ...
    def getNumTrianglesInStrips(self, *args, **kwargs): ...
    def getNumTrifans(self, *args, **kwargs): ...
    def getNumTris(self, *args, **kwargs): ...
    def getNumTristrips(self, *args, **kwargs): ...
    def getNumVertices(self, *args, **kwargs): ...
    def getNumVerticesInPatches(self, *args, **kwargs): ...
    def getTextureBytes(self, *args, **kwargs): ...
    def getTotalNormalLength(self, *args, **kwargs): ...
    def getVertexDataSize(self, *args, **kwargs): ...
    def get_lod_mode(self, SceneGraphAnalyzerself, intlod_mode) -> Any: ...
    def get_num_colors(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_geom_nodes(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_geom_vertex_datas(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_geom_vertex_formats(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_geoms(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_individual_tris(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_instances(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_lines(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_lod_nodes(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_long_normals(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_nodes(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_nodes_with_attribs(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_normals(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_patches(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_points(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_short_normals(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_texcoords(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_transforms(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_triangles_in_fans(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_triangles_in_strips(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_trifans(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_tris(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_tristrips(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_vertices(self, SceneGraphAnalyzerself) -> Any: ...
    def get_num_vertices_in_patches(self, SceneGraphAnalyzerself) -> Any: ...
    def get_texture_bytes(self, SceneGraphAnalyzerself) -> Any: ...
    def get_total_normal_length(self, SceneGraphAnalyzerself) -> Any: ...
    def get_vertex_data_size(self, SceneGraphAnalyzerself) -> Any: ...
    def setLodMode(self, *args, **kwargs): ...
    def set_lod_mode(self, constSceneGraphAnalyzerself, intlod_mode) -> Any: ...
    def write(self, SceneGraphAnalyzerself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class SceneGraphAnalyzerMeter(TextNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearWindow(self, *args, **kwargs): ...
    def clear_window(self, constSceneGraphAnalyzerMeterself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDisplayRegion(self, *args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getUpdateInterval(self, *args, **kwargs): ...
    def getWindow(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_display_region(self, SceneGraphAnalyzerMeterself) -> Any: ...
    def get_node(self, SceneGraphAnalyzerMeterself) -> Any: ...
    def get_update_interval(self, SceneGraphAnalyzerMeterself) -> Any: ...
    def get_window(self, SceneGraphAnalyzerMeterself) -> Any: ...
    def setNode(self, *args, **kwargs): ...
    def setUpdateInterval(self, *args, **kwargs): ...
    def set_node(self, constSceneGraphAnalyzerMeterself, PandaNodenode) -> Any: ...
    def set_update_interval(self, constSceneGraphAnalyzerMeterself, doubleupdate_interval) -> Any: ...
    def setupWindow(self, *args, **kwargs): ...
    def setup_window(self, constSceneGraphAnalyzerMeterself, GraphicsOutputwindow) -> Any: ...
    def update(self, constSceneGraphAnalyzerMeterself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class SceneGraphReducer(dtoolconfig.DTOOL_SUPER_BASE):
    CSGeomNode: ClassVar[int] = ...
    CSOther: ClassVar[int] = ...
    CSRecurse: ClassVar[int] = ...
    CSWithinRadius: ClassVar[int] = ...
    CS_geom_node: ClassVar[int] = ...
    CS_other: ClassVar[int] = ...
    CS_recurse: ClassVar[int] = ...
    CS_within_radius: ClassVar[int] = ...
    CVDAnimationType: ClassVar[int] = ...
    CVDAvoidDynamic: ClassVar[int] = ...
    CVDFormat: ClassVar[int] = ...
    CVDModel: ClassVar[int] = ...
    CVDName: ClassVar[int] = ...
    CVDOneNodeOnly: ClassVar[int] = ...
    CVDTransform: ClassVar[int] = ...
    CVDUsageHint: ClassVar[int] = ...
    CVD_animation_type: ClassVar[int] = ...
    CVD_avoid_dynamic: ClassVar[int] = ...
    CVD_format: ClassVar[int] = ...
    CVD_model: ClassVar[int] = ...
    CVD_name: ClassVar[int] = ...
    CVD_one_node_only: ClassVar[int] = ...
    CVD_transform: ClassVar[int] = ...
    CVD_usage_hint: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    MNAvoidAnimated: ClassVar[int] = ...
    MNAvoidDynamic: ClassVar[int] = ...
    MNCompositeOnly: ClassVar[int] = ...
    MN_avoid_animated: ClassVar[int] = ...
    MN_avoid_dynamic: ClassVar[int] = ...
    MN_composite_only: ClassVar[int] = ...
    TTApplyTextureColor: ClassVar[int] = ...
    TTClipPlane: ClassVar[int] = ...
    TTColor: ClassVar[int] = ...
    TTColorScale: ClassVar[int] = ...
    TTCullFace: ClassVar[int] = ...
    TTOther: ClassVar[int] = ...
    TTTexMatrix: ClassVar[int] = ...
    TTTransform: ClassVar[int] = ...
    TT_apply_texture_color: ClassVar[int] = ...
    TT_clip_plane: ClassVar[int] = ...
    TT_color: ClassVar[int] = ...
    TT_color_scale: ClassVar[int] = ...
    TT_cull_face: ClassVar[int] = ...
    TT_other: ClassVar[int] = ...
    TT_tex_matrix: ClassVar[int] = ...
    TT_transform: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def applyAttribs(self, *args, **kwargs): ...
    @overload
    def apply_attribs(self, constSceneGraphReducerself, PandaNodenode, intattrib_types) -> Any: ...
    @overload
    def apply_attribs(self) -> Any: ...
    def checkLiveFlatten(self, *args, **kwargs): ...
    def check_live_flatten(self, constSceneGraphReducerself, PandaNodenode) -> Any: ...
    def clearGsg(self, *args, **kwargs): ...
    def clear_gsg(self, constSceneGraphReducerself) -> Any: ...
    def collectVertexData(self, *args, **kwargs): ...
    def collect_vertex_data(self, constSceneGraphReducerself, PandaNoderoot, intcollect_bits) -> Any: ...
    @overload
    def decompose(self, constSceneGraphReducerself, PandaNoderoot) -> Any: ...
    @overload
    def decompose(self) -> Any: ...
    def flatten(self, constSceneGraphReducerself, PandaNoderoot, intcombine_siblings_bits) -> Any: ...
    def getCombineRadius(self, *args, **kwargs): ...
    def getGsg(self, *args, **kwargs): ...
    def get_combine_radius(self, SceneGraphReducerself) -> Any: ...
    def get_gsg(self, SceneGraphReducerself) -> Any: ...
    def makeCompatibleFormat(self, *args, **kwargs): ...
    def makeCompatibleState(self, *args, **kwargs): ...
    def makeNonindexed(self, *args, **kwargs): ...
    def make_compatible_format(self, constSceneGraphReducerself, PandaNoderoot, intcollect_bits) -> Any: ...
    def make_compatible_state(self, constSceneGraphReducerself, PandaNoderoot) -> Any: ...
    def make_nonindexed(self, constSceneGraphReducerself, PandaNoderoot, intnonindexed_bits) -> Any: ...
    def premunge(self, constSceneGraphReducerself, PandaNoderoot, constRenderStateinitial_state) -> Any: ...
    def removeColumn(self, *args, **kwargs): ...
    def removeUnusedVertices(self, *args, **kwargs): ...
    def remove_column(self, constSceneGraphReducerself, PandaNoderoot, constInternalNamecolumn) -> Any: ...
    def remove_unused_vertices(self, constSceneGraphReducerself, PandaNoderoot) -> Any: ...
    def setCombineRadius(self, *args, **kwargs): ...
    def setGsg(self, *args, **kwargs): ...
    def set_combine_radius(self, constSceneGraphReducerself, floatcombine_radius) -> Any: ...
    def set_gsg(self, constSceneGraphReducerself, GraphicsStateGuardianBasegsg) -> Any: ...
    @overload
    def unify(self, constSceneGraphReducerself, PandaNoderoot, boolpreserve_order) -> Any: ...
    @overload
    def unify(self) -> Any: ...
    @overload
    def unify(self) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class SceneSetup(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getCameraNode(self, *args, **kwargs): ...
    def getCameraPath(self, *args, **kwargs): ...
    def getCameraTransform(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCsTransform(self, *args, **kwargs): ...
    def getCsWorldTransform(self, *args, **kwargs): ...
    def getCullBounds(self, *args, **kwargs): ...
    def getCullCenter(self, *args, **kwargs): ...
    def getDisplayRegion(self, *args, **kwargs): ...
    def getInitialState(self, *args, **kwargs): ...
    def getInverted(self, *args, **kwargs): ...
    def getLens(self, *args, **kwargs): ...
    def getSceneRoot(self, *args, **kwargs): ...
    def getViewFrustum(self, *args, **kwargs): ...
    def getViewportHeight(self, *args, **kwargs): ...
    def getViewportWidth(self, *args, **kwargs): ...
    def getWorldTransform(self, *args, **kwargs): ...
    def get_camera_node(self, SceneSetupself) -> Any: ...
    def get_camera_path(self, SceneSetupself) -> Any: ...
    def get_camera_transform(self, SceneSetupself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_cs_transform(self, SceneSetupself) -> Any: ...
    def get_cs_world_transform(self, SceneSetupself) -> Any: ...
    def get_cull_bounds(self, SceneSetupself) -> Any: ...
    def get_cull_center(self, SceneSetupself) -> Any: ...
    def get_display_region(self, SceneSetupself) -> Any: ...
    def get_initial_state(self, SceneSetupself) -> Any: ...
    def get_inverted(self, SceneSetupself) -> Any: ...
    def get_lens(self, SceneSetupself) -> Any: ...
    def get_scene_root(self, SceneSetupself) -> Any: ...
    def get_view_frustum(self, SceneSetupself) -> Any: ...
    def get_viewport_height(self, SceneSetupself) -> Any: ...
    def get_viewport_width(self, SceneSetupself) -> Any: ...
    def get_world_transform(self, SceneSetupself) -> Any: ...
    def setCameraNode(self, *args, **kwargs): ...
    def setCameraPath(self, *args, **kwargs): ...
    def setCameraTransform(self, *args, **kwargs): ...
    def setCsTransform(self, *args, **kwargs): ...
    def setCsWorldTransform(self, *args, **kwargs): ...
    def setDisplayRegion(self, *args, **kwargs): ...
    def setInitialState(self, *args, **kwargs): ...
    def setInverted(self, *args, **kwargs): ...
    def setLens(self, *args, **kwargs): ...
    def setSceneRoot(self, *args, **kwargs): ...
    def setViewFrustum(self, *args, **kwargs): ...
    def setViewportSize(self, *args, **kwargs): ...
    def setWorldTransform(self, *args, **kwargs): ...
    def set_camera_node(self, constSceneSetupself, Cameracamera_node) -> Any: ...
    def set_camera_path(self, constSceneSetupself, constNodePathcamera_path) -> Any: ...
    def set_camera_transform(self, constSceneSetupself, constTransformStatecamera_transform) -> Any: ...
    def set_cs_transform(self, constSceneSetupself, constTransformStatecs_transform) -> Any: ...
    def set_cs_world_transform(self, constSceneSetupself, constTransformStatecs_world_transform) -> Any: ...
    def set_display_region(self, constSceneSetupself, DisplayRegiondisplay_region) -> Any: ...
    def set_initial_state(self, constSceneSetupself, constRenderStateinitial_state) -> Any: ...
    def set_inverted(self, constSceneSetupself, boolinverted) -> Any: ...
    def set_lens(self, constSceneSetupself, constLenslens) -> Any: ...
    def set_scene_root(self, constSceneSetupself, constNodePathscene_root) -> Any: ...
    def set_view_frustum(self, constSceneSetupself, GeometricBoundingVolumeview_frustum) -> Any: ...
    def set_viewport_size(self, constSceneSetupself, intwidth, intheight) -> Any: ...
    def set_world_transform(self, constSceneSetupself, constTransformStateworld_transform) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ScissorAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    class_slot: Incomplete
    frame: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFrame(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_frame(self, ScissorAttribself) -> Any: ...
    def isOff(self, *args, **kwargs): ...
    def is_off(self, ScissorAttribself) -> Any: ...
    @overload
    @staticmethod
    def make(constLVecBase4fframe) -> Any: ...
    @overload
    @staticmethod
    def make(floatleft, floatright, floatbottom, floattop) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeOff(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_off() -> Any: ...

class ScissorEffect(RenderEffect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addPoint(self, *args, **kwargs): ...
    def add_point(self, ScissorEffectself, constLPoint3fpoint, constNodePathnode) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getClip(self, *args, **kwargs): ...
    def getFrame(self, *args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getNodes(self, *args, **kwargs): ...
    def getNumPoints(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getPoints(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_clip(self, ScissorEffectself) -> Any: ...
    def get_frame(self, ScissorEffectself) -> Any: ...
    def get_node(self, ScissorEffectself, intn) -> Any: ...
    def get_nodes(self, *args, **kwargs): ...
    def get_num_points(self, ScissorEffectself) -> Any: ...
    @overload
    def get_point(self, ScissorEffectself, intn) -> Any: ...
    @overload
    def get_point(self) -> Any: ...
    def get_points(self, *args, **kwargs): ...
    def isScreen(self, *args, **kwargs): ...
    def is_screen(self, ScissorEffectself) -> Any: ...
    @staticmethod
    def makeNode(*args, **kwargs): ...
    @staticmethod
    def makeScreen(*args, **kwargs): ...
    @overload
    @staticmethod
    def make_node() -> Any: ...
    @overload
    @staticmethod
    def make_node(boolclip) -> Any: ...
    @overload
    @staticmethod
    def make_node(constLPoint3fa, constLPoint3fb) -> Any: ...
    @overload
    @staticmethod
    def make_node(constLPoint3fa, constLPoint3fb, constNodePathnode) -> Any: ...
    @overload
    @staticmethod
    def make_node(constLPoint3fa, constLPoint3fb, constLPoint3fc, constLPoint3fd, constNodePathnode) -> Any: ...
    @staticmethod
    def make_screen(constLVecBase4fframe, boolclip) -> Any: ...

class ScreenshotRequest(AsyncFuture):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addOutputFile(self, *args, **kwargs): ...
    def add_output_file(self, constScreenshotRequestself, constFilenamefilename, strimage_comment) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class SelectiveChildNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class Semaphore(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def acquire(self, constSemaphoreself) -> Any: ...
    def getCount(self, *args, **kwargs): ...
    def get_count(self, Semaphoreself) -> Any: ...
    def output(self, Semaphoreself, ostreamout) -> Any: ...
    def release(self, constSemaphoreself) -> Any: ...
    def tryAcquire(self, *args, **kwargs): ...
    def try_acquire(self, constSemaphoreself) -> Any: ...

class SequenceNode(SelectiveChildNode, AnimInterface):
    DtoolClassDict: ClassVar[dict] = ...
    frame_rate: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumFrames(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_frames(self, SequenceNodeself) -> Any: ...
    def setFrameRate(self, *args, **kwargs): ...
    def set_frame_rate(self, constSequenceNodeself, doubleframe_rate) -> Any: ...
    def upcastToAnimInterface(self, *args, **kwargs): ...
    def upcastToSelectiveChildNode(self, *args, **kwargs): ...
    def upcast_to_AnimInterface(self, constSequenceNodeself) -> Any: ...
    def upcast_to_SelectiveChildNode(self, constSequenceNodeself) -> Any: ...

class ShadeModelAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    MFlat: ClassVar[int] = ...
    MSmooth: ClassVar[int] = ...
    M_flat: ClassVar[int] = ...
    M_smooth: ClassVar[int] = ...
    class_slot: Incomplete
    mode: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_mode(self, ShadeModelAttribself) -> Any: ...
    @staticmethod
    def make(intmode) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class Shader(TypedWritableReferenceCount):
    ASGloss: ClassVar[int] = ...
    ASGlow: ClassVar[int] = ...
    ASNormal: ClassVar[int] = ...
    ASRamp: ClassVar[int] = ...
    ASShadow: ClassVar[int] = ...
    AS_gloss: ClassVar[int] = ...
    AS_glow: ClassVar[int] = ...
    AS_normal: ClassVar[int] = ...
    AS_ramp: ClassVar[int] = ...
    AS_shadow: ClassVar[int] = ...
    BitAutoShaderGloss: ClassVar[int] = ...
    BitAutoShaderGlow: ClassVar[int] = ...
    BitAutoShaderNormal: ClassVar[int] = ...
    BitAutoShaderRamp: ClassVar[int] = ...
    BitAutoShaderShadow: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    SLCg: ClassVar[int] = ...
    SLGLSL: ClassVar[int] = ...
    SLHLSL: ClassVar[int] = ...
    SLNone: ClassVar[int] = ...
    SLSPIRV: ClassVar[int] = ...
    SL_Cg: ClassVar[int] = ...
    SL_GLSL: ClassVar[int] = ...
    SL_HLSL: ClassVar[int] = ...
    SL_SPIR_V: ClassVar[int] = ...
    SL_none: ClassVar[int] = ...
    STCOUNT: ClassVar[int] = ...
    STCompute: ClassVar[int] = ...
    STFragment: ClassVar[int] = ...
    STGeometry: ClassVar[int] = ...
    STNone: ClassVar[int] = ...
    STTessControl: ClassVar[int] = ...
    STTessEvaluation: ClassVar[int] = ...
    STVertex: ClassVar[int] = ...
    ST_COUNT: ClassVar[int] = ...
    ST_compute: ClassVar[int] = ...
    ST_fragment: ClassVar[int] = ...
    ST_geometry: ClassVar[int] = ...
    ST_none: ClassVar[int] = ...
    ST_tess_control: ClassVar[int] = ...
    ST_tess_evaluation: ClassVar[int] = ...
    ST_vertex: ClassVar[int] = ...
    bit_AutoShaderGloss: ClassVar[int] = ...
    bit_AutoShaderGlow: ClassVar[int] = ...
    bit_AutoShaderNormal: ClassVar[int] = ...
    bit_AutoShaderRamp: ClassVar[int] = ...
    bit_AutoShaderShadow: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getCacheCompiledShader(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getErrorFlag(self, *args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getFullpath(self, *args, **kwargs): ...
    def getLanguage(self, *args, **kwargs): ...
    def getText(self, *args, **kwargs): ...
    def get_cache_compiled_shader(self, Shaderself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_error_flag(self, Shaderself) -> Any: ...
    def get_filename(self, Shaderself, inttype) -> Any: ...
    def get_fullpath(self, Shaderself) -> Any: ...
    def get_language(self, Shaderself) -> Any: ...
    def get_text(self, Shaderself, inttype) -> Any: ...
    def hasFullpath(self, *args, **kwargs): ...
    def has_fullpath(self, Shaderself) -> Any: ...
    def isPrepared(self, *args, **kwargs): ...
    def is_prepared(self, Shaderself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    @overload
    @staticmethod
    def load(constFilenamefile) -> Any: ...
    @overload
    @staticmethod
    def load(constFilenamefile, intlang) -> Any: ...
    @overload
    @staticmethod
    def load(
        intlang,
        constFilenamevertex,
        constFilenamefragment,
        constFilenamegeometry,
        constFilenametess_control,
        constFilenametess_evaluation,
    ) -> Any: ...
    @staticmethod
    def loadCompute(*args, **kwargs): ...
    @staticmethod
    def load_compute(intlang, constFilenamefn) -> Any: ...
    @overload
    @staticmethod
    def make(strbody) -> Any: ...
    @overload
    @staticmethod
    def make(strbody, intlang) -> Any: ...
    @overload
    @staticmethod
    def make(intlang, strvertex, strfragment, strgeometry, strtess_control, strtess_evaluation) -> Any: ...
    @staticmethod
    def makeCompute(*args, **kwargs): ...
    @staticmethod
    def make_compute(intlang, strbody) -> Any: ...
    def prepare(self, constShaderself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def prepareNow(self, *args, **kwargs): ...
    def prepare_now(
        self, constShaderself, PreparedGraphicsObjectsprepared_objects, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    def release(self, constShaderself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def releaseAll(self, *args, **kwargs): ...
    def release_all(self, constShaderself) -> Any: ...
    def setCacheCompiledShader(self, *args, **kwargs): ...
    def setFilename(self, *args, **kwargs): ...
    def set_cache_compiled_shader(self, constShaderself, boolflag) -> Any: ...
    def set_filename(self, constShaderself, inttype, constFilenamefilename) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ShaderAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    F_disable_alpha_write: ClassVar[int] = ...
    F_hardware_instancing: ClassVar[int] = ...
    F_hardware_skinning: ClassVar[int] = ...
    F_shader_point_size: ClassVar[int] = ...
    F_subsume_alpha_test: ClassVar[int] = ...
    class_slot: Incomplete
    instance_count: Incomplete
    shader: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def autoGlossOn(self, *args, **kwargs): ...
    def autoGlowOn(self, *args, **kwargs): ...
    def autoNormalOn(self, *args, **kwargs): ...
    def autoRampOn(self, *args, **kwargs): ...
    def autoShader(self, *args, **kwargs): ...
    def autoShadowOn(self, *args, **kwargs): ...
    def auto_gloss_on(self, ShaderAttribself) -> Any: ...
    def auto_glow_on(self, ShaderAttribself) -> Any: ...
    def auto_normal_on(self, ShaderAttribself) -> Any: ...
    def auto_ramp_on(self, ShaderAttribself) -> Any: ...
    def auto_shader(self, ShaderAttribself) -> Any: ...
    def auto_shadow_on(self, ShaderAttribself) -> Any: ...
    def clearAllShaderInputs(self, *args, **kwargs): ...
    def clearFlag(self, *args, **kwargs): ...
    def clearShader(self, *args, **kwargs): ...
    def clearShaderInput(self, *args, **kwargs): ...
    def clear_all_shader_inputs(self, ShaderAttribself) -> Any: ...
    def clear_flag(self, ShaderAttribself, intflag) -> Any: ...
    def clear_shader(self, ShaderAttribself) -> Any: ...
    @overload
    def clear_shader_input(self, ShaderAttribself, constInternalNameid) -> Any: ...
    @overload
    def clear_shader_input(self, ShaderAttribself, strid) -> Any: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFlag(self, *args, **kwargs): ...
    def getInstanceCount(self, *args, **kwargs): ...
    def getShader(self, *args, **kwargs): ...
    def getShaderInput(self, *args, **kwargs): ...
    def getShaderInputBuffer(self, *args, **kwargs): ...
    def getShaderInputMatrix(self, *args, **kwargs): ...
    def getShaderInputNodepath(self, *args, **kwargs): ...
    def getShaderInputTexture(self, *args, **kwargs): ...
    def getShaderInputVector(self, *args, **kwargs): ...
    def getShaderPriority(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_flag(self, ShaderAttribself, intflag) -> Any: ...
    def get_instance_count(self, ShaderAttribself) -> Any: ...
    def get_shader(self, ShaderAttribself) -> Any: ...
    @overload
    def get_shader_input(self, ShaderAttribself, constInternalNameid) -> Any: ...
    @overload
    def get_shader_input(self, ShaderAttribself, strid) -> Any: ...
    def get_shader_input_buffer(self, ShaderAttribself, constInternalNameid) -> Any: ...
    def get_shader_input_matrix(self, ShaderAttribself, constInternalNameid, LMatrix4fmatrix) -> Any: ...
    def get_shader_input_nodepath(self, ShaderAttribself, constInternalNameid) -> Any: ...
    def get_shader_input_texture(self, ShaderAttribself, constInternalNameid, SamplerStatesampler) -> Any: ...
    def get_shader_input_vector(self, ShaderAttribself, InternalNameid) -> Any: ...
    def get_shader_priority(self, ShaderAttribself) -> Any: ...
    def hasShader(self, *args, **kwargs): ...
    def hasShaderInput(self, *args, **kwargs): ...
    def has_shader(self, ShaderAttribself) -> Any: ...
    def has_shader_input(self, ShaderAttribself, constInternalNameid) -> Any: ...
    @staticmethod
    def make(constShadershader, intpriority) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeOff(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_off() -> Any: ...
    @staticmethod
    def registerWithReadFactory(*args, **kwargs): ...
    @staticmethod
    def register_with_read_factory() -> Any: ...
    def setFlag(self, *args, **kwargs): ...
    def setInstanceCount(self, *args, **kwargs): ...
    def setShader(self, *args, **kwargs): ...
    def setShaderAuto(self, *args, **kwargs): ...
    def setShaderInput(self, *args, **kwargs): ...
    def setShaderInputs(self, *args, **kwargs): ...
    def setShaderOff(self, *args, **kwargs): ...
    def set_flag(self, ShaderAttribself, intflag, boolvalue) -> Any: ...
    def set_instance_count(self, ShaderAttribself, intinstance_count) -> Any: ...
    def set_shader(self, ShaderAttribself, constShaders, intpriority) -> Any: ...
    @overload
    def set_shader_auto(self, ShaderAttribself) -> Any: ...
    @overload
    def set_shader_auto(self, ShaderAttribself, BitMaskshader_switch, intpriority) -> Any: ...
    @overload
    def set_shader_auto(self, ShaderAttribself, intpriority) -> Any: ...
    @overload
    def set_shader_input(self, ShaderAttribself, constShaderInputinput) -> Any: ...
    @overload
    def set_shader_input(self, ShaderAttribself, constInternalNameparam0, objectparam1, intpriority) -> Any: ...
    def set_shader_inputs(self, *args, **kwargs): ...
    def set_shader_off(self, ShaderAttribself, intpriority) -> Any: ...

class ShaderBuffer(TypedWritableReferenceCount, Namable, GeomEnums):
    DtoolClassDict: ClassVar[dict] = ...
    data_size_bytes: Incomplete
    usage_hint: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def isPrepared(self, *args, **kwargs): ...
    def is_prepared(self, ShaderBufferself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def prepare(self, constShaderBufferself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def prepareNow(self, *args, **kwargs): ...
    def prepare_now(
        self, constShaderBufferself, PreparedGraphicsObjectsprepared_objects, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    def release(self, constShaderBufferself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def releaseAll(self, *args, **kwargs): ...
    def release_all(self, constShaderBufferself) -> Any: ...
    def upcastToGeomEnums(self, *args, **kwargs): ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_GeomEnums(self, constShaderBufferself) -> Any: ...
    def upcast_to_Namable(self, constShaderBufferself) -> Any: ...
    def upcast_to_TypedWritableReferenceCount(self, constShaderBufferself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ShaderContext(SavedContext):
    DtoolClassDict: ClassVar[dict] = ...
    shader: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getShader(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_shader(self, ShaderContextself) -> Any: ...

class ShaderGenerator(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearGeneratedShaders(self, *args, **kwargs): ...
    def clear_generated_shaders(self, constShaderGeneratorself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def rehashGeneratedShaders(self, *args, **kwargs): ...
    def rehash_generated_shaders(self, constShaderGeneratorself) -> Any: ...
    def synthesizeShader(self, *args, **kwargs): ...
    def synthesize_shader(
        self, constShaderGeneratorself, constRenderStaters, constGeomVertexAnimationSpecanim
    ) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class ShaderInput(dtoolconfig.DTOOL_SUPER_BASE):
    ALayered: ClassVar[int] = ...
    ARead: ClassVar[int] = ...
    AWrite: ClassVar[int] = ...
    A_layered: ClassVar[int] = ...
    A_read: ClassVar[int] = ...
    A_write: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    MBuffer: ClassVar[int] = ...
    MInvalid: ClassVar[int] = ...
    MNodepath: ClassVar[int] = ...
    MNumeric: ClassVar[int] = ...
    MParam: ClassVar[int] = ...
    MTexture: ClassVar[int] = ...
    MTextureImage: ClassVar[int] = ...
    MTextureSampler: ClassVar[int] = ...
    MVector: ClassVar[int] = ...
    M_buffer: ClassVar[int] = ...
    M_invalid: ClassVar[int] = ...
    M_nodepath: ClassVar[int] = ...
    M_numeric: ClassVar[int] = ...
    M_param: ClassVar[int] = ...
    M_texture: ClassVar[int] = ...
    M_texture_image: ClassVar[int] = ...
    M_texture_sampler: ClassVar[int] = ...
    M_vector: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addHash(self, *args, **kwargs): ...
    def add_hash(self, ShaderInputself, inthash) -> Any: ...
    @staticmethod
    def getBlank(*args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNodepath(self, *args, **kwargs): ...
    def getPriority(self, *args, **kwargs): ...
    def getSampler(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    def getValueType(self, *args, **kwargs): ...
    def getVector(self, *args, **kwargs): ...
    @staticmethod
    def get_blank() -> Any: ...
    def get_name(self, ShaderInputself) -> Any: ...
    def get_nodepath(self, ShaderInputself) -> Any: ...
    def get_priority(self, ShaderInputself) -> Any: ...
    def get_sampler(self, ShaderInputself) -> Any: ...
    def get_texture(self, ShaderInputself) -> Any: ...
    def get_value_type(self, ShaderInputself) -> Any: ...
    def get_vector(self, ShaderInputself) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class ShaderPool(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def addShader(*args, **kwargs): ...
    @staticmethod
    def add_shader(constFilenamefilename, Shadershader) -> Any: ...
    @staticmethod
    def garbageCollect(*args, **kwargs): ...
    @staticmethod
    def garbage_collect() -> Any: ...
    @staticmethod
    def hasShader(*args, **kwargs): ...
    @staticmethod
    def has_shader(constFilenamefilename) -> Any: ...
    @staticmethod
    def listContents(*args, **kwargs): ...
    @staticmethod
    def list_contents(ostreamout) -> Any: ...
    @staticmethod
    def loadShader(*args, **kwargs): ...
    @staticmethod
    def load_shader(constFilenamefilename) -> Any: ...
    @staticmethod
    def releaseAllShaders(*args, **kwargs): ...
    @staticmethod
    def releaseShader(*args, **kwargs): ...
    @staticmethod
    def release_all_shaders() -> Any: ...
    @staticmethod
    def release_shader(constFilenamefilename) -> Any: ...
    @staticmethod
    def verifyShader(*args, **kwargs): ...
    @staticmethod
    def verify_shader(constFilenamefilename) -> Any: ...
    @staticmethod
    def write(ostreamout) -> Any: ...

class ShaderTerrainMesh(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    chunk_size: Incomplete
    generate_patches: Incomplete
    heightfield: Incomplete
    target_triangle_width: Incomplete
    update_enabled: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def generate(self, constShaderTerrainMeshself) -> Any: ...
    def getChunkSize(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getGeneratePatches(self, *args, **kwargs): ...
    def getHeightfield(self, *args, **kwargs): ...
    def getTargetTriangleWidth(self, *args, **kwargs): ...
    def getUpdateEnabled(self, *args, **kwargs): ...
    def get_chunk_size(self, ShaderTerrainMeshself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_generate_patches(self, ShaderTerrainMeshself) -> Any: ...
    def get_heightfield(self, ShaderTerrainMeshself) -> Any: ...
    def get_target_triangle_width(self, ShaderTerrainMeshself) -> Any: ...
    def get_update_enabled(self, ShaderTerrainMeshself) -> Any: ...
    def setChunkSize(self, *args, **kwargs): ...
    def setGeneratePatches(self, *args, **kwargs): ...
    def setHeightfield(self, *args, **kwargs): ...
    def setTargetTriangleWidth(self, *args, **kwargs): ...
    def setUpdateEnabled(self, *args, **kwargs): ...
    def set_chunk_size(self, constShaderTerrainMeshself, intchunk_size) -> Any: ...
    def set_generate_patches(self, constShaderTerrainMeshself, boolgenerate_patches) -> Any: ...
    def set_heightfield(self, constShaderTerrainMeshself, Textureheightfield) -> Any: ...
    def set_target_triangle_width(self, constShaderTerrainMeshself, floattarget_triangle_width) -> Any: ...
    def set_update_enabled(self, constShaderTerrainMeshself, boolupdate_enabled) -> Any: ...
    def uvToWorld(self, *args, **kwargs): ...
    @overload
    def uv_to_world(self, ShaderTerrainMeshself, constLPoint2fcoord) -> Any: ...
    @overload
    def uv_to_world(self, ShaderTerrainMeshself, floatu, floatv) -> Any: ...
    @overload
    def uv_to_world(self, LTexCoord) -> Any: ...

class SheetNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumUSubdiv(self, *args, **kwargs): ...
    def getNumVSubdiv(self, *args, **kwargs): ...
    def getSurface(self, *args, **kwargs): ...
    def getUseVertexColor(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_u_subdiv(self, SheetNodeself) -> Any: ...
    def get_num_v_subdiv(self, SheetNodeself) -> Any: ...
    def get_surface(self, SheetNodeself) -> Any: ...
    def get_use_vertex_color(self, SheetNodeself) -> Any: ...
    def resetBound(self, *args, **kwargs): ...
    def reset_bound(self, constSheetNodeself, constNodePathrel_to) -> Any: ...
    def setNumUSubdiv(self, *args, **kwargs): ...
    def setNumVSubdiv(self, *args, **kwargs): ...
    def setSurface(self, *args, **kwargs): ...
    def setUseVertexColor(self, *args, **kwargs): ...
    def set_num_u_subdiv(self, constSheetNodeself, intnum_u_subdiv) -> Any: ...
    def set_num_v_subdiv(self, constSheetNodeself, intnum_v_subdiv) -> Any: ...
    def set_surface(self, constSheetNodeself, NurbsSurfaceEvaluatorsurface) -> Any: ...
    def set_use_vertex_color(self, constSheetNodeself, boolflag) -> Any: ...

class ShowBoundsEffect(RenderEffect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getTight(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_tight(self, ShowBoundsEffectself) -> Any: ...
    @staticmethod
    def make(booltight) -> Any: ...

class SimpleAllocator(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def alloc(self, constSimpleAllocatorself, intsize, intalignment) -> Any: ...
    def getContiguous(self, *args, **kwargs): ...
    def getFirstBlock(self, *args, **kwargs): ...
    def getMaxSize(self, *args, **kwargs): ...
    def getTotalSize(self, *args, **kwargs): ...
    def get_contiguous(self, SimpleAllocatorself) -> Any: ...
    def get_first_block(self, SimpleAllocatorself) -> Any: ...
    def get_max_size(self, SimpleAllocatorself) -> Any: ...
    def get_total_size(self, SimpleAllocatorself) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, SimpleAllocatorself) -> Any: ...
    def output(self, SimpleAllocatorself, ostreamout) -> Any: ...
    def setMaxSize(self, *args, **kwargs): ...
    def set_max_size(self, constSimpleAllocatorself, intmax_size) -> Any: ...
    def write(self, SimpleAllocatorself, ostreamout) -> Any: ...

class SimpleAllocatorBlock(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def free(self, constSimpleAllocatorBlockself) -> Any: ...
    def getAllocator(self, *args, **kwargs): ...
    def getMaxSize(self, *args, **kwargs): ...
    def getNextBlock(self, *args, **kwargs): ...
    def getSize(self, *args, **kwargs): ...
    def getStart(self, *args, **kwargs): ...
    def get_allocator(self, SimpleAllocatorBlockself) -> Any: ...
    def get_max_size(self, SimpleAllocatorBlockself) -> Any: ...
    def get_next_block(self, SimpleAllocatorBlockself) -> Any: ...
    def get_size(self, SimpleAllocatorBlockself) -> Any: ...
    def get_start(self, SimpleAllocatorBlockself) -> Any: ...
    def isFree(self, *args, **kwargs): ...
    def is_free(self, SimpleAllocatorBlockself) -> Any: ...
    def output(self, SimpleAllocatorBlockself, ostreamout) -> Any: ...
    def realloc(self, constSimpleAllocatorBlockself, intsize) -> Any: ...

class SimpleLru(Namable):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def beginEpoch(self, *args, **kwargs): ...
    def begin_epoch(self, constSimpleLruself) -> Any: ...
    def considerEvict(self, *args, **kwargs): ...
    def consider_evict(self, constSimpleLruself) -> Any: ...
    def countActiveSize(self, *args, **kwargs): ...
    def count_active_size(self, SimpleLruself) -> Any: ...
    def evictTo(self, *args, **kwargs): ...
    def evict_to(self, constSimpleLruself, inttarget_size) -> Any: ...
    def getMaxSize(self, *args, **kwargs): ...
    def getTotalSize(self, *args, **kwargs): ...
    def get_max_size(self, SimpleLruself) -> Any: ...
    def get_total_size(self, SimpleLruself) -> Any: ...
    def output(self, SimpleLruself, ostreamout) -> Any: ...
    def setMaxSize(self, *args, **kwargs): ...
    def set_max_size(self, constSimpleLruself, intmax_size) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constSimpleLruself) -> Any: ...
    def validate(self, constSimpleLruself) -> Any: ...
    def write(self, SimpleLruself, ostreamout, intindent_level) -> Any: ...

class SimpleLruPage(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constSimpleLruPageself, constSimpleLruPagecopy) -> Any: ...
    def dequeueLru(self, *args, **kwargs): ...
    def dequeue_lru(self, constSimpleLruPageself) -> Any: ...
    def enqueueLru(self, *args, **kwargs): ...
    def enqueue_lru(self, constSimpleLruPageself, SimpleLrulru) -> Any: ...
    def evictLru(self, *args, **kwargs): ...
    def evict_lru(self, constSimpleLruPageself) -> Any: ...
    def getLru(self, *args, **kwargs): ...
    def getLruSize(self, *args, **kwargs): ...
    def get_lru(self, SimpleLruPageself) -> Any: ...
    def get_lru_size(self, SimpleLruPageself) -> Any: ...
    def markUsedLru(self, *args, **kwargs): ...
    @overload
    def mark_used_lru(self, SimpleLruPageself) -> Any: ...
    @overload
    def mark_used_lru(self, constSimpleLruPageself, SimpleLrulru) -> Any: ...
    def output(self, SimpleLruPageself, ostreamout) -> Any: ...
    def setLruSize(self, *args, **kwargs): ...
    def set_lru_size(self, constSimpleLruPageself, intlru_size) -> Any: ...
    def write(self, SimpleLruPageself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class SliderTable(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    modified: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addSlider(self, *args, **kwargs): ...
    def add_slider(self, constSliderTableself, constVertexSliderslider, constSparseArrayrows) -> Any: ...
    def assign(self, constSliderTableself, constSliderTablecopy) -> Any: ...
    def findSliders(self, *args, **kwargs): ...
    def find_sliders(self, SliderTableself, constInternalNamename) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getModified(self, *args, **kwargs): ...
    def getNumSliders(self, *args, **kwargs): ...
    def getSlider(self, *args, **kwargs): ...
    def getSliderRows(self, *args, **kwargs): ...
    def getSliders(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_modified(self, SliderTableself, Threadcurrent_thread) -> Any: ...
    def get_num_sliders(self, SliderTableself) -> Any: ...
    def get_slider(self, SliderTableself, intn) -> Any: ...
    def get_slider_rows(self, SliderTableself, intn) -> Any: ...
    def get_sliders(self, *args, **kwargs): ...
    def hasSlider(self, *args, **kwargs): ...
    def has_slider(self, SliderTableself, constInternalNamename) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def isRegistered(self, *args, **kwargs): ...
    def is_empty(self, SliderTableself) -> Any: ...
    def is_registered(self, SliderTableself) -> Any: ...
    @staticmethod
    def registerTable(*args, **kwargs): ...
    @staticmethod
    def register_table(constSliderTabletable) -> Any: ...
    def removeSlider(self, *args, **kwargs): ...
    def remove_slider(self, constSliderTableself, intn) -> Any: ...
    def setSlider(self, *args, **kwargs): ...
    def setSliderRows(self, *args, **kwargs): ...
    def set_slider(self, constSliderTableself, intn, constVertexSliderslider) -> Any: ...
    def set_slider_rows(self, constSliderTableself, intn, constSparseArrayrows) -> Any: ...
    def write(self, SliderTableself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class SocketStream(iostream, SSReader, SSWriter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constSocketStreamself) -> Any: ...
    def flush(self, constSocketStreamself) -> Any: ...
    def getTcpHeaderSize(self, *args, **kwargs): ...
    def get_tcp_header_size(self, SocketStreamself) -> Any: ...
    def isClosed(self, *args, **kwargs): ...
    def is_closed(self, constSocketStreamself) -> Any: ...
    def setTcpHeaderSize(self, *args, **kwargs): ...
    def set_tcp_header_size(self, constSocketStreamself, inttcp_header_size) -> Any: ...
    def upcastToIostream(self, *args, **kwargs): ...
    def upcastToSSReader(self, *args, **kwargs): ...
    def upcastToSSWriter(self, *args, **kwargs): ...
    def upcast_to_SSReader(self, constSocketStreamself) -> Any: ...
    def upcast_to_SSWriter(self, constSocketStreamself) -> Any: ...
    def upcast_to_iostream(self, constSocketStreamself) -> Any: ...

class SocketStreamRecorder(RecorderBase, ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def close(self, constSocketStreamRecorderself) -> Any: ...
    @overload
    def close(self) -> Any: ...
    def considerFlush(self, *args, **kwargs): ...
    @overload
    def consider_flush(self, constSocketStreamRecorderself) -> Any: ...
    @overload
    def consider_flush(self) -> Any: ...
    @overload
    def flush(self, constSocketStreamRecorderself) -> Any: ...
    @overload
    def flush(self) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCollectTcp(self, *args, **kwargs): ...
    def getCollectTcpInterval(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_collect_tcp(self, SocketStreamRecorderself) -> Any: ...
    @overload
    def get_collect_tcp(self) -> Any: ...
    @overload
    def get_collect_tcp_interval(self, SocketStreamRecorderself) -> Any: ...
    @overload
    def get_collect_tcp_interval(self) -> Any: ...
    def isClosed(self, *args, **kwargs): ...
    @overload
    def is_closed(self, constSocketStreamRecorderself) -> Any: ...
    @overload
    def is_closed(self) -> Any: ...
    def receiveDatagram(self, *args, **kwargs): ...
    def receive_datagram(self, constSocketStreamRecorderself, Datagramdg) -> Any: ...
    def sendDatagram(self, *args, **kwargs): ...
    @overload
    def send_datagram(self, constSocketStreamRecorderself, constDatagramdg) -> Any: ...
    @overload
    def send_datagram(self) -> Any: ...
    def setCollectTcp(self, *args, **kwargs): ...
    def setCollectTcpInterval(self, *args, **kwargs): ...
    @overload
    def set_collect_tcp(self, constSocketStreamRecorderself, boolcollect_tcp) -> Any: ...
    @overload
    def set_collect_tcp(self) -> Any: ...
    @overload
    def set_collect_tcp_interval(self, constSocketStreamRecorderself, doubleinterval) -> Any: ...
    @overload
    def set_collect_tcp_interval(self) -> Any: ...
    def upcastToRecorderBase(self, *args, **kwargs): ...
    def upcastToReferenceCount(self, *args, **kwargs): ...
    def upcast_to_RecorderBase(self, constSocketStreamRecorderself) -> Any: ...
    def upcast_to_ReferenceCount(self, constSocketStreamRecorderself) -> Any: ...

class SparseArray(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def allOff(*args, **kwargs): ...
    @staticmethod
    def allOn(*args, **kwargs): ...
    @staticmethod
    def all_off() -> Any: ...
    @staticmethod
    def all_on() -> Any: ...
    @staticmethod
    def bit(intindex) -> Any: ...
    def clear(self, constSparseArrayself) -> Any: ...
    def clearBit(self, *args, **kwargs): ...
    def clearRange(self, *args, **kwargs): ...
    def clear_bit(self, constSparseArrayself, intindex) -> Any: ...
    def clear_range(self, constSparseArrayself, intlow_bit, intsize) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, SparseArrayself, constSparseArrayother) -> Any: ...
    def getBit(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHighestBits(self, *args, **kwargs): ...
    def getHighestOffBit(self, *args, **kwargs): ...
    def getHighestOnBit(self, *args, **kwargs): ...
    def getLowestOffBit(self, *args, **kwargs): ...
    def getLowestOnBit(self, *args, **kwargs): ...
    @staticmethod
    def getMaxNumBits(*args, **kwargs): ...
    def getNextHigherDifferentBit(self, *args, **kwargs): ...
    def getNumBits(self, *args, **kwargs): ...
    def getNumOffBits(self, *args, **kwargs): ...
    def getNumOnBits(self, *args, **kwargs): ...
    def getNumSubranges(self, *args, **kwargs): ...
    def getSubrangeBegin(self, *args, **kwargs): ...
    def getSubrangeEnd(self, *args, **kwargs): ...
    def get_bit(self, SparseArrayself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_highest_bits(self, SparseArrayself) -> Any: ...
    def get_highest_off_bit(self, SparseArrayself) -> Any: ...
    def get_highest_on_bit(self, SparseArrayself) -> Any: ...
    def get_lowest_off_bit(self, SparseArrayself) -> Any: ...
    def get_lowest_on_bit(self, SparseArrayself) -> Any: ...
    @overload
    @staticmethod
    def get_max_num_bits() -> Any: ...
    @overload
    @staticmethod
    def get_max_num_bits() -> Any: ...
    @overload
    @staticmethod
    def get_max_num_bits() -> Any: ...
    def get_next_higher_different_bit(self, SparseArrayself, intlow_bit) -> Any: ...
    def get_num_bits(self, SparseArrayself) -> Any: ...
    def get_num_off_bits(self, SparseArrayself) -> Any: ...
    def get_num_on_bits(self, SparseArrayself) -> Any: ...
    def get_num_subranges(self, SparseArrayself) -> Any: ...
    def get_subrange_begin(self, SparseArrayself, intn) -> Any: ...
    def get_subrange_end(self, SparseArrayself, intn) -> Any: ...
    def hasAllOf(self, *args, **kwargs): ...
    def hasAnyOf(self, *args, **kwargs): ...
    def hasBitsInCommon(self, *args, **kwargs): ...
    @staticmethod
    def hasMaxNumBits(*args, **kwargs): ...
    def has_all_of(self, SparseArrayself, intlow_bit, intsize) -> Any: ...
    def has_any_of(self, SparseArrayself, intlow_bit, intsize) -> Any: ...
    def has_bits_in_common(self, SparseArrayself, constSparseArrayother) -> Any: ...
    @staticmethod
    def has_max_num_bits() -> Any: ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_in_place(self, constSparseArrayself) -> Any: ...
    def isAllOn(self, *args, **kwargs): ...
    def isInverse(self, *args, **kwargs): ...
    def isZero(self, *args, **kwargs): ...
    def is_all_on(self, SparseArrayself) -> Any: ...
    def is_inverse(self, SparseArrayself) -> Any: ...
    def is_zero(self, SparseArrayself) -> Any: ...
    @staticmethod
    def lowerOn(*args, **kwargs): ...
    @staticmethod
    def lower_on(inton_bits) -> Any: ...
    def output(self, SparseArrayself, ostreamout) -> Any: ...
    @staticmethod
    def range(intlow_bit, intsize) -> Any: ...
    def setBit(self, *args, **kwargs): ...
    def setBitTo(self, *args, **kwargs): ...
    def setRange(self, *args, **kwargs): ...
    def setRangeTo(self, *args, **kwargs): ...
    def set_bit(self, constSparseArrayself, intindex) -> Any: ...
    def set_bit_to(self, constSparseArrayself, intindex, boolvalue) -> Any: ...
    def set_range(self, constSparseArrayself, intlow_bit, intsize) -> Any: ...
    def set_range_to(self, constSparseArrayself, boolvalue, intlow_bit, intsize) -> Any: ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iand__(self, other): ...
    def __ilshift__(self, other): ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __irshift__(self, other): ...
    def __ixor__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, other): ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __rand__(self, other): ...
    def __rlshift__(self, other): ...
    def __ror__(self, other): ...
    def __rrshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rxor__(self, other): ...
    def __xor__(self, other): ...

class SphereLight(PointLight):
    DtoolClassDict: ClassVar[dict] = ...
    radius: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_radius(self, SphereLightself) -> Any: ...
    def setRadius(self, *args, **kwargs): ...
    def set_radius(self, constSphereLightself, floatradius) -> Any: ...

class Spotlight(LightLensNode):
    DtoolClassDict: ClassVar[dict] = ...
    attenuation: Incomplete
    exponent: Incomplete
    max_distance: Incomplete
    specular_color: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearSpecularColor(self, *args, **kwargs): ...
    def clear_specular_color(self, constSpotlightself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMaxDistance(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_max_distance(self, Spotlightself) -> Any: ...
    @staticmethod
    def makeSpot(*args, **kwargs): ...
    @staticmethod
    def make_spot(intpixel_width, floatfull_radius, LVecBase4ffg, LVecBase4fbg) -> Any: ...
    def setAttenuation(self, *args, **kwargs): ...
    def setExponent(self, *args, **kwargs): ...
    def setMaxDistance(self, *args, **kwargs): ...
    def setSpecularColor(self, *args, **kwargs): ...
    def set_attenuation(self, constSpotlightself, constLVecBase3fattenuation) -> Any: ...
    def set_exponent(self, constSpotlightself, floatexponent) -> Any: ...
    def set_max_distance(self, constSpotlightself, floatmax_distance) -> Any: ...
    def set_specular_color(self, constSpotlightself, constLVecBase4fcolor) -> Any: ...

class StackedPerlinNoise2(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addLevel(self, *args, **kwargs): ...
    def add_level(self, constStackedPerlinNoise2self, constPerlinNoise2level, doubleamp) -> Any: ...
    def assign(self, constStackedPerlinNoise2self, constStackedPerlinNoise2copy) -> Any: ...
    def clear(self, constStackedPerlinNoise2self) -> Any: ...
    @overload
    def noise(self, constStackedPerlinNoise2self, constLVecBase2dvalue) -> Any: ...
    @overload
    def noise(self, constStackedPerlinNoise2self, constLVecBase2fvalue) -> Any: ...
    @overload
    def noise(self, constStackedPerlinNoise2self, doublex, doubley) -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class StackedPerlinNoise3(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addLevel(self, *args, **kwargs): ...
    def add_level(self, constStackedPerlinNoise3self, constPerlinNoise3level, doubleamp) -> Any: ...
    def assign(self, constStackedPerlinNoise3self, constStackedPerlinNoise3copy) -> Any: ...
    def clear(self, constStackedPerlinNoise3self) -> Any: ...
    @overload
    def noise(self, constStackedPerlinNoise3self, constLVecBase3dvalue) -> Any: ...
    @overload
    def noise(self, constStackedPerlinNoise3self, constLVecBase3fvalue) -> Any: ...
    @overload
    def noise(self, constStackedPerlinNoise3self, doublex, doubley, doublez) -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class StaticTextFont(TextFont):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class StencilAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    SCFAlways: ClassVar[int] = ...
    SCFEqual: ClassVar[int] = ...
    SCFGreaterThan: ClassVar[int] = ...
    SCFGreaterThanOrEqual: ClassVar[int] = ...
    SCFLessThan: ClassVar[int] = ...
    SCFLessThanOrEqual: ClassVar[int] = ...
    SCFNever: ClassVar[int] = ...
    SCFNotEqual: ClassVar[int] = ...
    SCF_always: ClassVar[int] = ...
    SCF_equal: ClassVar[int] = ...
    SCF_greater_than: ClassVar[int] = ...
    SCF_greater_than_or_equal: ClassVar[int] = ...
    SCF_less_than: ClassVar[int] = ...
    SCF_less_than_or_equal: ClassVar[int] = ...
    SCF_never: ClassVar[int] = ...
    SCF_not_equal: ClassVar[int] = ...
    SODecrement: ClassVar[int] = ...
    SODecrementSaturate: ClassVar[int] = ...
    SOIncrement: ClassVar[int] = ...
    SOIncrementSaturate: ClassVar[int] = ...
    SOInvert: ClassVar[int] = ...
    SOKeep: ClassVar[int] = ...
    SOReplace: ClassVar[int] = ...
    SOZero: ClassVar[int] = ...
    SO_decrement: ClassVar[int] = ...
    SO_decrement_saturate: ClassVar[int] = ...
    SO_increment: ClassVar[int] = ...
    SO_increment_saturate: ClassVar[int] = ...
    SO_invert: ClassVar[int] = ...
    SO_keep: ClassVar[int] = ...
    SO_replace: ClassVar[int] = ...
    SO_zero: ClassVar[int] = ...
    SRSBackComparisonFunction: ClassVar[int] = ...
    SRSBackStencilFailOperation: ClassVar[int] = ...
    SRSBackStencilPassZFailOperation: ClassVar[int] = ...
    SRSBackStencilPassZPassOperation: ClassVar[int] = ...
    SRSClear: ClassVar[int] = ...
    SRSClearValue: ClassVar[int] = ...
    SRSFrontComparisonFunction: ClassVar[int] = ...
    SRSFrontStencilFailOperation: ClassVar[int] = ...
    SRSFrontStencilPassZFailOperation: ClassVar[int] = ...
    SRSFrontStencilPassZPassOperation: ClassVar[int] = ...
    SRSReadMask: ClassVar[int] = ...
    SRSReference: ClassVar[int] = ...
    SRSTotal: ClassVar[int] = ...
    SRSWriteMask: ClassVar[int] = ...
    SRS_back_comparison_function: ClassVar[int] = ...
    SRS_back_stencil_fail_operation: ClassVar[int] = ...
    SRS_back_stencil_pass_z_fail_operation: ClassVar[int] = ...
    SRS_back_stencil_pass_z_pass_operation: ClassVar[int] = ...
    SRS_clear: ClassVar[int] = ...
    SRS_clear_value: ClassVar[int] = ...
    SRS_front_comparison_function: ClassVar[int] = ...
    SRS_front_stencil_fail_operation: ClassVar[int] = ...
    SRS_front_stencil_pass_z_fail_operation: ClassVar[int] = ...
    SRS_front_stencil_pass_z_pass_operation: ClassVar[int] = ...
    SRS_read_mask: ClassVar[int] = ...
    SRS_reference: ClassVar[int] = ...
    SRS_total: ClassVar[int] = ...
    SRS_write_mask: ClassVar[int] = ...
    class_slot: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getRenderState(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_render_state(self, StencilAttribself, intrender_state_identifier) -> Any: ...
    @staticmethod
    def make(
        boolfront_enable,
        intfront_comparison_function,
        intstencil_fail_operation,
        intstencil_pass_z_fail_operation,
        intfront_stencil_pass_z_pass_operation,
        intreference,
        intread_mask,
        intwrite_mask,
    ) -> Any: ...
    @staticmethod
    def make2Sided(*args, **kwargs): ...
    @staticmethod
    def make2SidedWithClear(*args, **kwargs): ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeOff(*args, **kwargs): ...
    @staticmethod
    def makeWithClear(*args, **kwargs): ...
    @staticmethod
    def make_2_sided(
        boolfront_enable,
        boolback_enable,
        intfront_comparison_function,
        intstencil_fail_operation,
        intstencil_pass_z_fail_operation,
        intfront_stencil_pass_z_pass_operation,
        intreference,
        intread_mask,
        intwrite_mask,
        intback_comparison_function,
        intback_stencil_fail_operation,
        intback_stencil_pass_z_fail_operation,
        intback_stencil_pass_z_pass_operation,
    ) -> Any: ...
    @staticmethod
    def make_2_sided_with_clear(
        boolfront_enable,
        boolback_enable,
        intfront_comparison_function,
        intstencil_fail_operation,
        intstencil_pass_z_fail_operation,
        intfront_stencil_pass_z_pass_operation,
        intreference,
        intread_mask,
        intwrite_mask,
        intback_comparison_function,
        intback_stencil_fail_operation,
        intback_stencil_pass_z_fail_operation,
        intback_stencil_pass_z_pass_operation,
        boolclear,
        intclear_value,
    ) -> Any: ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_off() -> Any: ...
    @staticmethod
    def make_with_clear(
        boolfront_enable,
        intfront_comparison_function,
        intstencil_fail_operation,
        intstencil_pass_z_fail_operation,
        intfront_stencil_pass_z_pass_operation,
        intreference,
        intread_mask,
        intwrite_mask,
        boolclear,
        intclear_value,
    ) -> Any: ...

class StereoDisplayRegion(DisplayRegion):
    DtoolClassDict: ClassVar[dict] = ...
    left_eye: Incomplete
    right_eye: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLeftEye(self, *args, **kwargs): ...
    def getRightEye(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_left_eye(self, constStereoDisplayRegionself) -> Any: ...
    def get_right_eye(self, constStereoDisplayRegionself) -> Any: ...

class StreamReader(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    istream: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constStreamReaderself, constStreamReadercopy) -> Any: ...
    def extractBytes(self, *args, **kwargs): ...
    def extract_bytes(self, constStreamReaderself, intsize) -> Any: ...
    def getBeFloat32(self, *args, **kwargs): ...
    def getBeFloat64(self, *args, **kwargs): ...
    def getBeInt16(self, *args, **kwargs): ...
    def getBeInt32(self, *args, **kwargs): ...
    def getBeInt64(self, *args, **kwargs): ...
    def getBeUint16(self, *args, **kwargs): ...
    def getBeUint32(self, *args, **kwargs): ...
    def getBeUint64(self, *args, **kwargs): ...
    def getBool(self, *args, **kwargs): ...
    def getFixedString(self, *args, **kwargs): ...
    def getFloat32(self, *args, **kwargs): ...
    def getFloat64(self, *args, **kwargs): ...
    def getInt16(self, *args, **kwargs): ...
    def getInt32(self, *args, **kwargs): ...
    def getInt64(self, *args, **kwargs): ...
    def getInt8(self, *args, **kwargs): ...
    def getIstream(self, *args, **kwargs): ...
    def getString(self, *args, **kwargs): ...
    def getString32(self, *args, **kwargs): ...
    def getUint16(self, *args, **kwargs): ...
    def getUint32(self, *args, **kwargs): ...
    def getUint64(self, *args, **kwargs): ...
    def getUint8(self, *args, **kwargs): ...
    def getZString(self, *args, **kwargs): ...
    def get_be_float32(self, constStreamReaderself) -> Any: ...
    def get_be_float64(self, constStreamReaderself) -> Any: ...
    def get_be_int16(self, constStreamReaderself) -> Any: ...
    def get_be_int32(self, constStreamReaderself) -> Any: ...
    def get_be_int64(self, constStreamReaderself) -> Any: ...
    def get_be_uint16(self, constStreamReaderself) -> Any: ...
    def get_be_uint32(self, constStreamReaderself) -> Any: ...
    def get_be_uint64(self, constStreamReaderself) -> Any: ...
    def get_bool(self, constStreamReaderself) -> Any: ...
    def get_fixed_string(self, constStreamReaderself, intsize) -> Any: ...
    def get_float32(self, constStreamReaderself) -> Any: ...
    def get_float64(self, constStreamReaderself) -> Any: ...
    def get_int16(self, constStreamReaderself) -> Any: ...
    def get_int32(self, constStreamReaderself) -> Any: ...
    def get_int64(self, constStreamReaderself) -> Any: ...
    def get_int8(self, constStreamReaderself) -> Any: ...
    def get_istream(self, StreamReaderself) -> Any: ...
    def get_string(self, constStreamReaderself) -> Any: ...
    def get_string32(self, constStreamReaderself) -> Any: ...
    def get_uint16(self, constStreamReaderself) -> Any: ...
    def get_uint32(self, constStreamReaderself) -> Any: ...
    def get_uint64(self, constStreamReaderself) -> Any: ...
    def get_uint8(self, constStreamReaderself) -> Any: ...
    def get_z_string(self, constStreamReaderself) -> Any: ...
    def readline(self, constStreamReaderself) -> Any: ...
    def readlines(self, constStreamReaderself) -> Any: ...
    def skipBytes(self, *args, **kwargs): ...
    def skip_bytes(self, constStreamReaderself, intsize) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class StreamWrapper(IStreamWrapper, OStreamWrapper):
    DtoolClassDict: ClassVar[dict] = ...
    iostream: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getIostream(self, *args, **kwargs): ...
    def get_iostream(self, StreamWrapperself) -> Any: ...
    def upcastToIStreamWrapper(self, *args, **kwargs): ...
    def upcastToOStreamWrapper(self, *args, **kwargs): ...
    def upcast_to_IStreamWrapper(self, constStreamWrapperself) -> Any: ...
    def upcast_to_OStreamWrapper(self, constStreamWrapperself) -> Any: ...

class StreamWrapperBase(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def acquire(self, constStreamWrapperBaseself) -> Any: ...
    @overload
    def acquire(self) -> Any: ...
    def release(self, constStreamWrapperBaseself) -> Any: ...

class StreamWriter(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    ostream: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addBeFloat32(self, *args, **kwargs): ...
    def addBeFloat64(self, *args, **kwargs): ...
    def addBeInt16(self, *args, **kwargs): ...
    def addBeInt32(self, *args, **kwargs): ...
    def addBeInt64(self, *args, **kwargs): ...
    def addBeUint16(self, *args, **kwargs): ...
    def addBeUint32(self, *args, **kwargs): ...
    def addBeUint64(self, *args, **kwargs): ...
    def addBool(self, *args, **kwargs): ...
    def addFixedString(self, *args, **kwargs): ...
    def addFloat32(self, *args, **kwargs): ...
    def addFloat64(self, *args, **kwargs): ...
    def addInt16(self, *args, **kwargs): ...
    def addInt32(self, *args, **kwargs): ...
    def addInt64(self, *args, **kwargs): ...
    def addInt8(self, *args, **kwargs): ...
    def addString(self, *args, **kwargs): ...
    def addString32(self, *args, **kwargs): ...
    def addUint16(self, *args, **kwargs): ...
    def addUint32(self, *args, **kwargs): ...
    def addUint64(self, *args, **kwargs): ...
    def addUint8(self, *args, **kwargs): ...
    def addZString(self, *args, **kwargs): ...
    def add_be_float32(self, constStreamWriterself, floatvalue) -> Any: ...
    def add_be_float64(self, constStreamWriterself, doublevalue) -> Any: ...
    def add_be_int16(self, constStreamWriterself, intvalue) -> Any: ...
    def add_be_int32(self, constStreamWriterself, intvalue) -> Any: ...
    def add_be_int64(self, constStreamWriterself, longvalue) -> Any: ...
    def add_be_uint16(self, constStreamWriterself, intvalue) -> Any: ...
    def add_be_uint32(self, constStreamWriterself, intvalue) -> Any: ...
    def add_be_uint64(self, constStreamWriterself, longvalue) -> Any: ...
    def add_bool(self, constStreamWriterself, boolvalue) -> Any: ...
    def add_fixed_string(self, constStreamWriterself, strstr, intsize) -> Any: ...
    def add_float32(self, constStreamWriterself, floatvalue) -> Any: ...
    def add_float64(self, constStreamWriterself, doublevalue) -> Any: ...
    def add_int16(self, constStreamWriterself, intvalue) -> Any: ...
    def add_int32(self, constStreamWriterself, intvalue) -> Any: ...
    def add_int64(self, constStreamWriterself, longvalue) -> Any: ...
    def add_int8(self, constStreamWriterself, intvalue) -> Any: ...
    def add_string(self, constStreamWriterself, strstr) -> Any: ...
    def add_string32(self, constStreamWriterself, strstr) -> Any: ...
    def add_uint16(self, constStreamWriterself, intvalue) -> Any: ...
    def add_uint32(self, constStreamWriterself, intvalue) -> Any: ...
    def add_uint64(self, constStreamWriterself, longvalue) -> Any: ...
    def add_uint8(self, constStreamWriterself, intvalue) -> Any: ...
    def add_z_string(self, constStreamWriterself, strstr) -> Any: ...
    def appendData(self, *args, **kwargs): ...
    def append_data(self, constStreamWriterself, objectdata) -> Any: ...
    def assign(self, constStreamWriterself, constStreamWritercopy) -> Any: ...
    @overload
    def flush(self, constStreamWriterself) -> Any: ...
    @overload
    def flush(self) -> Any: ...
    def getOstream(self, *args, **kwargs): ...
    def get_ostream(self, StreamWriterself) -> Any: ...
    def padBytes(self, *args, **kwargs): ...
    def pad_bytes(self, constStreamWriterself, intsize) -> Any: ...
    def write(self, constStreamWriterself, strstr) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class StringStream(iostream):
    DtoolClassDict: ClassVar[dict] = ...
    data: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearData(self, *args, **kwargs): ...
    def clear_data(self, constStringStreamself) -> Any: ...
    def getData(self, *args, **kwargs): ...
    def getDataSize(self, *args, **kwargs): ...
    def get_data(self, constStringStreamself) -> Any: ...
    def get_data_size(self, constStringStreamself) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def set_data(self, constStringStreamself, objectdata) -> Any: ...

class SubStream(iostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constSubStreamself) -> Any: ...
    def open(self, constSubStreamself, StreamWrappernested, longstart, longend, boolappend) -> Any: ...

class SubfileInfo(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constSubfileInfoself, constSubfileInfocopy) -> Any: ...
    def getFile(self, *args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getSize(self, *args, **kwargs): ...
    def getStart(self, *args, **kwargs): ...
    def get_file(self, SubfileInfoself) -> Any: ...
    def get_filename(self, SubfileInfoself) -> Any: ...
    def get_size(self, SubfileInfoself) -> Any: ...
    def get_start(self, SubfileInfoself) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, SubfileInfoself) -> Any: ...
    def output(self, SubfileInfoself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class SwitchNode(SelectiveChildNode):
    DtoolClassDict: ClassVar[dict] = ...
    visible_child: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getVisibleChild(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_visible_child(self, SwitchNodeself) -> Any: ...
    def setVisibleChild(self, *args, **kwargs): ...
    def set_visible_child(self, constSwitchNodeself, intindex) -> Any: ...

class TemporaryFile(FileReference):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TexGenAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    class_slot: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addStage(self, *args, **kwargs): ...
    @overload
    def add_stage(self, TexGenAttribself, TextureStagestage, intmode) -> Any: ...
    @overload
    def add_stage(self, TexGenAttribself, TextureStagestage, intmode, constLPoint3fconstant_value) -> Any: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getConstantValue(self, *args, **kwargs): ...
    def getGeomRendering(self, *args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_constant_value(self, TexGenAttribself, TextureStagestage) -> Any: ...
    def get_geom_rendering(self, TexGenAttribself, intgeom_rendering) -> Any: ...
    def get_mode(self, TexGenAttribself, TextureStagestage) -> Any: ...
    def hasGenTexcoordStage(self, *args, **kwargs): ...
    def hasStage(self, *args, **kwargs): ...
    def has_gen_texcoord_stage(self, TexGenAttribself, TextureStagestage) -> Any: ...
    def has_stage(self, TexGenAttribself, TextureStagestage) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, TexGenAttribself) -> Any: ...
    @overload
    @staticmethod
    def make() -> Any: ...
    @overload
    @staticmethod
    def make(TextureStagestage, intmode) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    def removeStage(self, *args, **kwargs): ...
    def remove_stage(self, TexGenAttribself, TextureStagestage) -> Any: ...

class TexMatrixAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    class_slot: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addStage(self, *args, **kwargs): ...
    def add_stage(self, TexMatrixAttribself, TextureStagestage, constTransformStatetransform, intoverride) -> Any: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getGeomRendering(self, *args, **kwargs): ...
    def getMat(self, *args, **kwargs): ...
    def getNumStages(self, *args, **kwargs): ...
    def getOverride(self, *args, **kwargs): ...
    def getStage(self, *args, **kwargs): ...
    def getStages(self, *args, **kwargs): ...
    def getTransform(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_geom_rendering(self, TexMatrixAttribself, intgeom_rendering) -> Any: ...
    @overload
    def get_mat(self, TexMatrixAttribself) -> Any: ...
    @overload
    def get_mat(self, TexMatrixAttribself, TextureStagestage) -> Any: ...
    def get_num_stages(self, TexMatrixAttribself) -> Any: ...
    def get_override(self, TexMatrixAttribself, TextureStagestage) -> Any: ...
    def get_stage(self, TexMatrixAttribself, intn) -> Any: ...
    def get_stages(self, *args, **kwargs): ...
    def get_transform(self, TexMatrixAttribself, TextureStagestage) -> Any: ...
    def hasStage(self, *args, **kwargs): ...
    def has_stage(self, TexMatrixAttribself, TextureStagestage) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, TexMatrixAttribself) -> Any: ...
    @overload
    @staticmethod
    def make() -> Any: ...
    @overload
    @staticmethod
    def make(constLMatrix4fmat) -> Any: ...
    @overload
    @staticmethod
    def make(TextureStagestage, constTransformStatetransform) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...
    def removeStage(self, *args, **kwargs): ...
    def remove_stage(self, TexMatrixAttribself, TextureStagestage) -> Any: ...

class TexProjectorEffect(RenderEffect):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addStage(self, *args, **kwargs): ...
    def add_stage(
        self, TexProjectorEffectself, TextureStagestage, constNodePathfrom, constNodePathto, intlens_index
    ) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFrom(self, *args, **kwargs): ...
    def getLensIndex(self, *args, **kwargs): ...
    def getTo(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_from(self, TexProjectorEffectself, TextureStagestage) -> Any: ...
    def get_lens_index(self, TexProjectorEffectself, TextureStagestage) -> Any: ...
    def get_to(self, TexProjectorEffectself, TextureStagestage) -> Any: ...
    def hasStage(self, *args, **kwargs): ...
    def has_stage(self, TexProjectorEffectself, TextureStagestage) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, TexProjectorEffectself) -> Any: ...
    @staticmethod
    def make() -> Any: ...
    def removeStage(self, *args, **kwargs): ...
    def remove_stage(self, TexProjectorEffectself, TextureStagestage) -> Any: ...

class TextAssembler(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    dynamic_merge: Incomplete
    max_rows: Incomplete
    multiline_mode: Incomplete
    properties: Incomplete
    usage_hint: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assembleText(self, *args, **kwargs): ...
    def assemble_text(self, constTextAssemblerself) -> Any: ...
    def assign(self, constTextAssemblerself, constTextAssemblercopy) -> Any: ...
    def calcC(self, *args, **kwargs): ...
    def calcIndex(self, *args, **kwargs): ...
    def calcR(self, *args, **kwargs): ...
    @staticmethod
    def calcWidth(*args, **kwargs): ...
    def calc_c(self, TextAssemblerself, intn) -> Any: ...
    def calc_index(self, TextAssemblerself, intr, intc) -> Any: ...
    def calc_r(self, TextAssemblerself, intn) -> Any: ...
    @overload
    @staticmethod
    def calc_width(constTextGraphicgraphic, constTextPropertiesproperties) -> Any: ...
    @overload
    @staticmethod
    def calc_width(intcharacter, constTextPropertiesproperties) -> Any: ...
    @overload
    @staticmethod
    def calc_width(unicodecharcharacter, constTextPropertiesproperties) -> Any: ...
    def clear(self, constTextAssemblerself) -> Any: ...
    def getCharacter(self, *args, **kwargs): ...
    def getDynamicMerge(self, *args, **kwargs): ...
    def getGraphic(self, *args, **kwargs): ...
    def getLr(self, *args, **kwargs): ...
    def getMaxRows(self, *args, **kwargs): ...
    def getMultilineMode(self, *args, **kwargs): ...
    def getNumCharacters(self, *args, **kwargs): ...
    def getNumCols(self, *args, **kwargs): ...
    def getNumRows(self, *args, **kwargs): ...
    def getPlainWtext(self, *args, **kwargs): ...
    def getProperties(self, *args, **kwargs): ...
    def getUl(self, *args, **kwargs): ...
    def getUsageHint(self, *args, **kwargs): ...
    def getWidth(self, *args, **kwargs): ...
    def getWordwrappedPlainWtext(self, *args, **kwargs): ...
    def getWordwrappedWtext(self, *args, **kwargs): ...
    def getWtext(self, *args, **kwargs): ...
    def getXpos(self, *args, **kwargs): ...
    def getYpos(self, *args, **kwargs): ...
    @overload
    def get_character(self, TextAssemblerself, intn) -> Any: ...
    @overload
    def get_character(self, TextAssemblerself, intr, intc) -> Any: ...
    def get_dynamic_merge(self, TextAssemblerself) -> Any: ...
    @overload
    def get_graphic(self, TextAssemblerself, intn) -> Any: ...
    @overload
    def get_graphic(self, TextAssemblerself, intr, intc) -> Any: ...
    def get_lr(self, TextAssemblerself) -> Any: ...
    def get_max_rows(self, TextAssemblerself) -> Any: ...
    def get_multiline_mode(self, TextAssemblerself) -> Any: ...
    def get_num_characters(self, TextAssemblerself) -> Any: ...
    def get_num_cols(self, TextAssemblerself, intr) -> Any: ...
    def get_num_rows(self, TextAssemblerself) -> Any: ...
    def get_plain_wtext(self, TextAssemblerself) -> Any: ...
    @overload
    def get_properties(self, TextAssemblerself) -> Any: ...
    @overload
    def get_properties(self, TextAssemblerself, intn) -> Any: ...
    @overload
    def get_properties(self, TextAssemblerself, intr, intc) -> Any: ...
    def get_ul(self, TextAssemblerself) -> Any: ...
    def get_usage_hint(self, TextAssemblerself) -> Any: ...
    @overload
    def get_width(self, TextAssemblerself, intn) -> Any: ...
    @overload
    def get_width(self, TextAssemblerself, intr, intc) -> Any: ...
    def get_wordwrapped_plain_wtext(self, TextAssemblerself) -> Any: ...
    def get_wordwrapped_wtext(self, TextAssemblerself) -> Any: ...
    def get_wtext(self, TextAssemblerself) -> Any: ...
    def get_xpos(self, TextAssemblerself, intr, intc) -> Any: ...
    def get_ypos(self, TextAssemblerself, intr, intc) -> Any: ...
    @staticmethod
    def hasCharacter(*args, **kwargs): ...
    @staticmethod
    def hasExactCharacter(*args, **kwargs): ...
    @staticmethod
    def has_character(unicodecharcharacter, constTextPropertiesproperties) -> Any: ...
    @staticmethod
    def has_exact_character(unicodecharcharacter, constTextPropertiesproperties) -> Any: ...
    @staticmethod
    def isWhitespace(*args, **kwargs): ...
    @staticmethod
    def is_whitespace(unicodecharcharacter, constTextPropertiesproperties) -> Any: ...
    def setDynamicMerge(self, *args, **kwargs): ...
    def setMaxRows(self, *args, **kwargs): ...
    def setMultilineMode(self, *args, **kwargs): ...
    def setProperties(self, *args, **kwargs): ...
    def setUsageHint(self, *args, **kwargs): ...
    def setWsubstr(self, *args, **kwargs): ...
    def setWtext(self, *args, **kwargs): ...
    def set_dynamic_merge(self, constTextAssemblerself, booldynamic_merge) -> Any: ...
    def set_max_rows(self, constTextAssemblerself, intmax_rows) -> Any: ...
    def set_multiline_mode(self, constTextAssemblerself, boolflag) -> Any: ...
    def set_properties(self, constTextAssemblerself, constTextPropertiesproperties) -> Any: ...
    def set_usage_hint(self, constTextAssemblerself, intusage_hint) -> Any: ...
    @overload
    def set_wsubstr(self, constTextAssemblerself, unicodewtext, intstart, intcount) -> Any: ...
    @overload
    def set_wsubstr(self) -> Any: ...
    def set_wtext(self, constTextAssemblerself, unicodewtext) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TextEncoder(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    ECp437: ClassVar[int] = ...
    EIso8859: ClassVar[int] = ...
    EUnicode: ClassVar[int] = ...
    EUtf16be: ClassVar[int] = ...
    EUtf8: ClassVar[int] = ...
    E_cp437: ClassVar[int] = ...
    E_iso8859: ClassVar[int] = ...
    E_unicode: ClassVar[int] = ...
    E_utf16be: ClassVar[int] = ...
    E_utf8: ClassVar[int] = ...
    default_encoding: Incomplete
    text: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def appendText(self, *args, **kwargs): ...
    def appendUnicodeChar(self, *args, **kwargs): ...
    def appendWtext(self, *args, **kwargs): ...
    def append_text(self, constTextEncoderself, objecttext) -> Any: ...
    def append_unicode_char(self, constTextEncoderself, intcharacter) -> Any: ...
    def append_wtext(self, constTextEncoderself, unicodetext) -> Any: ...
    def clearText(self, *args, **kwargs): ...
    def clear_text(self, constTextEncoderself) -> Any: ...
    def decodeText(self, *args, **kwargs): ...
    @overload
    def decode_text(self, TextEncoderself, objecttext) -> Any: ...
    @overload
    def decode_text(self, objecttext, intencoding) -> Any: ...
    @staticmethod
    def encodeWchar(*args, **kwargs): ...
    def encodeWtext(self, *args, **kwargs): ...
    @staticmethod
    def encode_wchar(intch, intencoding) -> Any: ...
    @overload
    def encode_wtext(self, TextEncoderself, unicodewtext) -> Any: ...
    @overload
    def encode_wtext(self, unicodewtext, intencoding) -> Any: ...
    @staticmethod
    def getDefaultEncoding(*args, **kwargs): ...
    def getEncodedChar(self, *args, **kwargs): ...
    def getEncoding(self, *args, **kwargs): ...
    def getNumChars(self, *args, **kwargs): ...
    def getText(self, *args, **kwargs): ...
    def getTextAsAscii(self, *args, **kwargs): ...
    def getUnicodeChar(self, *args, **kwargs): ...
    def getWtext(self, *args, **kwargs): ...
    def getWtextAsAscii(self, *args, **kwargs): ...
    @staticmethod
    def get_default_encoding() -> Any: ...
    @overload
    def get_encoded_char(self, TextEncoderself, intindex) -> Any: ...
    @overload
    def get_encoded_char(self, TextEncoderself, intindex, intencoding) -> Any: ...
    def get_encoding(self, TextEncoderself) -> Any: ...
    def get_num_chars(self, TextEncoderself) -> Any: ...
    @overload
    def get_text(self, TextEncoderself) -> Any: ...
    @overload
    def get_text(self, TextEncoderself, intencoding) -> Any: ...
    def get_text_as_ascii(self, TextEncoderself) -> Any: ...
    def get_unicode_char(self, TextEncoderself, intindex) -> Any: ...
    def get_wtext(self, TextEncoderself) -> Any: ...
    def get_wtext_as_ascii(self, TextEncoderself) -> Any: ...
    def hasText(self, *args, **kwargs): ...
    def has_text(self, TextEncoderself) -> Any: ...
    def isWtext(self, *args, **kwargs): ...
    def is_wtext(self, TextEncoderself) -> Any: ...
    @overload
    @staticmethod
    def lower(strsource) -> Any: ...
    @overload
    @staticmethod
    def lower(strsource, intencoding) -> Any: ...
    def makeLower(self, *args, **kwargs): ...
    def makeUpper(self, *args, **kwargs): ...
    def make_lower(self, constTextEncoderself) -> Any: ...
    def make_upper(self, constTextEncoderself) -> Any: ...
    @staticmethod
    def reencodeText(*args, **kwargs): ...
    @staticmethod
    def reencode_text(strtext, intfrom, intto) -> Any: ...
    @staticmethod
    def setDefaultEncoding(*args, **kwargs): ...
    def setEncoding(self, *args, **kwargs): ...
    def setText(self, *args, **kwargs): ...
    def setUnicodeChar(self, *args, **kwargs): ...
    def setWtext(self, *args, **kwargs): ...
    @staticmethod
    def set_default_encoding(intencoding) -> Any: ...
    def set_encoding(self, constTextEncoderself, intencoding) -> Any: ...
    @overload
    def set_text(self, constTextEncoderself, objecttext) -> Any: ...
    @overload
    def set_text(self, constTextEncoderself, objecttext, intencoding) -> Any: ...
    @overload
    def set_text(self) -> Any: ...
    def set_unicode_char(self, constTextEncoderself, intindex, intcharacter) -> Any: ...
    def set_wtext(self, constTextEncoderself, unicodewtext) -> Any: ...
    @staticmethod
    def unicodeIsalpha(*args, **kwargs): ...
    @staticmethod
    def unicodeIsdigit(*args, **kwargs): ...
    @staticmethod
    def unicodeIslower(*args, **kwargs): ...
    @staticmethod
    def unicodeIspunct(*args, **kwargs): ...
    @staticmethod
    def unicodeIsspace(*args, **kwargs): ...
    @staticmethod
    def unicodeIsupper(*args, **kwargs): ...
    @staticmethod
    def unicodeTolower(*args, **kwargs): ...
    @staticmethod
    def unicodeToupper(*args, **kwargs): ...
    @staticmethod
    def unicode_isalpha(intcharacter) -> Any: ...
    @staticmethod
    def unicode_isdigit(intcharacter) -> Any: ...
    @staticmethod
    def unicode_islower(intcharacter) -> Any: ...
    @staticmethod
    def unicode_ispunct(intcharacter) -> Any: ...
    @staticmethod
    def unicode_isspace(intcharacter) -> Any: ...
    @staticmethod
    def unicode_isupper(intcharacter) -> Any: ...
    @staticmethod
    def unicode_tolower(intcharacter) -> Any: ...
    @staticmethod
    def unicode_toupper(intcharacter) -> Any: ...
    @overload
    @staticmethod
    def upper(strsource) -> Any: ...
    @overload
    @staticmethod
    def upper(strsource, intencoding) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TextFont(TypedReferenceCount, Namable):
    DtoolClassDict: ClassVar[dict] = ...
    RMDistanceField: ClassVar[int] = ...
    RMExtruded: ClassVar[int] = ...
    RMInvalid: ClassVar[int] = ...
    RMPolygon: ClassVar[int] = ...
    RMSolid: ClassVar[int] = ...
    RMTexture: ClassVar[int] = ...
    RMWireframe: ClassVar[int] = ...
    RM_distance_field: ClassVar[int] = ...
    RM_extruded: ClassVar[int] = ...
    RM_invalid: ClassVar[int] = ...
    RM_polygon: ClassVar[int] = ...
    RM_solid: ClassVar[int] = ...
    RM_texture: ClassVar[int] = ...
    RM_wireframe: ClassVar[int] = ...
    line_height: Incomplete
    space_advance: Incomplete
    valid: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getGlyph(self, *args, **kwargs): ...
    def getKerning(self, *args, **kwargs): ...
    def getLineHeight(self, *args, **kwargs): ...
    def getSpaceAdvance(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_glyph(self, constTextFontself, intcharacter) -> Any: ...
    def get_kerning(self, TextFontself, intfirst, intsecond) -> Any: ...
    def get_line_height(self, TextFontself) -> Any: ...
    def get_space_advance(self, TextFontself) -> Any: ...
    def isValid(self, *args, **kwargs): ...
    def is_valid(self, TextFontself) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, TextFontself) -> Any: ...
    def setLineHeight(self, *args, **kwargs): ...
    def setSpaceAdvance(self, *args, **kwargs): ...
    def set_line_height(self, constTextFontself, floatline_height) -> Any: ...
    def set_space_advance(self, constTextFontself, floatspace_advance) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constTextFontself) -> Any: ...
    def upcast_to_TypedReferenceCount(self, constTextFontself) -> Any: ...
    def write(self, TextFontself, ostreamout, intindent_level) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TextGlyph(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    advance: Incomplete
    character: Incomplete
    state: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getAdvance(self, *args, **kwargs): ...
    def getCharacter(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getGeom(self, *args, **kwargs): ...
    def getQuad(self, *args, **kwargs): ...
    def getState(self, *args, **kwargs): ...
    def get_advance(self, TextGlyphself) -> Any: ...
    def get_character(self, TextGlyphself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_geom(self, TextGlyphself, intusage_hint) -> Any: ...
    def get_quad(self, TextGlyphself, LVecBase4fdimensions, LVecBase4ftexcoords) -> Any: ...
    def get_state(self, TextGlyphself) -> Any: ...
    def hasQuad(self, *args, **kwargs): ...
    def has_quad(self, TextGlyphself) -> Any: ...
    def isWhitespace(self, *args, **kwargs): ...
    def is_whitespace(self, TextGlyphself) -> Any: ...

class TextGraphic(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    frame: Incomplete
    instance_flag: Incomplete
    model: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getFrame(self, *args, **kwargs): ...
    def getInstanceFlag(self, *args, **kwargs): ...
    def getModel(self, *args, **kwargs): ...
    def get_frame(self, TextGraphicself) -> Any: ...
    def get_instance_flag(self, TextGraphicself) -> Any: ...
    def get_model(self, TextGraphicself) -> Any: ...
    def setFrame(self, *args, **kwargs): ...
    def setInstanceFlag(self, *args, **kwargs): ...
    def setModel(self, *args, **kwargs): ...
    @overload
    def set_frame(self, constTextGraphicself, constLVecBase4fframe) -> Any: ...
    @overload
    def set_frame(self, constTextGraphicself, floatleft, floatright, floatbottom, floattop) -> Any: ...
    def set_instance_flag(self, constTextGraphicself, boolinstance_flag) -> Any: ...
    def set_model(self, constTextGraphicself, constNodePathmodel) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TextNode(PandaNode, TextEncoder, TextProperties):
    DtoolClassDict: ClassVar[dict] = ...
    FFDynamicMerge: ClassVar[int] = ...
    FFLight: ClassVar[int] = ...
    FFMedium: ClassVar[int] = ...
    FFNone: ClassVar[int] = ...
    FFStrong: ClassVar[int] = ...
    FF_dynamic_merge: ClassVar[int] = ...
    FF_light: ClassVar[int] = ...
    FF_medium: ClassVar[int] = ...
    FF_none: ClassVar[int] = ...
    FF_strong: ClassVar[int] = ...
    align: Incomplete
    bin: Incomplete
    card_color: Incomplete
    card_texture: Incomplete
    coordinate_system: Incomplete
    draw_order: Incomplete
    flatten_flags: Incomplete
    font: Incomplete
    frame_color: Incomplete
    frame_corners: Incomplete
    frame_line_width: Incomplete
    glyph_scale: Incomplete
    glyph_shift: Incomplete
    indent: Incomplete
    max_rows: Incomplete
    preserve_trailing_whitespace: Incomplete
    shadow: Incomplete
    shadow_color: Incomplete
    slant: Incomplete
    small_caps: Incomplete
    small_caps_scale: Incomplete
    tab_width: Incomplete
    text_color: Incomplete
    text_scale: Incomplete
    transform: Incomplete
    underscore: Incomplete
    underscore_height: Incomplete
    usage_hint: Incomplete
    wordwrap: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def calcWidth(self, *args, **kwargs): ...
    @overload
    def calc_width(self, TextNodeself, unicodeline) -> Any: ...
    @overload
    def calc_width(self, TextNodeself, strline) -> Any: ...
    @overload
    def calc_width(self, TextNodeself, unicodecharcharacter) -> Any: ...
    def clearAlign(self, *args, **kwargs): ...
    def clearBin(self, *args, **kwargs): ...
    def clearCard(self, *args, **kwargs): ...
    def clearCardBorder(self, *args, **kwargs): ...
    def clearCardTexture(self, *args, **kwargs): ...
    def clearDrawOrder(self, *args, **kwargs): ...
    def clearFont(self, *args, **kwargs): ...
    def clearFrame(self, *args, **kwargs): ...
    def clearGlyphScale(self, *args, **kwargs): ...
    def clearGlyphShift(self, *args, **kwargs): ...
    def clearIndent(self, *args, **kwargs): ...
    def clearMaxRows(self, *args, **kwargs): ...
    def clearShadow(self, *args, **kwargs): ...
    def clearShadowColor(self, *args, **kwargs): ...
    def clearSlant(self, *args, **kwargs): ...
    def clearSmallCaps(self, *args, **kwargs): ...
    def clearSmallCapsScale(self, *args, **kwargs): ...
    def clearTabWidth(self, *args, **kwargs): ...
    def clearTextColor(self, *args, **kwargs): ...
    def clearWordwrap(self, *args, **kwargs): ...
    def clear_align(self, constTextNodeself) -> Any: ...
    def clear_bin(self, constTextNodeself) -> Any: ...
    def clear_card(self, constTextNodeself) -> Any: ...
    def clear_card_border(self, constTextNodeself) -> Any: ...
    def clear_card_texture(self, constTextNodeself) -> Any: ...
    def clear_draw_order(self, constTextNodeself) -> Any: ...
    def clear_font(self, constTextNodeself) -> Any: ...
    def clear_frame(self, constTextNodeself) -> Any: ...
    def clear_glyph_scale(self, constTextNodeself) -> Any: ...
    def clear_glyph_shift(self, constTextNodeself) -> Any: ...
    def clear_indent(self, constTextNodeself) -> Any: ...
    def clear_max_rows(self, constTextNodeself) -> Any: ...
    def clear_shadow(self, constTextNodeself) -> Any: ...
    def clear_shadow_color(self, constTextNodeself) -> Any: ...
    def clear_slant(self, constTextNodeself) -> Any: ...
    def clear_small_caps(self, constTextNodeself) -> Any: ...
    def clear_small_caps_scale(self, constTextNodeself) -> Any: ...
    def clear_tab_width(self, constTextNodeself) -> Any: ...
    def clear_text_color(self, constTextNodeself) -> Any: ...
    def clear_wordwrap(self, constTextNodeself) -> Any: ...
    def forceUpdate(self, *args, **kwargs): ...
    def force_update(self, constTextNodeself) -> Any: ...
    def generate(self, constTextNodeself) -> Any: ...
    def getBottom(self, *args, **kwargs): ...
    def getCardActual(self, *args, **kwargs): ...
    def getCardAsSet(self, *args, **kwargs): ...
    def getCardBorderSize(self, *args, **kwargs): ...
    def getCardBorderUvPortion(self, *args, **kwargs): ...
    def getCardColor(self, *args, **kwargs): ...
    def getCardDecal(self, *args, **kwargs): ...
    def getCardTexture(self, *args, **kwargs): ...
    def getCardTransformed(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCoordinateSystem(self, *args, **kwargs): ...
    def getFlattenFlags(self, *args, **kwargs): ...
    def getFrameActual(self, *args, **kwargs): ...
    def getFrameAsSet(self, *args, **kwargs): ...
    def getFrameColor(self, *args, **kwargs): ...
    def getFrameCorners(self, *args, **kwargs): ...
    def getFrameLineWidth(self, *args, **kwargs): ...
    def getHeight(self, *args, **kwargs): ...
    def getInternalGeom(self, *args, **kwargs): ...
    def getLeft(self, *args, **kwargs): ...
    def getLineHeight(self, *args, **kwargs): ...
    def getLowerRight3d(self, *args, **kwargs): ...
    def getMaxRows(self, *args, **kwargs): ...
    def getNumRows(self, *args, **kwargs): ...
    def getRight(self, *args, **kwargs): ...
    def getTop(self, *args, **kwargs): ...
    def getTransform(self, *args, **kwargs): ...
    def getUpperLeft3d(self, *args, **kwargs): ...
    def getUsageHint(self, *args, **kwargs): ...
    def getWidth(self, *args, **kwargs): ...
    def getWordwrappedText(self, *args, **kwargs): ...
    def getWordwrappedWtext(self, *args, **kwargs): ...
    def get_bottom(self, TextNodeself) -> Any: ...
    def get_card_actual(self, TextNodeself) -> Any: ...
    def get_card_as_set(self, TextNodeself) -> Any: ...
    def get_card_border_size(self, TextNodeself) -> Any: ...
    def get_card_border_uv_portion(self, TextNodeself) -> Any: ...
    def get_card_color(self, TextNodeself) -> Any: ...
    def get_card_decal(self, TextNodeself) -> Any: ...
    def get_card_texture(self, TextNodeself) -> Any: ...
    def get_card_transformed(self, TextNodeself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_coordinate_system(self, TextNodeself) -> Any: ...
    def get_flatten_flags(self, TextNodeself) -> Any: ...
    def get_frame_actual(self, TextNodeself) -> Any: ...
    def get_frame_as_set(self, TextNodeself) -> Any: ...
    def get_frame_color(self, TextNodeself) -> Any: ...
    def get_frame_corners(self, TextNodeself) -> Any: ...
    def get_frame_line_width(self, TextNodeself) -> Any: ...
    def get_height(self, TextNodeself) -> Any: ...
    def get_internal_geom(self, TextNodeself) -> Any: ...
    def get_left(self, TextNodeself) -> Any: ...
    def get_line_height(self, TextNodeself) -> Any: ...
    def get_lower_right_3d(self, TextNodeself) -> Any: ...
    def get_max_rows(self, TextNodeself) -> Any: ...
    def get_num_rows(self, TextNodeself) -> Any: ...
    def get_right(self, TextNodeself) -> Any: ...
    def get_top(self, TextNodeself) -> Any: ...
    def get_transform(self, TextNodeself) -> Any: ...
    def get_upper_left_3d(self, TextNodeself) -> Any: ...
    def get_usage_hint(self, TextNodeself) -> Any: ...
    def get_width(self, TextNodeself) -> Any: ...
    def get_wordwrapped_text(self, TextNodeself) -> Any: ...
    def get_wordwrapped_wtext(self, TextNodeself) -> Any: ...
    def hasCard(self, *args, **kwargs): ...
    def hasCardBorder(self, *args, **kwargs): ...
    def hasCardTexture(self, *args, **kwargs): ...
    def hasCharacter(self, *args, **kwargs): ...
    def hasExactCharacter(self, *args, **kwargs): ...
    def hasFrame(self, *args, **kwargs): ...
    def hasMaxRows(self, *args, **kwargs): ...
    def hasOverflow(self, *args, **kwargs): ...
    def has_card(self, TextNodeself) -> Any: ...
    def has_card_border(self, TextNodeself) -> Any: ...
    def has_card_texture(self, TextNodeself) -> Any: ...
    def has_character(self, TextNodeself, unicodecharcharacter) -> Any: ...
    def has_exact_character(self, TextNodeself, unicodecharcharacter) -> Any: ...
    def has_frame(self, TextNodeself) -> Any: ...
    def has_max_rows(self, TextNodeself) -> Any: ...
    def has_overflow(self, TextNodeself) -> Any: ...
    def isCardAsMargin(self, *args, **kwargs): ...
    def isFrameAsMargin(self, *args, **kwargs): ...
    def isWhitespace(self, *args, **kwargs): ...
    def is_card_as_margin(self, TextNodeself) -> Any: ...
    def is_frame_as_margin(self, TextNodeself) -> Any: ...
    def is_whitespace(self, TextNodeself, unicodecharcharacter) -> Any: ...
    def output(self, TextNodeself, ostreamout) -> Any: ...
    def setAlign(self, *args, **kwargs): ...
    def setBin(self, *args, **kwargs): ...
    def setCardActual(self, *args, **kwargs): ...
    def setCardAsMargin(self, *args, **kwargs): ...
    def setCardBorder(self, *args, **kwargs): ...
    def setCardColor(self, *args, **kwargs): ...
    def setCardDecal(self, *args, **kwargs): ...
    def setCardTexture(self, *args, **kwargs): ...
    def setCoordinateSystem(self, *args, **kwargs): ...
    def setDrawOrder(self, *args, **kwargs): ...
    def setFlattenFlags(self, *args, **kwargs): ...
    def setFont(self, *args, **kwargs): ...
    def setFrameActual(self, *args, **kwargs): ...
    def setFrameAsMargin(self, *args, **kwargs): ...
    def setFrameColor(self, *args, **kwargs): ...
    def setFrameCorners(self, *args, **kwargs): ...
    def setFrameLineWidth(self, *args, **kwargs): ...
    def setGlyphScale(self, *args, **kwargs): ...
    def setGlyphShift(self, *args, **kwargs): ...
    def setIndent(self, *args, **kwargs): ...
    def setMaxRows(self, *args, **kwargs): ...
    def setShadow(self, *args, **kwargs): ...
    def setShadowColor(self, *args, **kwargs): ...
    def setSlant(self, *args, **kwargs): ...
    def setSmallCaps(self, *args, **kwargs): ...
    def setSmallCapsScale(self, *args, **kwargs): ...
    def setTabWidth(self, *args, **kwargs): ...
    def setTextColor(self, *args, **kwargs): ...
    def setTransform(self, *args, **kwargs): ...
    def setUsageHint(self, *args, **kwargs): ...
    def setWordwrap(self, *args, **kwargs): ...
    def set_align(self, constTextNodeself, intalign_type) -> Any: ...
    def set_bin(self, constTextNodeself, strbin) -> Any: ...
    def set_card_actual(self, constTextNodeself, floatleft, floatright, floatbottom, floattop) -> Any: ...
    def set_card_as_margin(self, constTextNodeself, floatleft, floatright, floatbottom, floattop) -> Any: ...
    def set_card_border(self, constTextNodeself, floatsize, floatuv_portion) -> Any: ...
    @overload
    def set_card_color(self, constTextNodeself, constLVecBase4fcard_color) -> Any: ...
    @overload
    def set_card_color(self, constTextNodeself, floatr, floatg, floatb, floata) -> Any: ...
    def set_card_decal(self, constTextNodeself, boolcard_decal) -> Any: ...
    def set_card_texture(self, constTextNodeself, Texturecard_texture) -> Any: ...
    def set_coordinate_system(self, constTextNodeself, intcs) -> Any: ...
    def set_draw_order(self, constTextNodeself, intdraw_order) -> Any: ...
    def set_flatten_flags(self, constTextNodeself, intflatten_flags) -> Any: ...
    def set_font(self, constTextNodeself, TextFontfont) -> Any: ...
    def set_frame_actual(self, constTextNodeself, floatleft, floatright, floatbottom, floattop) -> Any: ...
    def set_frame_as_margin(self, constTextNodeself, floatleft, floatright, floatbottom, floattop) -> Any: ...
    @overload
    def set_frame_color(self, constTextNodeself, constLVecBase4fframe_color) -> Any: ...
    @overload
    def set_frame_color(self, constTextNodeself, floatr, floatg, floatb, floata) -> Any: ...
    def set_frame_corners(self, constTextNodeself, boolcorners) -> Any: ...
    def set_frame_line_width(self, constTextNodeself, floatline_width) -> Any: ...
    def set_glyph_scale(self, constTextNodeself, floatglyph_scale) -> Any: ...
    def set_glyph_shift(self, constTextNodeself, floatglyph_shift) -> Any: ...
    def set_indent(self, constTextNodeself, floatindent) -> Any: ...
    def set_max_rows(self, constTextNodeself, intmax_rows) -> Any: ...
    @overload
    def set_shadow(self, constTextNodeself, constLVecBase2fshadow_offset) -> Any: ...
    @overload
    def set_shadow(self, constTextNodeself, floatxoffset, floatyoffset) -> Any: ...
    @overload
    def set_shadow_color(self, constTextNodeself, constLVecBase4fshadow_color) -> Any: ...
    @overload
    def set_shadow_color(self, constTextNodeself, floatr, floatg, floatb, floata) -> Any: ...
    def set_slant(self, constTextNodeself, floatslant) -> Any: ...
    def set_small_caps(self, constTextNodeself, boolsmall_caps) -> Any: ...
    def set_small_caps_scale(self, constTextNodeself, floatsmall_caps_scale) -> Any: ...
    def set_tab_width(self, constTextNodeself, floattab_width) -> Any: ...
    @overload
    def set_text_color(self, constTextNodeself, constLVecBase4ftext_color) -> Any: ...
    @overload
    def set_text_color(self, constTextNodeself, floatr, floatg, floatb, floata) -> Any: ...
    def set_transform(self, constTextNodeself, constLMatrix4ftransform) -> Any: ...
    def set_usage_hint(self, constTextNodeself, intusage_hint) -> Any: ...
    def set_wordwrap(self, constTextNodeself, floatwordwrap) -> Any: ...
    def upcastToPandaNode(self, *args, **kwargs): ...
    def upcastToTextEncoder(self, *args, **kwargs): ...
    def upcastToTextProperties(self, *args, **kwargs): ...
    def upcast_to_PandaNode(self, constTextNodeself) -> Any: ...
    def upcast_to_TextEncoder(self, constTextNodeself) -> Any: ...
    def upcast_to_TextProperties(self, constTextNodeself) -> Any: ...
    def update(self, constTextNodeself) -> Any: ...
    def write(self, TextNodeself, ostreamout, intindent_level) -> Any: ...

class TextProperties(dtoolconfig.DTOOL_SUPER_BASE):
    ABoxedCenter: ClassVar[int] = ...
    ABoxedLeft: ClassVar[int] = ...
    ABoxedRight: ClassVar[int] = ...
    ACenter: ClassVar[int] = ...
    ALeft: ClassVar[int] = ...
    ARight: ClassVar[int] = ...
    A_boxed_center: ClassVar[int] = ...
    A_boxed_left: ClassVar[int] = ...
    A_boxed_right: ClassVar[int] = ...
    A_center: ClassVar[int] = ...
    A_left: ClassVar[int] = ...
    A_right: ClassVar[int] = ...
    DLtr: ClassVar[int] = ...
    DRtl: ClassVar[int] = ...
    D_ltr: ClassVar[int] = ...
    D_rtl: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    align: Incomplete
    bin: Incomplete
    direction: Incomplete
    draw_order: Incomplete
    font: Incomplete
    glyph_scale: Incomplete
    glyph_shift: Incomplete
    indent: Incomplete
    preserve_trailing_whitespace: Incomplete
    shadow: Incomplete
    shadow_color: Incomplete
    slant: Incomplete
    small_caps: Incomplete
    small_caps_scale: Incomplete
    tab_width: Incomplete
    text_color: Incomplete
    text_scale: Incomplete
    underscore: Incomplete
    underscore_height: Incomplete
    wordwrap: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addProperties(self, *args, **kwargs): ...
    def add_properties(self, constTextPropertiesself, constTextPropertiesother) -> Any: ...
    def assign(self, constTextPropertiesself, constTextPropertiescopy) -> Any: ...
    def clear(self, constTextPropertiesself) -> Any: ...
    def clearAlign(self, *args, **kwargs): ...
    def clearBin(self, *args, **kwargs): ...
    def clearDirection(self, *args, **kwargs): ...
    def clearDrawOrder(self, *args, **kwargs): ...
    def clearFont(self, *args, **kwargs): ...
    def clearGlyphScale(self, *args, **kwargs): ...
    def clearGlyphShift(self, *args, **kwargs): ...
    def clearIndent(self, *args, **kwargs): ...
    def clearPreserveTrailingWhitespace(self, *args, **kwargs): ...
    def clearShadow(self, *args, **kwargs): ...
    def clearShadowColor(self, *args, **kwargs): ...
    def clearSlant(self, *args, **kwargs): ...
    def clearSmallCaps(self, *args, **kwargs): ...
    def clearSmallCapsScale(self, *args, **kwargs): ...
    def clearTabWidth(self, *args, **kwargs): ...
    def clearTextColor(self, *args, **kwargs): ...
    def clearTextScale(self, *args, **kwargs): ...
    def clearUnderscore(self, *args, **kwargs): ...
    def clearUnderscoreHeight(self, *args, **kwargs): ...
    def clearWordwrap(self, *args, **kwargs): ...
    def clear_align(self, constTextPropertiesself) -> Any: ...
    def clear_bin(self, constTextPropertiesself) -> Any: ...
    def clear_direction(self, constTextPropertiesself) -> Any: ...
    def clear_draw_order(self, constTextPropertiesself) -> Any: ...
    def clear_font(self, constTextPropertiesself) -> Any: ...
    def clear_glyph_scale(self, constTextPropertiesself) -> Any: ...
    def clear_glyph_shift(self, constTextPropertiesself) -> Any: ...
    def clear_indent(self, constTextPropertiesself) -> Any: ...
    def clear_preserve_trailing_whitespace(self, constTextPropertiesself) -> Any: ...
    def clear_shadow(self, constTextPropertiesself) -> Any: ...
    def clear_shadow_color(self, constTextPropertiesself) -> Any: ...
    def clear_slant(self, constTextPropertiesself) -> Any: ...
    def clear_small_caps(self, constTextPropertiesself) -> Any: ...
    def clear_small_caps_scale(self, constTextPropertiesself) -> Any: ...
    def clear_tab_width(self, constTextPropertiesself) -> Any: ...
    def clear_text_color(self, constTextPropertiesself) -> Any: ...
    def clear_text_scale(self, constTextPropertiesself) -> Any: ...
    def clear_underscore(self, constTextPropertiesself) -> Any: ...
    def clear_underscore_height(self, constTextPropertiesself) -> Any: ...
    def clear_wordwrap(self, constTextPropertiesself) -> Any: ...
    def getAlign(self, *args, **kwargs): ...
    def getBin(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getDefaultFont(*args, **kwargs): ...
    def getDirection(self, *args, **kwargs): ...
    def getDrawOrder(self, *args, **kwargs): ...
    def getFont(self, *args, **kwargs): ...
    def getGlyphScale(self, *args, **kwargs): ...
    def getGlyphShift(self, *args, **kwargs): ...
    def getIndent(self, *args, **kwargs): ...
    def getPreserveTrailingWhitespace(self, *args, **kwargs): ...
    def getShadow(self, *args, **kwargs): ...
    def getShadowColor(self, *args, **kwargs): ...
    def getSlant(self, *args, **kwargs): ...
    def getSmallCaps(self, *args, **kwargs): ...
    def getSmallCapsScale(self, *args, **kwargs): ...
    def getTabWidth(self, *args, **kwargs): ...
    def getTextColor(self, *args, **kwargs): ...
    def getTextScale(self, *args, **kwargs): ...
    def getUnderscore(self, *args, **kwargs): ...
    def getUnderscoreHeight(self, *args, **kwargs): ...
    def getWordwrap(self, *args, **kwargs): ...
    def get_align(self, TextPropertiesself) -> Any: ...
    def get_bin(self, TextPropertiesself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_default_font() -> Any: ...
    def get_direction(self, TextPropertiesself) -> Any: ...
    def get_draw_order(self, TextPropertiesself) -> Any: ...
    def get_font(self, TextPropertiesself) -> Any: ...
    def get_glyph_scale(self, TextPropertiesself) -> Any: ...
    def get_glyph_shift(self, TextPropertiesself) -> Any: ...
    def get_indent(self, TextPropertiesself) -> Any: ...
    def get_preserve_trailing_whitespace(self, TextPropertiesself) -> Any: ...
    def get_shadow(self, TextPropertiesself) -> Any: ...
    def get_shadow_color(self, TextPropertiesself) -> Any: ...
    def get_slant(self, TextPropertiesself) -> Any: ...
    def get_small_caps(self, TextPropertiesself) -> Any: ...
    def get_small_caps_scale(self, TextPropertiesself) -> Any: ...
    def get_tab_width(self, TextPropertiesself) -> Any: ...
    def get_text_color(self, TextPropertiesself) -> Any: ...
    def get_text_scale(self, TextPropertiesself) -> Any: ...
    def get_underscore(self, TextPropertiesself) -> Any: ...
    def get_underscore_height(self, TextPropertiesself) -> Any: ...
    def get_wordwrap(self, TextPropertiesself) -> Any: ...
    def hasAlign(self, *args, **kwargs): ...
    def hasBin(self, *args, **kwargs): ...
    def hasDirection(self, *args, **kwargs): ...
    def hasDrawOrder(self, *args, **kwargs): ...
    def hasFont(self, *args, **kwargs): ...
    def hasGlyphScale(self, *args, **kwargs): ...
    def hasGlyphShift(self, *args, **kwargs): ...
    def hasIndent(self, *args, **kwargs): ...
    def hasPreserveTrailingWhitespace(self, *args, **kwargs): ...
    def hasShadow(self, *args, **kwargs): ...
    def hasShadowColor(self, *args, **kwargs): ...
    def hasSlant(self, *args, **kwargs): ...
    def hasSmallCaps(self, *args, **kwargs): ...
    def hasSmallCapsScale(self, *args, **kwargs): ...
    def hasTabWidth(self, *args, **kwargs): ...
    def hasTextColor(self, *args, **kwargs): ...
    def hasTextScale(self, *args, **kwargs): ...
    def hasUnderscore(self, *args, **kwargs): ...
    def hasUnderscoreHeight(self, *args, **kwargs): ...
    def hasWordwrap(self, *args, **kwargs): ...
    def has_align(self, TextPropertiesself) -> Any: ...
    def has_bin(self, TextPropertiesself) -> Any: ...
    def has_direction(self, TextPropertiesself) -> Any: ...
    def has_draw_order(self, TextPropertiesself) -> Any: ...
    def has_font(self, TextPropertiesself) -> Any: ...
    def has_glyph_scale(self, TextPropertiesself) -> Any: ...
    def has_glyph_shift(self, TextPropertiesself) -> Any: ...
    def has_indent(self, TextPropertiesself) -> Any: ...
    def has_preserve_trailing_whitespace(self, TextPropertiesself) -> Any: ...
    def has_shadow(self, TextPropertiesself) -> Any: ...
    def has_shadow_color(self, TextPropertiesself) -> Any: ...
    def has_slant(self, TextPropertiesself) -> Any: ...
    def has_small_caps(self, TextPropertiesself) -> Any: ...
    def has_small_caps_scale(self, TextPropertiesself) -> Any: ...
    def has_tab_width(self, TextPropertiesself) -> Any: ...
    def has_text_color(self, TextPropertiesself) -> Any: ...
    def has_text_scale(self, TextPropertiesself) -> Any: ...
    def has_underscore(self, TextPropertiesself) -> Any: ...
    def has_underscore_height(self, TextPropertiesself) -> Any: ...
    def has_wordwrap(self, TextPropertiesself) -> Any: ...
    def isAnySpecified(self, *args, **kwargs): ...
    def is_any_specified(self, TextPropertiesself) -> Any: ...
    def setAlign(self, *args, **kwargs): ...
    def setBin(self, *args, **kwargs): ...
    @staticmethod
    def setDefaultFont(*args, **kwargs): ...
    def setDirection(self, *args, **kwargs): ...
    def setDrawOrder(self, *args, **kwargs): ...
    def setFont(self, *args, **kwargs): ...
    def setGlyphScale(self, *args, **kwargs): ...
    def setGlyphShift(self, *args, **kwargs): ...
    def setIndent(self, *args, **kwargs): ...
    def setPreserveTrailingWhitespace(self, *args, **kwargs): ...
    def setShadow(self, *args, **kwargs): ...
    def setShadowColor(self, *args, **kwargs): ...
    def setSlant(self, *args, **kwargs): ...
    def setSmallCaps(self, *args, **kwargs): ...
    def setSmallCapsScale(self, *args, **kwargs): ...
    def setTabWidth(self, *args, **kwargs): ...
    def setTextColor(self, *args, **kwargs): ...
    def setTextScale(self, *args, **kwargs): ...
    def setUnderscore(self, *args, **kwargs): ...
    def setUnderscoreHeight(self, *args, **kwargs): ...
    def setWordwrap(self, *args, **kwargs): ...
    def set_align(self, constTextPropertiesself, intalign_type) -> Any: ...
    def set_bin(self, constTextPropertiesself, strbin) -> Any: ...
    @staticmethod
    def set_default_font(TextFontparam0) -> Any: ...
    def set_direction(self, constTextPropertiesself, intdirection) -> Any: ...
    def set_draw_order(self, constTextPropertiesself, intdraw_order) -> Any: ...
    def set_font(self, constTextPropertiesself, TextFontfont) -> Any: ...
    def set_glyph_scale(self, constTextPropertiesself, floatglyph_scale) -> Any: ...
    def set_glyph_shift(self, constTextPropertiesself, floatglyph_shift) -> Any: ...
    def set_indent(self, constTextPropertiesself, floatindent) -> Any: ...
    def set_preserve_trailing_whitespace(self, constTextPropertiesself, boolpreserve_trailing_whitespace) -> Any: ...
    @overload
    def set_shadow(self, constTextPropertiesself, constLVecBase2fshadow_offset) -> Any: ...
    @overload
    def set_shadow(self, constTextPropertiesself, floatxoffset, floatyoffset) -> Any: ...
    @overload
    def set_shadow_color(self, constTextPropertiesself, constLVecBase4fshadow_color) -> Any: ...
    @overload
    def set_shadow_color(self, constTextPropertiesself, floatr, floatg, floatb, floata) -> Any: ...
    def set_slant(self, constTextPropertiesself, floatslant) -> Any: ...
    def set_small_caps(self, constTextPropertiesself, boolsmall_caps) -> Any: ...
    def set_small_caps_scale(self, constTextPropertiesself, floatsmall_caps_scale) -> Any: ...
    def set_tab_width(self, constTextPropertiesself, floattab_width) -> Any: ...
    @overload
    def set_text_color(self, constTextPropertiesself, constLVecBase4ftext_color) -> Any: ...
    @overload
    def set_text_color(self, constTextPropertiesself, floatr, floatg, floatb, floata) -> Any: ...
    def set_text_scale(self, constTextPropertiesself, floattext_scale) -> Any: ...
    def set_underscore(self, constTextPropertiesself, boolunderscore) -> Any: ...
    def set_underscore_height(self, constTextPropertiesself, floatunderscore_height) -> Any: ...
    def set_wordwrap(self, constTextPropertiesself, floatwordwrap) -> Any: ...
    def write(self, TextPropertiesself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class TextPropertiesManager(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearGraphic(self, *args, **kwargs): ...
    def clearProperties(self, *args, **kwargs): ...
    def clear_graphic(self, constTextPropertiesManagerself, strname) -> Any: ...
    def clear_properties(self, constTextPropertiesManagerself, strname) -> Any: ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getGraphic(self, *args, **kwargs): ...
    def getProperties(self, *args, **kwargs): ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_graphic(self, constTextPropertiesManagerself, strname) -> Any: ...
    def get_properties(self, constTextPropertiesManagerself, strname) -> Any: ...
    def hasGraphic(self, *args, **kwargs): ...
    def hasProperties(self, *args, **kwargs): ...
    def has_graphic(self, TextPropertiesManagerself, strname) -> Any: ...
    def has_properties(self, TextPropertiesManagerself, strname) -> Any: ...
    def setGraphic(self, *args, **kwargs): ...
    def setProperties(self, *args, **kwargs): ...
    @overload
    def set_graphic(self, constTextPropertiesManagerself, strname, constTextGraphicgraphic) -> Any: ...
    @overload
    def set_graphic(self, constTextPropertiesManagerself, strname, constNodePathmodel) -> Any: ...
    def set_properties(self, constTextPropertiesManagerself, strname, constTextPropertiesproperties) -> Any: ...
    def write(self, TextPropertiesManagerself, ostreamout, intindent_level) -> Any: ...

class Texture(TypedWritableReferenceCount, Namable):
    CMDefault: ClassVar[int] = ...
    CMDxt1: ClassVar[int] = ...
    CMDxt2: ClassVar[int] = ...
    CMDxt3: ClassVar[int] = ...
    CMDxt4: ClassVar[int] = ...
    CMDxt5: ClassVar[int] = ...
    CMEac: ClassVar[int] = ...
    CMEtc1: ClassVar[int] = ...
    CMEtc2: ClassVar[int] = ...
    CMFxt1: ClassVar[int] = ...
    CMOff: ClassVar[int] = ...
    CMOn: ClassVar[int] = ...
    CMPvr12bpp: ClassVar[int] = ...
    CMPvr14bpp: ClassVar[int] = ...
    CMRgtc: ClassVar[int] = ...
    CM_default: ClassVar[int] = ...
    CM_dxt1: ClassVar[int] = ...
    CM_dxt2: ClassVar[int] = ...
    CM_dxt3: ClassVar[int] = ...
    CM_dxt4: ClassVar[int] = ...
    CM_dxt5: ClassVar[int] = ...
    CM_eac: ClassVar[int] = ...
    CM_etc1: ClassVar[int] = ...
    CM_etc2: ClassVar[int] = ...
    CM_fxt1: ClassVar[int] = ...
    CM_off: ClassVar[int] = ...
    CM_on: ClassVar[int] = ...
    CM_pvr1_2bpp: ClassVar[int] = ...
    CM_pvr1_4bpp: ClassVar[int] = ...
    CM_rgtc: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    FAlpha: ClassVar[int] = ...
    FBlue: ClassVar[int] = ...
    FColorIndex: ClassVar[int] = ...
    FDepthComponent: ClassVar[int] = ...
    FDepthComponent16: ClassVar[int] = ...
    FDepthComponent24: ClassVar[int] = ...
    FDepthComponent32: ClassVar[int] = ...
    FDepthStencil: ClassVar[int] = ...
    FGreen: ClassVar[int] = ...
    FLuminance: ClassVar[int] = ...
    FLuminanceAlpha: ClassVar[int] = ...
    FLuminanceAlphamask: ClassVar[int] = ...
    FR11G11B10: ClassVar[int] = ...
    FR16: ClassVar[int] = ...
    FR16i: ClassVar[int] = ...
    FR32: ClassVar[int] = ...
    FR32i: ClassVar[int] = ...
    FR8i: ClassVar[int] = ...
    FRed: ClassVar[int] = ...
    FRg: ClassVar[int] = ...
    FRg16: ClassVar[int] = ...
    FRg16i: ClassVar[int] = ...
    FRg32: ClassVar[int] = ...
    FRg32i: ClassVar[int] = ...
    FRg8i: ClassVar[int] = ...
    FRgb: ClassVar[int] = ...
    FRgb10A2: ClassVar[int] = ...
    FRgb12: ClassVar[int] = ...
    FRgb16: ClassVar[int] = ...
    FRgb16i: ClassVar[int] = ...
    FRgb32: ClassVar[int] = ...
    FRgb32i: ClassVar[int] = ...
    FRgb332: ClassVar[int] = ...
    FRgb5: ClassVar[int] = ...
    FRgb8: ClassVar[int] = ...
    FRgb8i: ClassVar[int] = ...
    FRgb9E5: ClassVar[int] = ...
    FRgba: ClassVar[int] = ...
    FRgba12: ClassVar[int] = ...
    FRgba16: ClassVar[int] = ...
    FRgba16i: ClassVar[int] = ...
    FRgba32: ClassVar[int] = ...
    FRgba32i: ClassVar[int] = ...
    FRgba4: ClassVar[int] = ...
    FRgba5: ClassVar[int] = ...
    FRgba8: ClassVar[int] = ...
    FRgba8i: ClassVar[int] = ...
    FRgbm: ClassVar[int] = ...
    FSluminance: ClassVar[int] = ...
    FSluminanceAlpha: ClassVar[int] = ...
    FSrgb: ClassVar[int] = ...
    FSrgbAlpha: ClassVar[int] = ...
    FTDefault: ClassVar[int] = ...
    FTInvalid: ClassVar[int] = ...
    FTLinear: ClassVar[int] = ...
    FTLinearMipmapLinear: ClassVar[int] = ...
    FTLinearMipmapNearest: ClassVar[int] = ...
    FTNearest: ClassVar[int] = ...
    FTNearestMipmapLinear: ClassVar[int] = ...
    FTNearestMipmapNearest: ClassVar[int] = ...
    FTShadow: ClassVar[int] = ...
    FT_default: ClassVar[int] = ...
    FT_invalid: ClassVar[int] = ...
    FT_linear: ClassVar[int] = ...
    FT_linear_mipmap_linear: ClassVar[int] = ...
    FT_linear_mipmap_nearest: ClassVar[int] = ...
    FT_nearest: ClassVar[int] = ...
    FT_nearest_mipmap_linear: ClassVar[int] = ...
    FT_nearest_mipmap_nearest: ClassVar[int] = ...
    FT_shadow: ClassVar[int] = ...
    F_alpha: ClassVar[int] = ...
    F_blue: ClassVar[int] = ...
    F_color_index: ClassVar[int] = ...
    F_depth_component: ClassVar[int] = ...
    F_depth_component16: ClassVar[int] = ...
    F_depth_component24: ClassVar[int] = ...
    F_depth_component32: ClassVar[int] = ...
    F_depth_stencil: ClassVar[int] = ...
    F_green: ClassVar[int] = ...
    F_luminance: ClassVar[int] = ...
    F_luminance_alpha: ClassVar[int] = ...
    F_luminance_alphamask: ClassVar[int] = ...
    F_r11_g11_b10: ClassVar[int] = ...
    F_r16: ClassVar[int] = ...
    F_r16i: ClassVar[int] = ...
    F_r32: ClassVar[int] = ...
    F_r32i: ClassVar[int] = ...
    F_r8i: ClassVar[int] = ...
    F_red: ClassVar[int] = ...
    F_rg: ClassVar[int] = ...
    F_rg16: ClassVar[int] = ...
    F_rg16i: ClassVar[int] = ...
    F_rg32: ClassVar[int] = ...
    F_rg32i: ClassVar[int] = ...
    F_rg8i: ClassVar[int] = ...
    F_rgb: ClassVar[int] = ...
    F_rgb10_a2: ClassVar[int] = ...
    F_rgb12: ClassVar[int] = ...
    F_rgb16: ClassVar[int] = ...
    F_rgb16i: ClassVar[int] = ...
    F_rgb32: ClassVar[int] = ...
    F_rgb32i: ClassVar[int] = ...
    F_rgb332: ClassVar[int] = ...
    F_rgb5: ClassVar[int] = ...
    F_rgb8: ClassVar[int] = ...
    F_rgb8i: ClassVar[int] = ...
    F_rgb9_e5: ClassVar[int] = ...
    F_rgba: ClassVar[int] = ...
    F_rgba12: ClassVar[int] = ...
    F_rgba16: ClassVar[int] = ...
    F_rgba16i: ClassVar[int] = ...
    F_rgba32: ClassVar[int] = ...
    F_rgba32i: ClassVar[int] = ...
    F_rgba4: ClassVar[int] = ...
    F_rgba5: ClassVar[int] = ...
    F_rgba8: ClassVar[int] = ...
    F_rgba8i: ClassVar[int] = ...
    F_rgbm: ClassVar[int] = ...
    F_sluminance: ClassVar[int] = ...
    F_sluminance_alpha: ClassVar[int] = ...
    F_srgb: ClassVar[int] = ...
    F_srgb_alpha: ClassVar[int] = ...
    QLBest: ClassVar[int] = ...
    QLDefault: ClassVar[int] = ...
    QLFastest: ClassVar[int] = ...
    QLNormal: ClassVar[int] = ...
    QL_best: ClassVar[int] = ...
    QL_default: ClassVar[int] = ...
    QL_fastest: ClassVar[int] = ...
    QL_normal: ClassVar[int] = ...
    TByte: ClassVar[int] = ...
    TFloat: ClassVar[int] = ...
    THalfFloat: ClassVar[int] = ...
    TInt: ClassVar[int] = ...
    TShort: ClassVar[int] = ...
    TT1dTexture: ClassVar[int] = ...
    TT1dTextureArray: ClassVar[int] = ...
    TT2dTexture: ClassVar[int] = ...
    TT2dTextureArray: ClassVar[int] = ...
    TT3dTexture: ClassVar[int] = ...
    TTBufferTexture: ClassVar[int] = ...
    TTCubeMap: ClassVar[int] = ...
    TTCubeMapArray: ClassVar[int] = ...
    TT_1d_texture: ClassVar[int] = ...
    TT_1d_texture_array: ClassVar[int] = ...
    TT_2d_texture: ClassVar[int] = ...
    TT_2d_texture_array: ClassVar[int] = ...
    TT_3d_texture: ClassVar[int] = ...
    TT_buffer_texture: ClassVar[int] = ...
    TT_cube_map: ClassVar[int] = ...
    TT_cube_map_array: ClassVar[int] = ...
    TUnsignedByte: ClassVar[int] = ...
    TUnsignedInt: ClassVar[int] = ...
    TUnsignedInt248: ClassVar[int] = ...
    TUnsignedShort: ClassVar[int] = ...
    T_byte: ClassVar[int] = ...
    T_float: ClassVar[int] = ...
    T_half_float: ClassVar[int] = ...
    T_int: ClassVar[int] = ...
    T_short: ClassVar[int] = ...
    T_unsigned_byte: ClassVar[int] = ...
    T_unsigned_int: ClassVar[int] = ...
    T_unsigned_int_24_8: ClassVar[int] = ...
    T_unsigned_short: ClassVar[int] = ...
    WMBorderColor: ClassVar[int] = ...
    WMClamp: ClassVar[int] = ...
    WMInvalid: ClassVar[int] = ...
    WMMirror: ClassVar[int] = ...
    WMMirrorOnce: ClassVar[int] = ...
    WMRepeat: ClassVar[int] = ...
    WM_border_color: ClassVar[int] = ...
    WM_clamp: ClassVar[int] = ...
    WM_invalid: ClassVar[int] = ...
    WM_mirror: ClassVar[int] = ...
    WM_mirror_once: ClassVar[int] = ...
    WM_repeat: ClassVar[int] = ...
    alpha_filename: Incomplete
    alpha_fullpath: Incomplete
    anisotropic_degree: Incomplete
    auto_texture_scale: Incomplete
    aux_data: Incomplete
    border_color: Incomplete
    cacheable: Incomplete
    clear_color: Incomplete
    component_type: Incomplete
    component_width: Incomplete
    compression: Incomplete
    default_sampler: Incomplete
    effective_anisotropic_degree: Incomplete
    effective_magfilter: Incomplete
    effective_minfilter: Incomplete
    effective_quality_level: Incomplete
    expected_num_mipmap_levels: Incomplete
    expected_ram_image_size: Incomplete
    expected_ram_page_size: Incomplete
    filename: Incomplete
    format: Incomplete
    fullpath: Incomplete
    image_modified: Incomplete
    keep_ram_image: Incomplete
    loaded_from_image: Incomplete
    loaded_from_txo: Incomplete
    magfilter: Incomplete
    match_framebuffer_format: Incomplete
    minfilter: Incomplete
    num_components: Incomplete
    num_loadable_ram_mipmap_images: Incomplete
    num_pages: Incomplete
    num_ram_mipmap_images: Incomplete
    num_views: Incomplete
    orig_file_x_size: Incomplete
    orig_file_y_size: Incomplete
    orig_file_z_size: Incomplete
    post_load_store_cache: Incomplete
    properties_modified: Incomplete
    quality_level: Incomplete
    ram_image_compression: Incomplete
    ram_image_size: Incomplete
    ram_page_size: Incomplete
    ram_view_size: Incomplete
    render_to_texture: Incomplete
    simple_ram_image: Incomplete
    simple_x_size: Incomplete
    simple_y_size: Incomplete
    texture_type: Incomplete
    usage_hint: Incomplete
    wrap_u: Incomplete
    wrap_v: Incomplete
    wrap_w: Incomplete
    x_size: Incomplete
    y_size: Incomplete
    z_size: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def asyncEnsureRamImage(self, *args, **kwargs): ...
    def async_ensure_ram_image(self, constTextureself, boolallow_compression, intpriority) -> Any: ...
    def clear(self, constTextureself) -> Any: ...
    def clearAlphaFilename(self, *args, **kwargs): ...
    def clearAlphaFullpath(self, *args, **kwargs): ...
    def clearAuxData(self, *args, **kwargs): ...
    def clearClearColor(self, *args, **kwargs): ...
    def clearFilename(self, *args, **kwargs): ...
    def clearFullpath(self, *args, **kwargs): ...
    def clearImage(self, *args, **kwargs): ...
    def clearRamImage(self, *args, **kwargs): ...
    def clearRamMipmapImage(self, *args, **kwargs): ...
    def clearRamMipmapImages(self, *args, **kwargs): ...
    def clearSimpleRamImage(self, *args, **kwargs): ...
    def clear_alpha_filename(self, constTextureself) -> Any: ...
    def clear_alpha_fullpath(self, constTextureself) -> Any: ...
    def clear_aux_data(self, constTextureself, strkey) -> Any: ...
    def clear_clear_color(self, constTextureself) -> Any: ...
    def clear_filename(self, constTextureself) -> Any: ...
    def clear_fullpath(self, constTextureself) -> Any: ...
    def clear_image(self, constTextureself) -> Any: ...
    def clear_ram_image(self, constTextureself) -> Any: ...
    def clear_ram_mipmap_image(self, constTextureself, intn) -> Any: ...
    def clear_ram_mipmap_images(self, constTextureself) -> Any: ...
    def clear_simple_ram_image(self, constTextureself) -> Any: ...
    def compressRamImage(self, *args, **kwargs): ...
    def compress_ram_image(
        self, constTextureself, intcompression, intquality_level, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    def considerRescale(self, *args, **kwargs): ...
    @overload
    def consider_rescale(self, constTextureself, PNMImagepnmimage) -> Any: ...
    @overload
    def consider_rescale(self, PNMImagepnmimage, strname, intauto_texture_scale) -> Any: ...
    @staticmethod
    def downToPower2(*args, **kwargs): ...
    @staticmethod
    def down_to_power_2(intvalue) -> Any: ...
    def estimateTextureMemory(self, *args, **kwargs): ...
    def estimate_texture_memory(self, Textureself) -> Any: ...
    @staticmethod
    def formatComponentType(*args, **kwargs): ...
    @staticmethod
    def formatCompressionMode(*args, **kwargs): ...
    @staticmethod
    def formatFormat(*args, **kwargs): ...
    @staticmethod
    def formatQualityLevel(*args, **kwargs): ...
    @staticmethod
    def formatTextureType(*args, **kwargs): ...
    @staticmethod
    def format_component_type(intct) -> Any: ...
    @staticmethod
    def format_compression_mode(intcm) -> Any: ...
    @staticmethod
    def format_format(intf) -> Any: ...
    @staticmethod
    def format_quality_level(inttql) -> Any: ...
    @staticmethod
    def format_texture_type(inttt) -> Any: ...
    def generateAlphaScaleMap(self, *args, **kwargs): ...
    def generateNormalizationCubeMap(self, *args, **kwargs): ...
    def generateRamMipmapImages(self, *args, **kwargs): ...
    def generateSimpleRamImage(self, *args, **kwargs): ...
    def generate_alpha_scale_map(self, constTextureself) -> Any: ...
    def generate_normalization_cube_map(self, constTextureself, intsize) -> Any: ...
    def generate_ram_mipmap_images(self, constTextureself) -> Any: ...
    def generate_simple_ram_image(self, constTextureself) -> Any: ...
    def getActive(self, *args, **kwargs): ...
    def getAlphaFilename(self, *args, **kwargs): ...
    def getAlphaFullpath(self, *args, **kwargs): ...
    def getAnisotropicDegree(self, *args, **kwargs): ...
    def getAutoTextureScale(self, *args, **kwargs): ...
    def getAuxData(self, *args, **kwargs): ...
    def getBorderColor(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getClearColor(self, *args, **kwargs): ...
    def getClearData(self, *args, **kwargs): ...
    def getComponentType(self, *args, **kwargs): ...
    def getComponentWidth(self, *args, **kwargs): ...
    def getCompression(self, *args, **kwargs): ...
    def getDataSizeBytes(self, *args, **kwargs): ...
    def getDefaultSampler(self, *args, **kwargs): ...
    def getEffectiveAnisotropicDegree(self, *args, **kwargs): ...
    def getEffectiveMagfilter(self, *args, **kwargs): ...
    def getEffectiveMinfilter(self, *args, **kwargs): ...
    def getEffectiveQualityLevel(self, *args, **kwargs): ...
    def getExpectedMipmapNumPages(self, *args, **kwargs): ...
    def getExpectedMipmapXSize(self, *args, **kwargs): ...
    def getExpectedMipmapYSize(self, *args, **kwargs): ...
    def getExpectedMipmapZSize(self, *args, **kwargs): ...
    def getExpectedNumMipmapLevels(self, *args, **kwargs): ...
    def getExpectedRamImageSize(self, *args, **kwargs): ...
    def getExpectedRamMipmapImageSize(self, *args, **kwargs): ...
    def getExpectedRamMipmapPageSize(self, *args, **kwargs): ...
    def getExpectedRamMipmapViewSize(self, *args, **kwargs): ...
    def getExpectedRamPageSize(self, *args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getFormat(self, *args, **kwargs): ...
    def getFullpath(self, *args, **kwargs): ...
    def getImageModified(self, *args, **kwargs): ...
    def getImageModifiedPages(self, *args, **kwargs): ...
    def getKeepRamImage(self, *args, **kwargs): ...
    def getLoadedFromImage(self, *args, **kwargs): ...
    def getLoadedFromTxo(self, *args, **kwargs): ...
    def getMagfilter(self, *args, **kwargs): ...
    def getMatchFramebufferFormat(self, *args, **kwargs): ...
    def getMinfilter(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getNumLoadableRamMipmapImages(self, *args, **kwargs): ...
    def getNumPages(self, *args, **kwargs): ...
    def getNumRamMipmapImages(self, *args, **kwargs): ...
    def getNumViews(self, *args, **kwargs): ...
    def getOrigFileXSize(self, *args, **kwargs): ...
    def getOrigFileYSize(self, *args, **kwargs): ...
    def getOrigFileZSize(self, *args, **kwargs): ...
    def getPadXSize(self, *args, **kwargs): ...
    def getPadYSize(self, *args, **kwargs): ...
    def getPadZSize(self, *args, **kwargs): ...
    def getPostLoadStoreCache(self, *args, **kwargs): ...
    def getPropertiesModified(self, *args, **kwargs): ...
    def getQualityLevel(self, *args, **kwargs): ...
    def getRamImage(self, *args, **kwargs): ...
    def getRamImageAs(self, *args, **kwargs): ...
    def getRamImageCompression(self, *args, **kwargs): ...
    def getRamImageSize(self, *args, **kwargs): ...
    def getRamMipmapImage(self, *args, **kwargs): ...
    def getRamMipmapImageSize(self, *args, **kwargs): ...
    def getRamMipmapPageSize(self, *args, **kwargs): ...
    def getRamMipmapViewSize(self, *args, **kwargs): ...
    def getRamPageSize(self, *args, **kwargs): ...
    def getRamViewSize(self, *args, **kwargs): ...
    def getRenderToTexture(self, *args, **kwargs): ...
    def getResident(self, *args, **kwargs): ...
    def getSimpleRamImage(self, *args, **kwargs): ...
    def getSimpleRamImageSize(self, *args, **kwargs): ...
    def getSimpleXSize(self, *args, **kwargs): ...
    def getSimpleYSize(self, *args, **kwargs): ...
    def getTexScale(self, *args, **kwargs): ...
    def getTextureType(self, *args, **kwargs): ...
    @staticmethod
    def getTexturesPower2(*args, **kwargs): ...
    def getUncompressedRamImage(self, *args, **kwargs): ...
    def getUsageHint(self, *args, **kwargs): ...
    def getViewModifiedPages(self, *args, **kwargs): ...
    def getWrapU(self, *args, **kwargs): ...
    def getWrapV(self, *args, **kwargs): ...
    def getWrapW(self, *args, **kwargs): ...
    def getXSize(self, *args, **kwargs): ...
    def getYSize(self, *args, **kwargs): ...
    def getZSize(self, *args, **kwargs): ...
    def get_active(self, Textureself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def get_alpha_filename(self, Textureself) -> Any: ...
    def get_alpha_fullpath(self, Textureself) -> Any: ...
    def get_anisotropic_degree(self, Textureself) -> Any: ...
    def get_auto_texture_scale(self, Textureself) -> Any: ...
    def get_aux_data(self, Textureself, strkey) -> Any: ...
    def get_border_color(self, Textureself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_clear_color(self, Textureself) -> Any: ...
    def get_clear_data(self, Textureself) -> Any: ...
    def get_component_type(self, Textureself) -> Any: ...
    def get_component_width(self, Textureself) -> Any: ...
    def get_compression(self, Textureself) -> Any: ...
    def get_data_size_bytes(self, Textureself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def get_default_sampler(self, Textureself) -> Any: ...
    def get_effective_anisotropic_degree(self, Textureself) -> Any: ...
    def get_effective_magfilter(self, Textureself) -> Any: ...
    def get_effective_minfilter(self, Textureself) -> Any: ...
    def get_effective_quality_level(self, Textureself) -> Any: ...
    def get_expected_mipmap_num_pages(self, Textureself, intn) -> Any: ...
    def get_expected_mipmap_x_size(self, Textureself, intn) -> Any: ...
    def get_expected_mipmap_y_size(self, Textureself, intn) -> Any: ...
    def get_expected_mipmap_z_size(self, Textureself, intn) -> Any: ...
    def get_expected_num_mipmap_levels(self, Textureself) -> Any: ...
    def get_expected_ram_image_size(self, Textureself) -> Any: ...
    def get_expected_ram_mipmap_image_size(self, Textureself, intn) -> Any: ...
    def get_expected_ram_mipmap_page_size(self, Textureself, intn) -> Any: ...
    def get_expected_ram_mipmap_view_size(self, Textureself, intn) -> Any: ...
    def get_expected_ram_page_size(self, Textureself) -> Any: ...
    def get_filename(self, Textureself) -> Any: ...
    def get_format(self, Textureself) -> Any: ...
    def get_fullpath(self, Textureself) -> Any: ...
    def get_image_modified(self, Textureself) -> Any: ...
    def get_image_modified_pages(self, Textureself, UpdateSeqsince, intn) -> Any: ...
    def get_keep_ram_image(self, Textureself) -> Any: ...
    def get_loaded_from_image(self, Textureself) -> Any: ...
    def get_loaded_from_txo(self, Textureself) -> Any: ...
    def get_magfilter(self, Textureself) -> Any: ...
    def get_match_framebuffer_format(self, Textureself) -> Any: ...
    def get_minfilter(self, Textureself) -> Any: ...
    def get_num_components(self, Textureself) -> Any: ...
    def get_num_loadable_ram_mipmap_images(self, Textureself) -> Any: ...
    @overload
    def get_num_pages(self, Textureself) -> Any: ...
    @overload
    def get_num_pages(self) -> Any: ...
    def get_num_ram_mipmap_images(self, Textureself) -> Any: ...
    def get_num_views(self, Textureself) -> Any: ...
    def get_orig_file_x_size(self, Textureself) -> Any: ...
    def get_orig_file_y_size(self, Textureself) -> Any: ...
    def get_orig_file_z_size(self, Textureself) -> Any: ...
    def get_pad_x_size(self, Textureself) -> Any: ...
    def get_pad_y_size(self, Textureself) -> Any: ...
    def get_pad_z_size(self, Textureself) -> Any: ...
    def get_post_load_store_cache(self, Textureself) -> Any: ...
    def get_properties_modified(self, Textureself) -> Any: ...
    def get_quality_level(self, Textureself) -> Any: ...
    @overload
    def get_ram_image(self, constTextureself) -> Any: ...
    @overload
    def get_ram_image(self) -> Any: ...
    @overload
    def get_ram_image(self) -> Any: ...
    def get_ram_image_as(self, constTextureself, strrequested_format) -> Any: ...
    def get_ram_image_compression(self, Textureself) -> Any: ...
    def get_ram_image_size(self, Textureself) -> Any: ...
    def get_ram_mipmap_image(self, Textureself, intn) -> Any: ...
    def get_ram_mipmap_image_size(self, Textureself, intn) -> Any: ...
    def get_ram_mipmap_page_size(self, Textureself, intn) -> Any: ...
    def get_ram_mipmap_view_size(self, Textureself, intn) -> Any: ...
    def get_ram_page_size(self, Textureself) -> Any: ...
    def get_ram_view_size(self, Textureself) -> Any: ...
    def get_render_to_texture(self, Textureself) -> Any: ...
    def get_resident(self, Textureself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def get_simple_ram_image(self, Textureself) -> Any: ...
    def get_simple_ram_image_size(self, Textureself) -> Any: ...
    def get_simple_x_size(self, Textureself) -> Any: ...
    def get_simple_y_size(self, Textureself) -> Any: ...
    def get_tex_scale(self, Textureself) -> Any: ...
    def get_texture_type(self, Textureself) -> Any: ...
    @staticmethod
    def get_textures_power_2() -> Any: ...
    def get_uncompressed_ram_image(self, constTextureself) -> Any: ...
    def get_usage_hint(self, Textureself) -> Any: ...
    def get_view_modified_pages(self, Textureself, UpdateSeqsince, intview, intn) -> Any: ...
    def get_wrap_u(self, Textureself) -> Any: ...
    def get_wrap_v(self, Textureself) -> Any: ...
    def get_wrap_w(self, Textureself) -> Any: ...
    def get_x_size(self, Textureself) -> Any: ...
    def get_y_size(self, Textureself) -> Any: ...
    def get_z_size(self, Textureself) -> Any: ...
    def hasAllRamMipmapImages(self, *args, **kwargs): ...
    def hasAlphaFilename(self, *args, **kwargs): ...
    def hasAlphaFullpath(self, *args, **kwargs): ...
    def hasAutoTextureScale(self, *args, **kwargs): ...
    def hasClearColor(self, *args, **kwargs): ...
    def hasCompression(self, *args, **kwargs): ...
    def hasFilename(self, *args, **kwargs): ...
    def hasFullpath(self, *args, **kwargs): ...
    def hasRamImage(self, *args, **kwargs): ...
    def hasRamMipmapImage(self, *args, **kwargs): ...
    def hasSimpleRamImage(self, *args, **kwargs): ...
    @staticmethod
    def hasTexturesPower2(*args, **kwargs): ...
    def hasUncompressedRamImage(self, *args, **kwargs): ...
    def has_all_ram_mipmap_images(self, Textureself) -> Any: ...
    def has_alpha_filename(self, Textureself) -> Any: ...
    def has_alpha_fullpath(self, Textureself) -> Any: ...
    def has_auto_texture_scale(self, Textureself) -> Any: ...
    def has_clear_color(self, Textureself) -> Any: ...
    def has_compression(self, Textureself) -> Any: ...
    def has_filename(self, Textureself) -> Any: ...
    def has_fullpath(self, Textureself) -> Any: ...
    @overload
    def has_ram_image(self, Textureself) -> Any: ...
    @overload
    def has_ram_image(self) -> Any: ...
    @overload
    def has_ram_image(self) -> Any: ...
    @overload
    def has_ram_image(self) -> Any: ...
    def has_ram_mipmap_image(self, Textureself, intn) -> Any: ...
    def has_simple_ram_image(self, Textureself) -> Any: ...
    @staticmethod
    def has_textures_power_2() -> Any: ...
    def has_uncompressed_ram_image(self, Textureself) -> Any: ...
    def isCacheable(self, *args, **kwargs): ...
    def isPrepared(self, *args, **kwargs): ...
    def is_cacheable(self, Textureself) -> Any: ...
    def is_prepared(self, Textureself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    @overload
    def load(self, constTextureself, constPNMImagepnmimage) -> Any: ...
    @overload
    def load(self, constTextureself, constPfmFilepfm) -> Any: ...
    @overload
    def load(self, constTextureself, constPNMImagepnmimage, constLoaderOptionsoptions) -> Any: ...
    @overload
    def load(self, constTextureself, constPfmFilepfm, constLoaderOptionsoptions) -> Any: ...
    @overload
    def load(self, constTextureself, constPNMImagepnmimage, intz, intn, constLoaderOptionsoptions) -> Any: ...
    @overload
    def load(self, constTextureself, constPfmFilepfm, intz, intn, constLoaderOptionsoptions) -> Any: ...
    def loadRelated(self, *args, **kwargs): ...
    def loadSubImage(self, *args, **kwargs): ...
    def load_related(self, Textureself, constInternalNamesuffix) -> Any: ...
    def load_sub_image(self, constTextureself, constPNMImagepnmimage, intx, inty, intz, intn) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    @staticmethod
    def makeFromTxo(*args, **kwargs): ...
    def makeRamImage(self, *args, **kwargs): ...
    def makeRamMipmapImage(self, *args, **kwargs): ...
    def make_copy(self, Textureself) -> Any: ...
    @staticmethod
    def make_from_txo(istreamin, strfilename) -> Any: ...
    def make_ram_image(self, constTextureself) -> Any: ...
    def make_ram_mipmap_image(self, constTextureself, intn) -> Any: ...
    def mightHaveRamImage(self, *args, **kwargs): ...
    def might_have_ram_image(self, Textureself) -> Any: ...
    def modifyRamImage(self, *args, **kwargs): ...
    def modifyRamMipmapImage(self, *args, **kwargs): ...
    def modifySimpleRamImage(self, *args, **kwargs): ...
    def modify_ram_image(self, constTextureself) -> Any: ...
    def modify_ram_mipmap_image(self, constTextureself, intn) -> Any: ...
    def modify_simple_ram_image(self, constTextureself) -> Any: ...
    def newSimpleRamImage(self, *args, **kwargs): ...
    def new_simple_ram_image(self, constTextureself, intx_size, inty_size) -> Any: ...
    def peek(self, constTextureself) -> Any: ...
    def prepare(self, constTextureself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def prepareNow(self, *args, **kwargs): ...
    @overload
    def prepare_now(
        self, constTextureself, PreparedGraphicsObjectsprepared_objects, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    @overload
    def prepare_now(
        self, constTextureself, intview, PreparedGraphicsObjectsprepared_objects, GraphicsStateGuardianBasegsg
    ) -> Any: ...
    @overload
    def prepare_now(self) -> Any: ...
    @overload
    def read(self, constTextureself, constFilenamefullpath) -> Any: ...
    @overload
    def read(self, constTextureself, constFilenamefullpath, constLoaderOptionsoptions) -> Any: ...
    @overload
    def read(
        self,
        constTextureself,
        constFilenamefullpath,
        constFilenamealpha_fullpath,
        intprimary_file_num_channels,
        intalpha_file_channel,
    ) -> Any: ...
    @overload
    def read(self, constTextureself, constFilenamefullpath, intz, intn, boolread_pages, boolread_mipmaps) -> Any: ...
    @overload
    def read(
        self,
        constTextureself,
        constFilenamefullpath,
        constFilenamealpha_fullpath,
        intprimary_file_num_channels,
        intalpha_file_channel,
        constLoaderOptionsoptions,
    ) -> Any: ...
    @overload
    def read(
        self,
        constTextureself,
        constFilenamefullpath,
        intz,
        intn,
        boolread_pages,
        boolread_mipmaps,
        constLoaderOptionsoptions,
    ) -> Any: ...
    @overload
    def read(
        self,
        constTextureself,
        constFilenamefullpath,
        constFilenamealpha_fullpath,
        intprimary_file_num_channels,
        intalpha_file_channel,
        intz,
        intn,
        boolread_pages,
        boolread_mipmaps,
        BamCacheRecordrecord,
        constLoaderOptionsoptions,
    ) -> Any: ...
    @overload
    def read(self) -> Any: ...
    @overload
    def read(self) -> Any: ...
    def readDds(self, *args, **kwargs): ...
    def readKtx(self, *args, **kwargs): ...
    def readTxo(self, *args, **kwargs): ...
    def read_dds(self, constTextureself, istreamin, strfilename, boolheader_only) -> Any: ...
    def read_ktx(self, constTextureself, istreamin, strfilename, boolheader_only) -> Any: ...
    def read_txo(self, constTextureself, istreamin, strfilename) -> Any: ...
    def release(self, constTextureself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    def releaseAll(self, *args, **kwargs): ...
    def release_all(self, constTextureself) -> Any: ...
    def reload(self, constTextureself) -> Any: ...
    def rescaleTexture(self, *args, **kwargs): ...
    def rescale_texture(self, constTextureself) -> Any: ...
    def setAlphaFilename(self, *args, **kwargs): ...
    def setAlphaFullpath(self, *args, **kwargs): ...
    def setAnisotropicDegree(self, *args, **kwargs): ...
    def setAutoTextureScale(self, *args, **kwargs): ...
    def setAuxData(self, *args, **kwargs): ...
    def setBorderColor(self, *args, **kwargs): ...
    def setClearColor(self, *args, **kwargs): ...
    def setComponentType(self, *args, **kwargs): ...
    def setCompression(self, *args, **kwargs): ...
    def setDefaultSampler(self, *args, **kwargs): ...
    def setFilename(self, *args, **kwargs): ...
    def setFormat(self, *args, **kwargs): ...
    def setFullpath(self, *args, **kwargs): ...
    def setKeepRamImage(self, *args, **kwargs): ...
    def setLoadedFromImage(self, *args, **kwargs): ...
    def setLoadedFromTxo(self, *args, **kwargs): ...
    def setMagfilter(self, *args, **kwargs): ...
    def setMatchFramebufferFormat(self, *args, **kwargs): ...
    def setMinfilter(self, *args, **kwargs): ...
    def setNumViews(self, *args, **kwargs): ...
    def setOrigFileSize(self, *args, **kwargs): ...
    def setPadSize(self, *args, **kwargs): ...
    def setPostLoadStoreCache(self, *args, **kwargs): ...
    def setQualityLevel(self, *args, **kwargs): ...
    def setRamImage(self, *args, **kwargs): ...
    def setRamImageAs(self, *args, **kwargs): ...
    def setRamMipmapImage(self, *args, **kwargs): ...
    def setRamMipmapPointerFromInt(self, *args, **kwargs): ...
    def setRenderToTexture(self, *args, **kwargs): ...
    def setSimpleRamImage(self, *args, **kwargs): ...
    def setSizePadded(self, *args, **kwargs): ...
    @staticmethod
    def setTexturesPower2(*args, **kwargs): ...
    def setWrapU(self, *args, **kwargs): ...
    def setWrapV(self, *args, **kwargs): ...
    def setWrapW(self, *args, **kwargs): ...
    def setXSize(self, *args, **kwargs): ...
    def setYSize(self, *args, **kwargs): ...
    def setZSize(self, *args, **kwargs): ...
    def set_alpha_filename(self, constTextureself, constFilenamealpha_filename) -> Any: ...
    def set_alpha_fullpath(self, constTextureself, constFilenamealpha_fullpath) -> Any: ...
    def set_anisotropic_degree(self, constTextureself, intanisotropic_degree) -> Any: ...
    def set_auto_texture_scale(self, constTextureself, intscale) -> Any: ...
    def set_aux_data(self, constTextureself, strkey, TypedReferenceCountaux_data) -> Any: ...
    def set_border_color(self, constTextureself, constLVecBase4fcolor) -> Any: ...
    def set_clear_color(self, constTextureself, constLVecBase4fcolor) -> Any: ...
    def set_component_type(self, constTextureself, intcomponent_type) -> Any: ...
    def set_compression(self, constTextureself, intcompression) -> Any: ...
    def set_default_sampler(self, constTextureself, constSamplerStatesampler) -> Any: ...
    def set_filename(self, constTextureself, constFilenamefilename) -> Any: ...
    def set_format(self, constTextureself, intformat) -> Any: ...
    def set_fullpath(self, constTextureself, constFilenamefullpath) -> Any: ...
    def set_keep_ram_image(self, constTextureself, boolkeep_ram_image) -> Any: ...
    def set_loaded_from_image(self, constTextureself, boolflag) -> Any: ...
    def set_loaded_from_txo(self, constTextureself, boolflag) -> Any: ...
    def set_magfilter(self, constTextureself, intfilter) -> Any: ...
    def set_match_framebuffer_format(self, constTextureself, boolflag) -> Any: ...
    def set_minfilter(self, constTextureself, intfilter) -> Any: ...
    def set_num_views(self, constTextureself, intnum_views) -> Any: ...
    def set_orig_file_size(self, constTextureself, intx, inty, intz) -> Any: ...
    def set_pad_size(self, constTextureself, intx, inty, intz) -> Any: ...
    def set_post_load_store_cache(self, constTextureself, boolflag) -> Any: ...
    def set_quality_level(self, constTextureself, intquality_level) -> Any: ...
    def set_ram_image(self, constTextureself, objectimage, intcompression, intpage_size) -> Any: ...
    def set_ram_image_as(self, constTextureself, objectimage, strprovided_format) -> Any: ...
    def set_ram_mipmap_image(self, constTextureself, intn, ConstPointerToArrayimage, intpage_size) -> Any: ...
    def set_ram_mipmap_pointer_from_int(self, constTextureself, longpointer, intn, intpage_size) -> Any: ...
    def set_render_to_texture(self, constTextureself, boolrender_to_texture) -> Any: ...
    def set_simple_ram_image(self, constTextureself, ConstPointerToArrayimage, intx_size, inty_size) -> Any: ...
    def set_size_padded(self, constTextureself, intx, inty, intz) -> Any: ...
    @staticmethod
    def set_textures_power_2(intscale) -> Any: ...
    def set_wrap_u(self, constTextureself, intwrap) -> Any: ...
    def set_wrap_v(self, constTextureself, intwrap) -> Any: ...
    def set_wrap_w(self, constTextureself, intwrap) -> Any: ...
    def set_x_size(self, constTextureself, intx_size) -> Any: ...
    def set_y_size(self, constTextureself, inty_size) -> Any: ...
    def set_z_size(self, constTextureself, intz_size) -> Any: ...
    def setup1dTexture(self, *args, **kwargs): ...
    def setup2dTexture(self, *args, **kwargs): ...
    def setup2dTextureArray(self, *args, **kwargs): ...
    def setup3dTexture(self, *args, **kwargs): ...
    def setupAsyncTransfer(self, *args, **kwargs): ...
    def setupBufferTexture(self, *args, **kwargs): ...
    def setupCubeMap(self, *args, **kwargs): ...
    def setupCubeMapArray(self, *args, **kwargs): ...
    def setupTexture(self, *args, **kwargs): ...
    @overload
    def setup_1d_texture(self, constTextureself) -> Any: ...
    @overload
    def setup_1d_texture(self, constTextureself, intx_size, intcomponent_type, intformat) -> Any: ...
    @overload
    def setup_2d_texture(self, constTextureself) -> Any: ...
    @overload
    def setup_2d_texture(self, constTextureself, intx_size, inty_size, intcomponent_type, intformat) -> Any: ...
    @overload
    def setup_2d_texture_array(self, constTextureself) -> Any: ...
    @overload
    def setup_2d_texture_array(self, constTextureself, intz_size) -> Any: ...
    @overload
    def setup_2d_texture_array(
        self, constTextureself, intx_size, inty_size, intz_size, intcomponent_type, intformat
    ) -> Any: ...
    @overload
    def setup_3d_texture(self, constTextureself) -> Any: ...
    @overload
    def setup_3d_texture(self, constTextureself, intz_size) -> Any: ...
    @overload
    def setup_3d_texture(
        self, constTextureself, intx_size, inty_size, intz_size, intcomponent_type, intformat
    ) -> Any: ...
    def setup_async_transfer(self, constTextureself, intnum_buffers) -> Any: ...
    def setup_buffer_texture(self, constTextureself, intsize, intcomponent_type, intformat, intusage) -> Any: ...
    @overload
    def setup_cube_map(self, constTextureself) -> Any: ...
    @overload
    def setup_cube_map(self, constTextureself, intsize, intcomponent_type, intformat) -> Any: ...
    @overload
    def setup_cube_map_array(self, constTextureself, intnum_cube_maps) -> Any: ...
    @overload
    def setup_cube_map_array(
        self, constTextureself, intsize, intnum_cube_maps, intcomponent_type, intformat
    ) -> Any: ...
    def setup_texture(
        self, constTextureself, inttexture_type, intx_size, inty_size, intz_size, intcomponent_type, intformat
    ) -> Any: ...
    @overload
    def store(self, Textureself, PfmFilepfm) -> Any: ...
    @overload
    def store(self, Textureself, PNMImagepnmimage) -> Any: ...
    @overload
    def store(self, Textureself, PNMImagepnmimage, intz, intn) -> Any: ...
    @overload
    def store(self, Textureself, PfmFilepfm, intz, intn) -> Any: ...
    @staticmethod
    def stringComponentType(*args, **kwargs): ...
    @staticmethod
    def stringCompressionMode(*args, **kwargs): ...
    @staticmethod
    def stringFormat(*args, **kwargs): ...
    @staticmethod
    def stringQualityLevel(*args, **kwargs): ...
    @staticmethod
    def stringTextureType(*args, **kwargs): ...
    @staticmethod
    def string_component_type(strstr) -> Any: ...
    @staticmethod
    def string_compression_mode(strstr) -> Any: ...
    @staticmethod
    def string_format(strstr) -> Any: ...
    @staticmethod
    def string_quality_level(strstr) -> Any: ...
    @staticmethod
    def string_texture_type(strstr) -> Any: ...
    def uncompressRamImage(self, *args, **kwargs): ...
    def uncompress_ram_image(self, constTextureself) -> Any: ...
    @staticmethod
    def upToPower2(*args, **kwargs): ...
    @staticmethod
    def up_to_power_2(intvalue) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedWritableReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constTextureself) -> Any: ...
    def upcast_to_TypedWritableReferenceCount(self, constTextureself) -> Any: ...
    def usesMipmaps(self, *args, **kwargs): ...
    def uses_mipmaps(self, Textureself) -> Any: ...
    def wasImageModified(self, *args, **kwargs): ...
    def was_image_modified(self, Textureself, PreparedGraphicsObjectsprepared_objects) -> Any: ...
    @overload
    def write(self, constTextureself, constFilenamefullpath) -> Any: ...
    @overload
    def write(self, Textureself, ostreamout, intindent_level) -> Any: ...
    @overload
    def write(self, constTextureself, constFilenamefullpath, intz, intn, boolwrite_pages, boolwrite_mipmaps) -> Any: ...
    @overload
    def write(self, Filename) -> Any: ...
    def writeTxo(self, *args, **kwargs): ...
    def write_txo(self, Textureself, ostreamout, strfilename) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self, Textureself, objectmemo) -> Any: ...

class TextureAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    class_slot: Incomplete
    off_stages: Incomplete
    on_stages: Incomplete
    samplers: Incomplete
    textures: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addOffStage(self, *args, **kwargs): ...
    def addOnStage(self, *args, **kwargs): ...
    def add_off_stage(self, TextureAttribself, TextureStagestage, intoverride) -> Any: ...
    @overload
    def add_on_stage(self, TextureAttribself, TextureStagestage, Texturetex) -> Any: ...
    @overload
    def add_on_stage(
        self, TextureAttribself, TextureStagestage, Texturetex, constSamplerStatesampler, intoverride
    ) -> Any: ...
    @overload
    def add_on_stage(self, TextureAttribself, TextureStagestage, Texturetex, intoverride) -> Any: ...
    def findOnStage(self, *args, **kwargs): ...
    def find_on_stage(self, TextureAttribself, constTextureStagestage) -> Any: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFfTcIndex(self, *args, **kwargs): ...
    def getNumOffStages(self, *args, **kwargs): ...
    def getNumOnFfStages(self, *args, **kwargs): ...
    def getNumOnStages(self, *args, **kwargs): ...
    def getOffStage(self, *args, **kwargs): ...
    def getOffStages(self, *args, **kwargs): ...
    def getOnFfStage(self, *args, **kwargs): ...
    def getOnFfStages(self, *args, **kwargs): ...
    def getOnSampler(self, *args, **kwargs): ...
    def getOnStage(self, *args, **kwargs): ...
    def getOnStageOverride(self, *args, **kwargs): ...
    def getOnStages(self, *args, **kwargs): ...
    def getOnTexture(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_ff_tc_index(self, TextureAttribself, intn) -> Any: ...
    def get_num_off_stages(self, TextureAttribself) -> Any: ...
    def get_num_on_ff_stages(self, TextureAttribself) -> Any: ...
    def get_num_on_stages(self, TextureAttribself) -> Any: ...
    def get_off_stage(self, TextureAttribself, intn) -> Any: ...
    def get_off_stages(self, *args, **kwargs): ...
    def get_on_ff_stage(self, TextureAttribself, intn) -> Any: ...
    def get_on_ff_stages(self, *args, **kwargs): ...
    def get_on_sampler(self, TextureAttribself, TextureStagestage) -> Any: ...
    def get_on_stage(self, TextureAttribself, intn) -> Any: ...
    def get_on_stage_override(self, TextureAttribself, TextureStagestage) -> Any: ...
    def get_on_stages(self, *args, **kwargs): ...
    def get_on_texture(self, TextureAttribself, TextureStagestage) -> Any: ...
    def get_texture(self, TextureAttribself) -> Any: ...
    def hasAllOff(self, *args, **kwargs): ...
    def hasOffStage(self, *args, **kwargs): ...
    def hasOnStage(self, *args, **kwargs): ...
    def has_all_off(self, TextureAttribself) -> Any: ...
    def has_off_stage(self, TextureAttribself, TextureStagestage) -> Any: ...
    def has_on_stage(self, TextureAttribself, TextureStagestage) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isOff(self, *args, **kwargs): ...
    def is_identity(self, TextureAttribself) -> Any: ...
    def is_off(self, TextureAttribself) -> Any: ...
    @overload
    @staticmethod
    def make() -> Any: ...
    @overload
    @staticmethod
    def make(Texturetex) -> Any: ...
    @staticmethod
    def makeAllOff(*args, **kwargs): ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def makeOff(*args, **kwargs): ...
    @staticmethod
    def make_all_off() -> Any: ...
    @staticmethod
    def make_default() -> Any: ...
    @staticmethod
    def make_off() -> Any: ...
    def removeOffStage(self, *args, **kwargs): ...
    def removeOnStage(self, *args, **kwargs): ...
    def remove_off_stage(self, TextureAttribself, TextureStagestage) -> Any: ...
    def remove_on_stage(self, TextureAttribself, TextureStagestage) -> Any: ...
    def replaceTexture(self, *args, **kwargs): ...
    @overload
    def replace_texture(self, TextureAttribself, Texturetex, Texturenew_tex) -> Any: ...
    @overload
    def replace_texture(self, TextureAttribself, Texturetex, NoneTypenew_tex) -> Any: ...
    def unifyTextureStages(self, *args, **kwargs): ...
    def unify_texture_stages(self, TextureAttribself, TextureStagestage) -> Any: ...

class TextureCollection(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addTexture(self, *args, **kwargs): ...
    def addTexturesFrom(self, *args, **kwargs): ...
    def add_texture(self, constTextureCollectionself, Texturetexture) -> Any: ...
    def add_textures_from(self, constTextureCollectionself, constTextureCollectionother) -> Any: ...
    def append(self, constTextureCollectionself, Texturetexture) -> Any: ...
    def assign(self, constTextureCollectionself, constTextureCollectioncopy) -> Any: ...
    def clear(self, constTextureCollectionself) -> Any: ...
    def extend(self, constTextureCollectionself, constTextureCollectionother) -> Any: ...
    def findTexture(self, *args, **kwargs): ...
    def find_texture(self, TextureCollectionself, strname) -> Any: ...
    def getNumTextures(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    def getTextures(self, *args, **kwargs): ...
    def get_num_textures(self, TextureCollectionself) -> Any: ...
    def get_texture(self, TextureCollectionself, intindex) -> Any: ...
    def get_textures(self, *args, **kwargs): ...
    def hasTexture(self, *args, **kwargs): ...
    def has_texture(self, TextureCollectionself, Texturetexture) -> Any: ...
    def output(self, TextureCollectionself, ostreamout) -> Any: ...
    def removeDuplicateTextures(self, *args, **kwargs): ...
    def removeTexture(self, *args, **kwargs): ...
    def removeTexturesFrom(self, *args, **kwargs): ...
    def remove_duplicate_textures(self, constTextureCollectionself) -> Any: ...
    def remove_texture(self, constTextureCollectionself, Texturetexture) -> Any: ...
    def remove_textures_from(self, constTextureCollectionself, constTextureCollectionother) -> Any: ...
    def reserve(self, constTextureCollectionself, intnum) -> Any: ...
    def write(self, TextureCollectionself, ostreamout, intindent_level) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __iadd__(self, other): ...
    def __len__(self) -> int: ...
    def __radd__(self, other): ...
    def __reduce__(self, TextureCollectionself) -> Any: ...

class TextureContext(BufferContext, AdaptiveLruPage):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getImageModified(self, *args, **kwargs): ...
    def getImageModifiedPages(self, *args, **kwargs): ...
    def getNativeBufferId(self, *args, **kwargs): ...
    def getNativeId(self, *args, **kwargs): ...
    def getPropertiesModified(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    def getView(self, *args, **kwargs): ...
    def getViewModifiedPages(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_image_modified(self, TextureContextself) -> Any: ...
    def get_image_modified_pages(self, TextureContextself, intn) -> Any: ...
    def get_native_buffer_id(self, TextureContextself) -> Any: ...
    def get_native_id(self, TextureContextself) -> Any: ...
    def get_properties_modified(self, TextureContextself) -> Any: ...
    def get_texture(self, TextureContextself) -> Any: ...
    def get_view(self, TextureContextself) -> Any: ...
    def get_view_modified_pages(self, TextureContextself, intview, intn) -> Any: ...
    def upcastToAdaptiveLruPage(self, *args, **kwargs): ...
    def upcastToBufferContext(self, *args, **kwargs): ...
    def upcast_to_AdaptiveLruPage(self, constTextureContextself) -> Any: ...
    def upcast_to_BufferContext(self, constTextureContextself) -> Any: ...
    def wasImageModified(self, *args, **kwargs): ...
    def wasImagePageModified(self, *args, **kwargs): ...
    def wasModified(self, *args, **kwargs): ...
    def wasPropertiesModified(self, *args, **kwargs): ...
    def was_image_modified(self, TextureContextself) -> Any: ...
    def was_image_page_modified(self, TextureContextself, intz, intn) -> Any: ...
    def was_modified(self, TextureContextself) -> Any: ...
    def was_properties_modified(self, TextureContextself) -> Any: ...

class TexturePeeker(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def fetchPixel(self, *args, **kwargs): ...
    @overload
    def fetch_pixel(self, TexturePeekerself, LVecBase4fcolor, intx, inty) -> Any: ...
    @overload
    def fetch_pixel(self, TexturePeekerself, LVecBase4fcolor, intx, inty, intz) -> Any: ...
    def filterRect(self, *args, **kwargs): ...
    @overload
    def filter_rect(
        self, TexturePeekerself, LVecBase4fcolor, floatmin_u, floatmin_v, floatmax_u, floatmax_v
    ) -> Any: ...
    @overload
    def filter_rect(
        self, TexturePeekerself, LVecBase4fcolor, floatmin_u, floatmin_v, floatmin_w, floatmax_u, floatmax_v, floatmax_w
    ) -> Any: ...
    def getXSize(self, *args, **kwargs): ...
    def getYSize(self, *args, **kwargs): ...
    def getZSize(self, *args, **kwargs): ...
    def get_x_size(self, TexturePeekerself) -> Any: ...
    def get_y_size(self, TexturePeekerself) -> Any: ...
    def get_z_size(self, TexturePeekerself) -> Any: ...
    def hasPixel(self, *args, **kwargs): ...
    @overload
    def has_pixel(self, TexturePeekerself, intx, inty) -> Any: ...
    @overload
    def has_pixel(self, TexturePeekerself, intx, inty, intz) -> Any: ...
    @overload
    def lookup(self, TexturePeekerself, LVecBase4fcolor, floatu, floatv) -> Any: ...
    @overload
    def lookup(self, TexturePeekerself, LVecBase4fcolor, floatu, floatv, floatw) -> Any: ...
    def lookupBilinear(self, *args, **kwargs): ...
    def lookup_bilinear(self, TexturePeekerself, LVecBase4fcolor, floatu, floatv) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TexturePool(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    filters: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def addTexture(*args, **kwargs): ...
    @staticmethod
    def add_texture(Texturetexture) -> Any: ...
    @staticmethod
    def clearFakeTextureImage(*args, **kwargs): ...
    @staticmethod
    def clearFilters(*args, **kwargs): ...
    @staticmethod
    def clear_fake_texture_image() -> Any: ...
    @staticmethod
    def clear_filters() -> Any: ...
    @staticmethod
    def findAllTextures(*args, **kwargs): ...
    @staticmethod
    def findTexture(*args, **kwargs): ...
    @staticmethod
    def find_all_textures(strname) -> Any: ...
    @staticmethod
    def find_texture(strname) -> Any: ...
    @staticmethod
    def garbageCollect(*args, **kwargs): ...
    @staticmethod
    def garbage_collect() -> Any: ...
    @staticmethod
    def getAlphaScaleMap(*args, **kwargs): ...
    @staticmethod
    def getFakeTextureImage(*args, **kwargs): ...
    def getFilter(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    @staticmethod
    def getNormalizationCubeMap(*args, **kwargs): ...
    def getNumFilters(self, *args, **kwargs): ...
    @staticmethod
    def getTexture(*args, **kwargs): ...
    @staticmethod
    def get_alpha_scale_map() -> Any: ...
    @staticmethod
    def get_fake_texture_image() -> Any: ...
    def get_filter(self, TexturePoolself, inti) -> Any: ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    @staticmethod
    def get_normalization_cube_map(intsize) -> Any: ...
    def get_num_filters(self, TexturePoolself) -> Any: ...
    @overload
    @staticmethod
    def get_texture(constFilenamefilename) -> Any: ...
    @overload
    @staticmethod
    def get_texture(
        constFilenamefilename,
        constFilenamealpha_filename,
        intprimary_file_num_channels,
        intalpha_file_channel,
        boolread_mipmaps,
    ) -> Any: ...
    @overload
    @staticmethod
    def get_texture(constFilenamefilename, intprimary_file_num_channels, boolread_mipmaps) -> Any: ...
    @staticmethod
    def hasFakeTextureImage(*args, **kwargs): ...
    @staticmethod
    def hasTexture(*args, **kwargs): ...
    @staticmethod
    def has_fake_texture_image() -> Any: ...
    @staticmethod
    def has_texture(constFilenamefilename) -> Any: ...
    def isFilterRegistered(self, *args, **kwargs): ...
    @overload
    def is_filter_registered(self, constTexturePoolself, objecttex_filter) -> Any: ...
    @overload
    def is_filter_registered(self, TexturePoolFiltertex_filter) -> Any: ...
    @staticmethod
    def listContents(*args, **kwargs): ...
    @overload
    @staticmethod
    def list_contents() -> Any: ...
    @overload
    @staticmethod
    def list_contents(ostreamout) -> Any: ...
    @staticmethod
    def load2dTextureArray(*args, **kwargs): ...
    @staticmethod
    def load3dTexture(*args, **kwargs): ...
    @staticmethod
    def loadCubeMap(*args, **kwargs): ...
    @staticmethod
    def loadTexture(*args, **kwargs): ...
    @staticmethod
    def load_2d_texture_array(
        constFilenamefilename_pattern, boolread_mipmaps, constLoaderOptionsoptions, constSamplerStatesampler
    ) -> Any: ...
    @staticmethod
    def load_3d_texture(
        constFilenamefilename_pattern, boolread_mipmaps, constLoaderOptionsoptions, constSamplerStatesampler
    ) -> Any: ...
    @staticmethod
    def load_cube_map(
        constFilenamefilename_pattern, boolread_mipmaps, constLoaderOptionsoptions, constSamplerStatesampler
    ) -> Any: ...
    @overload
    @staticmethod
    def load_texture(constFilenamefilename) -> Any: ...
    @overload
    @staticmethod
    def load_texture(
        constFilenamefilename,
        constFilenamealpha_filename,
        intprimary_file_num_channels,
        intalpha_file_channel,
        boolread_mipmaps,
        constLoaderOptionsoptions,
        constSamplerStatesampler,
    ) -> Any: ...
    @overload
    @staticmethod
    def load_texture(
        constFilenamefilename,
        intprimary_file_num_channels,
        boolread_mipmaps,
        constLoaderOptionsoptions,
        constSamplerStatesampler,
    ) -> Any: ...
    @staticmethod
    def makeTexture(*args, **kwargs): ...
    @staticmethod
    def make_texture(strextension) -> Any: ...
    def registerFilter(self, *args, **kwargs): ...
    @overload
    def register_filter(self, constTexturePoolself, objecttex_filter) -> Any: ...
    @overload
    def register_filter(self, TexturePoolFiltertex_filter) -> Any: ...
    @staticmethod
    def rehash() -> Any: ...
    @staticmethod
    def releaseAllTextures(*args, **kwargs): ...
    @staticmethod
    def releaseTexture(*args, **kwargs): ...
    @staticmethod
    def release_all_textures() -> Any: ...
    @staticmethod
    def release_texture(Texturetexture) -> Any: ...
    @staticmethod
    def setFakeTextureImage(*args, **kwargs): ...
    @staticmethod
    def set_fake_texture_image(constFilenamefilename) -> Any: ...
    def unregisterFilter(self, *args, **kwargs): ...
    @overload
    def unregister_filter(self, constTexturePoolself, objecttex_filter) -> Any: ...
    @overload
    def unregister_filter(self, TexturePoolFiltertex_filter) -> Any: ...
    @staticmethod
    def verifyTexture(*args, **kwargs): ...
    @staticmethod
    def verify_texture(constFilenamefilename) -> Any: ...
    @staticmethod
    def write(ostreamout) -> Any: ...

class TexturePoolFilter(TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class TextureReloadRequest(AsyncTask):
    DtoolClassDict: ClassVar[dict] = ...
    texture: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getAllowCompressed(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPreparedGraphicsObjects(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    def get_allow_compressed(self, TextureReloadRequestself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_prepared_graphics_objects(self, TextureReloadRequestself) -> Any: ...
    def get_texture(self, TextureReloadRequestself) -> Any: ...
    def isReady(self, *args, **kwargs): ...
    def is_ready(self, TextureReloadRequestself) -> Any: ...

class TextureStage(TypedWritableReferenceCount):
    CMAdd: ClassVar[int] = ...
    CMAddSigned: ClassVar[int] = ...
    CMDot3Rgb: ClassVar[int] = ...
    CMDot3Rgba: ClassVar[int] = ...
    CMInterpolate: ClassVar[int] = ...
    CMModulate: ClassVar[int] = ...
    CMReplace: ClassVar[int] = ...
    CMSubtract: ClassVar[int] = ...
    CMUndefined: ClassVar[int] = ...
    CM_add: ClassVar[int] = ...
    CM_add_signed: ClassVar[int] = ...
    CM_dot3_rgb: ClassVar[int] = ...
    CM_dot3_rgba: ClassVar[int] = ...
    CM_interpolate: ClassVar[int] = ...
    CM_modulate: ClassVar[int] = ...
    CM_replace: ClassVar[int] = ...
    CM_subtract: ClassVar[int] = ...
    CM_undefined: ClassVar[int] = ...
    COOneMinusSrcAlpha: ClassVar[int] = ...
    COOneMinusSrcColor: ClassVar[int] = ...
    COSrcAlpha: ClassVar[int] = ...
    COSrcColor: ClassVar[int] = ...
    COUndefined: ClassVar[int] = ...
    CO_one_minus_src_alpha: ClassVar[int] = ...
    CO_one_minus_src_color: ClassVar[int] = ...
    CO_src_alpha: ClassVar[int] = ...
    CO_src_color: ClassVar[int] = ...
    CO_undefined: ClassVar[int] = ...
    CSConstant: ClassVar[int] = ...
    CSConstantColorScale: ClassVar[int] = ...
    CSLastSavedResult: ClassVar[int] = ...
    CSPrevious: ClassVar[int] = ...
    CSPrimaryColor: ClassVar[int] = ...
    CSTexture: ClassVar[int] = ...
    CSUndefined: ClassVar[int] = ...
    CS_constant: ClassVar[int] = ...
    CS_constant_color_scale: ClassVar[int] = ...
    CS_last_saved_result: ClassVar[int] = ...
    CS_previous: ClassVar[int] = ...
    CS_primary_color: ClassVar[int] = ...
    CS_texture: ClassVar[int] = ...
    CS_undefined: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    MAdd: ClassVar[int] = ...
    MBlend: ClassVar[int] = ...
    MBlendColorScale: ClassVar[int] = ...
    MCombine: ClassVar[int] = ...
    MDecal: ClassVar[int] = ...
    MEmission: ClassVar[int] = ...
    MGloss: ClassVar[int] = ...
    MGlow: ClassVar[int] = ...
    MHeight: ClassVar[int] = ...
    MModulate: ClassVar[int] = ...
    MModulateGloss: ClassVar[int] = ...
    MModulateGlow: ClassVar[int] = ...
    MNormal: ClassVar[int] = ...
    MNormalGloss: ClassVar[int] = ...
    MNormalHeight: ClassVar[int] = ...
    MReplace: ClassVar[int] = ...
    MSelector: ClassVar[int] = ...
    M_add: ClassVar[int] = ...
    M_blend: ClassVar[int] = ...
    M_blend_color_scale: ClassVar[int] = ...
    M_combine: ClassVar[int] = ...
    M_decal: ClassVar[int] = ...
    M_emission: ClassVar[int] = ...
    M_gloss: ClassVar[int] = ...
    M_glow: ClassVar[int] = ...
    M_height: ClassVar[int] = ...
    M_modulate: ClassVar[int] = ...
    M_modulate_gloss: ClassVar[int] = ...
    M_modulate_glow: ClassVar[int] = ...
    M_normal: ClassVar[int] = ...
    M_normal_gloss: ClassVar[int] = ...
    M_normal_height: ClassVar[int] = ...
    M_replace: ClassVar[int] = ...
    M_selector: ClassVar[int] = ...
    alpha_scale: Incomplete
    binormal_name: Incomplete
    color: Incomplete
    default: Incomplete
    mode: Incomplete
    name: Incomplete
    priority: Incomplete
    rgb_scale: Incomplete
    saved_result: Incomplete
    sort: Incomplete
    tangent_name: Incomplete
    tex_view_offset: Incomplete
    texcoord_name: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constTextureStageself, constTextureStagecopy) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, TextureStageself, constTextureStageother) -> Any: ...
    def getAlphaScale(self, *args, **kwargs): ...
    def getBinormalName(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColor(self, *args, **kwargs): ...
    def getCombineAlphaMode(self, *args, **kwargs): ...
    def getCombineAlphaOperand0(self, *args, **kwargs): ...
    def getCombineAlphaOperand1(self, *args, **kwargs): ...
    def getCombineAlphaOperand2(self, *args, **kwargs): ...
    def getCombineAlphaSource0(self, *args, **kwargs): ...
    def getCombineAlphaSource1(self, *args, **kwargs): ...
    def getCombineAlphaSource2(self, *args, **kwargs): ...
    def getCombineRgbMode(self, *args, **kwargs): ...
    def getCombineRgbOperand0(self, *args, **kwargs): ...
    def getCombineRgbOperand1(self, *args, **kwargs): ...
    def getCombineRgbOperand2(self, *args, **kwargs): ...
    def getCombineRgbSource0(self, *args, **kwargs): ...
    def getCombineRgbSource1(self, *args, **kwargs): ...
    def getCombineRgbSource2(self, *args, **kwargs): ...
    @staticmethod
    def getDefault(*args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumCombineAlphaOperands(self, *args, **kwargs): ...
    def getNumCombineRgbOperands(self, *args, **kwargs): ...
    def getPriority(self, *args, **kwargs): ...
    def getRgbScale(self, *args, **kwargs): ...
    def getSavedResult(self, *args, **kwargs): ...
    def getSort(self, *args, **kwargs): ...
    def getTangentName(self, *args, **kwargs): ...
    def getTexViewOffset(self, *args, **kwargs): ...
    def getTexcoordName(self, *args, **kwargs): ...
    def get_alpha_scale(self, TextureStageself) -> Any: ...
    @overload
    def get_binormal_name(self, TextureStageself) -> Any: ...
    @overload
    def get_binormal_name(self) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_color(self, TextureStageself) -> Any: ...
    def get_combine_alpha_mode(self, TextureStageself) -> Any: ...
    def get_combine_alpha_operand0(self, TextureStageself) -> Any: ...
    def get_combine_alpha_operand1(self, TextureStageself) -> Any: ...
    def get_combine_alpha_operand2(self, TextureStageself) -> Any: ...
    def get_combine_alpha_source0(self, TextureStageself) -> Any: ...
    def get_combine_alpha_source1(self, TextureStageself) -> Any: ...
    def get_combine_alpha_source2(self, TextureStageself) -> Any: ...
    def get_combine_rgb_mode(self, TextureStageself) -> Any: ...
    def get_combine_rgb_operand0(self, TextureStageself) -> Any: ...
    def get_combine_rgb_operand1(self, TextureStageself) -> Any: ...
    def get_combine_rgb_operand2(self, TextureStageself) -> Any: ...
    def get_combine_rgb_source0(self, TextureStageself) -> Any: ...
    def get_combine_rgb_source1(self, TextureStageself) -> Any: ...
    def get_combine_rgb_source2(self, TextureStageself) -> Any: ...
    @staticmethod
    def get_default() -> Any: ...
    def get_mode(self, TextureStageself) -> Any: ...
    def get_name(self, TextureStageself) -> Any: ...
    def get_num_combine_alpha_operands(self, TextureStageself) -> Any: ...
    def get_num_combine_rgb_operands(self, TextureStageself) -> Any: ...
    def get_priority(self, TextureStageself) -> Any: ...
    def get_rgb_scale(self, TextureStageself) -> Any: ...
    def get_saved_result(self, TextureStageself) -> Any: ...
    def get_sort(self, TextureStageself) -> Any: ...
    def get_tangent_name(self, TextureStageself) -> Any: ...
    def get_tex_view_offset(self, TextureStageself) -> Any: ...
    def get_texcoord_name(self, TextureStageself) -> Any: ...
    def involvesColorScale(self, *args, **kwargs): ...
    def involves_color_scale(self, TextureStageself) -> Any: ...
    def isFixedFunction(self, *args, **kwargs): ...
    def is_fixed_function(self, TextureStageself) -> Any: ...
    def output(self, TextureStageself, ostreamout) -> Any: ...
    def setAlphaScale(self, *args, **kwargs): ...
    def setColor(self, *args, **kwargs): ...
    def setCombineAlpha(self, *args, **kwargs): ...
    def setCombineRgb(self, *args, **kwargs): ...
    def setMode(self, *args, **kwargs): ...
    def setName(self, *args, **kwargs): ...
    def setPriority(self, *args, **kwargs): ...
    def setRgbScale(self, *args, **kwargs): ...
    def setSavedResult(self, *args, **kwargs): ...
    def setSort(self, *args, **kwargs): ...
    def setTexViewOffset(self, *args, **kwargs): ...
    def setTexcoordName(self, *args, **kwargs): ...
    def set_alpha_scale(self, constTextureStageself, intalpha_scale) -> Any: ...
    def set_color(self, constTextureStageself, constLVecBase4fcolor) -> Any: ...
    @overload
    def set_combine_alpha(self, constTextureStageself, intmode, intsource0, intoperand0) -> Any: ...
    @overload
    def set_combine_alpha(
        self, constTextureStageself, intmode, intsource0, intoperand0, intsource1, intoperand1
    ) -> Any: ...
    @overload
    def set_combine_alpha(
        self, constTextureStageself, intmode, intsource0, intoperand0, intsource1, intoperand1, intsource2, intoperand2
    ) -> Any: ...
    @overload
    def set_combine_rgb(self, constTextureStageself, intmode, intsource0, intoperand0) -> Any: ...
    @overload
    def set_combine_rgb(
        self, constTextureStageself, intmode, intsource0, intoperand0, intsource1, intoperand1
    ) -> Any: ...
    @overload
    def set_combine_rgb(
        self, constTextureStageself, intmode, intsource0, intoperand0, intsource1, intoperand1, intsource2, intoperand2
    ) -> Any: ...
    def set_mode(self, constTextureStageself, intmode) -> Any: ...
    def set_name(self, constTextureStageself, strname) -> Any: ...
    def set_priority(self, constTextureStageself, intpriority) -> Any: ...
    def set_rgb_scale(self, constTextureStageself, intrgb_scale) -> Any: ...
    def set_saved_result(self, constTextureStageself, boolsaved_result) -> Any: ...
    def set_sort(self, constTextureStageself, intsort) -> Any: ...
    def set_tex_view_offset(self, constTextureStageself, inttex_view_offset) -> Any: ...
    @overload
    def set_texcoord_name(self, constTextureStageself, InternalNamename) -> Any: ...
    @overload
    def set_texcoord_name(self, constTextureStageself, strtexcoord_name) -> Any: ...
    def usesColor(self, *args, **kwargs): ...
    def usesLastSavedResult(self, *args, **kwargs): ...
    def usesPrimaryColor(self, *args, **kwargs): ...
    def uses_color(self, TextureStageself) -> Any: ...
    def uses_last_saved_result(self, TextureStageself) -> Any: ...
    def uses_primary_color(self, TextureStageself) -> Any: ...
    def write(self, TextureStageself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class TextureStageCollection(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addTextureStage(self, *args, **kwargs): ...
    def addTextureStagesFrom(self, *args, **kwargs): ...
    def add_texture_stage(self, constTextureStageCollectionself, TextureStagenode_texture_stage) -> Any: ...
    def add_texture_stages_from(self, constTextureStageCollectionself, constTextureStageCollectionother) -> Any: ...
    def assign(self, constTextureStageCollectionself, constTextureStageCollectioncopy) -> Any: ...
    def clear(self, constTextureStageCollectionself) -> Any: ...
    def findTextureStage(self, *args, **kwargs): ...
    def find_texture_stage(self, TextureStageCollectionself, strname) -> Any: ...
    def getNumTextureStages(self, *args, **kwargs): ...
    def getTextureStage(self, *args, **kwargs): ...
    def getTextureStages(self, *args, **kwargs): ...
    def get_num_texture_stages(self, TextureStageCollectionself) -> Any: ...
    def get_texture_stage(self, TextureStageCollectionself, intindex) -> Any: ...
    def get_texture_stages(self, *args, **kwargs): ...
    def hasTextureStage(self, *args, **kwargs): ...
    def has_texture_stage(self, TextureStageCollectionself, TextureStagetexture_stage) -> Any: ...
    def output(self, TextureStageCollectionself, ostreamout) -> Any: ...
    def removeDuplicateTextureStages(self, *args, **kwargs): ...
    def removeTextureStage(self, *args, **kwargs): ...
    def removeTextureStagesFrom(self, *args, **kwargs): ...
    def remove_duplicate_texture_stages(self, constTextureStageCollectionself) -> Any: ...
    def remove_texture_stage(self, constTextureStageCollectionself, TextureStagenode_texture_stage) -> Any: ...
    def remove_texture_stages_from(self, constTextureStageCollectionself, constTextureStageCollectionother) -> Any: ...
    @overload
    def sort(self, constTextureStageCollectionself) -> Any: ...
    @overload
    def sort(self) -> Any: ...
    def write(self, TextureStageCollectionself, ostreamout, intindent_level) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __iadd__(self, other): ...
    def __len__(self) -> int: ...
    def __radd__(self, other): ...

class TextureStagePool(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    MName: ClassVar[int] = ...
    MNone: ClassVar[int] = ...
    MUnique: ClassVar[int] = ...
    M_name: ClassVar[int] = ...
    M_none: ClassVar[int] = ...
    M_unique: ClassVar[int] = ...
    mode: Incomplete
    def __init__(self, thereisonlyoneintheuniverse) -> Any: ...
    @staticmethod
    def garbageCollect(*args, **kwargs): ...
    @staticmethod
    def garbage_collect() -> Any: ...
    @staticmethod
    def getMode(*args, **kwargs): ...
    @staticmethod
    def getStage(*args, **kwargs): ...
    @staticmethod
    def get_mode() -> Any: ...
    @overload
    @staticmethod
    def get_stage(TextureStagetemp) -> Any: ...
    @overload
    @staticmethod
    def get_stage() -> Any: ...
    @staticmethod
    def listContents(*args, **kwargs): ...
    @staticmethod
    def list_contents(ostreamout) -> Any: ...
    @staticmethod
    def releaseAllStages(*args, **kwargs): ...
    @staticmethod
    def releaseStage(*args, **kwargs): ...
    @staticmethod
    def release_all_stages() -> Any: ...
    @staticmethod
    def release_stage(TextureStagetemp) -> Any: ...
    @staticmethod
    def setMode(*args, **kwargs): ...
    @staticmethod
    def set_mode(intmode) -> Any: ...
    @staticmethod
    def write(ostreamout) -> Any: ...

class Thread(TypedReferenceCount, Namable):
    DtoolClassDict: ClassVar[dict] = ...
    current_pipeline_stage: Incomplete
    current_task: Incomplete
    current_thread: Incomplete
    external_thread: Incomplete
    joinable: Incomplete
    main_thread: Incomplete
    pipeline_stage: Incomplete
    pstats_index: Incomplete
    python_index: Incomplete
    simple_threads: Incomplete
    started: Incomplete
    sync_name: Incomplete
    threading_supported: Incomplete
    true_threads: Incomplete
    unique_id: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def bindThread(*args, **kwargs): ...
    @staticmethod
    def bind_thread(strname, strsync_name) -> Any: ...
    @staticmethod
    def considerYield(*args, **kwargs): ...
    @staticmethod
    def consider_yield() -> Any: ...
    @staticmethod
    def forceYield(*args, **kwargs): ...
    @staticmethod
    def force_yield() -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getCurrentPipelineStage(*args, **kwargs): ...
    def getCurrentTask(self, *args, **kwargs): ...
    @staticmethod
    def getCurrentThread(*args, **kwargs): ...
    @staticmethod
    def getExternalThread(*args, **kwargs): ...
    @staticmethod
    def getMainThread(*args, **kwargs): ...
    def getPipelineStage(self, *args, **kwargs): ...
    def getPstatsIndex(self, *args, **kwargs): ...
    def getPythonIndex(self, *args, **kwargs): ...
    def getSyncName(self, *args, **kwargs): ...
    def getUniqueId(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_current_pipeline_stage() -> Any: ...
    def get_current_task(self, Threadself) -> Any: ...
    @staticmethod
    def get_current_thread() -> Any: ...
    @staticmethod
    def get_external_thread() -> Any: ...
    @staticmethod
    def get_main_thread() -> Any: ...
    def get_pipeline_stage(self, Threadself) -> Any: ...
    def get_pstats_index(self, Threadself) -> Any: ...
    def get_python_index(self, Threadself) -> Any: ...
    def get_sync_name(self, Threadself) -> Any: ...
    def get_unique_id(self, Threadself) -> Any: ...
    def isJoinable(self, *args, **kwargs): ...
    @staticmethod
    def isSimpleThreads(*args, **kwargs): ...
    def isStarted(self, *args, **kwargs): ...
    @staticmethod
    def isThreadingSupported(*args, **kwargs): ...
    @staticmethod
    def isTrueThreads(*args, **kwargs): ...
    def is_joinable(self, Threadself) -> Any: ...
    @staticmethod
    def is_simple_threads() -> Any: ...
    def is_started(self, Threadself) -> Any: ...
    @staticmethod
    def is_threading_supported() -> Any: ...
    @staticmethod
    def is_true_threads() -> Any: ...
    def join(self, constThreadself) -> Any: ...
    def output(self, Threadself, ostreamout) -> Any: ...
    def outputBlocker(self, *args, **kwargs): ...
    def output_blocker(self, Threadself, ostreamout) -> Any: ...
    def preempt(self, constThreadself) -> Any: ...
    @staticmethod
    def prepareForExit(*args, **kwargs): ...
    @staticmethod
    def prepare_for_exit() -> Any: ...
    @staticmethod
    def relax() -> Any: ...
    def setMinPipelineStage(self, *args, **kwargs): ...
    def setPipelineStage(self, *args, **kwargs): ...
    def setPythonIndex(self, *args, **kwargs): ...
    def set_min_pipeline_stage(self, constThreadself, intmin_pipeline_stage) -> Any: ...
    def set_pipeline_stage(self, constThreadself, intpipeline_stage) -> Any: ...
    def set_python_index(self, constThreadself, intindex) -> Any: ...
    @staticmethod
    def sleep(doubleseconds) -> Any: ...
    def start(self, constThreadself, intpriority, booljoinable) -> Any: ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcastToTypedReferenceCount(self, *args, **kwargs): ...
    def upcast_to_Namable(self, constThreadself) -> Any: ...
    def upcast_to_TypedReferenceCount(self, constThreadself) -> Any: ...
    @staticmethod
    def writeStatus(*args, **kwargs): ...
    @staticmethod
    def write_status(ostreamout) -> Any: ...

class TimeVal(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getSec(self, *args, **kwargs): ...
    def getUsec(self, *args, **kwargs): ...
    def get_sec(self, TimeValself) -> Any: ...
    def get_usec(self, TimeValself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TouchInfo(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    TIFDown: ClassVar[int] = ...
    TIFMove: ClassVar[int] = ...
    TIFUp: ClassVar[int] = ...
    TIF_down: ClassVar[int] = ...
    TIF_move: ClassVar[int] = ...
    TIF_up: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getFlags(self, *args, **kwargs): ...
    def getId(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def get_flags(self, constTouchInfoself) -> Any: ...
    def get_id(self, constTouchInfoself) -> Any: ...
    def get_x(self, constTouchInfoself) -> Any: ...
    def get_y(self, constTouchInfoself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Trackball(MouseInterfaceNode):
    CMDefault: ClassVar[int] = ...
    CMDolly: ClassVar[int] = ...
    CMPan: ClassVar[int] = ...
    CMRoll: ClassVar[int] = ...
    CMTruck: ClassVar[int] = ...
    CM_default: ClassVar[int] = ...
    CM_dolly: ClassVar[int] = ...
    CM_pan: ClassVar[int] = ...
    CM_roll: ClassVar[int] = ...
    CM_truck: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getControlMode(self, *args, **kwargs): ...
    def getCoordinateSystem(self, *args, **kwargs): ...
    def getForwardScale(self, *args, **kwargs): ...
    def getH(self, *args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getInvert(self, *args, **kwargs): ...
    def getMat(self, *args, **kwargs): ...
    def getOrigin(self, *args, **kwargs): ...
    def getP(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getR(self, *args, **kwargs): ...
    def getRelTo(self, *args, **kwargs): ...
    def getTransMat(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_control_mode(self, Trackballself) -> Any: ...
    def get_coordinate_system(self, Trackballself) -> Any: ...
    def get_forward_scale(self, Trackballself) -> Any: ...
    def get_h(self, Trackballself) -> Any: ...
    def get_hpr(self, Trackballself) -> Any: ...
    def get_invert(self, Trackballself) -> Any: ...
    def get_mat(self, Trackballself) -> Any: ...
    def get_origin(self, Trackballself) -> Any: ...
    def get_p(self, Trackballself) -> Any: ...
    def get_pos(self, Trackballself) -> Any: ...
    def get_r(self, Trackballself) -> Any: ...
    def get_rel_to(self, Trackballself) -> Any: ...
    def get_trans_mat(self, Trackballself) -> Any: ...
    def get_x(self, Trackballself) -> Any: ...
    def get_y(self, Trackballself) -> Any: ...
    def get_z(self, Trackballself) -> Any: ...
    def moveOrigin(self, *args, **kwargs): ...
    def move_origin(self, constTrackballself, floatx, floaty, floatz) -> Any: ...
    def reset(self, constTrackballself) -> Any: ...
    def resetOriginHere(self, *args, **kwargs): ...
    def reset_origin_here(self, constTrackballself) -> Any: ...
    def setControlMode(self, *args, **kwargs): ...
    def setCoordinateSystem(self, *args, **kwargs): ...
    def setForwardScale(self, *args, **kwargs): ...
    def setH(self, *args, **kwargs): ...
    def setHpr(self, *args, **kwargs): ...
    def setInvert(self, *args, **kwargs): ...
    def setMat(self, *args, **kwargs): ...
    def setOrigin(self, *args, **kwargs): ...
    def setP(self, *args, **kwargs): ...
    def setPos(self, *args, **kwargs): ...
    def setR(self, *args, **kwargs): ...
    def setRelTo(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_control_mode(self, constTrackballself, intcontrol_mode) -> Any: ...
    def set_coordinate_system(self, constTrackballself, intcs) -> Any: ...
    def set_forward_scale(self, constTrackballself, floatfwdscale) -> Any: ...
    def set_h(self, constTrackballself, floath) -> Any: ...
    @overload
    def set_hpr(self, constTrackballself, constLVecBase3fhpr) -> Any: ...
    @overload
    def set_hpr(self, constTrackballself, floath, floatp, floatr) -> Any: ...
    def set_invert(self, constTrackballself, boolflag) -> Any: ...
    def set_mat(self, constTrackballself, constLMatrix4fmat) -> Any: ...
    def set_origin(self, constTrackballself, constLVecBase3forigin) -> Any: ...
    def set_p(self, constTrackballself, floatp) -> Any: ...
    @overload
    def set_pos(self, constTrackballself, constLVecBase3fvec) -> Any: ...
    @overload
    def set_pos(self, constTrackballself, floatx, floaty, floatz) -> Any: ...
    def set_r(self, constTrackballself, floatr) -> Any: ...
    def set_rel_to(self, constTrackballself, constNodePathrel_to) -> Any: ...
    def set_x(self, constTrackballself, floatx) -> Any: ...
    def set_y(self, constTrackballself, floaty) -> Any: ...
    def set_z(self, constTrackballself, floatz) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TrackerData(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    dt: Incomplete
    orient: Incomplete
    pos: Incomplete
    time: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class TrackerNode(DataNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getGraphCoordinateSystem(self, *args, **kwargs): ...
    def getOrient(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getTime(self, *args, **kwargs): ...
    def getTrackerCoordinateSystem(self, *args, **kwargs): ...
    def getTransform(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_graph_coordinate_system(self, TrackerNodeself) -> Any: ...
    def get_orient(self, TrackerNodeself) -> Any: ...
    def get_pos(self, TrackerNodeself) -> Any: ...
    def get_time(self, TrackerNodeself) -> Any: ...
    def get_tracker_coordinate_system(self, TrackerNodeself) -> Any: ...
    def get_transform(self, TrackerNodeself) -> Any: ...
    def hasTime(self, *args, **kwargs): ...
    def has_time(self, TrackerNodeself) -> Any: ...
    def isValid(self, *args, **kwargs): ...
    def is_valid(self, TrackerNodeself) -> Any: ...
    def setGraphCoordinateSystem(self, *args, **kwargs): ...
    def setTrackerCoordinateSystem(self, *args, **kwargs): ...
    def set_graph_coordinate_system(self, constTrackerNodeself, intcs) -> Any: ...
    def set_tracker_coordinate_system(self, constTrackerNodeself, intcs) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Transform2SG(DataNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_node(self, Transform2SGself) -> Any: ...
    def setNode(self, *args, **kwargs): ...
    def set_node(self, constTransform2SGself, PandaNodenode) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TransformBlend(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    modified: Incomplete
    transforms: Incomplete
    weights: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addTransform(self, *args, **kwargs): ...
    def add_transform(self, constTransformBlendself, constVertexTransformtransform, floatweight) -> Any: ...
    def assign(self, constTransformBlendself, constTransformBlendcopy) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, TransformBlendself, constTransformBlendother) -> Any: ...
    def getBlend(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getModified(self, *args, **kwargs): ...
    def getNumTransforms(self, *args, **kwargs): ...
    def getTransform(self, *args, **kwargs): ...
    def getTransforms(self, *args, **kwargs): ...
    def getWeight(self, *args, **kwargs): ...
    def get_blend(self, TransformBlendself, LMatrix4fresult, Threadcurrent_thread) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_modified(self, TransformBlendself, Threadcurrent_thread) -> Any: ...
    def get_num_transforms(self, TransformBlendself) -> Any: ...
    def get_transform(self, TransformBlendself, intn) -> Any: ...
    def get_transforms(self, *args, **kwargs): ...
    @overload
    def get_weight(self, TransformBlendself, constVertexTransformtransform) -> Any: ...
    @overload
    def get_weight(self, TransformBlendself, intn) -> Any: ...
    def hasTransform(self, *args, **kwargs): ...
    def has_transform(self, TransformBlendself, constVertexTransformtransform) -> Any: ...
    def limitTransforms(self, *args, **kwargs): ...
    def limit_transforms(self, constTransformBlendself, intmax_transforms) -> Any: ...
    def normalizeWeights(self, *args, **kwargs): ...
    def normalize_weights(self, constTransformBlendself) -> Any: ...
    def output(self, TransformBlendself, ostreamout) -> Any: ...
    def removeTransform(self, *args, **kwargs): ...
    @overload
    def remove_transform(self, constTransformBlendself, constVertexTransformtransform) -> Any: ...
    @overload
    def remove_transform(self, constTransformBlendself, intn) -> Any: ...
    def setTransform(self, *args, **kwargs): ...
    def setWeight(self, *args, **kwargs): ...
    def set_transform(self, constTransformBlendself, intn, constVertexTransformtransform) -> Any: ...
    def set_weight(self, constTransformBlendself, intn, floatweight) -> Any: ...
    def transformPoint(self, *args, **kwargs): ...
    def transformVector(self, *args, **kwargs): ...
    @overload
    def transform_point(self, TransformBlendself, LPoint4dpoint, Threadcurrent_thread) -> Any: ...
    @overload
    def transform_point(self, TransformBlendself, LPoint4fpoint, Threadcurrent_thread) -> Any: ...
    @overload
    def transform_point(self, TransformBlendself, LPoint3dpoint, Threadcurrent_thread) -> Any: ...
    @overload
    def transform_point(self, TransformBlendself, LPoint3fpoint, Threadcurrent_thread) -> Any: ...
    @overload
    def transform_vector(self, TransformBlendself, LVector3dpoint, Threadcurrent_thread) -> Any: ...
    @overload
    def transform_vector(self, TransformBlendself, LVector3fpoint, Threadcurrent_thread) -> Any: ...
    def updateBlend(self, *args, **kwargs): ...
    def update_blend(self, TransformBlendself, Threadcurrent_thread) -> Any: ...
    def write(self, TransformBlendself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class TransformBlendTable(CopyOnWriteObject):
    DtoolClassDict: ClassVar[dict] = ...
    blends: Incomplete
    max_simultaneous_transforms: Incomplete
    modified: Incomplete
    num_transforms: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addBlend(self, *args, **kwargs): ...
    def add_blend(self, constTransformBlendTableself, constTransformBlendblend) -> Any: ...
    def assign(self, constTransformBlendTableself, constTransformBlendTablecopy) -> Any: ...
    def getBlend(self, *args, **kwargs): ...
    def getBlends(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMaxSimultaneousTransforms(self, *args, **kwargs): ...
    def getModified(self, *args, **kwargs): ...
    def getNumBlends(self, *args, **kwargs): ...
    def getNumTransforms(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def get_blend(self, TransformBlendTableself, intn) -> Any: ...
    def get_blends(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_max_simultaneous_transforms(self, TransformBlendTableself) -> Any: ...
    def get_modified(self, TransformBlendTableself, Threadcurrent_thread) -> Any: ...
    def get_num_blends(self, TransformBlendTableself) -> Any: ...
    def get_num_transforms(self, TransformBlendTableself) -> Any: ...
    def get_rows(self, TransformBlendTableself) -> Any: ...
    def modifyRows(self, *args, **kwargs): ...
    def modify_rows(self, constTransformBlendTableself) -> Any: ...
    def removeBlend(self, *args, **kwargs): ...
    def remove_blend(self, constTransformBlendTableself, intn) -> Any: ...
    def setBlend(self, *args, **kwargs): ...
    def setRows(self, *args, **kwargs): ...
    def set_blend(self, constTransformBlendTableself, intn, constTransformBlendblend) -> Any: ...
    def set_rows(self, constTransformBlendTableself, constSparseArrayrows) -> Any: ...
    def write(self, TransformBlendTableself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TransformState(NodeCachedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    hpr: Incomplete
    mat: Incomplete
    norm_quat: Incomplete
    pos: Incomplete
    quat: Incomplete
    scale: Incomplete
    shear: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def cacheRef(self, *args, **kwargs): ...
    def cacheUnref(self, *args, **kwargs): ...
    def cache_ref(self, TransformStateself) -> Any: ...
    def cache_unref(self, TransformStateself) -> Any: ...
    @staticmethod
    def clearCache(*args, **kwargs): ...
    @staticmethod
    def clear_cache() -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, TransformStateself, constTransformStateother) -> Any: ...
    @overload
    def compare_to(self, TransformStateself, constTransformStateother, booluniquify_matrix) -> Any: ...
    def componentsGiven(self, *args, **kwargs): ...
    def components_given(self, TransformStateself) -> Any: ...
    def compose(self, TransformStateself, constTransformStateother) -> Any: ...
    @staticmethod
    def garbageCollect(*args, **kwargs): ...
    @staticmethod
    def garbage_collect() -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCompositionCache(self, *args, **kwargs): ...
    def getCompositionCacheNumEntries(self, *args, **kwargs): ...
    def getCompositionCacheResult(self, *args, **kwargs): ...
    def getCompositionCacheSize(self, *args, **kwargs): ...
    def getCompositionCacheSource(self, *args, **kwargs): ...
    def getGeomRendering(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getHpr(self, *args, **kwargs): ...
    def getInverse(self, *args, **kwargs): ...
    def getInverseMat(self, *args, **kwargs): ...
    def getInvertCompositionCache(self, *args, **kwargs): ...
    def getInvertCompositionCacheNumEntries(self, *args, **kwargs): ...
    def getInvertCompositionCacheResult(self, *args, **kwargs): ...
    def getInvertCompositionCacheSize(self, *args, **kwargs): ...
    def getInvertCompositionCacheSource(self, *args, **kwargs): ...
    def getMat(self, *args, **kwargs): ...
    def getMat3(self, *args, **kwargs): ...
    def getNormQuat(self, *args, **kwargs): ...
    @staticmethod
    def getNumStates(*args, **kwargs): ...
    @staticmethod
    def getNumUnusedStates(*args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getPos2d(self, *args, **kwargs): ...
    def getQuat(self, *args, **kwargs): ...
    def getRotate2d(self, *args, **kwargs): ...
    def getScale(self, *args, **kwargs): ...
    def getScale2d(self, *args, **kwargs): ...
    def getShear(self, *args, **kwargs): ...
    def getShear2d(self, *args, **kwargs): ...
    @staticmethod
    def getStates(*args, **kwargs): ...
    def getUniformScale(self, *args, **kwargs): ...
    def getUnique(self, *args, **kwargs): ...
    @staticmethod
    def getUnusedStates(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_composition_cache(self, TransformStateself) -> Any: ...
    def get_composition_cache_num_entries(self, TransformStateself) -> Any: ...
    def get_composition_cache_result(self, TransformStateself, intn) -> Any: ...
    def get_composition_cache_size(self, TransformStateself) -> Any: ...
    def get_composition_cache_source(self, TransformStateself, intn) -> Any: ...
    def get_geom_rendering(self, TransformStateself, intgeom_rendering) -> Any: ...
    def get_hash(self, TransformStateself) -> Any: ...
    def get_hpr(self, TransformStateself) -> Any: ...
    def get_inverse(self, TransformStateself) -> Any: ...
    def get_inverse_mat(self, TransformStateself) -> Any: ...
    def get_invert_composition_cache(self, TransformStateself) -> Any: ...
    def get_invert_composition_cache_num_entries(self, TransformStateself) -> Any: ...
    def get_invert_composition_cache_result(self, TransformStateself, intn) -> Any: ...
    def get_invert_composition_cache_size(self, TransformStateself) -> Any: ...
    def get_invert_composition_cache_source(self, TransformStateself, intn) -> Any: ...
    def get_mat(self, TransformStateself) -> Any: ...
    def get_mat3(self, TransformStateself) -> Any: ...
    def get_norm_quat(self, TransformStateself) -> Any: ...
    @staticmethod
    def get_num_states() -> Any: ...
    @staticmethod
    def get_num_unused_states() -> Any: ...
    def get_pos(self, TransformStateself) -> Any: ...
    def get_pos2d(self, TransformStateself) -> Any: ...
    def get_quat(self, TransformStateself) -> Any: ...
    def get_rotate2d(self, TransformStateself) -> Any: ...
    def get_scale(self, TransformStateself) -> Any: ...
    def get_scale2d(self, TransformStateself) -> Any: ...
    def get_shear(self, TransformStateself) -> Any: ...
    def get_shear2d(self, TransformStateself) -> Any: ...
    @staticmethod
    def get_states() -> Any: ...
    def get_uniform_scale(self, TransformStateself) -> Any: ...
    def get_unique(self, TransformStateself) -> Any: ...
    @staticmethod
    def get_unused_states() -> Any: ...
    def hasComponents(self, *args, **kwargs): ...
    def hasHpr(self, *args, **kwargs): ...
    def hasIdentityScale(self, *args, **kwargs): ...
    def hasMat(self, *args, **kwargs): ...
    def hasNonzeroShear(self, *args, **kwargs): ...
    def hasPos(self, *args, **kwargs): ...
    def hasQuat(self, *args, **kwargs): ...
    def hasScale(self, *args, **kwargs): ...
    def hasShear(self, *args, **kwargs): ...
    def hasUniformScale(self, *args, **kwargs): ...
    def has_components(self, TransformStateself) -> Any: ...
    def has_hpr(self, TransformStateself) -> Any: ...
    def has_identity_scale(self, TransformStateself) -> Any: ...
    def has_mat(self, TransformStateself) -> Any: ...
    def has_nonzero_shear(self, TransformStateself) -> Any: ...
    def has_pos(self, TransformStateself) -> Any: ...
    def has_quat(self, TransformStateself) -> Any: ...
    def has_scale(self, TransformStateself) -> Any: ...
    def has_shear(self, TransformStateself) -> Any: ...
    def has_uniform_scale(self, TransformStateself) -> Any: ...
    def hprGiven(self, *args, **kwargs): ...
    def hpr_given(self, TransformStateself) -> Any: ...
    def invertCompose(self, *args, **kwargs): ...
    def invert_compose(self, TransformStateself, constTransformStateother) -> Any: ...
    def is2d(self, *args, **kwargs): ...
    def isIdentity(self, *args, **kwargs): ...
    def isInvalid(self, *args, **kwargs): ...
    def isSingular(self, *args, **kwargs): ...
    def is_2d(self, TransformStateself) -> Any: ...
    def is_identity(self, TransformStateself) -> Any: ...
    def is_invalid(self, TransformStateself) -> Any: ...
    def is_singular(self, TransformStateself) -> Any: ...
    @staticmethod
    def listCycles(*args, **kwargs): ...
    @staticmethod
    def listStates(*args, **kwargs): ...
    @staticmethod
    def list_cycles(ostreamout) -> Any: ...
    @staticmethod
    def list_states(ostreamout) -> Any: ...
    @staticmethod
    def makeHpr(*args, **kwargs): ...
    @staticmethod
    def makeIdentity(*args, **kwargs): ...
    @staticmethod
    def makeInvalid(*args, **kwargs): ...
    @staticmethod
    def makeMat(*args, **kwargs): ...
    @staticmethod
    def makeMat3(*args, **kwargs): ...
    @staticmethod
    def makePos(*args, **kwargs): ...
    @staticmethod
    def makePos2d(*args, **kwargs): ...
    @staticmethod
    def makePosHpr(*args, **kwargs): ...
    @staticmethod
    def makePosHprScale(*args, **kwargs): ...
    @staticmethod
    def makePosHprScaleShear(*args, **kwargs): ...
    @staticmethod
    def makePosQuat(*args, **kwargs): ...
    @staticmethod
    def makePosQuatScale(*args, **kwargs): ...
    @staticmethod
    def makePosQuatScaleShear(*args, **kwargs): ...
    @staticmethod
    def makePosRotate2d(*args, **kwargs): ...
    @staticmethod
    def makePosRotateScale2d(*args, **kwargs): ...
    @staticmethod
    def makePosRotateScaleShear2d(*args, **kwargs): ...
    @staticmethod
    def makeQuat(*args, **kwargs): ...
    @staticmethod
    def makeRotate2d(*args, **kwargs): ...
    @staticmethod
    def makeScale(*args, **kwargs): ...
    @staticmethod
    def makeScale2d(*args, **kwargs): ...
    @staticmethod
    def makeShear(*args, **kwargs): ...
    @staticmethod
    def makeShear2d(*args, **kwargs): ...
    @staticmethod
    def make_hpr(constLVecBase3fhpr) -> Any: ...
    @staticmethod
    def make_identity() -> Any: ...
    @staticmethod
    def make_invalid() -> Any: ...
    @staticmethod
    def make_mat(constLMatrix4fmat) -> Any: ...
    @staticmethod
    def make_mat3(constLMatrix3fmat) -> Any: ...
    @staticmethod
    def make_pos(constLVecBase3fpos) -> Any: ...
    @staticmethod
    def make_pos2d(constLVecBase2fpos) -> Any: ...
    @staticmethod
    def make_pos_hpr(constLVecBase3fpos, constLVecBase3fhpr) -> Any: ...
    @staticmethod
    def make_pos_hpr_scale(constLVecBase3fpos, constLVecBase3fhpr, constLVecBase3fscale) -> Any: ...
    @staticmethod
    def make_pos_hpr_scale_shear(
        constLVecBase3fpos, constLVecBase3fhpr, constLVecBase3fscale, constLVecBase3fshear
    ) -> Any: ...
    @staticmethod
    def make_pos_quat(constLVecBase3fpos, constLQuaternionfquat) -> Any: ...
    @staticmethod
    def make_pos_quat_scale(constLVecBase3fpos, constLQuaternionfquat, constLVecBase3fscale) -> Any: ...
    @staticmethod
    def make_pos_quat_scale_shear(
        constLVecBase3fpos, constLQuaternionfquat, constLVecBase3fscale, constLVecBase3fshear
    ) -> Any: ...
    @staticmethod
    def make_pos_rotate2d(constLVecBase2fpos, floatrotate) -> Any: ...
    @staticmethod
    def make_pos_rotate_scale2d(constLVecBase2fpos, floatrotate, constLVecBase2fscale) -> Any: ...
    @staticmethod
    def make_pos_rotate_scale_shear2d(constLVecBase2fpos, floatrotate, constLVecBase2fscale, floatshear) -> Any: ...
    @staticmethod
    def make_quat(constLQuaternionfquat) -> Any: ...
    @staticmethod
    def make_rotate2d(floatrotate) -> Any: ...
    @overload
    @staticmethod
    def make_scale(constLVecBase3fscale) -> Any: ...
    @overload
    @staticmethod
    def make_scale(floatscale) -> Any: ...
    @overload
    @staticmethod
    def make_scale2d(constLVecBase2fscale) -> Any: ...
    @overload
    @staticmethod
    def make_scale2d(floatscale) -> Any: ...
    @staticmethod
    def make_shear(constLVecBase3fshear) -> Any: ...
    @staticmethod
    def make_shear2d(floatshear) -> Any: ...
    def nodeRef(self, *args, **kwargs): ...
    def nodeUnref(self, *args, **kwargs): ...
    def node_ref(self, TransformStateself) -> Any: ...
    def node_unref(self, TransformStateself) -> Any: ...
    def output(self, TransformStateself, ostreamout) -> Any: ...
    def quatGiven(self, *args, **kwargs): ...
    def quat_given(self, TransformStateself) -> Any: ...
    def setHpr(self, *args, **kwargs): ...
    def setPos(self, *args, **kwargs): ...
    def setPos2d(self, *args, **kwargs): ...
    def setQuat(self, *args, **kwargs): ...
    def setRotate2d(self, *args, **kwargs): ...
    def setScale(self, *args, **kwargs): ...
    def setScale2d(self, *args, **kwargs): ...
    def setShear(self, *args, **kwargs): ...
    def setShear2d(self, *args, **kwargs): ...
    def set_hpr(self, TransformStateself, constLVecBase3fhpr) -> Any: ...
    def set_pos(self, TransformStateself, constLVecBase3fpos) -> Any: ...
    def set_pos2d(self, TransformStateself, constLVecBase2fpos) -> Any: ...
    def set_quat(self, TransformStateself, constLQuaternionfquat) -> Any: ...
    def set_rotate2d(self, TransformStateself, floatrotate) -> Any: ...
    def set_scale(self, TransformStateself, constLVecBase3fscale) -> Any: ...
    def set_scale2d(self, TransformStateself, constLVecBase2fscale) -> Any: ...
    def set_shear(self, TransformStateself, constLVecBase3fshear) -> Any: ...
    def set_shear2d(self, TransformStateself, floatshear) -> Any: ...
    def validateCompositionCache(self, *args, **kwargs): ...
    @staticmethod
    def validateStates(*args, **kwargs): ...
    def validate_composition_cache(self, TransformStateself) -> Any: ...
    @staticmethod
    def validate_states() -> Any: ...
    def write(self, TransformStateself, ostreamout, intindent_level) -> Any: ...
    def writeCompositionCache(self, *args, **kwargs): ...
    def write_composition_cache(self, TransformStateself, ostreamout, intindent_level) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class TransformTable(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    modified: Incomplete
    registered: Incomplete
    transforms: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addTransform(self, *args, **kwargs): ...
    def add_transform(self, constTransformTableself, constVertexTransformtransform) -> Any: ...
    def assign(self, constTransformTableself, constTransformTablecopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getModified(self, *args, **kwargs): ...
    def getNumTransforms(self, *args, **kwargs): ...
    def getTransform(self, *args, **kwargs): ...
    def getTransforms(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_modified(self, TransformTableself, Threadcurrent_thread) -> Any: ...
    def get_num_transforms(self, TransformTableself) -> Any: ...
    def get_transform(self, TransformTableself, intn) -> Any: ...
    def get_transforms(self, *args, **kwargs): ...
    def insertTransform(self, *args, **kwargs): ...
    def insert_transform(self, constTransformTableself, intn, constVertexTransformtransform) -> Any: ...
    def isRegistered(self, *args, **kwargs): ...
    def is_registered(self, TransformTableself) -> Any: ...
    @staticmethod
    def registerTable(*args, **kwargs): ...
    @staticmethod
    def register_table(constTransformTabletable) -> Any: ...
    def removeTransform(self, *args, **kwargs): ...
    def remove_transform(self, constTransformTableself, intn) -> Any: ...
    def setTransform(self, *args, **kwargs): ...
    def set_transform(self, constTransformTableself, intn, constVertexTransformtransform) -> Any: ...
    def write(self, TransformTableself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TransparencyAttrib(RenderAttrib):
    DtoolClassDict: ClassVar[dict] = ...
    MAlpha: ClassVar[int] = ...
    MBinary: ClassVar[int] = ...
    MDual: ClassVar[int] = ...
    MMultisample: ClassVar[int] = ...
    MMultisampleMask: ClassVar[int] = ...
    MNone: ClassVar[int] = ...
    MPremultipliedAlpha: ClassVar[int] = ...
    M_alpha: ClassVar[int] = ...
    M_binary: ClassVar[int] = ...
    M_dual: ClassVar[int] = ...
    M_multisample: ClassVar[int] = ...
    M_multisample_mask: ClassVar[int] = ...
    M_none: ClassVar[int] = ...
    M_premultiplied_alpha: ClassVar[int] = ...
    class_slot: Incomplete
    mode: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassSlot(*args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    @staticmethod
    def get_class_slot() -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_mode(self, TransparencyAttribself) -> Any: ...
    @staticmethod
    def make(intmode) -> Any: ...
    @staticmethod
    def makeDefault(*args, **kwargs): ...
    @staticmethod
    def make_default() -> Any: ...

class Triangulator(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    vertices: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addHoleVertex(self, *args, **kwargs): ...
    def addPolygonVertex(self, *args, **kwargs): ...
    def addVertex(self, *args, **kwargs): ...
    def add_hole_vertex(self, constTriangulatorself, intindex) -> Any: ...
    def add_polygon_vertex(self, constTriangulatorself, intindex) -> Any: ...
    @overload
    def add_vertex(self, constTriangulatorself, constLPoint2dpoint) -> Any: ...
    @overload
    def add_vertex(self, constTriangulatorself, doublex, doubley) -> Any: ...
    def beginHole(self, *args, **kwargs): ...
    def begin_hole(self, constTriangulatorself) -> Any: ...
    def clear(self, constTriangulatorself) -> Any: ...
    def clearPolygon(self, *args, **kwargs): ...
    def clear_polygon(self, constTriangulatorself) -> Any: ...
    def getNumTriangles(self, *args, **kwargs): ...
    def getNumVertices(self, *args, **kwargs): ...
    def getTriangleV0(self, *args, **kwargs): ...
    def getTriangleV1(self, *args, **kwargs): ...
    def getTriangleV2(self, *args, **kwargs): ...
    def getVertex(self, *args, **kwargs): ...
    def getVertices(self, *args, **kwargs): ...
    def get_num_triangles(self, Triangulatorself) -> Any: ...
    def get_num_vertices(self, Triangulatorself) -> Any: ...
    def get_triangle_v0(self, Triangulatorself, intn) -> Any: ...
    def get_triangle_v1(self, Triangulatorself, intn) -> Any: ...
    def get_triangle_v2(self, Triangulatorself, intn) -> Any: ...
    def get_vertex(self, Triangulatorself, intn) -> Any: ...
    def get_vertices(self, *args, **kwargs): ...
    def isLeftWinding(self, *args, **kwargs): ...
    def is_left_winding(self, Triangulatorself) -> Any: ...
    def triangulate(self, constTriangulatorself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Triangulator3(Triangulator):
    DtoolClassDict: ClassVar[dict] = ...
    plane: Incomplete
    vertices: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addVertex(self, *args, **kwargs): ...
    @overload
    def add_vertex(self, constTriangulator3self, constLPoint3dpoint) -> Any: ...
    @overload
    def add_vertex(self, constTriangulator3self, doublex, doubley, doublez) -> Any: ...
    def clear(self, constTriangulator3self) -> Any: ...
    def getNumVertices(self, *args, **kwargs): ...
    def getPlane(self, *args, **kwargs): ...
    def getVertex(self, *args, **kwargs): ...
    def getVertices(self, *args, **kwargs): ...
    def get_num_vertices(self, Triangulator3self) -> Any: ...
    def get_plane(self, Triangulator3self) -> Any: ...
    def get_vertex(self, Triangulator3self, intn) -> Any: ...
    def get_vertices(self, *args, **kwargs): ...
    def triangulate(self, constTriangulator3self) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TrueClock(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    error_count: Incomplete
    long_time: Incomplete
    short_raw_time: Incomplete
    short_time: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getErrorCount(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getLongTime(self, *args, **kwargs): ...
    def getShortRawTime(self, *args, **kwargs): ...
    def getShortTime(self, *args, **kwargs): ...
    def get_error_count(self, TrueClockself) -> Any: ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    @overload
    def get_long_time(self, constTrueClockself) -> Any: ...
    @overload
    def get_long_time(self) -> Any: ...
    @overload
    def get_long_time(self) -> Any: ...
    @overload
    def get_short_raw_time(self, constTrueClockself) -> Any: ...
    @overload
    def get_short_raw_time(self) -> Any: ...
    @overload
    def get_short_raw_time(self) -> Any: ...
    @overload
    def get_short_time(self, constTrueClockself) -> Any: ...
    @overload
    def get_short_time(self) -> Any: ...
    @overload
    def get_short_time(self) -> Any: ...
    def setCpuAffinity(self, *args, **kwargs): ...
    def set_cpu_affinity(self, TrueClockself, intmask) -> Any: ...

class TypeHandle(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    MCArray: ClassVar[int] = ...
    MCDeletedChainActive: ClassVar[int] = ...
    MCDeletedChainInactive: ClassVar[int] = ...
    MCLimit: ClassVar[int] = ...
    MCSingleton: ClassVar[int] = ...
    MC_array: ClassVar[int] = ...
    MC_deleted_chain_active: ClassVar[int] = ...
    MC_deleted_chain_inactive: ClassVar[int] = ...
    MC_limit: ClassVar[int] = ...
    MC_singleton: ClassVar[int] = ...
    child_classes: Incomplete
    index: Incomplete
    name: Incomplete
    parent_classes: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, TypeHandleself, constTypeHandleother) -> Any: ...
    def decMemoryUsage(self, *args, **kwargs): ...
    def dec_memory_usage(self, constTypeHandleself, intmemory_class, intsize) -> Any: ...
    def getChildClass(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getIndex(self, *args, **kwargs): ...
    def getMemoryUsage(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumChildClasses(self, *args, **kwargs): ...
    def getNumParentClasses(self, *args, **kwargs): ...
    def getParentClass(self, *args, **kwargs): ...
    def getParentTowards(self, *args, **kwargs): ...
    def get_child_class(self, TypeHandleself, intindex) -> Any: ...
    def get_hash(self, TypeHandleself) -> Any: ...
    def get_index(self, TypeHandleself) -> Any: ...
    def get_memory_usage(self, TypeHandleself, intmemory_class) -> Any: ...
    def get_name(self, TypeHandleself, TypedObjectobject) -> Any: ...
    def get_num_child_classes(self, TypeHandleself, TypedObjectobject) -> Any: ...
    def get_num_parent_classes(self, TypeHandleself, TypedObjectobject) -> Any: ...
    def get_parent_class(self, TypeHandleself, intindex) -> Any: ...
    def get_parent_towards(self, TypeHandleself, TypeHandleancestor, TypedObjectobject) -> Any: ...
    def incMemoryUsage(self, *args, **kwargs): ...
    def inc_memory_usage(self, constTypeHandleself, intmemory_class, intsize) -> Any: ...
    def isDerivedFrom(self, *args, **kwargs): ...
    def is_derived_from(self, TypeHandleself, TypeHandleparent, TypedObjectobject) -> Any: ...
    @staticmethod
    def make(typeclassobj) -> Any: ...
    @staticmethod
    def none() -> Any: ...
    def output(self, TypeHandleself, ostreamout) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, TypeHandleself) -> Any: ...

class TypeRegistry(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    root_classes: Incomplete
    typehandles: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def findType(self, *args, **kwargs): ...
    def findTypeById(self, *args, **kwargs): ...
    def find_type(self, TypeRegistryself, strname) -> Any: ...
    def find_type_by_id(self, TypeRegistryself, intid) -> Any: ...
    def getChildClass(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumChildClasses(self, *args, **kwargs): ...
    def getNumParentClasses(self, *args, **kwargs): ...
    def getNumRootClasses(self, *args, **kwargs): ...
    def getNumTypehandles(self, *args, **kwargs): ...
    def getParentClass(self, *args, **kwargs): ...
    def getParentTowards(self, *args, **kwargs): ...
    def getRootClass(self, *args, **kwargs): ...
    def getRootClasses(self, *args, **kwargs): ...
    def getTypehandle(self, *args, **kwargs): ...
    def getTypehandles(self, *args, **kwargs): ...
    def get_child_class(self, TypeRegistryself, TypeHandlechild, intindex) -> Any: ...
    def get_name(self, TypeRegistryself, TypeHandletype, TypedObjectobject) -> Any: ...
    def get_num_child_classes(self, TypeRegistryself, TypeHandlechild, TypedObjectchild_object) -> Any: ...
    def get_num_parent_classes(self, TypeRegistryself, TypeHandlechild, TypedObjectchild_object) -> Any: ...
    def get_num_root_classes(self, constTypeRegistryself) -> Any: ...
    def get_num_typehandles(self, constTypeRegistryself) -> Any: ...
    def get_parent_class(self, TypeRegistryself, TypeHandlechild, intindex) -> Any: ...
    def get_parent_towards(
        self, constTypeRegistryself, TypeHandlechild, TypeHandlebase, TypedObjectchild_object
    ) -> Any: ...
    def get_root_class(self, constTypeRegistryself, intn) -> Any: ...
    def get_root_classes(self, *args, **kwargs): ...
    def get_typehandle(self, constTypeRegistryself, intn) -> Any: ...
    def get_typehandles(self, *args, **kwargs): ...
    def isDerivedFrom(self, *args, **kwargs): ...
    def is_derived_from(
        self, constTypeRegistryself, TypeHandlechild, TypeHandlebase, TypedObjectchild_object
    ) -> Any: ...
    @overload
    @staticmethod
    def ptr() -> Any: ...
    @overload
    @staticmethod
    def ptr() -> Any: ...
    def recordAlternateName(self, *args, **kwargs): ...
    def recordDerivation(self, *args, **kwargs): ...
    def record_alternate_name(self, constTypeRegistryself, TypeHandletype, strname) -> Any: ...
    def record_derivation(self, constTypeRegistryself, TypeHandlechild, TypeHandleparent) -> Any: ...
    def registerDynamicType(self, *args, **kwargs): ...
    def register_dynamic_type(self, constTypeRegistryself, strname) -> Any: ...
    @staticmethod
    def reregisterTypes(*args, **kwargs): ...
    @staticmethod
    def reregister_types() -> Any: ...
    def write(self, TypeRegistryself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class TypedObject(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    type: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getType(self, *args, **kwargs): ...
    def getTypeIndex(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_type(self, TypedObjectself) -> Any: ...
    def get_type_index(self, TypedObjectself) -> Any: ...
    def isExactType(self, *args, **kwargs): ...
    def isOfType(self, *args, **kwargs): ...
    def is_exact_type(self, TypedObjectself, TypeHandlehandle) -> Any: ...
    def is_of_type(self, TypedObjectself, TypeHandlehandle) -> Any: ...

class TypedReferenceCount(TypedObject, ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def upcastToReferenceCount(self, *args, **kwargs): ...
    def upcastToTypedObject(self, *args, **kwargs): ...
    def upcast_to_ReferenceCount(self, constTypedReferenceCountself) -> Any: ...
    def upcast_to_TypedObject(self, constTypedReferenceCountself) -> Any: ...

class TypedWritable(TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def encodeToBamStream(self, *args, **kwargs): ...
    def encode_to_bam_stream(self, TypedWritableself) -> Any: ...
    def fillin(self, constTypedWritableself, DatagramIteratorscan, BamReadermanager) -> Any: ...
    def getBamModified(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_bam_modified(self, TypedWritableself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def markBamModified(self, *args, **kwargs): ...
    def mark_bam_modified(self, constTypedWritableself) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def write_datagram(self, constTypedWritableself, BamWritermanager, Datagramdg) -> Any: ...
    def __reduce__(self, TypedWritableself) -> Any: ...
    def __reduce_persist__(self, TypedWritableself, objectpickler) -> Any: ...

class TypedWritableReferenceCount(TypedWritable, ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def decodeFromBamStream(*args, **kwargs): ...
    @staticmethod
    def decode_from_bam_stream(bytesdata, BamReaderreader) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def upcastToReferenceCount(self, *args, **kwargs): ...
    def upcastToTypedWritable(self, *args, **kwargs): ...
    def upcast_to_ReferenceCount(self, constTypedWritableReferenceCountself) -> Any: ...
    def upcast_to_TypedWritable(self, constTypedWritableReferenceCountself) -> Any: ...

class URLSpec(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    authority: Incomplete
    path: Incomplete
    port: Incomplete
    query: Incomplete
    scheme: Incomplete
    server: Incomplete
    server_and_port: Incomplete
    ssl: Incomplete
    username: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constURLSpecself, strurl) -> Any: ...
    def cStr(self, *args, **kwargs): ...
    def c_str(self, URLSpecself) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, URLSpecself, constURLSpecother) -> Any: ...
    def empty(self, URLSpecself) -> Any: ...
    def getAuthority(self, *args, **kwargs): ...
    @staticmethod
    def getDefaultPortForScheme(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getPath(self, *args, **kwargs): ...
    def getPathAndQuery(self, *args, **kwargs): ...
    def getPort(self, *args, **kwargs): ...
    def getPortStr(self, *args, **kwargs): ...
    def getQuery(self, *args, **kwargs): ...
    def getScheme(self, *args, **kwargs): ...
    def getServer(self, *args, **kwargs): ...
    def getServerAndPort(self, *args, **kwargs): ...
    def getUrl(self, *args, **kwargs): ...
    def getUsername(self, *args, **kwargs): ...
    def get_authority(self, URLSpecself) -> Any: ...
    @staticmethod
    def get_default_port_for_scheme(strscheme) -> Any: ...
    def get_hash(self, URLSpecself) -> Any: ...
    def get_path(self, URLSpecself) -> Any: ...
    def get_path_and_query(self, URLSpecself) -> Any: ...
    def get_port(self, URLSpecself) -> Any: ...
    def get_port_str(self, URLSpecself) -> Any: ...
    def get_query(self, URLSpecself) -> Any: ...
    def get_scheme(self, URLSpecself) -> Any: ...
    def get_server(self, URLSpecself) -> Any: ...
    def get_server_and_port(self, URLSpecself) -> Any: ...
    def get_url(self, URLSpecself) -> Any: ...
    def get_username(self, URLSpecself) -> Any: ...
    def hasAuthority(self, *args, **kwargs): ...
    def hasPath(self, *args, **kwargs): ...
    def hasPort(self, *args, **kwargs): ...
    def hasQuery(self, *args, **kwargs): ...
    def hasScheme(self, *args, **kwargs): ...
    def hasServer(self, *args, **kwargs): ...
    def hasUsername(self, *args, **kwargs): ...
    def has_authority(self, URLSpecself) -> Any: ...
    def has_path(self, URLSpecself) -> Any: ...
    def has_port(self, URLSpecself) -> Any: ...
    def has_query(self, URLSpecself) -> Any: ...
    def has_scheme(self, URLSpecself) -> Any: ...
    def has_server(self, URLSpecself) -> Any: ...
    def has_username(self, URLSpecself) -> Any: ...
    def input(self, constURLSpecself, istreamin) -> Any: ...
    def isDefaultPort(self, *args, **kwargs): ...
    def isSsl(self, *args, **kwargs): ...
    def is_default_port(self, URLSpecself) -> Any: ...
    def is_ssl(self, URLSpecself) -> Any: ...
    def length(self, URLSpecself) -> Any: ...
    def output(self, URLSpecself, ostreamout) -> Any: ...
    @staticmethod
    def quote(strsource, strsafe) -> Any: ...
    @staticmethod
    def quotePlus(*args, **kwargs): ...
    @staticmethod
    def quote_plus(strsource, strsafe) -> Any: ...
    def setAuthority(self, *args, **kwargs): ...
    def setPath(self, *args, **kwargs): ...
    def setPort(self, *args, **kwargs): ...
    def setQuery(self, *args, **kwargs): ...
    def setScheme(self, *args, **kwargs): ...
    def setServer(self, *args, **kwargs): ...
    def setServerAndPort(self, *args, **kwargs): ...
    def setUrl(self, *args, **kwargs): ...
    def setUsername(self, *args, **kwargs): ...
    def set_authority(self, constURLSpecself, strauthority) -> Any: ...
    def set_path(self, constURLSpecself, strpath) -> Any: ...
    @overload
    def set_port(self, constURLSpecself, strport) -> Any: ...
    @overload
    def set_port(self, constURLSpecself, intport) -> Any: ...
    def set_query(self, constURLSpecself, strquery) -> Any: ...
    def set_scheme(self, constURLSpecself, strscheme) -> Any: ...
    def set_server(self, constURLSpecself, strserver) -> Any: ...
    def set_server_and_port(self, constURLSpecself, strserver_and_port) -> Any: ...
    def set_url(self, constURLSpecself, strurl, boolserver_name_expected) -> Any: ...
    def set_username(self, constURLSpecself, strusername) -> Any: ...
    @staticmethod
    def unquote(strsource) -> Any: ...
    @staticmethod
    def unquotePlus(*args, **kwargs): ...
    @staticmethod
    def unquote_plus(strsource) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class UnalignedLMatrix4(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def accumulate(self, constLMatrix4fself, constLMatrix4fother, floatweight) -> Any: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix4fself, inthash, floatthreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix4fself, constLMatrix4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def assign(self, constLMatrix4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def compare_to(self, LMatrix4fself, constLMatrix4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def fill(self, constLMatrix4fself, floatfill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol3(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow3(self, *args, **kwargs): ...
    def getRow3s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def getUpper3(self, *args, **kwargs): ...
    def get_cell(self, LMatrix4fself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix4fself, intcol) -> Any: ...
    def get_col3(self, LMatrix4fself, intcol) -> Any: ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix4fself) -> Any: ...
    @overload
    def get_hash(self, LMatrix4fself, floatthreshold) -> Any: ...
    def get_num_components(self, LMatrix4fself) -> Any: ...
    @overload
    def get_row(self, LMatrix4fself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix4fself, LVecBase4fresult_vec, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4fself, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4fself, LVecBase3fresult_vec, introw) -> Any: ...
    def get_row3s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    def get_upper_3(self, LMatrix4fself) -> Any: ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertAffineFrom(self, *args, **kwargs): ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_affine_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def invert_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def invert_in_place(self, constLMatrix4fself) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix4fself) -> Any: ...
    def is_nan(self, LMatrix4fself) -> Any: ...
    def multiply(self, constLMatrix4fself, constLMatrix4fother1, constLMatrix4fother2) -> Any: ...
    @staticmethod
    def onesMat(*args, **kwargs): ...
    @staticmethod
    def ones_mat() -> Any: ...
    def output(self, LMatrix4fself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix4fself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @staticmethod
    def rotate_mat(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy, floatsz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(floatsx, floatsy, floatsz, floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix4fself,
        floate00,
        floate01,
        floate02,
        floate03,
        floate10,
        floate11,
        floate12,
        floate13,
        floate20,
        floate21,
        floate22,
        floate23,
        floate30,
        floate31,
        floate32,
        floate33,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def setUpper3(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix4fself, introw, intcol, floatvalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix4fself, intcol, constLVecBase4fv) -> Any: ...
    @overload
    def set_col(self, constLMatrix4fself, intcol, constLVecBase3fv) -> Any: ...
    def set_rotate_mat(self, constLMatrix4fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix4fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix4fself, introw, constLVecBase4fv) -> Any: ...
    @overload
    def set_row(self, constLMatrix4fself, introw, constLVecBase3fv) -> Any: ...
    def set_scale_mat(self, constLMatrix4fself, constLVecBase3fscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix4fself, constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix4fself, constLVecBase3fshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix4fself, constLVecBase3ftrans) -> Any: ...
    def set_upper_3(self, constLMatrix4fself, constLMatrix3fupper3) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase3ftrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(floattx, floatty, floattz) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def transpose_in_place(self, constLMatrix4fself) -> Any: ...
    def write(self, LMatrix4fself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix4fself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix4fself, constLVecBase4fv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointGeneral(self, *args, **kwargs): ...
    def xformPointGeneralInPlace(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix4fself, LVecBase4fv) -> Any: ...
    def xform_point(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_point_general(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_point_general_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_point_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_vec(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_vec_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    @staticmethod
    def yToZUpMat(*args, **kwargs): ...
    @staticmethod
    def y_to_z_up_mat() -> Any: ...
    @staticmethod
    def zToYUpMat(*args, **kwargs): ...
    @staticmethod
    def z_to_y_up_mat() -> Any: ...
    @staticmethod
    def zerosMat(*args, **kwargs): ...
    @staticmethod
    def zeros_mat() -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix4fself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class UnalignedLMatrix4d(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def accumulate(self, constLMatrix4dself, constLMatrix4dother, doubleweight) -> Any: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix4dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix4dself, inthash, doublethreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix4dself, constLMatrix4dother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix4dself, constLMatrix4dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    @overload
    def assign(self, constLMatrix4dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix4dself, constLMatrix4dother) -> Any: ...
    @overload
    def compare_to(self, LMatrix4dself, constLMatrix4dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def fill(self, constLMatrix4dself, doublefill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol3(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow3(self, *args, **kwargs): ...
    def getRow3s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def getUpper3(self, *args, **kwargs): ...
    def get_cell(self, LMatrix4dself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix4dself, intcol) -> Any: ...
    def get_col3(self, LMatrix4dself, intcol) -> Any: ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix4dself) -> Any: ...
    @overload
    def get_hash(self, LMatrix4dself, doublethreshold) -> Any: ...
    def get_num_components(self, LMatrix4dself) -> Any: ...
    @overload
    def get_row(self, LMatrix4dself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix4dself, LVecBase4dresult_vec, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4dself, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4dself, LVecBase3dresult_vec, introw) -> Any: ...
    def get_row3s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    def get_upper_3(self, LMatrix4dself) -> Any: ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertAffineFrom(self, *args, **kwargs): ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_affine_from(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    def invert_from(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    def invert_in_place(self, constLMatrix4dself) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix4dself) -> Any: ...
    def is_nan(self, LMatrix4dself) -> Any: ...
    def multiply(self, constLMatrix4dself, constLMatrix4dother1, constLMatrix4dother2) -> Any: ...
    @staticmethod
    def onesMat(*args, **kwargs): ...
    @staticmethod
    def ones_mat() -> Any: ...
    def output(self, LMatrix4dself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix4dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix4dself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @staticmethod
    def rotate_mat(doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3dscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(doublescale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(doublesx, doublesy, doublesz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3dscale, constLVecBase3dshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3dscale, constLVecBase3dshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(doublesx, doublesy, doublesz, doubleshxy, doubleshxz, doubleshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix4dself,
        doublee00,
        doublee01,
        doublee02,
        doublee03,
        doublee10,
        doublee11,
        doublee12,
        doublee13,
        doublee20,
        doublee21,
        doublee22,
        doublee23,
        doublee30,
        doublee31,
        doublee32,
        doublee33,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def setUpper3(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix4dself, introw, intcol, doublevalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix4dself, intcol, constLVecBase4dv) -> Any: ...
    @overload
    def set_col(self, constLMatrix4dself, intcol, constLVecBase3dv) -> Any: ...
    def set_rotate_mat(self, constLMatrix4dself, doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix4dself, doubleangle, constLVecBase3daxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix4dself, introw, constLVecBase4dv) -> Any: ...
    @overload
    def set_row(self, constLMatrix4dself, introw, constLVecBase3dv) -> Any: ...
    def set_scale_mat(self, constLMatrix4dself, constLVecBase3dscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix4dself, constLVecBase3dscale, constLVecBase3dshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix4dself, constLVecBase3dshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix4dself, constLVecBase3dtrans) -> Any: ...
    def set_upper_3(self, constLMatrix4dself, constLMatrix3dupper3) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3dshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3dshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(doubleshxy, doubleshxz, doubleshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase3dtrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(doubletx, doublety, doubletz) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix4dself, constLMatrix4dother) -> Any: ...
    def transpose_in_place(self, constLMatrix4dself) -> Any: ...
    def write(self, LMatrix4dself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix4dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix4dself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix4dself, constLVecBase4dv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointGeneral(self, *args, **kwargs): ...
    def xformPointGeneralInPlace(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix4dself, LVecBase4dv) -> Any: ...
    def xform_point(self, LMatrix4dself, constLVecBase3dv) -> Any: ...
    def xform_point_general(self, LMatrix4dself, constLVecBase3dv) -> Any: ...
    def xform_point_general_in_place(self, LMatrix4dself, LVecBase3dv) -> Any: ...
    def xform_point_in_place(self, LMatrix4dself, LVecBase3dv) -> Any: ...
    def xform_vec(self, LMatrix4dself, constLVecBase3dv) -> Any: ...
    def xform_vec_general(self, LMatrix4dself, constLVecBase3dv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix4dself, LVecBase3dv) -> Any: ...
    def xform_vec_in_place(self, LMatrix4dself, LVecBase3dv) -> Any: ...
    @staticmethod
    def yToZUpMat(*args, **kwargs): ...
    @staticmethod
    def y_to_z_up_mat() -> Any: ...
    @staticmethod
    def zToYUpMat(*args, **kwargs): ...
    @staticmethod
    def z_to_y_up_mat() -> Any: ...
    @staticmethod
    def zerosMat(*args, **kwargs): ...
    @staticmethod
    def zeros_mat() -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix4dself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class UnalignedLMatrix4f(dtoolconfig.DTOOL_SUPER_BASE):
    class CRow(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, CRowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...

    class Row(dtoolconfig.DTOOL_SUPER_BASE):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def operatorTypecast(self, *args, **kwargs): ...
        def operator_typecast(self, Rowself) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...
        def __delitem__(self, other) -> None: ...
        def __getitem__(self, index): ...
        def __len__(self) -> int: ...
        def __setitem__(self, index, object) -> None: ...

    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    cols: Incomplete
    rows: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def accumulate(self, constLMatrix4fself, constLMatrix4fother, floatweight) -> Any: ...
    def addHash(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LMatrix4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LMatrix4fself, inthash, floatthreshold) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def almost_equal(self, LMatrix4fself, constLMatrix4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def assign(self, constLMatrix4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LMatrix4fself, constLMatrix4fother) -> Any: ...
    @overload
    def compare_to(self, LMatrix4fself, constLMatrix4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    @staticmethod
    def convertMat(*args, **kwargs): ...
    @staticmethod
    def convert_mat(intfrom, intto) -> Any: ...
    def fill(self, constLMatrix4fself, floatfill_value) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCol(self, *args, **kwargs): ...
    def getCol3(self, *args, **kwargs): ...
    def getCols(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getRow(self, *args, **kwargs): ...
    def getRow3(self, *args, **kwargs): ...
    def getRow3s(self, *args, **kwargs): ...
    def getRows(self, *args, **kwargs): ...
    def getUpper3(self, *args, **kwargs): ...
    def get_cell(self, LMatrix4fself, introw, intcol) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_col(self, LMatrix4fself, intcol) -> Any: ...
    def get_col3(self, LMatrix4fself, intcol) -> Any: ...
    def get_cols(self, *args, **kwargs): ...
    @overload
    def get_hash(self, LMatrix4fself) -> Any: ...
    @overload
    def get_hash(self, LMatrix4fself, floatthreshold) -> Any: ...
    def get_num_components(self, LMatrix4fself) -> Any: ...
    @overload
    def get_row(self, LMatrix4fself, introw) -> Any: ...
    @overload
    def get_row(self, LMatrix4fself, LVecBase4fresult_vec, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4fself, introw) -> Any: ...
    @overload
    def get_row3(self, LMatrix4fself, LVecBase3fresult_vec, introw) -> Any: ...
    def get_row3s(self, *args, **kwargs): ...
    def get_rows(self, *args, **kwargs): ...
    def get_upper_3(self, LMatrix4fself) -> Any: ...
    @staticmethod
    def identMat(*args, **kwargs): ...
    @staticmethod
    def ident_mat() -> Any: ...
    def invertAffineFrom(self, *args, **kwargs): ...
    def invertFrom(self, *args, **kwargs): ...
    def invertInPlace(self, *args, **kwargs): ...
    def invert_affine_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def invert_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def invert_in_place(self, constLMatrix4fself) -> Any: ...
    def isIdentity(self, *args, **kwargs): ...
    def isNan(self, *args, **kwargs): ...
    def is_identity(self, LMatrix4fself) -> Any: ...
    def is_nan(self, LMatrix4fself) -> Any: ...
    def multiply(self, constLMatrix4fself, constLMatrix4fother1, constLMatrix4fother2) -> Any: ...
    @staticmethod
    def onesMat(*args, **kwargs): ...
    @staticmethod
    def ones_mat() -> Any: ...
    def output(self, LMatrix4fself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLMatrix4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLMatrix4fself, DatagramIteratorscan) -> Any: ...
    @staticmethod
    def rotateMat(*args, **kwargs): ...
    @staticmethod
    def rotateMatNormaxis(*args, **kwargs): ...
    @staticmethod
    def rotate_mat(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def rotate_mat_normaxis(floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @staticmethod
    def scaleMat(*args, **kwargs): ...
    @staticmethod
    def scaleShearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def scale_mat(constLVecBase3fscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatscale) -> Any: ...
    @overload
    @staticmethod
    def scale_mat(floatsx, floatsy, floatsz) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def scale_shear_mat(floatsx, floatsy, floatsz, floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    def set(
        self,
        constLMatrix4fself,
        floate00,
        floate01,
        floate02,
        floate03,
        floate10,
        floate11,
        floate12,
        floate13,
        floate20,
        floate21,
        floate22,
        floate23,
        floate30,
        floate31,
        floate32,
        floate33,
    ) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setCol(self, *args, **kwargs): ...
    def setRotateMat(self, *args, **kwargs): ...
    def setRotateMatNormaxis(self, *args, **kwargs): ...
    def setRow(self, *args, **kwargs): ...
    def setScaleMat(self, *args, **kwargs): ...
    def setScaleShearMat(self, *args, **kwargs): ...
    def setShearMat(self, *args, **kwargs): ...
    def setTranslateMat(self, *args, **kwargs): ...
    def setUpper3(self, *args, **kwargs): ...
    def set_cell(self, constLMatrix4fself, introw, intcol, floatvalue) -> Any: ...
    @overload
    def set_col(self, constLMatrix4fself, intcol, constLVecBase4fv) -> Any: ...
    @overload
    def set_col(self, constLMatrix4fself, intcol, constLVecBase3fv) -> Any: ...
    def set_rotate_mat(self, constLMatrix4fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    def set_rotate_mat_normaxis(self, constLMatrix4fself, floatangle, constLVecBase3faxis, intcs) -> Any: ...
    @overload
    def set_row(self, constLMatrix4fself, introw, constLVecBase4fv) -> Any: ...
    @overload
    def set_row(self, constLMatrix4fself, introw, constLVecBase3fv) -> Any: ...
    def set_scale_mat(self, constLMatrix4fself, constLVecBase3fscale) -> Any: ...
    def set_scale_shear_mat(self, constLMatrix4fself, constLVecBase3fscale, constLVecBase3fshear, intcs) -> Any: ...
    def set_shear_mat(self, constLMatrix4fself, constLVecBase3fshear, intcs) -> Any: ...
    def set_translate_mat(self, constLMatrix4fself, constLVecBase3ftrans) -> Any: ...
    def set_upper_3(self, constLMatrix4fself, constLMatrix3fupper3) -> Any: ...
    @staticmethod
    def shearMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(constLVecBase3fshear, intcs) -> Any: ...
    @overload
    @staticmethod
    def shear_mat(floatshxy, floatshxz, floatshyz, intcs) -> Any: ...
    @staticmethod
    def translateMat(*args, **kwargs): ...
    @overload
    @staticmethod
    def translate_mat(constLVecBase3ftrans) -> Any: ...
    @overload
    @staticmethod
    def translate_mat(floattx, floatty, floattz) -> Any: ...
    def transposeFrom(self, *args, **kwargs): ...
    def transposeInPlace(self, *args, **kwargs): ...
    def transpose_from(self, constLMatrix4fself, constLMatrix4fother) -> Any: ...
    def transpose_in_place(self, constLMatrix4fself) -> Any: ...
    def write(self, LMatrix4fself, ostreamout, intindent_level) -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LMatrix4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LMatrix4fself, Datagramdestination) -> Any: ...
    def xform(self, LMatrix4fself, constLVecBase4fv) -> Any: ...
    def xformInPlace(self, *args, **kwargs): ...
    def xformPoint(self, *args, **kwargs): ...
    def xformPointGeneral(self, *args, **kwargs): ...
    def xformPointGeneralInPlace(self, *args, **kwargs): ...
    def xformPointInPlace(self, *args, **kwargs): ...
    def xformVec(self, *args, **kwargs): ...
    def xformVecGeneral(self, *args, **kwargs): ...
    def xformVecGeneralInPlace(self, *args, **kwargs): ...
    def xformVecInPlace(self, *args, **kwargs): ...
    def xform_in_place(self, LMatrix4fself, LVecBase4fv) -> Any: ...
    def xform_point(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_point_general(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_point_general_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_point_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_vec(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general(self, LMatrix4fself, constLVecBase3fv) -> Any: ...
    def xform_vec_general_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    def xform_vec_in_place(self, LMatrix4fself, LVecBase3fv) -> Any: ...
    @staticmethod
    def yToZUpMat(*args, **kwargs): ...
    @staticmethod
    def y_to_z_up_mat() -> Any: ...
    @staticmethod
    def zToYUpMat(*args, **kwargs): ...
    @staticmethod
    def z_to_y_up_mat() -> Any: ...
    @staticmethod
    def zerosMat(*args, **kwargs): ...
    @staticmethod
    def zeros_mat() -> Any: ...
    def __call__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce__(self, LMatrix4fself) -> Any: ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...

class UnalignedLVecBase4(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase4fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def add_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, constLVecBase4fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4fself, constLVecBase4fother) -> Any: ...
    def dot(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fill(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fmin(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4fself) -> Any: ...
    def get_x(self, LVecBase4fself) -> Any: ...
    def get_xy(self, LVecBase4fself) -> Any: ...
    def get_xyz(self, LVecBase4fself) -> Any: ...
    def get_y(self, LVecBase4fself) -> Any: ...
    def get_z(self, LVecBase4fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4fself) -> Any: ...
    def length(self, LVecBase4fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4fself) -> Any: ...
    def normalize(self, constLVecBase4fself) -> Any: ...
    def normalized(self, LVecBase4fself) -> Any: ...
    def output(self, LVecBase4fself, ostreamout) -> Any: ...
    def project(self, LVecBase4fself, constLVecBase4fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4fself, floatx, floaty, floatz, floatw) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def set_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class UnalignedLVecBase4d(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase4dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase4dself, inthash, doublethreshold) -> Any: ...
    def add_to_cell(self, constLVecBase4dself, inti, doublevalue) -> Any: ...
    def add_w(self, constLVecBase4dself, doublevalue) -> Any: ...
    def add_x(self, constLVecBase4dself, doublevalue) -> Any: ...
    def add_y(self, constLVecBase4dself, doublevalue) -> Any: ...
    def add_z(self, constLVecBase4dself, doublevalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4dself, constLVecBase4dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4dself, constLVecBase4dcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    @overload
    def compare_to(self, LVecBase4dself, constLVecBase4dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4dself, constLVecBase4dother) -> Any: ...
    def dot(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    def fill(self, constLVecBase4dself, doublefill_value) -> Any: ...
    def fmax(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    def fmin(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4dself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase4dself) -> Any: ...
    @overload
    def get_hash(self, LVecBase4dself, doublethreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4dself) -> Any: ...
    def get_x(self, LVecBase4dself) -> Any: ...
    def get_xy(self, LVecBase4dself) -> Any: ...
    def get_xyz(self, LVecBase4dself) -> Any: ...
    def get_y(self, LVecBase4dself) -> Any: ...
    def get_z(self, LVecBase4dself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4dself) -> Any: ...
    def length(self, LVecBase4dself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4dself) -> Any: ...
    def normalize(self, constLVecBase4dself) -> Any: ...
    def normalized(self, LVecBase4dself) -> Any: ...
    def output(self, LVecBase4dself, ostreamout) -> Any: ...
    def project(self, LVecBase4dself, constLVecBase4donto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4dself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4dself, doublex, doubley, doublez, doublew) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4dself, inti, doublevalue) -> Any: ...
    def set_w(self, constLVecBase4dself, doublevalue) -> Any: ...
    def set_x(self, constLVecBase4dself, doublevalue) -> Any: ...
    def set_y(self, constLVecBase4dself, doublevalue) -> Any: ...
    def set_z(self, constLVecBase4dself, doublevalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4dself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4dself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4dself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4dself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4dself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class UnalignedLVecBase4f(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase4fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def add_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, constLVecBase4fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4fself, constLVecBase4fother) -> Any: ...
    def dot(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fill(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fmin(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4fself) -> Any: ...
    def get_x(self, LVecBase4fself) -> Any: ...
    def get_xy(self, LVecBase4fself) -> Any: ...
    def get_xyz(self, LVecBase4fself) -> Any: ...
    def get_y(self, LVecBase4fself) -> Any: ...
    def get_z(self, LVecBase4fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4fself) -> Any: ...
    def length(self, LVecBase4fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4fself) -> Any: ...
    def normalize(self, constLVecBase4fself) -> Any: ...
    def normalized(self, LVecBase4fself) -> Any: ...
    def output(self, LVecBase4fself, ostreamout) -> Any: ...
    def project(self, LVecBase4fself, constLVecBase4fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4fself, floatx, floaty, floatz, floatw) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def set_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class UnalignedLVecBase4i(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    def add_hash(self, LVecBase4iself, inthash) -> Any: ...
    def add_to_cell(self, constLVecBase4iself, inti, intvalue) -> Any: ...
    def add_w(self, constLVecBase4iself, intvalue) -> Any: ...
    def add_x(self, constLVecBase4iself, intvalue) -> Any: ...
    def add_y(self, constLVecBase4iself, intvalue) -> Any: ...
    def add_z(self, constLVecBase4iself, intvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4iself, constLVecBase4iother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4iself, constLVecBase4iother, intthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4iself, constLVecBase4icopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4iself, intfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, LVecBase4iself, constLVecBase4iother) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4iself, constLVecBase4iother) -> Any: ...
    def dot(self, LVecBase4iself, constLVecBase4iother) -> Any: ...
    def fill(self, constLVecBase4iself, intfill_value) -> Any: ...
    def fmax(self, LVecBase4iself, constLVecBase4iother) -> Any: ...
    def fmin(self, LVecBase4iself, constLVecBase4iother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4iself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_hash(self, LVecBase4iself) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4iself) -> Any: ...
    def get_x(self, LVecBase4iself) -> Any: ...
    def get_xy(self, LVecBase4iself) -> Any: ...
    def get_xyz(self, LVecBase4iself) -> Any: ...
    def get_y(self, LVecBase4iself) -> Any: ...
    def get_z(self, LVecBase4iself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4iself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4iself) -> Any: ...
    def output(self, LVecBase4iself, ostreamout) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4iself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4iself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4iself, intx, inty, intz, intw) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4iself, inti, intvalue) -> Any: ...
    def set_w(self, constLVecBase4iself, intvalue) -> Any: ...
    def set_x(self, constLVecBase4iself, intvalue) -> Any: ...
    def set_y(self, constLVecBase4iself, intvalue) -> Any: ...
    def set_z(self, constLVecBase4iself, intvalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4iself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4iself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4iself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4iself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4iself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4iself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...

class UnionBoundingVolume(GeometricBoundingVolume):
    DtoolClassDict: ClassVar[dict] = ...
    components: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addComponent(self, *args, **kwargs): ...
    def add_component(self, constUnionBoundingVolumeself, constGeometricBoundingVolumecomponent) -> Any: ...
    def clearComponents(self, *args, **kwargs): ...
    def clear_components(self, constUnionBoundingVolumeself) -> Any: ...
    def filterIntersection(self, *args, **kwargs): ...
    def filter_intersection(self, constUnionBoundingVolumeself, constBoundingVolumevolume) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getComponent(self, *args, **kwargs): ...
    def getComponents(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_component(self, UnionBoundingVolumeself, intn) -> Any: ...
    def get_components(self, *args, **kwargs): ...
    def get_num_components(self, UnionBoundingVolumeself) -> Any: ...

class UniqueIdAllocator(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def allocate(self, constUniqueIdAllocatorself) -> Any: ...
    def fractionUsed(self, *args, **kwargs): ...
    def fraction_used(self, UniqueIdAllocatorself) -> Any: ...
    def free(self, constUniqueIdAllocatorself, intindex) -> Any: ...
    def initialReserveId(self, *args, **kwargs): ...
    @overload
    def initial_reserve_id(self, constUniqueIdAllocatorself, intid) -> Any: ...
    @overload
    def initial_reserve_id(self) -> Any: ...
    def isAllocated(self, *args, **kwargs): ...
    def is_allocated(self, constUniqueIdAllocatorself, intindex) -> Any: ...
    def output(self, UniqueIdAllocatorself, ostreamout) -> Any: ...
    def write(self, UniqueIdAllocatorself, ostreamout) -> Any: ...

class UpdateSeq(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    seq: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constUpdateSeqself, constUpdateSeqcopy) -> Any: ...
    def clear(self, constUpdateSeqself) -> Any: ...
    @staticmethod
    def fresh() -> Any: ...
    def getSeq(self, *args, **kwargs): ...
    def get_seq(self, UpdateSeqself) -> Any: ...
    def increment(self, constUpdateSeqself) -> Any: ...
    @staticmethod
    def initial() -> Any: ...
    def isFresh(self, *args, **kwargs): ...
    def isInitial(self, *args, **kwargs): ...
    def isOld(self, *args, **kwargs): ...
    def isSpecial(self, *args, **kwargs): ...
    def is_fresh(self, UpdateSeqself) -> Any: ...
    def is_initial(self, UpdateSeqself) -> Any: ...
    def is_old(self, UpdateSeqself) -> Any: ...
    def is_special(self, UpdateSeqself) -> Any: ...
    @staticmethod
    def old() -> Any: ...
    def output(self, UpdateSeqself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class UserDataAudio(MovieAudio):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def append(self, constUserDataAudioself, DatagramIteratorsrc, intlen) -> Any: ...
    @overload
    def append(self, constUserDataAudioself, bytesparam0) -> Any: ...
    def done(self, constUserDataAudioself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class UserDataAudioCursor(MovieAudioCursor):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class UserVertexSlider(VertexSlider):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def setSlider(self, *args, **kwargs): ...
    def set_slider(self, constUserVertexSliderself, floatslider) -> Any: ...

class UserVertexTransform(VertexTransform):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_name(self, UserVertexTransformself) -> Any: ...
    def setMatrix(self, *args, **kwargs): ...
    def set_matrix(self, constUserVertexTransformself, constLMatrix4fmatrix) -> Any: ...

class UvScrollNode(PandaNode):
    DtoolClassDict: ClassVar[dict] = ...
    r_speed: Incomplete
    u_speed: Incomplete
    v_speed: Incomplete
    w_speed: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getRSpeed(self, *args, **kwargs): ...
    def getUSpeed(self, *args, **kwargs): ...
    def getVSpeed(self, *args, **kwargs): ...
    def getWSpeed(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_r_speed(self, UvScrollNodeself) -> Any: ...
    def get_u_speed(self, UvScrollNodeself) -> Any: ...
    def get_v_speed(self, UvScrollNodeself) -> Any: ...
    def get_w_speed(self, UvScrollNodeself) -> Any: ...
    def setRSpeed(self, *args, **kwargs): ...
    def setUSpeed(self, *args, **kwargs): ...
    def setVSpeed(self, *args, **kwargs): ...
    def setWSpeed(self, *args, **kwargs): ...
    def set_r_speed(self, constUvScrollNodeself, floatr_speed) -> Any: ...
    def set_u_speed(self, constUvScrollNodeself, floatu_speed) -> Any: ...
    def set_v_speed(self, constUvScrollNodeself, floatv_speed) -> Any: ...
    def set_w_speed(self, constUvScrollNodeself, floatw_speed) -> Any: ...

class VBase2(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    y: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase2fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase2fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase2fself, inti, floatvalue) -> Any: ...
    def add_x(self, constLVecBase2fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase2fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase2fself, constLVecBase2fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase2fself, constLVecBase2fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase2fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase2fself, constLVecBase2fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase2fself, constLVecBase2fother) -> Any: ...
    def dot(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    def fill(self, constLVecBase2fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    def fmin(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def get_cell(self, LVecBase2fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase2fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase2fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_x(self, LVecBase2fself) -> Any: ...
    def get_y(self, LVecBase2fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase2fself) -> Any: ...
    def length(self, LVecBase2fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase2fself) -> Any: ...
    def normalize(self, constLVecBase2fself) -> Any: ...
    def normalized(self, LVecBase2fself) -> Any: ...
    def output(self, LVecBase2fself, ostreamout) -> Any: ...
    def project(self, LVecBase2fself, constLVecBase2fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase2fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase2fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase2fself, floatx, floaty) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase2fself, inti, floatvalue) -> Any: ...
    def set_x(self, constLVecBase2fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase2fself, floatvalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase2fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase2fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase2fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase2fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase2fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase2fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class VBase2D(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    y: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase2dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase2dself, inthash, doublethreshold) -> Any: ...
    def add_to_cell(self, constLVecBase2dself, inti, doublevalue) -> Any: ...
    def add_x(self, constLVecBase2dself, doublevalue) -> Any: ...
    def add_y(self, constLVecBase2dself, doublevalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase2dself, constLVecBase2dother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase2dself, constLVecBase2dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase2dself, constLVecBase2dcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase2dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase2dself, constLVecBase2dother) -> Any: ...
    @overload
    def compare_to(self, LVecBase2dself, constLVecBase2dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase2dself, constLVecBase2dother) -> Any: ...
    def dot(self, LVecBase2dself, constLVecBase2dother) -> Any: ...
    def fill(self, constLVecBase2dself, doublefill_value) -> Any: ...
    def fmax(self, LVecBase2dself, constLVecBase2dother) -> Any: ...
    def fmin(self, LVecBase2dself, constLVecBase2dother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def get_cell(self, LVecBase2dself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase2dself) -> Any: ...
    @overload
    def get_hash(self, LVecBase2dself, doublethreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_x(self, LVecBase2dself) -> Any: ...
    def get_y(self, LVecBase2dself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase2dself) -> Any: ...
    def length(self, LVecBase2dself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase2dself) -> Any: ...
    def normalize(self, constLVecBase2dself) -> Any: ...
    def normalized(self, LVecBase2dself) -> Any: ...
    def output(self, LVecBase2dself, ostreamout) -> Any: ...
    def project(self, LVecBase2dself, constLVecBase2donto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase2dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase2dself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase2dself, doublex, doubley) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase2dself, inti, doublevalue) -> Any: ...
    def set_x(self, constLVecBase2dself, doublevalue) -> Any: ...
    def set_y(self, constLVecBase2dself, doublevalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase2dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase2dself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase2dself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase2dself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase2dself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase2dself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class VBase2F(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    y: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase2fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase2fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase2fself, inti, floatvalue) -> Any: ...
    def add_x(self, constLVecBase2fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase2fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase2fself, constLVecBase2fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase2fself, constLVecBase2fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase2fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase2fself, constLVecBase2fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase2fself, constLVecBase2fother) -> Any: ...
    def dot(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    def fill(self, constLVecBase2fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    def fmin(self, LVecBase2fself, constLVecBase2fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def get_cell(self, LVecBase2fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase2fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase2fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_x(self, LVecBase2fself) -> Any: ...
    def get_y(self, LVecBase2fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase2fself) -> Any: ...
    def length(self, LVecBase2fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase2fself) -> Any: ...
    def normalize(self, constLVecBase2fself) -> Any: ...
    def normalized(self, LVecBase2fself) -> Any: ...
    def output(self, LVecBase2fself, ostreamout) -> Any: ...
    def project(self, LVecBase2fself, constLVecBase2fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase2fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase2fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase2fself, floatx, floaty) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase2fself, inti, floatvalue) -> Any: ...
    def set_x(self, constLVecBase2fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase2fself, floatvalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase2fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase2fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase2fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase2fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase2fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase2fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class VBase3(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xz: Incomplete
    y: Incomplete
    yz: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase3fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase3fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase3fself, inti, floatvalue) -> Any: ...
    def add_x(self, constLVecBase3fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase3fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase3fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase3fself, constLVecBase3fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase3fself, constLVecBase3fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase3fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase3fself, constLVecBase3fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase3fself, constLVecBase3fother) -> Any: ...
    def cross(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def crossInto(self, *args, **kwargs): ...
    def cross_into(self, constLVecBase3fself, constLVecBase3fother) -> Any: ...
    def dot(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def fill(self, constLVecBase3fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def fmin(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getStandardizedHpr(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase3fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase3fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase3fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_standardized_hpr(self, LVecBase3fself) -> Any: ...
    def get_x(self, LVecBase3fself) -> Any: ...
    def get_xy(self, LVecBase3fself) -> Any: ...
    def get_xz(self, LVecBase3fself) -> Any: ...
    def get_y(self, LVecBase3fself) -> Any: ...
    def get_yz(self, LVecBase3fself) -> Any: ...
    def get_z(self, LVecBase3fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase3fself) -> Any: ...
    def length(self, LVecBase3fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase3fself) -> Any: ...
    def normalize(self, constLVecBase3fself) -> Any: ...
    def normalized(self, LVecBase3fself) -> Any: ...
    def output(self, LVecBase3fself, ostreamout) -> Any: ...
    def project(self, LVecBase3fself, constLVecBase3fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase3fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase3fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase3fself, floatx, floaty, floatz) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase3fself, inti, floatvalue) -> Any: ...
    def set_x(self, constLVecBase3fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase3fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase3fself, floatvalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase3fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase3fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase3fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase3fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase3fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase3fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class VBase3D(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xz: Incomplete
    y: Incomplete
    yz: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase3dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase3dself, inthash, doublethreshold) -> Any: ...
    def add_to_cell(self, constLVecBase3dself, inti, doublevalue) -> Any: ...
    def add_x(self, constLVecBase3dself, doublevalue) -> Any: ...
    def add_y(self, constLVecBase3dself, doublevalue) -> Any: ...
    def add_z(self, constLVecBase3dself, doublevalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase3dself, constLVecBase3dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase3dself, constLVecBase3dcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase3dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    @overload
    def compare_to(self, LVecBase3dself, constLVecBase3dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase3dself, constLVecBase3dother) -> Any: ...
    def cross(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    def crossInto(self, *args, **kwargs): ...
    def cross_into(self, constLVecBase3dself, constLVecBase3dother) -> Any: ...
    def dot(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    def fill(self, constLVecBase3dself, doublefill_value) -> Any: ...
    def fmax(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    def fmin(self, LVecBase3dself, constLVecBase3dother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getStandardizedHpr(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase3dself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase3dself) -> Any: ...
    @overload
    def get_hash(self, LVecBase3dself, doublethreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_standardized_hpr(self, LVecBase3dself) -> Any: ...
    def get_x(self, LVecBase3dself) -> Any: ...
    def get_xy(self, LVecBase3dself) -> Any: ...
    def get_xz(self, LVecBase3dself) -> Any: ...
    def get_y(self, LVecBase3dself) -> Any: ...
    def get_yz(self, LVecBase3dself) -> Any: ...
    def get_z(self, LVecBase3dself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase3dself) -> Any: ...
    def length(self, LVecBase3dself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase3dself) -> Any: ...
    def normalize(self, constLVecBase3dself) -> Any: ...
    def normalized(self, LVecBase3dself) -> Any: ...
    def output(self, LVecBase3dself, ostreamout) -> Any: ...
    def project(self, LVecBase3dself, constLVecBase3donto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase3dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase3dself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase3dself, doublex, doubley, doublez) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase3dself, inti, doublevalue) -> Any: ...
    def set_x(self, constLVecBase3dself, doublevalue) -> Any: ...
    def set_y(self, constLVecBase3dself, doublevalue) -> Any: ...
    def set_z(self, constLVecBase3dself, doublevalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase3dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase3dself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase3dself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase3dself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase3dself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase3dself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class VBase3F(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xz: Incomplete
    y: Incomplete
    yz: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase3fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase3fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase3fself, inti, floatvalue) -> Any: ...
    def add_x(self, constLVecBase3fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase3fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase3fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase3fself, constLVecBase3fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase3fself, constLVecBase3fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase3fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase3fself, constLVecBase3fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase3fself, constLVecBase3fother) -> Any: ...
    def cross(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def crossInto(self, *args, **kwargs): ...
    def cross_into(self, constLVecBase3fself, constLVecBase3fother) -> Any: ...
    def dot(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def fill(self, constLVecBase3fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def fmin(self, LVecBase3fself, constLVecBase3fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getStandardizedHpr(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase3fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase3fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase3fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_standardized_hpr(self, LVecBase3fself) -> Any: ...
    def get_x(self, LVecBase3fself) -> Any: ...
    def get_xy(self, LVecBase3fself) -> Any: ...
    def get_xz(self, LVecBase3fself) -> Any: ...
    def get_y(self, LVecBase3fself) -> Any: ...
    def get_yz(self, LVecBase3fself) -> Any: ...
    def get_z(self, LVecBase3fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase3fself) -> Any: ...
    def length(self, LVecBase3fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase3fself) -> Any: ...
    def normalize(self, constLVecBase3fself) -> Any: ...
    def normalized(self, LVecBase3fself) -> Any: ...
    def output(self, LVecBase3fself, ostreamout) -> Any: ...
    def project(self, LVecBase3fself, constLVecBase3fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase3fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase3fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase3fself, floatx, floaty, floatz) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase3fself, inti, floatvalue) -> Any: ...
    def set_x(self, constLVecBase3fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase3fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase3fself, floatvalue) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase3fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase3fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase3fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase3fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase3fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase3fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class VBase4(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase4fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def add_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, constLVecBase4fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4fself, constLVecBase4fother) -> Any: ...
    def dot(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fill(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fmin(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4fself) -> Any: ...
    def get_x(self, LVecBase4fself) -> Any: ...
    def get_xy(self, LVecBase4fself) -> Any: ...
    def get_xyz(self, LVecBase4fself) -> Any: ...
    def get_y(self, LVecBase4fself) -> Any: ...
    def get_z(self, LVecBase4fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4fself) -> Any: ...
    def length(self, LVecBase4fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4fself) -> Any: ...
    def normalize(self, constLVecBase4fself) -> Any: ...
    def normalized(self, LVecBase4fself) -> Any: ...
    def output(self, LVecBase4fself, ostreamout) -> Any: ...
    def project(self, LVecBase4fself, constLVecBase4fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4fself, floatx, floaty, floatz, floatw) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def set_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class VBase4D(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase4dself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase4dself, inthash, doublethreshold) -> Any: ...
    def add_to_cell(self, constLVecBase4dself, inti, doublevalue) -> Any: ...
    def add_w(self, constLVecBase4dself, doublevalue) -> Any: ...
    def add_x(self, constLVecBase4dself, doublevalue) -> Any: ...
    def add_y(self, constLVecBase4dself, doublevalue) -> Any: ...
    def add_z(self, constLVecBase4dself, doublevalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4dself, constLVecBase4dother, doublethreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4dself, constLVecBase4dcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4dself, doublefill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    @overload
    def compare_to(self, LVecBase4dself, constLVecBase4dother, doublethreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4dself, constLVecBase4dother) -> Any: ...
    def dot(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    def fill(self, constLVecBase4dself, doublefill_value) -> Any: ...
    def fmax(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    def fmin(self, LVecBase4dself, constLVecBase4dother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4dself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase4dself) -> Any: ...
    @overload
    def get_hash(self, LVecBase4dself, doublethreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4dself) -> Any: ...
    def get_x(self, LVecBase4dself) -> Any: ...
    def get_xy(self, LVecBase4dself) -> Any: ...
    def get_xyz(self, LVecBase4dself) -> Any: ...
    def get_y(self, LVecBase4dself) -> Any: ...
    def get_z(self, LVecBase4dself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4dself) -> Any: ...
    def length(self, LVecBase4dself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4dself) -> Any: ...
    def normalize(self, constLVecBase4dself) -> Any: ...
    def normalized(self, LVecBase4dself) -> Any: ...
    def output(self, LVecBase4dself, ostreamout) -> Any: ...
    def project(self, LVecBase4dself, constLVecBase4donto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4dself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4dself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4dself, doublex, doubley, doublez, doublew) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4dself, inti, doublevalue) -> Any: ...
    def set_w(self, constLVecBase4dself, doublevalue) -> Any: ...
    def set_x(self, constLVecBase4dself, doublevalue) -> Any: ...
    def set_y(self, constLVecBase4dself, doublevalue) -> Any: ...
    def set_z(self, constLVecBase4dself, doublevalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4dself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4dself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4dself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4dself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4dself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4dself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class VBase4F(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    is_int: ClassVar[int] = ...
    num_components: ClassVar[int] = ...
    x: Incomplete
    xy: Incomplete
    xyz: Incomplete
    y: Incomplete
    z: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def Ceil(self, *args, **kwargs): ...
    def Floor(self, *args, **kwargs): ...
    def Round(self, *args, **kwargs): ...
    def addHash(self, *args, **kwargs): ...
    def addToCell(self, *args, **kwargs): ...
    def addW(self, *args, **kwargs): ...
    def addX(self, *args, **kwargs): ...
    def addY(self, *args, **kwargs): ...
    def addZ(self, *args, **kwargs): ...
    @overload
    def add_hash(self, LVecBase4fself, inthash) -> Any: ...
    @overload
    def add_hash(self, LVecBase4fself, inthash, floatthreshold) -> Any: ...
    def add_to_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def add_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def add_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    def almostEqual(self, *args, **kwargs): ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def almost_equal(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, constLVecBase4fcopy) -> Any: ...
    @overload
    def assign(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    @overload
    def compare_to(self, LVecBase4fself, constLVecBase4fother, floatthreshold) -> Any: ...
    def componentwiseMult(self, *args, **kwargs): ...
    def componentwise_mult(self, constLVecBase4fself, constLVecBase4fother) -> Any: ...
    def dot(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fill(self, constLVecBase4fself, floatfill_value) -> Any: ...
    def fmax(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def fmin(self, LVecBase4fself, constLVecBase4fother) -> Any: ...
    def getCell(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    @staticmethod
    def getNumComponents(*args, **kwargs): ...
    def getW(self, *args, **kwargs): ...
    def getX(self, *args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    def getY(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def get_cell(self, LVecBase4fself, inti) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself) -> Any: ...
    @overload
    def get_hash(self, LVecBase4fself, floatthreshold) -> Any: ...
    @staticmethod
    def get_num_components() -> Any: ...
    def get_w(self, LVecBase4fself) -> Any: ...
    def get_x(self, LVecBase4fself) -> Any: ...
    def get_xy(self, LVecBase4fself) -> Any: ...
    def get_xyz(self, LVecBase4fself) -> Any: ...
    def get_y(self, LVecBase4fself) -> Any: ...
    def get_z(self, LVecBase4fself) -> Any: ...
    def isNan(self, *args, **kwargs): ...
    def is_nan(self, LVecBase4fself) -> Any: ...
    def length(self, LVecBase4fself) -> Any: ...
    def lengthSquared(self, *args, **kwargs): ...
    def length_squared(self, LVecBase4fself) -> Any: ...
    def normalize(self, constLVecBase4fself) -> Any: ...
    def normalized(self, LVecBase4fself) -> Any: ...
    def output(self, LVecBase4fself, ostreamout) -> Any: ...
    def project(self, LVecBase4fself, constLVecBase4fonto) -> Any: ...
    def readDatagram(self, *args, **kwargs): ...
    def readDatagramFixed(self, *args, **kwargs): ...
    def read_datagram(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def read_datagram_fixed(self, constLVecBase4fself, DatagramIteratorsource) -> Any: ...
    def set(self, constLVecBase4fself, floatx, floaty, floatz, floatw) -> Any: ...
    def setCell(self, *args, **kwargs): ...
    def setW(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_cell(self, constLVecBase4fself, inti, floatvalue) -> Any: ...
    def set_w(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_x(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_y(self, constLVecBase4fself, floatvalue) -> Any: ...
    def set_z(self, constLVecBase4fself, floatvalue) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    def writeDatagram(self, *args, **kwargs): ...
    def writeDatagramFixed(self, *args, **kwargs): ...
    def write_datagram(self, LVecBase4fself, Datagramdestination) -> Any: ...
    def write_datagram_fixed(self, LVecBase4fself, Datagramdestination) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __buffer__(self, *args, **kwargs): ...
    def __ceil__(self, constLVecBase4fself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __floor__(self, constLVecBase4fself) -> Any: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imul__(self, other): ...
    def __ipow__(self, other): ...
    def __isub__(self, other): ...
    def __itruediv__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self): ...
    def __pow__(self, other): ...
    def __radd__(self, other): ...
    def __reduce__(self, LVecBase4fself) -> Any: ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __round__(self, constLVecBase4fself) -> Any: ...
    def __rpow__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Vec2(LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LVector2fself) -> Any: ...
    def project(self, LVector2fself, constLVecBase2fonto) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector2fself, constLVector2fother) -> Any: ...
    def signed_angle_rad(self, LVector2fself, constLVector2fother) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Vec2D(LVecBase2d):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LVector2dself) -> Any: ...
    def project(self, LVector2dself, constLVecBase2donto) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector2dself, constLVector2dother) -> Any: ...
    def signed_angle_rad(self, LVector2dself, constLVector2dother) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Vec2F(LVecBase2f):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def normalized(self, LVector2fself) -> Any: ...
    def project(self, LVector2fself, constLVecBase2fonto) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector2fself, constLVector2fother) -> Any: ...
    def signed_angle_rad(self, LVector2fself, constLVector2fother) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Vec3(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LVector3fself, constLVector3fother) -> Any: ...
    def angle_rad(self, LVector3fself, constLVector3fother) -> Any: ...
    @staticmethod
    def back(intcs) -> Any: ...
    def cross(self, LVector3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def down(intcs) -> Any: ...
    @staticmethod
    def forward(intcs) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector3fself) -> Any: ...
    def get_xz(self, LVector3fself) -> Any: ...
    def get_yz(self, LVector3fself) -> Any: ...
    @staticmethod
    def left(intcs) -> Any: ...
    def normalized(self, LVector3fself) -> Any: ...
    def project(self, LVector3fself, constLVecBase3fonto) -> Any: ...
    def relativeAngleDeg(self, *args, **kwargs): ...
    def relativeAngleRad(self, *args, **kwargs): ...
    def relative_angle_deg(self, LVector3fself, constLVector3fother) -> Any: ...
    def relative_angle_rad(self, LVector3fself, constLVector3fother) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def right(intcs) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector3fself, constLVector3fother, constLVector3fref) -> Any: ...
    def signed_angle_rad(self, LVector3fself, constLVector3fother, constLVector3fref) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def up(intcs) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Vec3D(LVecBase3d):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LVector3dself, constLVector3dother) -> Any: ...
    def angle_rad(self, LVector3dself, constLVector3dother) -> Any: ...
    @staticmethod
    def back(intcs) -> Any: ...
    def cross(self, LVector3dself, constLVecBase3dother) -> Any: ...
    @staticmethod
    def down(intcs) -> Any: ...
    @staticmethod
    def forward(intcs) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector3dself) -> Any: ...
    def get_xz(self, LVector3dself) -> Any: ...
    def get_yz(self, LVector3dself) -> Any: ...
    @staticmethod
    def left(intcs) -> Any: ...
    def normalized(self, LVector3dself) -> Any: ...
    def project(self, LVector3dself, constLVecBase3donto) -> Any: ...
    def relativeAngleDeg(self, *args, **kwargs): ...
    def relativeAngleRad(self, *args, **kwargs): ...
    def relative_angle_deg(self, LVector3dself, constLVector3dother) -> Any: ...
    def relative_angle_rad(self, LVector3dself, constLVector3dother) -> Any: ...
    @staticmethod
    def rfu(doubleright, doublefwd, doubleup, intcs) -> Any: ...
    @staticmethod
    def right(intcs) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector3dself, constLVector3dother, constLVector3dref) -> Any: ...
    def signed_angle_rad(self, LVector3dself, constLVector3dother, constLVector3dref) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def up(intcs) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Vec3F(LVecBase3f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xz: Incomplete
    yz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def angleDeg(self, *args, **kwargs): ...
    def angleRad(self, *args, **kwargs): ...
    def angle_deg(self, LVector3fself, constLVector3fother) -> Any: ...
    def angle_rad(self, LVector3fself, constLVector3fother) -> Any: ...
    @staticmethod
    def back(intcs) -> Any: ...
    def cross(self, LVector3fself, constLVecBase3fother) -> Any: ...
    @staticmethod
    def down(intcs) -> Any: ...
    @staticmethod
    def forward(intcs) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXz(self, *args, **kwargs): ...
    def getYz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector3fself) -> Any: ...
    def get_xz(self, LVector3fself) -> Any: ...
    def get_yz(self, LVector3fself) -> Any: ...
    @staticmethod
    def left(intcs) -> Any: ...
    def normalized(self, LVector3fself) -> Any: ...
    def project(self, LVector3fself, constLVecBase3fonto) -> Any: ...
    def relativeAngleDeg(self, *args, **kwargs): ...
    def relativeAngleRad(self, *args, **kwargs): ...
    def relative_angle_deg(self, LVector3fself, constLVector3fother) -> Any: ...
    def relative_angle_rad(self, LVector3fself, constLVector3fother) -> Any: ...
    @staticmethod
    def rfu(floatright, floatfwd, floatup, intcs) -> Any: ...
    @staticmethod
    def right(intcs) -> Any: ...
    def signedAngleDeg(self, *args, **kwargs): ...
    def signedAngleRad(self, *args, **kwargs): ...
    def signed_angle_deg(self, LVector3fself, constLVector3fother, constLVector3fref) -> Any: ...
    def signed_angle_rad(self, LVector3fself, constLVector3fother, constLVector3fref) -> Any: ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def up(intcs) -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Vec4(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector4fself) -> Any: ...
    def get_xyz(self, LVector4fself) -> Any: ...
    def normalized(self, LVector4fself) -> Any: ...
    def project(self, LVector4fself, constLVecBase4fonto) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Vec4D(LVecBase4d):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector4dself) -> Any: ...
    def get_xyz(self, LVector4dself) -> Any: ...
    def normalized(self, LVector4dself) -> Any: ...
    def project(self, LVector4dself, constLVecBase4donto) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class Vec4F(LVecBase4f):
    DtoolClassDict: ClassVar[dict] = ...
    xy: Incomplete
    xyz: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getXy(self, *args, **kwargs): ...
    def getXyz(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_xy(self, LVector4fself) -> Any: ...
    def get_xyz(self, LVector4fself) -> Any: ...
    def normalized(self, LVector4fself) -> Any: ...
    def project(self, LVector4fself, constLVecBase4fonto) -> Any: ...
    @staticmethod
    def unitW(*args, **kwargs): ...
    @staticmethod
    def unitX(*args, **kwargs): ...
    @staticmethod
    def unitY(*args, **kwargs): ...
    @staticmethod
    def unitZ(*args, **kwargs): ...
    @staticmethod
    def unit_w() -> Any: ...
    @staticmethod
    def unit_x() -> Any: ...
    @staticmethod
    def unit_y() -> Any: ...
    @staticmethod
    def unit_z() -> Any: ...
    @staticmethod
    def zero() -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delattr__(self, name): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __setattr__(self, name, value): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class VertexBufferContext(BufferContext, AdaptiveLruPage):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def changedSize(self, *args, **kwargs): ...
    def changedUsageHint(self, *args, **kwargs): ...
    def changed_size(self, VertexBufferContextself, constGeomVertexArrayDataHandlereader) -> Any: ...
    def changed_usage_hint(self, VertexBufferContextself, constGeomVertexArrayDataHandlereader) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getData(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_data(self, VertexBufferContextself) -> Any: ...
    def upcastToAdaptiveLruPage(self, *args, **kwargs): ...
    def upcastToBufferContext(self, *args, **kwargs): ...
    def upcast_to_AdaptiveLruPage(self, constVertexBufferContextself) -> Any: ...
    def upcast_to_BufferContext(self, constVertexBufferContextself) -> Any: ...
    def wasModified(self, *args, **kwargs): ...
    def was_modified(self, VertexBufferContextself, constGeomVertexArrayDataHandlereader) -> Any: ...

class VertexDataBlock(SimpleAllocatorBlock, ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getNextBlock(self, *args, **kwargs): ...
    def getPage(self, *args, **kwargs): ...
    def get_next_block(self, VertexDataBlockself) -> Any: ...
    def get_page(self, VertexDataBlockself) -> Any: ...
    def upcastToReferenceCount(self, *args, **kwargs): ...
    def upcastToSimpleAllocatorBlock(self, *args, **kwargs): ...
    def upcast_to_ReferenceCount(self, constVertexDataBlockself) -> Any: ...
    def upcast_to_SimpleAllocatorBlock(self, constVertexDataBlockself) -> Any: ...

class VertexDataBook(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def alloc(self, constVertexDataBookself, intsize) -> Any: ...
    def countAllocatedSize(self, *args, **kwargs): ...
    def countTotalPageSize(self, *args, **kwargs): ...
    @overload
    def count_allocated_size(self, VertexDataBookself) -> Any: ...
    @overload
    def count_allocated_size(self, VertexDataBookself, intram_class) -> Any: ...
    @overload
    def count_total_page_size(self, VertexDataBookself) -> Any: ...
    @overload
    def count_total_page_size(self, VertexDataBookself, intram_class) -> Any: ...
    def getNumPages(self, *args, **kwargs): ...
    def get_num_pages(self, VertexDataBookself) -> Any: ...
    def saveToDisk(self, *args, **kwargs): ...
    def save_to_disk(self, constVertexDataBookself) -> Any: ...

class VertexDataPage(SimpleAllocator, SimpleLruPage):
    DtoolClassDict: ClassVar[dict] = ...
    RCCompressed: ClassVar[int] = ...
    RCDisk: ClassVar[int] = ...
    RCEndOfList: ClassVar[int] = ...
    RCResident: ClassVar[int] = ...
    RC_compressed: ClassVar[int] = ...
    RC_disk: ClassVar[int] = ...
    RC_end_of_list: ClassVar[int] = ...
    RC_resident: ClassVar[int] = ...
    save_file: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def alloc(self, constVertexDataPageself, intsize) -> Any: ...
    @staticmethod
    def flushThreads(*args, **kwargs): ...
    @staticmethod
    def flush_threads() -> Any: ...
    def getBook(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFirstBlock(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalLru(*args, **kwargs): ...
    @staticmethod
    def getNumPendingReads(*args, **kwargs): ...
    @staticmethod
    def getNumPendingWrites(*args, **kwargs): ...
    @staticmethod
    def getNumThreads(*args, **kwargs): ...
    @staticmethod
    def getPendingLru(*args, **kwargs): ...
    def getPendingRamClass(self, *args, **kwargs): ...
    def getRamClass(self, *args, **kwargs): ...
    @staticmethod
    def getSaveFile(*args, **kwargs): ...
    def get_book(self, VertexDataPageself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_first_block(self, VertexDataPageself) -> Any: ...
    @staticmethod
    def get_global_lru(intrclass) -> Any: ...
    @staticmethod
    def get_num_pending_reads() -> Any: ...
    @staticmethod
    def get_num_pending_writes() -> Any: ...
    @staticmethod
    def get_num_threads() -> Any: ...
    @staticmethod
    def get_pending_lru() -> Any: ...
    def get_pending_ram_class(self, VertexDataPageself) -> Any: ...
    def get_ram_class(self, VertexDataPageself) -> Any: ...
    @staticmethod
    def get_save_file() -> Any: ...
    def output(self, VertexDataPageself, ostreamout) -> Any: ...
    def requestResident(self, *args, **kwargs): ...
    def request_resident(self, constVertexDataPageself) -> Any: ...
    def saveToDisk(self, *args, **kwargs): ...
    def save_to_disk(self, constVertexDataPageself) -> Any: ...
    @staticmethod
    def stopThreads(*args, **kwargs): ...
    @staticmethod
    def stop_threads() -> Any: ...
    def upcastToSimpleAllocator(self, *args, **kwargs): ...
    def upcastToSimpleLruPage(self, *args, **kwargs): ...
    def upcast_to_SimpleAllocator(self, constVertexDataPageself) -> Any: ...
    def upcast_to_SimpleLruPage(self, constVertexDataPageself) -> Any: ...
    def write(self, VertexDataPageself, ostreamout, intindent_level) -> Any: ...

class VertexDataSaveFile(SimpleAllocator):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getTotalFileSize(self, *args, **kwargs): ...
    def getUsedFileSize(self, *args, **kwargs): ...
    def get_total_file_size(self, VertexDataSaveFileself) -> Any: ...
    def get_used_file_size(self, VertexDataSaveFileself) -> Any: ...
    def isValid(self, *args, **kwargs): ...
    def is_valid(self, VertexDataSaveFileself) -> Any: ...

class VertexSlider(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    modified: Incomplete
    name: Incomplete
    slider: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getModified(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getSlider(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_modified(self, VertexSliderself, Threadcurrent_thread) -> Any: ...
    def get_name(self, VertexSliderself) -> Any: ...
    def get_slider(self, VertexSliderself) -> Any: ...
    def output(self, VertexSliderself, ostreamout) -> Any: ...
    def write(self, VertexSliderself, ostreamout, intindent_level) -> Any: ...

class VertexTransform(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    modified: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def accumulateMatrix(self, *args, **kwargs): ...
    def accumulate_matrix(self, VertexTransformself, LMatrix4faccum, floatweight) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def getGlobalModified(*args, **kwargs): ...
    def getMatrix(self, *args, **kwargs): ...
    def getModified(self, *args, **kwargs): ...
    @staticmethod
    def getNextModified(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def get_global_modified(Threadcurrent_thread) -> Any: ...
    def get_matrix(self, VertexTransformself, LMatrix4fmatrix) -> Any: ...
    def get_modified(self, VertexTransformself, Threadcurrent_thread) -> Any: ...
    @staticmethod
    def get_next_modified(Threadcurrent_thread) -> Any: ...
    def multMatrix(self, *args, **kwargs): ...
    def mult_matrix(self, VertexTransformself, LMatrix4fresult, constLMatrix4fprevious) -> Any: ...
    def output(self, VertexTransformself, ostreamout) -> Any: ...
    def write(self, VertexTransformself, ostreamout, intindent_level) -> Any: ...

class VideoTexture(Texture, AnimInterface):
    DtoolClassDict: ClassVar[dict] = ...
    video_height: Incomplete
    video_width: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getKeepRamImage(self, *args, **kwargs): ...
    def getVideoHeight(self, *args, **kwargs): ...
    def getVideoWidth(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_keep_ram_image(self, VideoTextureself) -> Any: ...
    def get_video_height(self, VideoTextureself) -> Any: ...
    def get_video_width(self, VideoTextureself) -> Any: ...
    def upcastToAnimInterface(self, *args, **kwargs): ...
    def upcastToTexture(self, *args, **kwargs): ...
    def upcast_to_AnimInterface(self, constVideoTextureself) -> Any: ...
    def upcast_to_Texture(self, constVideoTextureself) -> Any: ...

class VirtualFile(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def closeReadFile(self, *args, **kwargs): ...
    def closeReadWriteFile(self, *args, **kwargs): ...
    def closeWriteFile(self, *args, **kwargs): ...
    def close_read_file(self, VirtualFileself, istreamstream) -> Any: ...
    def close_read_write_file(self, constVirtualFileself, iostreamstream) -> Any: ...
    def close_write_file(self, constVirtualFileself, ostreamstream) -> Any: ...
    def copyFile(self, *args, **kwargs): ...
    def copy_file(self, constVirtualFileself, VirtualFilenew_file) -> Any: ...
    def deleteFile(self, *args, **kwargs): ...
    def delete_file(self, constVirtualFileself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFileSize(self, *args, **kwargs): ...
    def getFileSystem(self, *args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getOriginalFilename(self, *args, **kwargs): ...
    def getSystemInfo(self, *args, **kwargs): ...
    def getTimestamp(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_file_size(self, VirtualFileself) -> Any: ...
    @overload
    def get_file_size(self, VirtualFileself, istreamstream) -> Any: ...
    def get_file_system(self, VirtualFileself) -> Any: ...
    def get_filename(self, VirtualFileself) -> Any: ...
    def get_original_filename(self, VirtualFileself) -> Any: ...
    def get_system_info(self, constVirtualFileself, SubfileInfoinfo) -> Any: ...
    def get_timestamp(self, VirtualFileself) -> Any: ...
    def hasFile(self, *args, **kwargs): ...
    def has_file(self, VirtualFileself) -> Any: ...
    def isDirectory(self, *args, **kwargs): ...
    def isRegularFile(self, *args, **kwargs): ...
    def isWritable(self, *args, **kwargs): ...
    def is_directory(self, VirtualFileself) -> Any: ...
    def is_regular_file(self, VirtualFileself) -> Any: ...
    def is_writable(self, VirtualFileself) -> Any: ...
    def ls(self, VirtualFileself, ostreamout) -> Any: ...
    def lsAll(self, *args, **kwargs): ...
    def ls_all(self, VirtualFileself, ostreamout) -> Any: ...
    def openAppendFile(self, *args, **kwargs): ...
    def openReadAppendFile(self, *args, **kwargs): ...
    def openReadFile(self, *args, **kwargs): ...
    def openReadWriteFile(self, *args, **kwargs): ...
    def openWriteFile(self, *args, **kwargs): ...
    def open_append_file(self, constVirtualFileself) -> Any: ...
    def open_read_append_file(self, constVirtualFileself) -> Any: ...
    def open_read_file(self, VirtualFileself, boolauto_unwrap) -> Any: ...
    def open_read_write_file(self, constVirtualFileself, booltruncate) -> Any: ...
    def open_write_file(self, constVirtualFileself, boolauto_wrap, booltruncate) -> Any: ...
    def output(self, VirtualFileself, ostreamout) -> Any: ...
    def readFile(self, *args, **kwargs): ...
    def read_file(self, VirtualFileself, boolauto_unwrap) -> Any: ...
    def renameFile(self, *args, **kwargs): ...
    def rename_file(self, constVirtualFileself, VirtualFilenew_file) -> Any: ...
    def scanDirectory(self, *args, **kwargs): ...
    def scan_directory(self, VirtualFileself) -> Any: ...
    def wasReadSuccessful(self, *args, **kwargs): ...
    def was_read_successful(self, VirtualFileself) -> Any: ...
    def writeFile(self, *args, **kwargs): ...
    def write_file(self, constVirtualFileself, objectdata, boolauto_wrap) -> Any: ...

class VirtualFileComposite(VirtualFile):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class VirtualFileHTTP(VirtualFile):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class VirtualFileList(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getFile(self, *args, **kwargs): ...
    def getFiles(self, *args, **kwargs): ...
    def getNumFiles(self, *args, **kwargs): ...
    def get_file(self, VirtualFileListself, intn) -> Any: ...
    def get_files(self, *args, **kwargs): ...
    def get_num_files(self, VirtualFileListself) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __iadd__(self, other): ...
    def __len__(self) -> int: ...
    def __radd__(self, other): ...

class VirtualFileMount(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFileSystem(self, *args, **kwargs): ...
    def getMountFlags(self, *args, **kwargs): ...
    def getMountPoint(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_file_system(self, VirtualFileMountself) -> Any: ...
    def get_mount_flags(self, VirtualFileMountself) -> Any: ...
    def get_mount_point(self, VirtualFileMountself) -> Any: ...
    def output(self, VirtualFileMountself, ostreamout) -> Any: ...
    def write(self, VirtualFileMountself, ostreamout) -> Any: ...

class VirtualFileMountHTTP(VirtualFileMount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getHttpClient(self, *args, **kwargs): ...
    def getRoot(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_http_client(self, VirtualFileMountHTTPself) -> Any: ...
    def get_root(self, VirtualFileMountHTTPself) -> Any: ...
    @staticmethod
    def reloadVfsMountUrl(*args, **kwargs): ...
    @staticmethod
    def reload_vfs_mount_url() -> Any: ...

class VirtualFileMountMultifile(VirtualFileMount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMultifile(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_multifile(self, VirtualFileMountMultifileself) -> Any: ...

class VirtualFileMountRamdisk(VirtualFileMount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class VirtualFileMountSystem(VirtualFileMount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPhysicalFilename(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_physical_filename(self, VirtualFileMountSystemself) -> Any: ...

class VirtualFileMountZip(VirtualFileMount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getArchive(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_archive(self, VirtualFileMountZipself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...

class VirtualFileSimple(VirtualFile):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMount(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_mount(self, VirtualFileSimpleself) -> Any: ...
    def isImplicitPzFile(self, *args, **kwargs): ...
    def is_implicit_pz_file(self, VirtualFileSimpleself) -> Any: ...

class VirtualFileSystem(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    MFReadOnly: ClassVar[int] = ...
    MF_read_only: ClassVar[int] = ...
    mounts: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def chdir(self, constVirtualFileSystemself, constFilenamenew_directory) -> Any: ...
    @staticmethod
    def closeReadFile(*args, **kwargs): ...
    @staticmethod
    def closeReadWriteFile(*args, **kwargs): ...
    @staticmethod
    def closeWriteFile(*args, **kwargs): ...
    @staticmethod
    def close_read_file(istreamstream) -> Any: ...
    @staticmethod
    def close_read_write_file(iostreamstream) -> Any: ...
    @staticmethod
    def close_write_file(ostreamstream) -> Any: ...
    def copyFile(self, *args, **kwargs): ...
    def copy_file(self, constVirtualFileSystemself, constFilenameorig_filename, constFilenamenew_filename) -> Any: ...
    def createFile(self, *args, **kwargs): ...
    def create_file(self, constVirtualFileSystemself, constFilenamefilename) -> Any: ...
    def deleteFile(self, *args, **kwargs): ...
    def delete_file(self, constVirtualFileSystemself, constFilenamefilename) -> Any: ...
    def exists(self, VirtualFileSystemself, constFilenamefilename) -> Any: ...
    def findAllFiles(self, *args, **kwargs): ...
    def findFile(self, *args, **kwargs): ...
    def find_all_files(
        self, VirtualFileSystemself, constFilenamefilename, constDSearchPathsearchpath, Resultsresults
    ) -> Any: ...
    def find_file(
        self, VirtualFileSystemself, constFilenamefilename, constDSearchPathsearchpath, boolstatus_only
    ) -> Any: ...
    def getCwd(self, *args, **kwargs): ...
    def getFile(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getMount(self, *args, **kwargs): ...
    def getMounts(self, *args, **kwargs): ...
    def getNumMounts(self, *args, **kwargs): ...
    def get_cwd(self, VirtualFileSystemself) -> Any: ...
    def get_file(self, VirtualFileSystemself, constFilenamefilename, boolstatus_only) -> Any: ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    def get_mount(self, VirtualFileSystemself, intn) -> Any: ...
    def get_mounts(self, *args, **kwargs): ...
    def get_num_mounts(self, VirtualFileSystemself) -> Any: ...
    def isDirectory(self, *args, **kwargs): ...
    def isRegularFile(self, *args, **kwargs): ...
    def is_directory(self, VirtualFileSystemself, constFilenamefilename) -> Any: ...
    def is_regular_file(self, VirtualFileSystemself, constFilenamefilename) -> Any: ...
    def ls(self, VirtualFileSystemself, constFilenamefilename) -> Any: ...
    def lsAll(self, *args, **kwargs): ...
    def ls_all(self, VirtualFileSystemself, constFilenamefilename) -> Any: ...
    def makeDirectory(self, *args, **kwargs): ...
    def makeDirectoryFull(self, *args, **kwargs): ...
    def make_directory(self, constVirtualFileSystemself, constFilenamefilename) -> Any: ...
    def make_directory_full(self, constVirtualFileSystemself, constFilenamefilename) -> Any: ...
    @overload
    def mount(
        self,
        constVirtualFileSystemself,
        constFilenamephysical_filename,
        constFilenamemount_point,
        intflags,
        strpassword,
    ) -> Any: ...
    @overload
    def mount(self, constVirtualFileSystemself, VirtualFileMountmount, constFilenamemount_point, intflags) -> Any: ...
    @overload
    def mount(self, constVirtualFileSystemself, Multifilemultifile, constFilenamemount_point, intflags) -> Any: ...
    @overload
    def mount(self, constVirtualFileSystemself, ZipArchivearchive, constFilenamemount_point, intflags) -> Any: ...
    @overload
    def mount(self) -> Any: ...
    def mountLoop(self, *args, **kwargs): ...
    def mount_loop(
        self, constVirtualFileSystemself, constFilenamevirtual_filename, constFilenamemount_point, intflags, strpassword
    ) -> Any: ...
    def openAppendFile(self, *args, **kwargs): ...
    def openReadAppendFile(self, *args, **kwargs): ...
    def openReadFile(self, *args, **kwargs): ...
    def openReadWriteFile(self, *args, **kwargs): ...
    def openWriteFile(self, *args, **kwargs): ...
    def open_append_file(self, constVirtualFileSystemself, constFilenamefilename) -> Any: ...
    def open_read_append_file(self, constVirtualFileSystemself, constFilenamefilename) -> Any: ...
    def open_read_file(self, VirtualFileSystemself, constFilenamefilename, boolauto_unwrap) -> Any: ...
    def open_read_write_file(self, constVirtualFileSystemself, constFilenamefilename, booltruncate) -> Any: ...
    def open_write_file(
        self, constVirtualFileSystemself, constFilenamefilename, boolauto_wrap, booltruncate
    ) -> Any: ...
    def readFile(self, *args, **kwargs): ...
    def read_file(self, VirtualFileSystemself, constFilenamefilename, boolauto_unwrap) -> Any: ...
    def renameFile(self, *args, **kwargs): ...
    def rename_file(self, constVirtualFileSystemself, constFilenameorig_filename, constFilenamenew_filename) -> Any: ...
    def resolveFilename(self, *args, **kwargs): ...
    def resolve_filename(
        self, VirtualFileSystemself, Filenamefilename, constDSearchPathsearchpath, strdefault_extension
    ) -> Any: ...
    def scanDirectory(self, *args, **kwargs): ...
    def scan_directory(self, VirtualFileSystemself, constFilenamefilename) -> Any: ...
    @overload
    def unmount(self, constVirtualFileSystemself, VirtualFileMountmount) -> Any: ...
    @overload
    def unmount(self, constVirtualFileSystemself, Multifilemultifile) -> Any: ...
    @overload
    def unmount(self, constVirtualFileSystemself, ZipArchivearchive) -> Any: ...
    def unmountAll(self, *args, **kwargs): ...
    def unmountPoint(self, *args, **kwargs): ...
    def unmount_all(self, constVirtualFileSystemself) -> Any: ...
    def unmount_point(self, constVirtualFileSystemself, constFilenamemount_point) -> Any: ...
    def write(self, VirtualFileSystemself, ostreamout) -> Any: ...
    def writeFile(self, *args, **kwargs): ...
    def write_file(self, constVirtualFileSystemself, constFilenamefilename, objectdata, boolauto_wrap) -> Any: ...

class VirtualMouse(DataNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def pressButton(self, *args, **kwargs): ...
    def press_button(self, constVirtualMouseself, ButtonHandlebutton) -> Any: ...
    def releaseButton(self, *args, **kwargs): ...
    def release_button(self, constVirtualMouseself, ButtonHandlebutton) -> Any: ...
    def setMouseOn(self, *args, **kwargs): ...
    def setMousePos(self, *args, **kwargs): ...
    def setWindowSize(self, *args, **kwargs): ...
    def set_mouse_on(self, constVirtualMouseself, boolflag) -> Any: ...
    def set_mouse_pos(self, constVirtualMouseself, intx, inty) -> Any: ...
    def set_window_size(self, constVirtualMouseself, intwidth, intheight) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class VorbisAudio(MovieAudio):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def make(constFilenamename) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class VorbisAudioCursor(MovieAudioCursor):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class WavAudio(MovieAudio):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def make(constFilenamename) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class WavAudioCursor(MovieAudioCursor):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class WeakNodePath(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def assign(self, constWeakNodePathself, constNodePathnode_path) -> Any: ...
    @overload
    def assign(self, constWeakNodePathself, constWeakNodePathcopy) -> Any: ...
    def clear(self, constWeakNodePathself) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    @overload
    def compare_to(self, WeakNodePathself, constNodePathother) -> Any: ...
    @overload
    def compare_to(self, WeakNodePathself, constWeakNodePathother) -> Any: ...
    def getKey(self, *args, **kwargs): ...
    def getNodePath(self, *args, **kwargs): ...
    @overload
    def get_key(self, WeakNodePathself) -> Any: ...
    @overload
    def get_key(self) -> Any: ...
    def get_node_path(self, WeakNodePathself) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, WeakNodePathself) -> Any: ...
    def node(self, WeakNodePathself) -> Any: ...
    def output(self, WeakNodePathself, ostreamout) -> Any: ...
    def wasDeleted(self, *args, **kwargs): ...
    def was_deleted(self, WeakNodePathself) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class WeakPointerToVoid(PointerToVoid):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def isValidPointer(self, *args, **kwargs): ...
    def is_valid_pointer(self, WeakPointerToVoidself) -> Any: ...
    def wasDeleted(self, *args, **kwargs): ...
    def was_deleted(self, WeakPointerToVoidself) -> Any: ...

class WindowHandle(TypedReferenceCount):
    class OSHandle(TypedReferenceCount):
        DtoolClassDict: ClassVar[dict] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        @staticmethod
        def getClassType(*args, **kwargs): ...
        def getIntHandle(self, *args, **kwargs): ...
        @staticmethod
        def get_class_type() -> Any: ...
        def get_int_handle(self, OSHandleself) -> Any: ...
        def output(self, OSHandleself, ostreamout) -> Any: ...
        def __copy__(self): ...
        def __deepcopy__(self): ...

    DtoolClassDict: ClassVar[dict] = ...
    os_handle: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getIntHandle(self, *args, **kwargs): ...
    def getOsHandle(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_int_handle(self, WindowHandleself) -> Any: ...
    def get_os_handle(self, WindowHandleself) -> Any: ...
    def output(self, WindowHandleself, ostreamout) -> Any: ...
    def sendWindowsMessage(self, *args, **kwargs): ...
    def send_windows_message(self, constWindowHandleself, intmsg, intwparam, intlparam) -> Any: ...
    def setOsHandle(self, *args, **kwargs): ...
    def set_os_handle(self, constWindowHandleself, OSHandleos_handle) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class WindowProperties(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    MAbsolute: ClassVar[int] = ...
    MConfined: ClassVar[int] = ...
    MRelative: ClassVar[int] = ...
    M_absolute: ClassVar[int] = ...
    M_confined: ClassVar[int] = ...
    M_relative: ClassVar[int] = ...
    ZBottom: ClassVar[int] = ...
    ZNormal: ClassVar[int] = ...
    ZTop: ClassVar[int] = ...
    Z_bottom: ClassVar[int] = ...
    Z_normal: ClassVar[int] = ...
    Z_top: ClassVar[int] = ...
    config_properties: Incomplete
    cursor_filename: Incomplete
    cursor_hidden: Incomplete
    default: Incomplete
    fixed_size: Incomplete
    foreground: Incomplete
    fullscreen: Incomplete
    icon_filename: Incomplete
    maximized: Incomplete
    minimized: Incomplete
    mouse_mode: Incomplete
    open: Incomplete
    origin: Incomplete
    parent_window: Incomplete
    title: Incomplete
    undecorated: Incomplete
    z_order: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addProperties(self, *args, **kwargs): ...
    def add_properties(self, constWindowPropertiesself, constWindowPropertiesother) -> Any: ...
    def assign(self, constWindowPropertiesself, constWindowPropertiescopy) -> Any: ...
    def clear(self, constWindowPropertiesself) -> Any: ...
    def clearCursorFilename(self, *args, **kwargs): ...
    def clearCursorHidden(self, *args, **kwargs): ...
    @staticmethod
    def clearDefault(*args, **kwargs): ...
    def clearFixedSize(self, *args, **kwargs): ...
    def clearForeground(self, *args, **kwargs): ...
    def clearFullscreen(self, *args, **kwargs): ...
    def clearIconFilename(self, *args, **kwargs): ...
    def clearMaximized(self, *args, **kwargs): ...
    def clearMinimized(self, *args, **kwargs): ...
    def clearMouseMode(self, *args, **kwargs): ...
    def clearOpen(self, *args, **kwargs): ...
    def clearOrigin(self, *args, **kwargs): ...
    def clearParentWindow(self, *args, **kwargs): ...
    def clearRawMice(self, *args, **kwargs): ...
    def clearSize(self, *args, **kwargs): ...
    def clearTitle(self, *args, **kwargs): ...
    def clearUndecorated(self, *args, **kwargs): ...
    def clearZOrder(self, *args, **kwargs): ...
    def clear_cursor_filename(self, constWindowPropertiesself) -> Any: ...
    def clear_cursor_hidden(self, constWindowPropertiesself) -> Any: ...
    @staticmethod
    def clear_default() -> Any: ...
    def clear_fixed_size(self, constWindowPropertiesself) -> Any: ...
    def clear_foreground(self, constWindowPropertiesself) -> Any: ...
    def clear_fullscreen(self, constWindowPropertiesself) -> Any: ...
    def clear_icon_filename(self, constWindowPropertiesself) -> Any: ...
    def clear_maximized(self, constWindowPropertiesself) -> Any: ...
    def clear_minimized(self, constWindowPropertiesself) -> Any: ...
    def clear_mouse_mode(self, constWindowPropertiesself) -> Any: ...
    def clear_open(self, constWindowPropertiesself) -> Any: ...
    def clear_origin(self, constWindowPropertiesself) -> Any: ...
    def clear_parent_window(self, constWindowPropertiesself) -> Any: ...
    def clear_raw_mice(self, constWindowPropertiesself) -> Any: ...
    def clear_size(self, constWindowPropertiesself) -> Any: ...
    def clear_title(self, constWindowPropertiesself) -> Any: ...
    def clear_undecorated(self, constWindowPropertiesself) -> Any: ...
    def clear_z_order(self, constWindowPropertiesself) -> Any: ...
    @staticmethod
    def getConfigProperties(*args, **kwargs): ...
    def getCursorFilename(self, *args, **kwargs): ...
    def getCursorHidden(self, *args, **kwargs): ...
    @staticmethod
    def getDefault(*args, **kwargs): ...
    def getFixedSize(self, *args, **kwargs): ...
    def getForeground(self, *args, **kwargs): ...
    def getFullscreen(self, *args, **kwargs): ...
    def getIconFilename(self, *args, **kwargs): ...
    def getMaximized(self, *args, **kwargs): ...
    def getMinimized(self, *args, **kwargs): ...
    def getMouseMode(self, *args, **kwargs): ...
    def getOpen(self, *args, **kwargs): ...
    def getOrigin(self, *args, **kwargs): ...
    def getParentWindow(self, *args, **kwargs): ...
    def getRawMice(self, *args, **kwargs): ...
    def getSize(self, *args, **kwargs): ...
    def getTitle(self, *args, **kwargs): ...
    def getUndecorated(self, *args, **kwargs): ...
    def getXOrigin(self, *args, **kwargs) -> int: ...
    def getXSize(self, *args, **kwargs) -> int: ...
    def getYOrigin(self, *args, **kwargs) -> int: ...
    def getYSize(self, *args, **kwargs) -> int: ...
    def getZOrder(self, *args, **kwargs): ...
    @staticmethod
    def get_config_properties() -> Any: ...
    def get_cursor_filename(self, WindowPropertiesself) -> Any: ...
    def get_cursor_hidden(self, WindowPropertiesself) -> Any: ...
    @staticmethod
    def get_default() -> Any: ...
    def get_fixed_size(self, WindowPropertiesself) -> Any: ...
    def get_foreground(self, WindowPropertiesself) -> Any: ...
    def get_fullscreen(self, WindowPropertiesself) -> Any: ...
    def get_icon_filename(self, WindowPropertiesself) -> Any: ...
    def get_maximized(self, WindowPropertiesself) -> Any: ...
    def get_minimized(self, WindowPropertiesself) -> Any: ...
    def get_mouse_mode(self, WindowPropertiesself) -> Any: ...
    def get_open(self, WindowPropertiesself) -> Any: ...
    def get_origin(self, WindowPropertiesself) -> Any: ...
    def get_parent_window(self, WindowPropertiesself) -> Any: ...
    def get_raw_mice(self, WindowPropertiesself) -> Any: ...
    def get_size(self, WindowPropertiesself) -> Any: ...
    def get_title(self, WindowPropertiesself) -> Any: ...
    def get_undecorated(self, WindowPropertiesself) -> Any: ...
    def get_x_origin(self, WindowPropertiesself) -> Any: ...
    def get_x_size(self, WindowPropertiesself) -> Any: ...
    def get_y_origin(self, WindowPropertiesself) -> Any: ...
    def get_y_size(self, WindowPropertiesself) -> Any: ...
    def get_z_order(self, WindowPropertiesself) -> Any: ...
    def hasCursorFilename(self, *args, **kwargs): ...
    def hasCursorHidden(self, *args, **kwargs): ...
    def hasFixedSize(self, *args, **kwargs): ...
    def hasForeground(self, *args, **kwargs): ...
    def hasFullscreen(self, *args, **kwargs): ...
    def hasIconFilename(self, *args, **kwargs): ...
    def hasMaximized(self, *args, **kwargs): ...
    def hasMinimized(self, *args, **kwargs): ...
    def hasMouseMode(self, *args, **kwargs): ...
    def hasOpen(self, *args, **kwargs): ...
    def hasOrigin(self, *args, **kwargs): ...
    def hasParentWindow(self, *args, **kwargs): ...
    def hasRawMice(self, *args, **kwargs): ...
    def hasSize(self, *args, **kwargs): ...
    def hasTitle(self, *args, **kwargs): ...
    def hasUndecorated(self, *args, **kwargs): ...
    def hasZOrder(self, *args, **kwargs): ...
    def has_cursor_filename(self, WindowPropertiesself) -> Any: ...
    def has_cursor_hidden(self, WindowPropertiesself) -> Any: ...
    def has_fixed_size(self, WindowPropertiesself) -> Any: ...
    def has_foreground(self, WindowPropertiesself) -> Any: ...
    def has_fullscreen(self, WindowPropertiesself) -> Any: ...
    def has_icon_filename(self, WindowPropertiesself) -> Any: ...
    def has_maximized(self, WindowPropertiesself) -> Any: ...
    def has_minimized(self, WindowPropertiesself) -> Any: ...
    def has_mouse_mode(self, WindowPropertiesself) -> Any: ...
    def has_open(self, WindowPropertiesself) -> Any: ...
    def has_origin(self, WindowPropertiesself) -> Any: ...
    def has_parent_window(self, WindowPropertiesself) -> Any: ...
    def has_raw_mice(self, WindowPropertiesself) -> Any: ...
    def has_size(self, WindowPropertiesself) -> Any: ...
    def has_title(self, WindowPropertiesself) -> Any: ...
    def has_undecorated(self, WindowPropertiesself) -> Any: ...
    def has_z_order(self, WindowPropertiesself) -> Any: ...
    def isAnySpecified(self, *args, **kwargs): ...
    def is_any_specified(self, WindowPropertiesself) -> Any: ...
    def output(self, WindowPropertiesself, ostreamout) -> Any: ...
    def setCursorFilename(self, *args, **kwargs): ...
    def setCursorHidden(self, *args, **kwargs): ...
    @staticmethod
    def setDefault(*args, **kwargs): ...
    def setFixedSize(self, *args, **kwargs): ...
    def setForeground(self, *args, **kwargs): ...
    def setFullscreen(self, *args, **kwargs): ...
    def setIconFilename(self, *args, **kwargs): ...
    def setMaximized(self, *args, **kwargs): ...
    def setMinimized(self, *args, **kwargs): ...
    def setMouseMode(self, *args, **kwargs): ...
    def setOpen(self, *args, **kwargs): ...
    def setOrigin(self, *args, **kwargs): ...
    def setParentWindow(self, *args, **kwargs): ...
    def setRawMice(self, *args, **kwargs): ...
    def setSize(self, *args, **kwargs): ...
    def setTitle(self, *args, **kwargs): ...
    def setUndecorated(self, *args, **kwargs): ...
    def setZOrder(self, *args, **kwargs): ...
    def set_cursor_filename(self, constWindowPropertiesself, constFilenamecursor_filename) -> Any: ...
    def set_cursor_hidden(self, constWindowPropertiesself, boolcursor_hidden) -> Any: ...
    @staticmethod
    def set_default(constWindowPropertiesdefault_properties) -> Any: ...
    def set_fixed_size(self, constWindowPropertiesself, boolfixed_size) -> Any: ...
    def set_foreground(self, constWindowPropertiesself, boolforeground) -> Any: ...
    def set_fullscreen(self, constWindowPropertiesself, boolfullscreen) -> Any: ...
    def set_icon_filename(self, constWindowPropertiesself, constFilenameicon_filename) -> Any: ...
    def set_maximized(self, constWindowPropertiesself, boolmaximized) -> Any: ...
    def set_minimized(self, constWindowPropertiesself, boolminimized) -> Any: ...
    def set_mouse_mode(self, constWindowPropertiesself, intmode) -> Any: ...
    def set_open(self, constWindowPropertiesself, boolopen) -> Any: ...
    @overload
    def set_origin(self, constWindowPropertiesself, constLPoint2iorigin) -> Any: ...
    @overload
    def set_origin(self, constWindowPropertiesself, intx_origin, inty_origin) -> Any: ...
    @overload
    def set_parent_window(self, constWindowPropertiesself) -> Any: ...
    @overload
    def set_parent_window(self, constWindowPropertiesself, WindowHandleparent_window) -> Any: ...
    @overload
    def set_parent_window(self, constWindowPropertiesself, intparent) -> Any: ...
    @overload
    def set_parent_window(self) -> Any: ...
    def set_raw_mice(self, constWindowPropertiesself, boolraw_mice) -> Any: ...
    @overload
    def set_size(self, constWindowPropertiesself, constLVector2isize) -> Any: ...
    @overload
    def set_size(self, constWindowPropertiesself, intx_size, inty_size) -> Any: ...
    def set_title(self, constWindowPropertiesself, strtitle) -> Any: ...
    def set_undecorated(self, constWindowPropertiesself, boolundecorated) -> Any: ...
    def set_z_order(self, constWindowPropertiesself, intz_order) -> Any: ...
    @overload
    @classmethod
    def size(cls, constLVecBase2isize) -> Any: ...
    @overload
    @classmethod
    def size(cls, intx_size, inty_size) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class WorkingNodePath(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    node_path: Incomplete
    valid: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class WritableConfigurable(TypedWritable):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class Xel(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    b: Incomplete
    g: Incomplete
    r: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def output(self, pixelself, ostreamout) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...

class ZipArchive(ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addJarSignature(self, *args, **kwargs): ...
    def addSubfile(self, *args, **kwargs): ...
    @overload
    def add_jar_signature(
        self, constZipArchiveself, constFilenamecertificate, constFilenamepkey, strpassword, stralias
    ) -> Any: ...
    @overload
    def add_jar_signature(self) -> Any: ...
    @overload
    def add_subfile(self, constZipArchiveself, strsubfile_name, constFilenamefilename, intcompression_level) -> Any: ...
    @overload
    def add_subfile(self, constZipArchiveself, strsubfile_name, istreamsubfile_data, intcompression_level) -> Any: ...
    def close(self, constZipArchiveself) -> Any: ...
    @staticmethod
    def closeReadSubfile(*args, **kwargs): ...
    @staticmethod
    def close_read_subfile(istreamstream) -> Any: ...
    def compareSubfile(self, *args, **kwargs): ...
    def compare_subfile(self, constZipArchiveself, intindex, constFilenamefilename) -> Any: ...
    def extractSubfile(self, *args, **kwargs): ...
    def extractSubfileTo(self, *args, **kwargs): ...
    def extract_subfile(self, constZipArchiveself, intindex, constFilenamefilename) -> Any: ...
    def extract_subfile_to(self, constZipArchiveself, intindex, ostreamout) -> Any: ...
    def findSubfile(self, *args, **kwargs): ...
    def find_subfile(self, ZipArchiveself, strsubfile_name) -> Any: ...
    @overload
    def flush(self, constZipArchiveself) -> Any: ...
    @overload
    def flush(self) -> Any: ...
    @overload
    def flush(self) -> Any: ...
    def getComment(self, *args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getNumSubfiles(self, *args, **kwargs): ...
    def getRecordTimestamp(self, *args, **kwargs): ...
    def getSubfileInternalLength(self, *args, **kwargs): ...
    def getSubfileInternalStart(self, *args, **kwargs): ...
    def getSubfileLength(self, *args, **kwargs): ...
    def getSubfileName(self, *args, **kwargs): ...
    def getSubfileNames(self, *args, **kwargs): ...
    def getSubfileTimestamp(self, *args, **kwargs): ...
    def get_comment(self, ZipArchiveself) -> Any: ...
    def get_filename(self, ZipArchiveself) -> Any: ...
    @overload
    def get_num_subfiles(self, ZipArchiveself) -> Any: ...
    @overload
    def get_num_subfiles(self) -> Any: ...
    def get_record_timestamp(self, ZipArchiveself) -> Any: ...
    def get_subfile_internal_length(self, ZipArchiveself, intindex) -> Any: ...
    def get_subfile_internal_start(self, ZipArchiveself, intindex) -> Any: ...
    def get_subfile_length(self, ZipArchiveself, intindex) -> Any: ...
    def get_subfile_name(self, ZipArchiveself, intindex) -> Any: ...
    def get_subfile_names(self, *args, **kwargs): ...
    def get_subfile_timestamp(self, ZipArchiveself, intindex) -> Any: ...
    def hasDirectory(self, *args, **kwargs): ...
    def has_directory(self, ZipArchiveself, strsubfile_name) -> Any: ...
    def isReadValid(self, *args, **kwargs): ...
    def isSubfileCompressed(self, *args, **kwargs): ...
    def isSubfileEncrypted(self, *args, **kwargs): ...
    def isWriteValid(self, *args, **kwargs): ...
    def is_read_valid(self, ZipArchiveself) -> Any: ...
    def is_subfile_compressed(self, ZipArchiveself, intindex) -> Any: ...
    def is_subfile_encrypted(self, ZipArchiveself, intindex) -> Any: ...
    def is_write_valid(self, ZipArchiveself) -> Any: ...
    def ls(self, ZipArchiveself, ostreamout) -> Any: ...
    def needsRepack(self, *args, **kwargs): ...
    def needs_repack(self, ZipArchiveself) -> Any: ...
    def openRead(self, *args, **kwargs): ...
    def openReadSubfile(self, *args, **kwargs): ...
    def openReadWrite(self, *args, **kwargs): ...
    def openWrite(self, *args, **kwargs): ...
    @overload
    def open_read(self, constZipArchiveself, IStreamWrapperstream, boolowns_pointer) -> Any: ...
    @overload
    def open_read(self) -> Any: ...
    def open_read_subfile(self, constZipArchiveself, intindex) -> Any: ...
    @overload
    def open_read_write(self, constZipArchiveself, iostreamstream, boolowns_pointer) -> Any: ...
    @overload
    def open_read_write(self) -> Any: ...
    @overload
    def open_write(self, constZipArchiveself, ostreamstream, boolowns_pointer) -> Any: ...
    @overload
    def open_write(self) -> Any: ...
    def output(self, ZipArchiveself, ostreamout) -> Any: ...
    def readSubfile(self, *args, **kwargs): ...
    def read_subfile(self, constZipArchiveself, intindex) -> Any: ...
    def removeSubfile(self, *args, **kwargs): ...
    @overload
    def remove_subfile(self, constZipArchiveself, strsubfile_name) -> Any: ...
    @overload
    def remove_subfile(self, constZipArchiveself, intindex) -> Any: ...
    def repack(self, constZipArchiveself) -> Any: ...
    def setComment(self, *args, **kwargs): ...
    def setFilename(self, *args, **kwargs): ...
    def setRecordTimestamp(self, *args, **kwargs): ...
    def set_comment(self, constZipArchiveself, strcomment) -> Any: ...
    def set_filename(self, constZipArchiveself, constFilenamefilename) -> Any: ...
    def set_record_timestamp(self, constZipArchiveself, boolrecord_timestamp) -> Any: ...
    def updateSubfile(self, *args, **kwargs): ...
    def update_subfile(
        self, constZipArchiveself, strsubfile_name, constFilenamefilename, intcompression_level
    ) -> Any: ...
    def verify(self, constZipArchiveself) -> Any: ...

class basic_ios_char(ios_base):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bad(self, basic_iosself) -> Any: ...
    def clear(self, constbasic_iosself) -> Any: ...
    def eof(self, basic_iosself) -> Any: ...
    def fail(self, basic_iosself) -> Any: ...
    def good(self, basic_iosself) -> Any: ...

class fstream(iostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constfstreamself) -> Any: ...

class ifstream(istream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constifstreamself) -> Any: ...

class ios(ios_base):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bad(self, basic_iosself) -> Any: ...
    def clear(self, constbasic_iosself) -> Any: ...
    def eof(self, basic_iosself) -> Any: ...
    def fail(self, basic_iosself) -> Any: ...
    def good(self, basic_iosself) -> Any: ...

class ios_base(dtoolconfig.DTOOL_SUPER_BASE):
    Beg: ClassVar[int] = ...
    Cur: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    End: ClassVar[int] = ...
    beg: ClassVar[int] = ...
    cur: ClassVar[int] = ...
    end: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class iostream(istream, ostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def flush(self, constiostreamself) -> Any: ...
    def upcastToIstream(self, *args, **kwargs): ...
    def upcastToOstream(self, *args, **kwargs): ...
    def upcast_to_istream(self, constiostreamself) -> Any: ...
    def upcast_to_ostream(self, constiostreamself) -> Any: ...

class istream(basic_ios_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, constistreamself) -> Any: ...
    def read(self, constistreamself, intsize) -> Any: ...
    def read1(self, constistreamself, intsize) -> Any: ...
    def readall(self, constistreamself) -> Any: ...
    def readinto(self, constistreamself, objectb) -> Any: ...
    def readline(self, constistreamself, intsize) -> Any: ...
    def readlines(self, constistreamself, inthint) -> Any: ...
    @overload
    def seekg(self, constistreamself, longpos) -> Any: ...
    @overload
    def seekg(self, constistreamself, longoff, intdir) -> Any: ...
    def tellg(self, constistreamself) -> Any: ...
    def upcastToBasicIosChar(self, *args, **kwargs): ...
    def upcast_to_basic_ios_char(self, constistreamself) -> Any: ...
    def __iter__(self): ...

class ofstream(ostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constofstreamself) -> Any: ...

class ostream(basic_ios_char):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def flush(self, constostreamself) -> Any: ...
    def put(self, constostreamself, charc) -> Any: ...
    @overload
    def seekp(self, constostreamself, longpos) -> Any: ...
    @overload
    def seekp(self, constostreamself, longoff, intdir) -> Any: ...
    def tellp(self, constostreamself) -> Any: ...
    def upcastToBasicIosChar(self, *args, **kwargs): ...
    def upcast_to_basic_ios_char(self, constostreamself) -> Any: ...
    def write(self, constostreamself, objectb) -> Any: ...
    def writelines(self, constostreamself, objectlines) -> Any: ...

class pfstream(iostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constFileStreamself) -> Any: ...
    def open(self, constFileStreamself, strfilename, intmode) -> Any: ...

class pifstream(istream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constIFileStreamself) -> Any: ...
    def open(self, constIFileStreamself, strfilename, intmode) -> Any: ...

class pixel(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    b: Incomplete
    g: Incomplete
    r: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def output(self, pixelself, ostreamout) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...

class pofstream(ostream):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, constOFileStreamself) -> Any: ...
    def open(self, constOFileStreamself, strfilename, intmode) -> Any: ...

class xel(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    b: Incomplete
    g: Incomplete
    r: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def output(self, pixelself, ostreamout) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other): ...
    def __imul__(self, other): ...
    def __isub__(self, other): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __setitem__(self, index, object) -> None: ...
    def __sub__(self, other): ...

def Dtool_BorrowThisReference(*args, **kwargs): ...
def autoBind(*args, **kwargs): ...
def auto_bind(PandaNoderoot_node, AnimControlCollectioncontrols, inthierarchy_match_flags) -> Any: ...
def checkAdler(*args, **kwargs): ...
def checkCrc(*args, **kwargs): ...
def check_adler(Filenamename) -> Any: ...
def check_crc(Filenamename) -> Any: ...
def composeMatrix(*args, **kwargs): ...
@overload
def compose_matrix(LMatrix4dmat, buffercomponents) -> Any: ...
@overload
def compose_matrix(LMatrix4fmat, buffercomponents) -> Any: ...
@overload
def compose_matrix(LMatrix3dmat, constLVecBase3dscale, constLVecBase3dhpr) -> Any: ...
@overload
def compose_matrix(LMatrix3fmat, constLVecBase3fscale, constLVecBase3fhpr) -> Any: ...
@overload
def compose_matrix(LMatrix4dmat, buffercomponents, intcs) -> Any: ...
@overload
def compose_matrix(LMatrix4fmat, buffercomponents, intcs) -> Any: ...
@overload
def compose_matrix(LMatrix4dmat, constLVecBase3dscale, constLVecBase3dhpr, constLVecBase3dtranslate) -> Any: ...
@overload
def compose_matrix(LMatrix4fmat, constLVecBase3fscale, constLVecBase3fhpr, constLVecBase3ftranslate) -> Any: ...
@overload
def compose_matrix(LMatrix3dmat, constLVecBase3dscale, constLVecBase3dshear, constLVecBase3dhpr) -> Any: ...
@overload
def compose_matrix(LMatrix3fmat, constLVecBase3fscale, constLVecBase3fshear, constLVecBase3fhpr) -> Any: ...
@overload
def compose_matrix(LMatrix3dmat, constLVecBase3dscale, constLVecBase3dhpr, intcs) -> Any: ...
@overload
def compose_matrix(LMatrix3fmat, constLVecBase3fscale, constLVecBase3fhpr, intcs) -> Any: ...
@overload
def compose_matrix(
    LMatrix4dmat, constLVecBase3dscale, constLVecBase3dshear, constLVecBase3dhpr, constLVecBase3dtranslate, intcs
) -> Any: ...
@overload
def compose_matrix(
    LMatrix4fmat, constLVecBase3fscale, constLVecBase3fshear, constLVecBase3fhpr, constLVecBase3ftranslate, intcs
) -> Any: ...
@overload
def compose_matrix(LMatrix4dmat, constLVecBase3dscale, constLVecBase3dhpr, constLVecBase3dtranslate, intcs) -> Any: ...
@overload
def compose_matrix(LMatrix4fmat, constLVecBase3fscale, constLVecBase3fhpr, constLVecBase3ftranslate, intcs) -> Any: ...
@overload
def compose_matrix(LMatrix3dmat, constLVecBase3dscale, constLVecBase3dshear, constLVecBase3dhpr, intcs) -> Any: ...
@overload
def compose_matrix(LMatrix3fmat, constLVecBase3fscale, constLVecBase3fshear, constLVecBase3fhpr, intcs) -> Any: ...
def compressFile(*args, **kwargs): ...
def compressStream(*args, **kwargs): ...
def compressString(*args, **kwargs): ...
def compress_file(constFilenamesource, constFilenamedest, intcompression_level) -> Any: ...
def compress_stream(istreamsource, ostreamdest, intcompression_level) -> Any: ...
def compress_string(strsource, intcompression_level) -> Any: ...
def copyStream(*args, **kwargs): ...
def copy_stream(istreamsource, ostreamdest) -> Any: ...
def decodeSRGBFloat(*args, **kwargs): ...
def decodeSRGBUchar(*args, **kwargs): ...
@overload
def decode_sRGB_float(intval) -> Any: ...
@overload
def decode_sRGB_float(floatval) -> Any: ...
@overload
def decode_sRGB_uchar(intval) -> Any: ...
@overload
def decode_sRGB_uchar(floatval) -> Any: ...
def decomposeMatrix(*args, **kwargs): ...
def decomposeMatrixOldHpr(*args, **kwargs): ...
@overload
def decompose_matrix(constLMatrix4dmat, buffercomponents) -> Any: ...
@overload
def decompose_matrix(constLMatrix4fmat, buffercomponents) -> Any: ...
@overload
def decompose_matrix(constLMatrix3dmat, LVecBase3dscale, LVecBase3dhpr) -> Any: ...
@overload
def decompose_matrix(constLMatrix3fmat, LVecBase3fscale, LVecBase3fhpr) -> Any: ...
@overload
def decompose_matrix(constLMatrix4dmat, buffercomponents, intCS) -> Any: ...
@overload
def decompose_matrix(constLMatrix4fmat, buffercomponents, intCS) -> Any: ...
@overload
def decompose_matrix(constLMatrix4dmat, LVecBase3dscale, LVecBase3dhpr, LVecBase3dtranslate) -> Any: ...
@overload
def decompose_matrix(constLMatrix4fmat, LVecBase3fscale, LVecBase3fhpr, LVecBase3ftranslate) -> Any: ...
@overload
def decompose_matrix(constLMatrix3dmat, LVecBase3dscale, LVecBase3dshear, LVecBase3dhpr) -> Any: ...
@overload
def decompose_matrix(constLMatrix3fmat, LVecBase3fscale, LVecBase3fshear, LVecBase3fhpr) -> Any: ...
@overload
def decompose_matrix(constLMatrix3dmat, LVecBase3dscale, LVecBase3dhpr, intcs) -> Any: ...
@overload
def decompose_matrix(constLMatrix3fmat, LVecBase3fscale, LVecBase3fhpr, intcs) -> Any: ...
@overload
def decompose_matrix(
    constLMatrix4dmat, LVecBase3dscale, LVecBase3dshear, LVecBase3dhpr, LVecBase3dtranslate, intcs
) -> Any: ...
@overload
def decompose_matrix(
    constLMatrix4fmat, LVecBase3fscale, LVecBase3fshear, LVecBase3fhpr, LVecBase3ftranslate, intcs
) -> Any: ...
@overload
def decompose_matrix(constLMatrix4dmat, LVecBase3dscale, LVecBase3dhpr, LVecBase3dtranslate, intcs) -> Any: ...
@overload
def decompose_matrix(constLMatrix4fmat, LVecBase3fscale, LVecBase3fhpr, LVecBase3ftranslate, intcs) -> Any: ...
@overload
def decompose_matrix(constLMatrix3dmat, LVecBase3dscale, LVecBase3dshear, LVecBase3dhpr, intcs) -> Any: ...
@overload
def decompose_matrix(constLMatrix3fmat, LVecBase3fscale, LVecBase3fshear, LVecBase3fhpr, intcs) -> Any: ...
@overload
def decompose_matrix_old_hpr(constLMatrix3dmat, LVecBase3dscale, LVecBase3dshear, LVecBase3dhpr, intcs) -> Any: ...
@overload
def decompose_matrix_old_hpr(constLMatrix3fmat, LVecBase3fscale, LVecBase3fshear, LVecBase3fhpr, intcs) -> Any: ...
def decompressFile(*args, **kwargs): ...
def decompressStream(*args, **kwargs): ...
def decompressString(*args, **kwargs): ...
def decompress_file(constFilenamesource, constFilenamedest) -> Any: ...
def decompress_stream(istreamsource, ostreamdest) -> Any: ...
def decompress_string(strsource) -> Any: ...
def decryptFile(*args, **kwargs): ...
def decryptStream(*args, **kwargs): ...
def decryptString(*args, **kwargs): ...
def decrypt_file(constFilenamesource, constFilenamedest, strpassword) -> Any: ...
def decrypt_stream(istreamsource, ostreamdest, strpassword) -> Any: ...
def decrypt_string(bytessource, strpassword) -> Any: ...
def deg2Rad(*args, **kwargs): ...
@overload
def deg_2_rad(doublef) -> Any: ...
@overload
def deg_2_rad(floatf) -> Any: ...
def encodeSRGBFloat(*args, **kwargs): ...
def encodeSRGBUchar(*args, **kwargs): ...
@overload
def encode_sRGB_float(intval) -> Any: ...
@overload
def encode_sRGB_float(floatval) -> Any: ...
@overload
def encode_sRGB_uchar(intval) -> Any: ...
@overload
def encode_sRGB_uchar(floatval) -> Any: ...
def encryptFile(*args, **kwargs): ...
def encryptStream(*args, **kwargs): ...
def encryptString(*args, **kwargs): ...
def encrypt_file(
    constFilenamesource, constFilenamedest, strpassword, stralgorithm, intkey_length, intiteration_count
) -> Any: ...
def encrypt_stream(istreamsource, ostreamdest, strpassword, stralgorithm, intkey_length, intiteration_count) -> Any: ...
def encrypt_string(strsource, strpassword, stralgorithm, intkey_length, intiteration_count) -> Any: ...
def errorToText(*args, **kwargs): ...
def error_to_text(interr) -> Any: ...
def formatColorSpace(*args, **kwargs): ...
def formatCoordinateSystem(*args, **kwargs): ...
def format_color_space(intcs) -> Any: ...
def format_coordinate_system(intcs) -> Any: ...
def genericReadDatagram(*args, **kwargs): ...
def genericWriteDatagram(*args, **kwargs): ...
@overload
def generic_read_datagram(LMatrix4dresult, DatagramIteratorsource) -> Any: ...
@overload
def generic_read_datagram(LMatrix4fresult, DatagramIteratorsource) -> Any: ...
@overload
def generic_read_datagram(LMatrix3dresult, DatagramIteratorsource) -> Any: ...
@overload
def generic_read_datagram(LMatrix3fresult, DatagramIteratorsource) -> Any: ...
@overload
def generic_write_datagram(Datagramdest, constLMatrix4dvalue) -> Any: ...
@overload
def generic_write_datagram(Datagramdest, constLMatrix4fvalue) -> Any: ...
@overload
def generic_write_datagram(Datagramdest, constLMatrix3dvalue) -> Any: ...
@overload
def generic_write_datagram(Datagramdest, constLMatrix3fvalue) -> Any: ...
def getDefaultCoordinateSystem(*args, **kwargs): ...
def getModelPath(*args, **kwargs): ...
def getNetworkError(*args, **kwargs): ...
def getPluginPath(*args, **kwargs): ...
def getWriteError(*args, **kwargs): ...
def get_default_coordinate_system() -> Any: ...
def get_model_path() -> Any: ...
def get_network_error() -> Any: ...
def get_plugin_path() -> Any: ...
def get_write_error() -> Any: ...
def handleSocketError(*args, **kwargs): ...
def handle_socket_error() -> Any: ...
def hashPrcVariables(*args, **kwargs): ...
def hash_prc_variables(HashValhash) -> Any: ...
def headsUp(*args, **kwargs): ...
@overload
def heads_up(LQuaterniondquat, constLVector3dfwd) -> Any: ...
@overload
def heads_up(LQuaternionfquat, constLVector3ffwd) -> Any: ...
@overload
def heads_up(LMatrix4dmat, constLVector3dfwd) -> Any: ...
@overload
def heads_up(LMatrix4fmat, constLVector3ffwd) -> Any: ...
@overload
def heads_up(LMatrix3dmat, constLVector3dfwd) -> Any: ...
@overload
def heads_up(LMatrix3fmat, constLVector3ffwd) -> Any: ...
@overload
def heads_up(LQuaterniondquat, constLVector3dfwd, constLVector3dup, intcs) -> Any: ...
@overload
def heads_up(LQuaternionfquat, constLVector3ffwd, constLVector3fup, intcs) -> Any: ...
@overload
def heads_up(LMatrix4dmat, constLVector3dfwd, constLVector3dup, intcs) -> Any: ...
@overload
def heads_up(LMatrix4fmat, constLVector3ffwd, constLVector3fup, intcs) -> Any: ...
@overload
def heads_up(LMatrix3dmat, constLVector3dfwd, constLVector3dup, intcs) -> Any: ...
@overload
def heads_up(LMatrix3fmat, constLVector3ffwd, constLVector3fup, intcs) -> Any: ...
@overload
def heads_up(LQuaterniondquat, constLVector3dfwd, intcs) -> Any: ...
@overload
def heads_up(LQuaternionfquat, constLVector3ffwd, intcs) -> Any: ...
@overload
def heads_up(LMatrix4dmat, constLVector3dfwd, intcs) -> Any: ...
@overload
def heads_up(LMatrix4fmat, constLVector3ffwd, intcs) -> Any: ...
@overload
def heads_up(LMatrix3dmat, constLVector3dfwd, intcs) -> Any: ...
@overload
def heads_up(LMatrix3fmat, constLVector3ffwd, intcs) -> Any: ...
@overload
def invert(constLQuaternionda) -> Any: ...
@overload
def invert(constLQuaternionfa) -> Any: ...
@overload
def invert(constLMatrix4da) -> Any: ...
@overload
def invert(constLMatrix4fa) -> Any: ...
@overload
def invert(constLMatrix3da) -> Any: ...
@overload
def invert(constLMatrix3fa) -> Any: ...
def isRightHanded(*args, **kwargs): ...
def is_right_handed(intcs) -> Any: ...
def loadPrcFile(*args, **kwargs): ...
def loadPrcFileData(*args, **kwargs): ...
def load_prc_file(constFilenamefilename) -> Any: ...
def load_prc_file_data(strname, strdata) -> Any: ...
def lookAt(*args, **kwargs): ...
@overload
def look_at(LQuaterniondquat, constLVector3dfwd) -> Any: ...
@overload
def look_at(LQuaternionfquat, constLVector3ffwd) -> Any: ...
@overload
def look_at(LMatrix4dmat, constLVector3dfwd) -> Any: ...
@overload
def look_at(LMatrix4fmat, constLVector3ffwd) -> Any: ...
@overload
def look_at(LMatrix3dmat, constLVector3dfwd) -> Any: ...
@overload
def look_at(LMatrix3fmat, constLVector3ffwd) -> Any: ...
@overload
def look_at(LQuaterniondquat, constLVector3dfwd, constLVector3dup, intcs) -> Any: ...
@overload
def look_at(LQuaternionfquat, constLVector3ffwd, constLVector3fup, intcs) -> Any: ...
@overload
def look_at(LMatrix4dmat, constLVector3dfwd, constLVector3dup, intcs) -> Any: ...
@overload
def look_at(LMatrix4fmat, constLVector3ffwd, constLVector3fup, intcs) -> Any: ...
@overload
def look_at(LMatrix3dmat, constLVector3dfwd, constLVector3dup, intcs) -> Any: ...
@overload
def look_at(LMatrix3fmat, constLVector3ffwd, constLVector3fup, intcs) -> Any: ...
@overload
def look_at(LQuaterniondquat, constLVector3dfwd, intcs) -> Any: ...
@overload
def look_at(LQuaternionfquat, constLVector3ffwd, intcs) -> Any: ...
@overload
def look_at(LMatrix4dmat, constLVector3dfwd, intcs) -> Any: ...
@overload
def look_at(LMatrix4fmat, constLVector3ffwd, intcs) -> Any: ...
@overload
def look_at(LMatrix3dmat, constLVector3dfwd, intcs) -> Any: ...
@overload
def look_at(LMatrix3fmat, constLVector3ffwd, intcs) -> Any: ...
def oldToNewHpr(*args, **kwargs): ...
@overload
def old_to_new_hpr(constLVecBase3dold_hpr) -> Any: ...
@overload
def old_to_new_hpr(constLVecBase3fold_hpr) -> Any: ...
def parseColorSpaceString(*args, **kwargs): ...
def parseCoordinateSystemString(*args, **kwargs): ...
def parse_color_space_string(strstr) -> Any: ...
def parse_coordinate_system_string(strstr) -> Any: ...
def passwordHash(*args, **kwargs): ...
def password_hash(strpassword, strsalt, intiters, intkeylen) -> Any: ...
def pyDecodeNodePathFromBamStream(*args, **kwargs): ...
def pyDecodeNodePathFromBamStreamPersist(*args, **kwargs): ...
def pyDecodeTypedWritableFromBamStream(*args, **kwargs): ...
def pyDecodeTypedWritableFromBamStreamPersist(*args, **kwargs): ...
def py_decode_NodePath_from_bam_stream(bytesdata) -> Any: ...
def py_decode_NodePath_from_bam_stream_persist(objectunpickler, bytesdata) -> Any: ...
def py_decode_TypedWritable_from_bam_stream(objectthis_class, bytesdata) -> Any: ...
def py_decode_TypedWritable_from_bam_stream_persist(objectunpickler, objectthis_class, bytesdata) -> Any: ...
def rad2Deg(*args, **kwargs): ...
@overload
def rad_2_deg(doublef) -> Any: ...
@overload
def rad_2_deg(floatf) -> Any: ...
def rotateTo(*args, **kwargs): ...
@overload
def rotate_to(LMatrix4dmat, constLVector3da, constLVector3db) -> Any: ...
@overload
def rotate_to(LMatrix4fmat, constLVector3fa, constLVector3fb) -> Any: ...
@overload
def rotate_to(LMatrix3dmat, constLVector3da, constLVector3db) -> Any: ...
@overload
def rotate_to(LMatrix3fmat, constLVector3fa, constLVector3fb) -> Any: ...
@overload
def transpose(constLMatrix4da) -> Any: ...
@overload
def transpose(constLMatrix4fa) -> Any: ...
@overload
def transpose(constLMatrix3da) -> Any: ...
@overload
def transpose(constLMatrix3fa) -> Any: ...
def unloadPrcFile(*args, **kwargs): ...
def unload_prc_file(ConfigPagepage) -> Any: ...
