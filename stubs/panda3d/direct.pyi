import dtoolconfig
import panda3d.core
from _typeshed import Incomplete
from typing import Any, ClassVar, overload

Dtool_PyNativeInterface: int
PTArray: int
PTBlob: int
PTClass: int
PTDouble: int
PTField: int
PTInt: int
PTInt64: int
PTInvalid: int
PTString: int
PTSwitch: int
PTUint: int
PTUint64: int
PT_array: int
PT_blob: int
PT_class: int
PT_double: int
PT_field: int
PT_int: int
PT_int64: int
PT_invalid: int
PT_string: int
PT_switch: int
PT_uint: int
PT_uint64: int
STBlob: int
STBlob32: int
STChar: int
STFloat64: int
STInt16: int
STInt16array: int
STInt32: int
STInt32array: int
STInt64: int
STInt8: int
STInt8array: int
STInvalid: int
STString: int
STUint16: int
STUint16array: int
STUint32: int
STUint32array: int
STUint32uint8array: int
STUint64: int
STUint8: int
STUint8array: int
ST_blob: int
ST_blob32: int
ST_char: int
ST_float64: int
ST_int16: int
ST_int16array: int
ST_int32: int
ST_int32array: int
ST_int64: int
ST_int8: int
ST_int8array: int
ST_invalid: int
ST_string: int
ST_uint16: int
ST_uint16array: int
ST_uint32: int
ST_uint32array: int
ST_uint32uint8array: int
ST_uint64: int
ST_uint8: int
ST_uint8array: int

class CConnectionRepository(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def abandonMessageBundles(self, *args, **kwargs): ...
    def abandon_message_bundles(self, constCConnectionRepositoryself) -> Any: ...
    def bundleMsg(self, *args, **kwargs): ...
    def bundle_msg(self, constCConnectionRepositoryself, constDatagramdg) -> Any: ...
    def checkDatagram(self, *args, **kwargs): ...
    def check_datagram(self, constCConnectionRepositoryself) -> Any: ...
    def connectNative(self, *args, **kwargs): ...
    def connect_native(self, constCConnectionRepositoryself, constURLSpecurl) -> Any: ...
    def considerFlush(self, *args, **kwargs): ...
    def consider_flush(self, constCConnectionRepositoryself) -> Any: ...
    def disconnect(self, constCConnectionRepositoryself) -> Any: ...
    def flush(self, constCConnectionRepositoryself) -> Any: ...
    def getBdc(self, *args, **kwargs): ...
    def getClientDatagram(self, *args, **kwargs): ...
    def getCw(self, *args, **kwargs): ...
    def getDatagram(self, *args, **kwargs): ...
    def getDatagramIterator(self, *args, **kwargs): ...
    def getDcFile(self, *args, **kwargs): ...
    def getHandleCUpdates(self, *args, **kwargs): ...
    def getHandleDatagramsInternally(self, *args, **kwargs): ...
    def getInQuietZone(self, *args, **kwargs): ...
    def getMsgChannel(self, *args, **kwargs): ...
    def getMsgChannelCount(self, *args, **kwargs): ...
    def getMsgSender(self, *args, **kwargs): ...
    def getMsgType(self, *args, **kwargs): ...
    @staticmethod
    def getOverflowEventName(*args, **kwargs): ...
    def getQcm(self, *args, **kwargs): ...
    def getQcr(self, *args, **kwargs): ...
    def getSimulatedDisconnect(self, *args, **kwargs): ...
    def getStream(self, *args, **kwargs): ...
    def getTcpHeaderSize(self, *args, **kwargs): ...
    def getTimeWarning(self, *args, **kwargs): ...
    def getVerbose(self, *args, **kwargs): ...
    def getWantMessageBundling(self, *args, **kwargs): ...
    def get_bdc(self, constCConnectionRepositoryself) -> Any: ...
    def get_client_datagram(self, CConnectionRepositoryself) -> Any: ...
    def get_cw(self, constCConnectionRepositoryself) -> Any: ...
    def get_datagram(self, constCConnectionRepositoryself, Datagramdg) -> Any: ...
    def get_datagram_iterator(self, constCConnectionRepositoryself, DatagramIteratordi) -> Any: ...
    def get_dc_file(self, constCConnectionRepositoryself) -> Any: ...
    def get_handle_c_updates(self, CConnectionRepositoryself) -> Any: ...
    def get_handle_datagrams_internally(self, CConnectionRepositoryself) -> Any: ...
    def get_in_quiet_zone(self, CConnectionRepositoryself) -> Any: ...
    def get_msg_channel(self, CConnectionRepositoryself, intoffset) -> Any: ...
    def get_msg_channel_count(self, CConnectionRepositoryself) -> Any: ...
    def get_msg_sender(self, CConnectionRepositoryself) -> Any: ...
    def get_msg_type(self, CConnectionRepositoryself) -> Any: ...
    @staticmethod
    def get_overflow_event_name() -> Any: ...
    def get_qcm(self, constCConnectionRepositoryself) -> Any: ...
    def get_qcr(self, constCConnectionRepositoryself) -> Any: ...
    def get_simulated_disconnect(self, CConnectionRepositoryself) -> Any: ...
    def get_stream(self, constCConnectionRepositoryself) -> Any: ...
    def get_tcp_header_size(self, CConnectionRepositoryself) -> Any: ...
    def get_time_warning(self, CConnectionRepositoryself) -> Any: ...
    def get_verbose(self, CConnectionRepositoryself) -> Any: ...
    def get_want_message_bundling(self, CConnectionRepositoryself) -> Any: ...
    def hasOwnerView(self, *args, **kwargs): ...
    def has_owner_view(self, CConnectionRepositoryself) -> Any: ...
    def isBundlingMessages(self, *args, **kwargs): ...
    def isConnected(self, *args, **kwargs): ...
    def is_bundling_messages(self, CConnectionRepositoryself) -> Any: ...
    def is_connected(self, constCConnectionRepositoryself) -> Any: ...
    def sendDatagram(self, *args, **kwargs): ...
    def sendMessageBundle(self, *args, **kwargs): ...
    def send_datagram(self, constCConnectionRepositoryself, constDatagramdg) -> Any: ...
    def send_message_bundle(self, constCConnectionRepositoryself, intchannel, intsender_channel) -> Any: ...
    def setClientDatagram(self, *args, **kwargs): ...
    def setConnectionHttp(self, *args, **kwargs): ...
    def setHandleCUpdates(self, *args, **kwargs): ...
    def setHandleDatagramsInternally(self, *args, **kwargs): ...
    def setInQuietZone(self, *args, **kwargs): ...
    def setPythonRepository(self, *args, **kwargs): ...
    def setSimulatedDisconnect(self, *args, **kwargs): ...
    def setTcpHeaderSize(self, *args, **kwargs): ...
    def setTimeWarning(self, *args, **kwargs): ...
    def setVerbose(self, *args, **kwargs): ...
    def setWantMessageBundling(self, *args, **kwargs): ...
    def set_client_datagram(self, constCConnectionRepositoryself, boolclient_datagram) -> Any: ...
    def set_connection_http(self, constCConnectionRepositoryself, HTTPChannelchannel) -> Any: ...
    def set_handle_c_updates(self, constCConnectionRepositoryself, boolhandle_c_updates) -> Any: ...
    def set_handle_datagrams_internally(self, constCConnectionRepositoryself, boolhandle_datagrams_internally) -> Any: ...
    def set_in_quiet_zone(self, constCConnectionRepositoryself, boolflag) -> Any: ...
    def set_python_repository(self, constCConnectionRepositoryself, objectpython_repository) -> Any: ...
    def set_simulated_disconnect(self, constCConnectionRepositoryself, boolsimulated_disconnect) -> Any: ...
    def set_tcp_header_size(self, constCConnectionRepositoryself, inttcp_header_size) -> Any: ...
    def set_time_warning(self, constCConnectionRepositoryself, floattime_warning) -> Any: ...
    def set_verbose(self, constCConnectionRepositoryself, boolverbose) -> Any: ...
    def set_want_message_bundling(self, constCConnectionRepositoryself, boolflag) -> Any: ...
    def shutdown(self, constCConnectionRepositoryself) -> Any: ...
    def startMessageBundle(self, *args, **kwargs): ...
    def start_message_bundle(self, constCConnectionRepositoryself) -> Any: ...
    def toggleVerbose(self, *args, **kwargs): ...
    def toggle_verbose(self, constCConnectionRepositoryself) -> Any: ...
    def tryConnectNet(self, *args, **kwargs): ...
    def try_connect_net(self, constCConnectionRepositoryself, constURLSpecurl) -> Any: ...

class CConstrainHprInterval(CConstraintInterval):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getTarget(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_node(self, CConstrainHprIntervalself) -> Any: ...
    def get_target(self, CConstrainHprIntervalself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CConstrainPosHprInterval(CConstraintInterval):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getTarget(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_node(self, CConstrainPosHprIntervalself) -> Any: ...
    def get_target(self, CConstrainPosHprIntervalself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CConstrainPosInterval(CConstraintInterval):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getTarget(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_node(self, CConstrainPosIntervalself) -> Any: ...
    def get_target(self, CConstrainPosIntervalself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CConstrainTransformInterval(CConstraintInterval):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getTarget(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_node(self, CConstrainTransformIntervalself) -> Any: ...
    def get_target(self, CConstrainTransformIntervalself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CConstraintInterval(CInterval):
    DtoolClassDict: ClassVar[dict] = ...
    bogus_variable: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CDistributedSmoothNodeBase(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def broadcastPosHprFull(self, *args, **kwargs): ...
    def broadcastPosHprXy(self, *args, **kwargs): ...
    def broadcastPosHprXyh(self, *args, **kwargs): ...
    def broadcast_pos_hpr_full(self, constCDistributedSmoothNodeBaseself) -> Any: ...
    def broadcast_pos_hpr_xy(self, constCDistributedSmoothNodeBaseself) -> Any: ...
    def broadcast_pos_hpr_xyh(self, constCDistributedSmoothNodeBaseself) -> Any: ...
    def initialize(self, constCDistributedSmoothNodeBaseself, constNodePathnode_path, DCClassdclass, longdo_id) -> Any: ...
    def printCurrL(self, *args, **kwargs): ...
    def print_curr_l(self, constCDistributedSmoothNodeBaseself) -> Any: ...
    def sendEverything(self, *args, **kwargs): ...
    def send_everything(self, constCDistributedSmoothNodeBaseself) -> Any: ...
    def setClockDelta(self, *args, **kwargs): ...
    def setCurrL(self, *args, **kwargs): ...
    def setRepository(self, *args, **kwargs): ...
    def set_clock_delta(self, constCDistributedSmoothNodeBaseself, objectclock_delta) -> Any: ...
    def set_curr_l(self, constCDistributedSmoothNodeBaseself, longl) -> Any: ...
    def set_repository(self, constCDistributedSmoothNodeBaseself, CConnectionRepositoryrepository, boolis_ai, longai_id) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CInterval(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    ETFinalize: ClassVar[int] = ...
    ETInitialize: ClassVar[int] = ...
    ETInstant: ClassVar[int] = ...
    ETInterrupt: ClassVar[int] = ...
    ETReverseFinalize: ClassVar[int] = ...
    ETReverseInitialize: ClassVar[int] = ...
    ETReverseInstant: ClassVar[int] = ...
    ETStep: ClassVar[int] = ...
    ET_finalize: ClassVar[int] = ...
    ET_initialize: ClassVar[int] = ...
    ET_instant: ClassVar[int] = ...
    ET_interrupt: ClassVar[int] = ...
    ET_reverse_finalize: ClassVar[int] = ...
    ET_reverse_initialize: ClassVar[int] = ...
    ET_reverse_instant: ClassVar[int] = ...
    ET_step: ClassVar[int] = ...
    SFinal: ClassVar[int] = ...
    SInitial: ClassVar[int] = ...
    SPaused: ClassVar[int] = ...
    SStarted: ClassVar[int] = ...
    S_final: ClassVar[int] = ...
    S_initial: ClassVar[int] = ...
    S_paused: ClassVar[int] = ...
    S_started: ClassVar[int] = ...
    auto_finish: Incomplete
    auto_pause: Incomplete
    done_event: Incomplete
    duration: Incomplete
    manager: Incomplete
    name: Incomplete
    open_ended: Incomplete
    play_rate: Incomplete
    playing: Incomplete
    state: Incomplete
    stopped: Incomplete
    t: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearToInitial(self, *args, **kwargs): ...
    def clear_to_initial(self, constCIntervalself) -> Any: ...
    def finish(self, constCIntervalself) -> Any: ...
    def getAutoFinish(self, *args, **kwargs): ...
    def getAutoPause(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDoneEvent(self, *args, **kwargs): ...
    def getDuration(self, *args, **kwargs): ...
    def getManager(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getOpenEnded(self, *args, **kwargs): ...
    def getPlayRate(self, *args, **kwargs): ...
    def getState(self, *args, **kwargs): ...
    def getT(self, *args, **kwargs): ...
    def getWantsTCallback(self, *args, **kwargs): ...
    def get_auto_finish(self, CIntervalself) -> Any: ...
    def get_auto_pause(self, CIntervalself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_done_event(self, CIntervalself) -> Any: ...
    def get_duration(self, CIntervalself) -> Any: ...
    def get_manager(self, CIntervalself) -> Any: ...
    def get_name(self, CIntervalself) -> Any: ...
    def get_open_ended(self, CIntervalself) -> Any: ...
    def get_play_rate(self, CIntervalself) -> Any: ...
    def get_state(self, CIntervalself) -> Any: ...
    def get_t(self, CIntervalself) -> Any: ...
    def get_wants_t_callback(self, CIntervalself) -> Any: ...
    def isPlaying(self, *args, **kwargs): ...
    def isStopped(self, *args, **kwargs): ...
    def is_playing(self, CIntervalself) -> Any: ...
    def is_stopped(self, CIntervalself) -> Any: ...
    def loop(self, constCIntervalself, doublestart_t, doubleend_t, doubleplay_rate) -> Any: ...
    def output(self, CIntervalself, ostreamout) -> Any: ...
    def pause(self, constCIntervalself) -> Any: ...
    def privDoEvent(self, *args, **kwargs): ...
    def privFinalize(self, *args, **kwargs): ...
    def privInitialize(self, *args, **kwargs): ...
    def privInstant(self, *args, **kwargs): ...
    def privInterrupt(self, *args, **kwargs): ...
    def privReverseFinalize(self, *args, **kwargs): ...
    def privReverseInitialize(self, *args, **kwargs): ...
    def privReverseInstant(self, *args, **kwargs): ...
    def privStep(self, *args, **kwargs): ...
    def priv_do_event(self, constCIntervalself, doublet, intevent) -> Any: ...
    def priv_finalize(self, constCIntervalself) -> Any: ...
    def priv_initialize(self, constCIntervalself, doublet) -> Any: ...
    def priv_instant(self, constCIntervalself) -> Any: ...
    def priv_interrupt(self, constCIntervalself) -> Any: ...
    def priv_reverse_finalize(self, constCIntervalself) -> Any: ...
    def priv_reverse_initialize(self, constCIntervalself, doublet) -> Any: ...
    def priv_reverse_instant(self, constCIntervalself) -> Any: ...
    def priv_step(self, constCIntervalself, doublet) -> Any: ...
    @overload
    def resume(self, constCIntervalself) -> Any: ...
    @overload
    def resume(self, constCIntervalself, doublestart_t) -> Any: ...
    def resumeUntil(self, *args, **kwargs): ...
    def resume_until(self, constCIntervalself, doubleend_t) -> Any: ...
    def setAutoFinish(self, *args, **kwargs): ...
    def setAutoPause(self, *args, **kwargs): ...
    def setDoneEvent(self, *args, **kwargs): ...
    def setManager(self, *args, **kwargs): ...
    def setPlayRate(self, *args, **kwargs): ...
    def setT(self, *args, **kwargs): ...
    def setWantsTCallback(self, *args, **kwargs): ...
    def set_auto_finish(self, constCIntervalself, boolauto_finish) -> Any: ...
    def set_auto_pause(self, constCIntervalself, boolauto_pause) -> Any: ...
    def set_done_event(self, constCIntervalself, strevent) -> Any: ...
    def set_manager(self, constCIntervalself, CIntervalManagermanager) -> Any: ...
    def set_play_rate(self, constCIntervalself, doubleplay_rate) -> Any: ...
    def set_t(self, constCIntervalself, doublet) -> Any: ...
    def set_wants_t_callback(self, constCIntervalself, boolwants_t_callback) -> Any: ...
    def setupPlay(self, *args, **kwargs): ...
    def setupResume(self, *args, **kwargs): ...
    def setupResumeUntil(self, *args, **kwargs): ...
    def setup_play(self, constCIntervalself, doublestart_time, doubleend_time, doubleplay_rate, booldo_loop) -> Any: ...
    def setup_resume(self, constCIntervalself) -> Any: ...
    def setup_resume_until(self, constCIntervalself, doubleend_t) -> Any: ...
    def start(self, constCIntervalself, doublestart_t, doubleend_t, doubleplay_rate) -> Any: ...
    def stepPlay(self, *args, **kwargs): ...
    def step_play(self, constCIntervalself) -> Any: ...
    def write(self, CIntervalself, ostreamout, intindent_level) -> Any: ...
    def __await__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CIntervalManager(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addCInterval(self, *args, **kwargs): ...
    def add_c_interval(self, constCIntervalManagerself, CIntervalinterval, boolexternal) -> Any: ...
    def findCInterval(self, *args, **kwargs): ...
    def find_c_interval(self, CIntervalManagerself, strname) -> Any: ...
    def getCInterval(self, *args, **kwargs): ...
    def getEventQueue(self, *args, **kwargs): ...
    @staticmethod
    def getGlobalPtr(*args, **kwargs): ...
    def getMaxIndex(self, *args, **kwargs): ...
    def getNextEvent(self, *args, **kwargs): ...
    def getNextRemoval(self, *args, **kwargs): ...
    def getNumIntervals(self, *args, **kwargs): ...
    def get_c_interval(self, CIntervalManagerself, intindex) -> Any: ...
    def get_event_queue(self, CIntervalManagerself) -> Any: ...
    @staticmethod
    def get_global_ptr() -> Any: ...
    @overload
    def get_max_index(self, CIntervalManagerself) -> Any: ...
    @overload
    def get_max_index(self) -> Any: ...
    def get_next_event(self, constCIntervalManagerself) -> Any: ...
    @overload
    def get_next_removal(self, constCIntervalManagerself) -> Any: ...
    @overload
    def get_next_removal(self) -> Any: ...
    def get_num_intervals(self, CIntervalManagerself) -> Any: ...
    def interrupt(self, constCIntervalManagerself) -> Any: ...
    def output(self, CIntervalManagerself, ostreamout) -> Any: ...
    def removeCInterval(self, *args, **kwargs): ...
    def remove_c_interval(self, constCIntervalManagerself, intindex) -> Any: ...
    def setEventQueue(self, *args, **kwargs): ...
    def set_event_queue(self, constCIntervalManagerself, EventQueueevent_queue) -> Any: ...
    @overload
    def step(self, constCIntervalManagerself) -> Any: ...
    @overload
    def step(self) -> Any: ...
    def write(self, CIntervalManagerself, ostreamout) -> Any: ...

class CLerpAnimEffectInterval(CLerpInterval):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addControl(self, *args, **kwargs): ...
    def add_control(self, constCLerpAnimEffectIntervalself, AnimControlcontrol, strname, floatbegin_effect, floatend_effect) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CLerpInterval(CInterval):
    BTEaseIn: ClassVar[int] = ...
    BTEaseInOut: ClassVar[int] = ...
    BTEaseOut: ClassVar[int] = ...
    BTInvalid: ClassVar[int] = ...
    BTNoBlend: ClassVar[int] = ...
    BT_ease_in: ClassVar[int] = ...
    BT_ease_in_out: ClassVar[int] = ...
    BT_ease_out: ClassVar[int] = ...
    BT_invalid: ClassVar[int] = ...
    BT_no_blend: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getBlendType(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_blend_type(self, CLerpIntervalself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def stringBlendType(*args, **kwargs): ...
    @staticmethod
    def string_blend_type(strblend_type) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CLerpNodePathInterval(CLerpInterval):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def getOther(self, *args, **kwargs): ...
    def getOverride(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_node(self, CLerpNodePathIntervalself) -> Any: ...
    def get_other(self, CLerpNodePathIntervalself) -> Any: ...
    def get_override(self, CLerpNodePathIntervalself) -> Any: ...
    def setEndColor(self, *args, **kwargs): ...
    def setEndColorScale(self, *args, **kwargs): ...
    def setEndHpr(self, *args, **kwargs): ...
    def setEndPos(self, *args, **kwargs): ...
    def setEndQuat(self, *args, **kwargs): ...
    def setEndScale(self, *args, **kwargs): ...
    def setEndShear(self, *args, **kwargs): ...
    def setEndTexOffset(self, *args, **kwargs): ...
    def setEndTexRotate(self, *args, **kwargs): ...
    def setEndTexScale(self, *args, **kwargs): ...
    def setOverride(self, *args, **kwargs): ...
    def setStartColor(self, *args, **kwargs): ...
    def setStartColorScale(self, *args, **kwargs): ...
    def setStartHpr(self, *args, **kwargs): ...
    def setStartPos(self, *args, **kwargs): ...
    def setStartQuat(self, *args, **kwargs): ...
    def setStartScale(self, *args, **kwargs): ...
    def setStartShear(self, *args, **kwargs): ...
    def setStartTexOffset(self, *args, **kwargs): ...
    def setStartTexRotate(self, *args, **kwargs): ...
    def setStartTexScale(self, *args, **kwargs): ...
    def setTextureStage(self, *args, **kwargs): ...
    def set_end_color(self, constCLerpNodePathIntervalself, constLVecBase4fcolor) -> Any: ...
    def set_end_color_scale(self, constCLerpNodePathIntervalself, constLVecBase4fcolor_scale) -> Any: ...
    @overload
    def set_end_hpr(self, constCLerpNodePathIntervalself, constLQuaternionfquat) -> Any: ...
    @overload
    def set_end_hpr(self, constCLerpNodePathIntervalself, constLVecBase3fhpr) -> Any: ...
    @overload
    def set_end_hpr(self) -> Any: ...
    def set_end_pos(self, constCLerpNodePathIntervalself, constLVecBase3fpos) -> Any: ...
    @overload
    def set_end_quat(self, constCLerpNodePathIntervalself, constLQuaternionfquat) -> Any: ...
    @overload
    def set_end_quat(self, constCLerpNodePathIntervalself, constLVecBase3fhpr) -> Any: ...
    @overload
    def set_end_quat(self) -> Any: ...
    @overload
    def set_end_scale(self, constCLerpNodePathIntervalself, constLVecBase3fscale) -> Any: ...
    @overload
    def set_end_scale(self, constCLerpNodePathIntervalself, floatscale) -> Any: ...
    def set_end_shear(self, constCLerpNodePathIntervalself, constLVecBase3fshear) -> Any: ...
    def set_end_tex_offset(self, constCLerpNodePathIntervalself, constLVecBase2ftex_offset) -> Any: ...
    def set_end_tex_rotate(self, constCLerpNodePathIntervalself, floattex_rotate) -> Any: ...
    def set_end_tex_scale(self, constCLerpNodePathIntervalself, constLVecBase2ftex_scale) -> Any: ...
    def set_override(self, constCLerpNodePathIntervalself, intoverride) -> Any: ...
    def set_start_color(self, constCLerpNodePathIntervalself, constLVecBase4fcolor) -> Any: ...
    def set_start_color_scale(self, constCLerpNodePathIntervalself, constLVecBase4fcolor_scale) -> Any: ...
    def set_start_hpr(self, constCLerpNodePathIntervalself, constLVecBase3fhpr) -> Any: ...
    def set_start_pos(self, constCLerpNodePathIntervalself, constLVecBase3fpos) -> Any: ...
    def set_start_quat(self, constCLerpNodePathIntervalself, constLQuaternionfquat) -> Any: ...
    @overload
    def set_start_scale(self, constCLerpNodePathIntervalself, constLVecBase3fscale) -> Any: ...
    @overload
    def set_start_scale(self, constCLerpNodePathIntervalself, floatscale) -> Any: ...
    def set_start_shear(self, constCLerpNodePathIntervalself, constLVecBase3fshear) -> Any: ...
    def set_start_tex_offset(self, constCLerpNodePathIntervalself, constLVecBase2ftex_offset) -> Any: ...
    def set_start_tex_rotate(self, constCLerpNodePathIntervalself, floattex_rotate) -> Any: ...
    def set_start_tex_scale(self, constCLerpNodePathIntervalself, constLVecBase2ftex_scale) -> Any: ...
    def set_texture_stage(self, constCLerpNodePathIntervalself, TextureStagestage) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CMetaInterval(CInterval):
    DTCInterval: ClassVar[int] = ...
    DTExtIndex: ClassVar[int] = ...
    DTPopLevel: ClassVar[int] = ...
    DTPushLevel: ClassVar[int] = ...
    DT_c_interval: ClassVar[int] = ...
    DT_ext_index: ClassVar[int] = ...
    DT_pop_level: ClassVar[int] = ...
    DT_push_level: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    RSLevelBegin: ClassVar[int] = ...
    RSPreviousBegin: ClassVar[int] = ...
    RSPreviousEnd: ClassVar[int] = ...
    RS_level_begin: ClassVar[int] = ...
    RS_previous_begin: ClassVar[int] = ...
    RS_previous_end: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addCInterval(self, *args, **kwargs): ...
    def addExtIndex(self, *args, **kwargs): ...
    def add_c_interval(self, constCMetaIntervalself, CIntervalc_interval, doublerel_time, intrel_to) -> Any: ...
    def add_ext_index(self, constCMetaIntervalself, intext_index, strname, doubleduration, boolopen_ended, doublerel_time, intrel_to) -> Any: ...
    def clearIntervals(self, *args, **kwargs): ...
    def clear_intervals(self, constCMetaIntervalself) -> Any: ...
    def getCInterval(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDefType(self, *args, **kwargs): ...
    def getEventIndex(self, *args, **kwargs): ...
    def getEventT(self, *args, **kwargs): ...
    def getEventType(self, *args, **kwargs): ...
    def getExtIndex(self, *args, **kwargs): ...
    def getIntervalEndTime(self, *args, **kwargs): ...
    def getIntervalStartTime(self, *args, **kwargs): ...
    def getNumDefs(self, *args, **kwargs): ...
    def getPrecision(self, *args, **kwargs): ...
    def get_c_interval(self, CMetaIntervalself, intn) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_def_type(self, CMetaIntervalself, intn) -> Any: ...
    def get_event_index(self, CMetaIntervalself) -> Any: ...
    def get_event_t(self, CMetaIntervalself) -> Any: ...
    def get_event_type(self, CMetaIntervalself) -> Any: ...
    def get_ext_index(self, CMetaIntervalself, intn) -> Any: ...
    def get_interval_end_time(self, CMetaIntervalself, strname) -> Any: ...
    def get_interval_start_time(self, CMetaIntervalself, strname) -> Any: ...
    def get_num_defs(self, CMetaIntervalself) -> Any: ...
    def get_precision(self, CMetaIntervalself) -> Any: ...
    def isEventReady(self, *args, **kwargs): ...
    def is_event_ready(self, constCMetaIntervalself) -> Any: ...
    def popEvent(self, *args, **kwargs): ...
    def popLevel(self, *args, **kwargs): ...
    def pop_event(self, constCMetaIntervalself) -> Any: ...
    def pop_level(self, constCMetaIntervalself, doubleduration) -> Any: ...
    def pushLevel(self, *args, **kwargs): ...
    def push_level(self, constCMetaIntervalself, strname, doublerel_time, intrel_to) -> Any: ...
    def setIntervalStartTime(self, *args, **kwargs): ...
    def setPrecision(self, *args, **kwargs): ...
    def set_interval_start_time(self, constCMetaIntervalself, strname, doublerel_time, intrel_to) -> Any: ...
    def set_precision(self, constCMetaIntervalself, doubleprecision) -> Any: ...
    def timeline(self, CMetaIntervalself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class CMotionTrail(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addVertex(self, *args, **kwargs): ...
    def add_vertex(self, constCMotionTrailself, constLVector4fvertex, constLVector4fstart_color, constLVector4fend_color, floatv) -> Any: ...
    def checkForUpdate(self, *args, **kwargs): ...
    def check_for_update(self, constCMotionTrailself, floatcurrent_time) -> Any: ...
    def enable(self, constCMotionTrailself, boolenable) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def reset(self, constCMotionTrailself) -> Any: ...
    def resetVertexList(self, *args, **kwargs): ...
    def reset_vertex_list(self, constCMotionTrailself) -> Any: ...
    def setGeomNode(self, *args, **kwargs): ...
    def setParameters(self, *args, **kwargs): ...
    def set_geom_node(self, constCMotionTrailself, GeomNodegeom_node) -> Any: ...
    def set_parameters(self, constCMotionTrailself, floatsampling_time, floattime_window, booluse_texture, boolcalculate_relative_matrix, booluse_nurbs, floatresolution_distance) -> Any: ...
    def updateMotionTrail(self, *args, **kwargs): ...
    def update_motion_trail(self, constCMotionTrailself, floatcurrent_time, constLMatrix4ftransform) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DCArrayParameter(DCParameter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getArraySize(self, *args, **kwargs): ...
    def getElementType(self, *args, **kwargs): ...
    def get_array_size(self, DCArrayParameterself) -> Any: ...
    def get_element_type(self, DCArrayParameterself) -> Any: ...

class DCAtomicField(DCField):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getElement(self, *args, **kwargs): ...
    def getElementDefault(self, *args, **kwargs): ...
    def getElementDivisor(self, *args, **kwargs): ...
    def getElementName(self, *args, **kwargs): ...
    def getElementType(self, *args, **kwargs): ...
    def getNumElements(self, *args, **kwargs): ...
    def get_element(self, DCAtomicFieldself, intn) -> Any: ...
    def get_element_default(self, DCAtomicFieldself, intn) -> Any: ...
    def get_element_divisor(self, DCAtomicFieldself, intn) -> Any: ...
    def get_element_name(self, DCAtomicFieldself, intn) -> Any: ...
    def get_element_type(self, DCAtomicFieldself, intn) -> Any: ...
    def get_num_elements(self, DCAtomicFieldself) -> Any: ...
    def hasElementDefault(self, *args, **kwargs): ...
    def has_element_default(self, DCAtomicFieldself, intn) -> Any: ...

class DCClass(DCDeclaration):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def aiFormatGenerate(self, *args, **kwargs): ...
    def aiFormatUpdate(self, *args, **kwargs): ...
    def aiFormatUpdateMsgType(self, *args, **kwargs): ...
    def ai_format_generate(self, DCClassself, objectdistobj, intdo_id, intparent_id, intzone_id, longdistrict_channel_id, longfrom_channel_id, objectoptional_fields) -> Any: ...
    def ai_format_update(self, DCClassself, strfield_name, intdo_id, longto_id, longfrom_id, objectargs) -> Any: ...
    def ai_format_update_msg_type(self, DCClassself, strfield_name, intdo_id, longto_id, longfrom_id, intmsg_type, objectargs) -> Any: ...
    def clientFormatGenerateCMU(self, *args, **kwargs): ...
    def clientFormatUpdate(self, *args, **kwargs): ...
    def client_format_generate_CMU(self, DCClassself, objectdistobj, intdo_id, intzone_id, objectoptional_fields) -> Any: ...
    def client_format_update(self, DCClassself, strfield_name, intdo_id, objectargs) -> Any: ...
    def directUpdate(self, *args, **kwargs): ...
    @overload
    def direct_update(self, constDCClassself, objectdistobj, strfield_name, constDatagramdatagram) -> Any: ...
    @overload
    def direct_update(self, constDCClassself, objectdistobj, strfield_name, bytesvalue_blob) -> Any: ...
    def getClassDef(self, *args, **kwargs): ...
    def getConstructor(self, *args, **kwargs): ...
    def getDcFile(self, *args, **kwargs): ...
    def getField(self, *args, **kwargs): ...
    def getFieldByIndex(self, *args, **kwargs): ...
    def getFieldByName(self, *args, **kwargs): ...
    def getInheritedField(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumFields(self, *args, **kwargs): ...
    def getNumInheritedFields(self, *args, **kwargs): ...
    def getNumParents(self, *args, **kwargs): ...
    def getNumber(self, *args, **kwargs): ...
    def getOwnerClassDef(self, *args, **kwargs): ...
    def getParent(self, *args, **kwargs): ...
    def get_class_def(self, DCClassself) -> Any: ...
    def get_constructor(self, DCClassself) -> Any: ...
    def get_dc_file(self, DCClassself) -> Any: ...
    def get_field(self, DCClassself, intn) -> Any: ...
    def get_field_by_index(self, DCClassself, intindex_number) -> Any: ...
    def get_field_by_name(self, DCClassself, strname) -> Any: ...
    def get_inherited_field(self, DCClassself, intn) -> Any: ...
    def get_name(self, DCClassself) -> Any: ...
    def get_num_fields(self, DCClassself) -> Any: ...
    def get_num_inherited_fields(self, DCClassself) -> Any: ...
    def get_num_parents(self, DCClassself) -> Any: ...
    def get_number(self, DCClassself) -> Any: ...
    def get_owner_class_def(self, DCClassself) -> Any: ...
    def get_parent(self, DCClassself, intn) -> Any: ...
    def hasClassDef(self, *args, **kwargs): ...
    def hasConstructor(self, *args, **kwargs): ...
    def hasOwnerClassDef(self, *args, **kwargs): ...
    def has_class_def(self, DCClassself) -> Any: ...
    def has_constructor(self, DCClassself) -> Any: ...
    def has_owner_class_def(self, DCClassself) -> Any: ...
    def inheritsFromBogusClass(self, *args, **kwargs): ...
    def inherits_from_bogus_class(self, DCClassself) -> Any: ...
    def isBogusClass(self, *args, **kwargs): ...
    def isStruct(self, *args, **kwargs): ...
    def is_bogus_class(self, DCClassself) -> Any: ...
    def is_struct(self, DCClassself) -> Any: ...
    def output(self, DCClassself, ostreamout) -> Any: ...
    def packRequiredField(self, *args, **kwargs): ...
    @overload
    def pack_required_field(self, DCClassself, Datagramdatagram, objectdistobj, constDCFieldfield) -> Any: ...
    @overload
    def pack_required_field(self, DCClassself, DCPackerpacker, objectdistobj, constDCFieldfield) -> Any: ...
    def receiveUpdate(self, *args, **kwargs): ...
    def receiveUpdateAllRequired(self, *args, **kwargs): ...
    def receiveUpdateBroadcastRequired(self, *args, **kwargs): ...
    def receiveUpdateBroadcastRequiredOwner(self, *args, **kwargs): ...
    def receiveUpdateOther(self, *args, **kwargs): ...
    def receive_update(self, DCClassself, objectdistobj, DatagramIteratordi) -> Any: ...
    def receive_update_all_required(self, DCClassself, objectdistobj, DatagramIteratordi) -> Any: ...
    def receive_update_broadcast_required(self, DCClassself, objectdistobj, DatagramIteratordi) -> Any: ...
    def receive_update_broadcast_required_owner(self, DCClassself, objectdistobj, DatagramIteratordi) -> Any: ...
    def receive_update_other(self, DCClassself, objectdistobj, DatagramIteratordi) -> Any: ...
    def setClassDef(self, *args, **kwargs): ...
    def setOwnerClassDef(self, *args, **kwargs): ...
    def set_class_def(self, constDCClassself, objectclass_def) -> Any: ...
    def set_owner_class_def(self, constDCClassself, objectowner_class_def) -> Any: ...
    def startGenerate(self, *args, **kwargs): ...
    def start_generate(self, constDCClassself) -> Any: ...
    def stopGenerate(self, *args, **kwargs): ...
    def stop_generate(self, constDCClassself) -> Any: ...

class DCClassParameter(DCParameter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getClass(self, *args, **kwargs): ...
    def get_class(self, DCClassParameterself) -> Any: ...

class DCDeclaration(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def asClass(self, *args, **kwargs): ...
    def asSwitch(self, *args, **kwargs): ...
    @overload
    def as_class(self, constDCDeclarationself) -> Any: ...
    @overload
    def as_class(self, DCDeclarationself) -> Any: ...
    @overload
    def as_switch(self, constDCDeclarationself) -> Any: ...
    @overload
    def as_switch(self, DCDeclarationself) -> Any: ...
    def output(self, DCDeclarationself, ostreamout) -> Any: ...
    def write(self, DCDeclarationself, ostreamout, intindent_level) -> Any: ...

class DCField(DCPackerInterface, DCKeywordList):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def aiFormatUpdate(self, *args, **kwargs): ...
    def aiFormatUpdateMsgType(self, *args, **kwargs): ...
    def ai_format_update(self, DCFieldself, intdo_id, longto_id, longfrom_id, objectargs) -> Any: ...
    def ai_format_update_msg_type(self, DCFieldself, intdo_id, longto_id, longfrom_id, intmsg_type, objectargs) -> Any: ...
    def asAtomicField(self, *args, **kwargs): ...
    def asField(self, *args, **kwargs): ...
    def asMolecularField(self, *args, **kwargs): ...
    def asParameter(self, *args, **kwargs): ...
    @overload
    def as_atomic_field(self, constDCFieldself) -> Any: ...
    @overload
    def as_atomic_field(self, DCFieldself) -> Any: ...
    @overload
    def as_field(self, constDCFieldself) -> Any: ...
    @overload
    def as_field(self, DCFieldself) -> Any: ...
    @overload
    def as_molecular_field(self, constDCFieldself) -> Any: ...
    @overload
    def as_molecular_field(self, DCFieldself) -> Any: ...
    @overload
    def as_parameter(self, constDCFieldself) -> Any: ...
    @overload
    def as_parameter(self, DCFieldself) -> Any: ...
    def clientFormatUpdate(self, *args, **kwargs): ...
    def client_format_update(self, DCFieldself, intdo_id, objectargs) -> Any: ...
    def formatData(self, *args, **kwargs): ...
    def format_data(self, constDCFieldself, bytespacked_data, boolshow_field_names) -> Any: ...
    def getClass(self, *args, **kwargs): ...
    def getDefaultValue(self, *args, **kwargs): ...
    def getNumber(self, *args, **kwargs): ...
    def get_class(self, DCFieldself) -> Any: ...
    def get_default_value(self, DCFieldself) -> Any: ...
    def get_number(self, DCFieldself) -> Any: ...
    def hasDefaultValue(self, *args, **kwargs): ...
    def has_default_value(self, DCFieldself) -> Any: ...
    def isAirecv(self, *args, **kwargs): ...
    def isBogusField(self, *args, **kwargs): ...
    def isBroadcast(self, *args, **kwargs): ...
    def isClrecv(self, *args, **kwargs): ...
    def isClsend(self, *args, **kwargs): ...
    def isDb(self, *args, **kwargs): ...
    def isOwnrecv(self, *args, **kwargs): ...
    def isOwnsend(self, *args, **kwargs): ...
    def isRam(self, *args, **kwargs): ...
    def isRequired(self, *args, **kwargs): ...
    def is_airecv(self, DCFieldself) -> Any: ...
    def is_bogus_field(self, DCFieldself) -> Any: ...
    def is_broadcast(self, DCFieldself) -> Any: ...
    def is_clrecv(self, DCFieldself) -> Any: ...
    def is_clsend(self, DCFieldself) -> Any: ...
    def is_db(self, DCFieldself) -> Any: ...
    def is_ownrecv(self, DCFieldself) -> Any: ...
    def is_ownsend(self, DCFieldself) -> Any: ...
    def is_ram(self, DCFieldself) -> Any: ...
    def is_required(self, DCFieldself) -> Any: ...
    def output(self, DCFieldself, ostreamout) -> Any: ...
    def packArgs(self, *args, **kwargs): ...
    def pack_args(self, DCFieldself, DCPackerpacker, objectsequence) -> Any: ...
    def parseString(self, *args, **kwargs): ...
    def parse_string(self, constDCFieldself, strformatted_string) -> Any: ...
    def receiveUpdate(self, *args, **kwargs): ...
    def receive_update(self, DCFieldself, DCPackerpacker, objectdistobj) -> Any: ...
    def unpackArgs(self, *args, **kwargs): ...
    def unpack_args(self, DCFieldself, DCPackerpacker) -> Any: ...
    def upcastToDCKeywordList(self, *args, **kwargs): ...
    def upcastToDCPackerInterface(self, *args, **kwargs): ...
    def upcast_to_DCKeywordList(self, constDCFieldself) -> Any: ...
    def upcast_to_DCPackerInterface(self, constDCFieldself) -> Any: ...
    def validateRanges(self, *args, **kwargs): ...
    def validate_ranges(self, DCFieldself, bytespacked_data) -> Any: ...
    def write(self, DCFieldself, ostreamout, intindent_level) -> Any: ...

class DCFile(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def allObjectsValid(self, *args, **kwargs): ...
    def all_objects_valid(self, DCFileself) -> Any: ...
    def clear(self, constDCFileself) -> Any: ...
    def getClass(self, *args, **kwargs): ...
    def getClassByName(self, *args, **kwargs): ...
    def getFieldByIndex(self, *args, **kwargs): ...
    def getHash(self, *args, **kwargs): ...
    def getImportModule(self, *args, **kwargs): ...
    def getImportSymbol(self, *args, **kwargs): ...
    def getKeyword(self, *args, **kwargs): ...
    def getKeywordByName(self, *args, **kwargs): ...
    def getNumClasses(self, *args, **kwargs): ...
    def getNumImportModules(self, *args, **kwargs): ...
    def getNumImportSymbols(self, *args, **kwargs): ...
    def getNumKeywords(self, *args, **kwargs): ...
    def getNumTypedefs(self, *args, **kwargs): ...
    def getSwitchByName(self, *args, **kwargs): ...
    def getTypedef(self, *args, **kwargs): ...
    def getTypedefByName(self, *args, **kwargs): ...
    def get_class(self, DCFileself, intn) -> Any: ...
    def get_class_by_name(self, DCFileself, strname) -> Any: ...
    def get_field_by_index(self, DCFileself, intindex_number) -> Any: ...
    def get_hash(self, DCFileself) -> Any: ...
    def get_import_module(self, DCFileself, intn) -> Any: ...
    def get_import_symbol(self, DCFileself, intn, inti) -> Any: ...
    def get_keyword(self, DCFileself, intn) -> Any: ...
    def get_keyword_by_name(self, DCFileself, strname) -> Any: ...
    def get_num_classes(self, DCFileself) -> Any: ...
    def get_num_import_modules(self, DCFileself) -> Any: ...
    def get_num_import_symbols(self, DCFileself, intn) -> Any: ...
    def get_num_keywords(self, DCFileself) -> Any: ...
    def get_num_typedefs(self, DCFileself) -> Any: ...
    def get_switch_by_name(self, DCFileself, strname) -> Any: ...
    def get_typedef(self, DCFileself, intn) -> Any: ...
    def get_typedef_by_name(self, DCFileself, strname) -> Any: ...
    def read(self, constDCFileself, istreamin, strfilename) -> Any: ...
    def readAll(self, *args, **kwargs): ...
    def read_all(self, constDCFileself) -> Any: ...
    @overload
    def write(self, DCFileself, Filenamefilename, boolbrief) -> Any: ...
    @overload
    def write(self, DCFileself, ostreamout, boolbrief) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class DCKeyword(DCDeclaration):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getName(self, *args, **kwargs): ...
    def get_name(self, DCKeywordself) -> Any: ...

class DCKeywordList(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def compareKeywords(self, *args, **kwargs): ...
    def compare_keywords(self, DCKeywordListself, constDCKeywordListother) -> Any: ...
    def getKeyword(self, *args, **kwargs): ...
    def getKeywordByName(self, *args, **kwargs): ...
    def getNumKeywords(self, *args, **kwargs): ...
    def get_keyword(self, DCKeywordListself, intn) -> Any: ...
    def get_keyword_by_name(self, DCKeywordListself, strname) -> Any: ...
    def get_num_keywords(self, DCKeywordListself) -> Any: ...
    def hasKeyword(self, *args, **kwargs): ...
    @overload
    def has_keyword(self, DCKeywordListself, constDCKeywordkeyword) -> Any: ...
    @overload
    def has_keyword(self, DCKeywordListself, strname) -> Any: ...

class DCMolecularField(DCField):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAtomic(self, *args, **kwargs): ...
    def getNumAtomics(self, *args, **kwargs): ...
    def get_atomic(self, DCMolecularFieldself, intn) -> Any: ...
    def get_num_atomics(self, DCMolecularFieldself) -> Any: ...

class DCPackData(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, constDCPackDataself) -> Any: ...
    def getLength(self, *args, **kwargs): ...
    def getString(self, *args, **kwargs): ...
    def get_length(self, DCPackDataself) -> Any: ...
    def get_string(self, DCPackDataself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DCPacker(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def beginPack(self, *args, **kwargs): ...
    def beginRepack(self, *args, **kwargs): ...
    def beginUnpack(self, *args, **kwargs): ...
    def begin_pack(self, constDCPackerself, constDCPackerInterfaceroot) -> Any: ...
    @overload
    def begin_repack(self, constDCPackerself, constDCPackerInterfaceroot) -> Any: ...
    @overload
    def begin_repack(self) -> Any: ...
    @overload
    def begin_unpack(self, constDCPackerself, constDCPackerInterfaceroot) -> Any: ...
    @overload
    def begin_unpack(self) -> Any: ...
    def clearData(self, *args, **kwargs): ...
    def clear_data(self, constDCPackerself) -> Any: ...
    def endPack(self, *args, **kwargs): ...
    def endRepack(self, *args, **kwargs): ...
    def endUnpack(self, *args, **kwargs): ...
    def end_pack(self, constDCPackerself) -> Any: ...
    def end_repack(self, constDCPackerself) -> Any: ...
    def end_unpack(self, constDCPackerself) -> Any: ...
    def getBytes(self, *args, **kwargs): ...
    def getCurrentField(self, *args, **kwargs): ...
    def getCurrentFieldName(self, *args, **kwargs): ...
    def getCurrentParent(self, *args, **kwargs): ...
    def getLastSwitch(self, *args, **kwargs): ...
    def getLength(self, *args, **kwargs): ...
    def getNumNestedFields(self, *args, **kwargs): ...
    @staticmethod
    def getNumStackElementsEverAllocated(*args, **kwargs): ...
    def getNumUnpackedBytes(self, *args, **kwargs): ...
    def getPackType(self, *args, **kwargs): ...
    def getString(self, *args, **kwargs): ...
    def getUnpackLength(self, *args, **kwargs): ...
    def getUnpackString(self, *args, **kwargs): ...
    def get_bytes(self, DCPackerself) -> Any: ...
    def get_current_field(self, DCPackerself) -> Any: ...
    def get_current_field_name(self, DCPackerself) -> Any: ...
    def get_current_parent(self, DCPackerself) -> Any: ...
    def get_last_switch(self, DCPackerself) -> Any: ...
    def get_length(self, DCPackerself) -> Any: ...
    def get_num_nested_fields(self, DCPackerself) -> Any: ...
    @staticmethod
    def get_num_stack_elements_ever_allocated() -> Any: ...
    def get_num_unpacked_bytes(self, DCPackerself) -> Any: ...
    def get_pack_type(self, DCPackerself) -> Any: ...
    def get_string(self, DCPackerself) -> Any: ...
    def get_unpack_length(self, DCPackerself) -> Any: ...
    def get_unpack_string(self, DCPackerself) -> Any: ...
    def hadError(self, *args, **kwargs): ...
    def hadPackError(self, *args, **kwargs): ...
    def hadParseError(self, *args, **kwargs): ...
    def hadRangeError(self, *args, **kwargs): ...
    def had_error(self, DCPackerself) -> Any: ...
    def had_pack_error(self, DCPackerself) -> Any: ...
    def had_parse_error(self, DCPackerself) -> Any: ...
    def had_range_error(self, DCPackerself) -> Any: ...
    def hasNestedFields(self, *args, **kwargs): ...
    def has_nested_fields(self, DCPackerself) -> Any: ...
    def moreNestedFields(self, *args, **kwargs): ...
    def more_nested_fields(self, DCPackerself) -> Any: ...
    def packBlob(self, *args, **kwargs): ...
    def packDefaultValue(self, *args, **kwargs): ...
    def packDouble(self, *args, **kwargs): ...
    def packInt(self, *args, **kwargs): ...
    def packInt64(self, *args, **kwargs): ...
    def packLiteralValue(self, *args, **kwargs): ...
    def packObject(self, *args, **kwargs): ...
    def packString(self, *args, **kwargs): ...
    def packUint(self, *args, **kwargs): ...
    def packUint64(self, *args, **kwargs): ...
    def pack_blob(self, constDCPackerself, bytesvalue) -> Any: ...
    def pack_default_value(self, constDCPackerself) -> Any: ...
    def pack_double(self, constDCPackerself, doublevalue) -> Any: ...
    def pack_int(self, constDCPackerself, intvalue) -> Any: ...
    def pack_int64(self, constDCPackerself, longvalue) -> Any: ...
    def pack_literal_value(self, constDCPackerself, bytesvalue) -> Any: ...
    def pack_object(self, constDCPackerself, objectobject) -> Any: ...
    def pack_string(self, constDCPackerself, strvalue) -> Any: ...
    def pack_uint(self, constDCPackerself, intvalue) -> Any: ...
    def pack_uint64(self, constDCPackerself, longvalue) -> Any: ...
    def parseAndPack(self, *args, **kwargs): ...
    @overload
    def parse_and_pack(self, constDCPackerself, istreamin) -> Any: ...
    @overload
    def parse_and_pack(self, constDCPackerself, strformatted_object) -> Any: ...
    def pop(self, constDCPackerself) -> Any: ...
    @overload
    def push(self, constDCPackerself) -> Any: ...
    @overload
    def push(self) -> Any: ...
    def rawPackBlob(self, *args, **kwargs): ...
    def rawPackFloat64(self, *args, **kwargs): ...
    def rawPackInt16(self, *args, **kwargs): ...
    def rawPackInt32(self, *args, **kwargs): ...
    def rawPackInt64(self, *args, **kwargs): ...
    def rawPackInt8(self, *args, **kwargs): ...
    def rawPackString(self, *args, **kwargs): ...
    def rawPackUint16(self, *args, **kwargs): ...
    def rawPackUint32(self, *args, **kwargs): ...
    def rawPackUint64(self, *args, **kwargs): ...
    def rawPackUint8(self, *args, **kwargs): ...
    def rawUnpackBlob(self, *args, **kwargs): ...
    def rawUnpackFloat64(self, *args, **kwargs): ...
    def rawUnpackInt16(self, *args, **kwargs): ...
    def rawUnpackInt32(self, *args, **kwargs): ...
    def rawUnpackInt64(self, *args, **kwargs): ...
    def rawUnpackInt8(self, *args, **kwargs): ...
    def rawUnpackString(self, *args, **kwargs): ...
    def rawUnpackUint16(self, *args, **kwargs): ...
    def rawUnpackUint32(self, *args, **kwargs): ...
    def rawUnpackUint64(self, *args, **kwargs): ...
    def rawUnpackUint8(self, *args, **kwargs): ...
    def raw_pack_blob(self, constDCPackerself, bytesvalue) -> Any: ...
    def raw_pack_float64(self, constDCPackerself, doublevalue) -> Any: ...
    def raw_pack_int16(self, constDCPackerself, intvalue) -> Any: ...
    def raw_pack_int32(self, constDCPackerself, intvalue) -> Any: ...
    def raw_pack_int64(self, constDCPackerself, longvalue) -> Any: ...
    def raw_pack_int8(self, constDCPackerself, intvalue) -> Any: ...
    def raw_pack_string(self, constDCPackerself, strvalue) -> Any: ...
    def raw_pack_uint16(self, constDCPackerself, intvalue) -> Any: ...
    def raw_pack_uint32(self, constDCPackerself, intvalue) -> Any: ...
    def raw_pack_uint64(self, constDCPackerself, longvalue) -> Any: ...
    def raw_pack_uint8(self, constDCPackerself, intvalue) -> Any: ...
    def raw_unpack_blob(self, constDCPackerself) -> Any: ...
    def raw_unpack_float64(self, constDCPackerself) -> Any: ...
    def raw_unpack_int16(self, constDCPackerself) -> Any: ...
    def raw_unpack_int32(self, constDCPackerself) -> Any: ...
    def raw_unpack_int64(self, constDCPackerself) -> Any: ...
    def raw_unpack_int8(self, constDCPackerself) -> Any: ...
    def raw_unpack_string(self, constDCPackerself) -> Any: ...
    def raw_unpack_uint16(self, constDCPackerself) -> Any: ...
    def raw_unpack_uint32(self, constDCPackerself) -> Any: ...
    def raw_unpack_uint64(self, constDCPackerself) -> Any: ...
    def raw_unpack_uint8(self, constDCPackerself) -> Any: ...
    @overload
    def seek(self, constDCPackerself, strfield_name) -> Any: ...
    @overload
    def seek(self, constDCPackerself, intseek_index) -> Any: ...
    @overload
    def seek(self) -> Any: ...
    def setUnpackData(self, *args, **kwargs): ...
    def set_unpack_data(self, constDCPackerself, bytesdata) -> Any: ...
    def unpackAndFormat(self, *args, **kwargs): ...
    def unpackBlob(self, *args, **kwargs): ...
    def unpackDouble(self, *args, **kwargs): ...
    def unpackInt(self, *args, **kwargs): ...
    def unpackInt64(self, *args, **kwargs): ...
    def unpackLiteralValue(self, *args, **kwargs): ...
    def unpackObject(self, *args, **kwargs): ...
    def unpackSkip(self, *args, **kwargs): ...
    def unpackString(self, *args, **kwargs): ...
    def unpackUint(self, *args, **kwargs): ...
    def unpackUint64(self, *args, **kwargs): ...
    def unpackValidate(self, *args, **kwargs): ...
    @overload
    def unpack_and_format(self, constDCPackerself) -> Any: ...
    @overload
    def unpack_and_format(self, constDCPackerself, ostreamout, boolshow_field_names) -> Any: ...
    @overload
    def unpack_and_format(self, constDCPackerself, boolshow_field_names) -> Any: ...
    def unpack_blob(self, constDCPackerself) -> Any: ...
    def unpack_double(self, constDCPackerself) -> Any: ...
    def unpack_int(self, constDCPackerself) -> Any: ...
    def unpack_int64(self, constDCPackerself) -> Any: ...
    def unpack_literal_value(self, constDCPackerself) -> Any: ...
    def unpack_object(self, constDCPackerself) -> Any: ...
    def unpack_skip(self, constDCPackerself) -> Any: ...
    def unpack_string(self, constDCPackerself) -> Any: ...
    def unpack_uint(self, constDCPackerself) -> Any: ...
    def unpack_uint64(self, constDCPackerself) -> Any: ...
    def unpack_validate(self, constDCPackerself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DCPackerInterface(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def asClassParameter(self, *args, **kwargs): ...
    def asField(self, *args, **kwargs): ...
    def asSwitchParameter(self, *args, **kwargs): ...
    @overload
    def as_class_parameter(self, constDCPackerInterfaceself) -> Any: ...
    @overload
    def as_class_parameter(self, DCPackerInterfaceself) -> Any: ...
    @overload
    def as_field(self, constDCPackerInterfaceself) -> Any: ...
    @overload
    def as_field(self, DCPackerInterfaceself) -> Any: ...
    @overload
    def as_switch_parameter(self, constDCPackerInterfaceself) -> Any: ...
    @overload
    def as_switch_parameter(self, DCPackerInterfaceself) -> Any: ...
    def checkMatch(self, *args, **kwargs): ...
    @overload
    def check_match(self, DCPackerInterfaceself, strdescription, DCFiledcfile) -> Any: ...
    @overload
    def check_match(self, DCPackerInterfaceself, constDCPackerInterfaceother) -> Any: ...
    def findSeekIndex(self, *args, **kwargs): ...
    def find_seek_index(self, DCPackerInterfaceself, strname) -> Any: ...
    def getName(self, *args, **kwargs): ...
    def get_name(self, DCPackerInterfaceself) -> Any: ...

class DCParameter(DCField):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def asArrayParameter(self, *args, **kwargs): ...
    def asSimpleParameter(self, *args, **kwargs): ...
    @overload
    def as_array_parameter(self, constDCParameterself) -> Any: ...
    @overload
    def as_array_parameter(self, DCParameterself) -> Any: ...
    @overload
    def as_simple_parameter(self, constDCParameterself) -> Any: ...
    @overload
    def as_simple_parameter(self, DCParameterself) -> Any: ...
    def getTypedef(self, *args, **kwargs): ...
    def get_typedef(self, DCParameterself) -> Any: ...
    def isValid(self, *args, **kwargs): ...
    def is_valid(self, DCParameterself) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, DCParameterself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class DCSimpleParameter(DCParameter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getDivisor(self, *args, **kwargs): ...
    def getModulus(self, *args, **kwargs): ...
    def getType(self, *args, **kwargs): ...
    def get_divisor(self, DCSimpleParameterself) -> Any: ...
    def get_modulus(self, DCSimpleParameterself) -> Any: ...
    def get_type(self, DCSimpleParameterself) -> Any: ...
    def hasModulus(self, *args, **kwargs): ...
    def has_modulus(self, DCSimpleParameterself) -> Any: ...

class DCSwitch(DCDeclaration):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getCase(self, *args, **kwargs): ...
    def getCaseByValue(self, *args, **kwargs): ...
    def getDefaultCase(self, *args, **kwargs): ...
    def getField(self, *args, **kwargs): ...
    def getFieldByName(self, *args, **kwargs): ...
    def getKeyParameter(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumCases(self, *args, **kwargs): ...
    def getNumFields(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    def get_case(self, DCSwitchself, intn) -> Any: ...
    def get_case_by_value(self, DCSwitchself, bytescase_value) -> Any: ...
    def get_default_case(self, DCSwitchself) -> Any: ...
    def get_field(self, DCSwitchself, intcase_index, intn) -> Any: ...
    def get_field_by_name(self, DCSwitchself, intcase_index, strname) -> Any: ...
    def get_key_parameter(self, DCSwitchself) -> Any: ...
    def get_name(self, DCSwitchself) -> Any: ...
    @overload
    def get_num_cases(self, DCSwitchself) -> Any: ...
    @overload
    def get_num_cases(self) -> Any: ...
    def get_num_fields(self, DCSwitchself, intcase_index) -> Any: ...
    def get_value(self, DCSwitchself, intcase_index) -> Any: ...

class DCSwitchParameter(DCParameter):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getSwitch(self, *args, **kwargs): ...
    def get_switch(self, DCSwitchParameterself) -> Any: ...

class DCTypedef(DCDeclaration):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getDescription(self, *args, **kwargs): ...
    def getName(self, *args, **kwargs): ...
    def getNumber(self, *args, **kwargs): ...
    def get_description(self, DCTypedefself) -> Any: ...
    def get_name(self, DCTypedefself) -> Any: ...
    def get_number(self, DCTypedefself) -> Any: ...
    def isBogusTypedef(self, *args, **kwargs): ...
    def isImplicitTypedef(self, *args, **kwargs): ...
    def is_bogus_typedef(self, DCTypedefself) -> Any: ...
    def is_implicit_typedef(self, DCTypedefself) -> Any: ...

class EaseInBlendType(LerpBlendType):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class EaseInOutBlendType(LerpBlendType):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class EaseOutBlendType(LerpBlendType):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class HideInterval(CInterval):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class LerpBlendType(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __call__(self, *args, **kwargs): ...

class NoBlendType(LerpBlendType):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class ShowInterval(CInterval):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class SmoothMover(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    PMOff: ClassVar[int] = ...
    PMOn: ClassVar[int] = ...
    PM_off: ClassVar[int] = ...
    PM_on: ClassVar[int] = ...
    SMOff: ClassVar[int] = ...
    SMOn: ClassVar[int] = ...
    SM_off: ClassVar[int] = ...
    SM_on: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def applySmoothHpr(self, *args, **kwargs): ...
    def applySmoothPos(self, *args, **kwargs): ...
    def applySmoothPosHpr(self, *args, **kwargs): ...
    def apply_smooth_hpr(self, SmoothMoverself, NodePathnode) -> Any: ...
    def apply_smooth_pos(self, SmoothMoverself, NodePathnode) -> Any: ...
    def apply_smooth_pos_hpr(self, SmoothMoverself, NodePathpos_node, NodePathhpr_node) -> Any: ...
    def clearPositions(self, *args, **kwargs): ...
    def clear_positions(self, constSmoothMoverself, boolreset_velocity) -> Any: ...
    def computeAndApplySmoothHpr(self, *args, **kwargs): ...
    def computeAndApplySmoothPos(self, *args, **kwargs): ...
    def computeAndApplySmoothPosHpr(self, *args, **kwargs): ...
    def computeSmoothPosition(self, *args, **kwargs): ...
    def compute_and_apply_smooth_hpr(self, constSmoothMoverself, NodePathhpr_node) -> Any: ...
    def compute_and_apply_smooth_pos(self, constSmoothMoverself, NodePathnode) -> Any: ...
    def compute_and_apply_smooth_pos_hpr(self, constSmoothMoverself, NodePathpos_node, NodePathhpr_node) -> Any: ...
    @overload
    def compute_smooth_position(self, constSmoothMoverself) -> Any: ...
    @overload
    def compute_smooth_position(self, constSmoothMoverself, doubletimestamp) -> Any: ...
    @overload
    def compute_smooth_position(self) -> Any: ...
    def getAcceptClockSkew(self, *args, **kwargs): ...
    def getDefaultToStandingStill(self, *args, **kwargs): ...
    def getDelay(self, *args, **kwargs): ...
    def getDirectionalVelocity(self, *args, **kwargs): ...
    def getExpectedBroadcastPeriod(self, *args, **kwargs): ...
    def getForwardAxis(self, *args, **kwargs): ...
    def getLatestPosition(self, *args, **kwargs): ...
    def getMaxPositionAge(self, *args, **kwargs): ...
    def getMostRecentTimestamp(self, *args, **kwargs): ...
    def getPredictionMode(self, *args, **kwargs): ...
    def getResetVelocityAge(self, *args, **kwargs): ...
    def getSampleHpr(self, *args, **kwargs): ...
    def getSamplePos(self, *args, **kwargs): ...
    def getSmoothForwardVelocity(self, *args, **kwargs): ...
    def getSmoothHpr(self, *args, **kwargs): ...
    def getSmoothLateralVelocity(self, *args, **kwargs): ...
    def getSmoothMode(self, *args, **kwargs): ...
    def getSmoothPos(self, *args, **kwargs): ...
    def getSmoothRotationalVelocity(self, *args, **kwargs): ...
    def get_accept_clock_skew(self, constSmoothMoverself) -> Any: ...
    def get_default_to_standing_still(self, constSmoothMoverself) -> Any: ...
    def get_delay(self, constSmoothMoverself) -> Any: ...
    def get_directional_velocity(self, constSmoothMoverself) -> Any: ...
    def get_expected_broadcast_period(self, constSmoothMoverself) -> Any: ...
    def get_forward_axis(self, SmoothMoverself) -> Any: ...
    def get_latest_position(self, constSmoothMoverself) -> Any: ...
    def get_max_position_age(self, constSmoothMoverself) -> Any: ...
    def get_most_recent_timestamp(self, SmoothMoverself) -> Any: ...
    def get_prediction_mode(self, constSmoothMoverself) -> Any: ...
    def get_reset_velocity_age(self, constSmoothMoverself) -> Any: ...
    def get_sample_hpr(self, SmoothMoverself) -> Any: ...
    def get_sample_pos(self, SmoothMoverself) -> Any: ...
    def get_smooth_forward_velocity(self, SmoothMoverself) -> Any: ...
    def get_smooth_hpr(self, SmoothMoverself) -> Any: ...
    def get_smooth_lateral_velocity(self, SmoothMoverself) -> Any: ...
    def get_smooth_mode(self, constSmoothMoverself) -> Any: ...
    def get_smooth_pos(self, SmoothMoverself) -> Any: ...
    def get_smooth_rotational_velocity(self, SmoothMoverself) -> Any: ...
    def handleWrtReparent(self, *args, **kwargs): ...
    def handle_wrt_reparent(self, constSmoothMoverself, NodePathold_parent, NodePathnew_parent) -> Any: ...
    def hasMostRecentTimestamp(self, *args, **kwargs): ...
    def has_most_recent_timestamp(self, SmoothMoverself) -> Any: ...
    def markPosition(self, *args, **kwargs): ...
    def mark_position(self, constSmoothMoverself) -> Any: ...
    def output(self, SmoothMoverself, ostreamout) -> Any: ...
    def setAcceptClockSkew(self, *args, **kwargs): ...
    def setDefaultToStandingStill(self, *args, **kwargs): ...
    def setDelay(self, *args, **kwargs): ...
    def setDirectionalVelocity(self, *args, **kwargs): ...
    def setExpectedBroadcastPeriod(self, *args, **kwargs): ...
    def setH(self, *args, **kwargs): ...
    def setHpr(self, *args, **kwargs): ...
    def setMaxPositionAge(self, *args, **kwargs): ...
    def setP(self, *args, **kwargs): ...
    def setPhonyTimestamp(self, *args, **kwargs): ...
    def setPos(self, *args, **kwargs): ...
    def setPosHpr(self, *args, **kwargs): ...
    def setPredictionMode(self, *args, **kwargs): ...
    def setR(self, *args, **kwargs): ...
    def setResetVelocityAge(self, *args, **kwargs): ...
    def setSmoothMode(self, *args, **kwargs): ...
    def setTimestamp(self, *args, **kwargs): ...
    def setX(self, *args, **kwargs): ...
    def setY(self, *args, **kwargs): ...
    def setZ(self, *args, **kwargs): ...
    def set_accept_clock_skew(self, constSmoothMoverself, boolflag) -> Any: ...
    def set_default_to_standing_still(self, constSmoothMoverself, boolflag) -> Any: ...
    def set_delay(self, constSmoothMoverself, doubledelay) -> Any: ...
    def set_directional_velocity(self, constSmoothMoverself, boolflag) -> Any: ...
    def set_expected_broadcast_period(self, constSmoothMoverself, doubleperiod) -> Any: ...
    def set_h(self, constSmoothMoverself, floath) -> Any: ...
    @overload
    def set_hpr(self, constSmoothMoverself, constLVecBase3fhpr) -> Any: ...
    @overload
    def set_hpr(self, constSmoothMoverself, floath, floatp, floatr) -> Any: ...
    @overload
    def set_hpr(self) -> Any: ...
    @overload
    def set_hpr(self) -> Any: ...
    def set_max_position_age(self, constSmoothMoverself, doubleage) -> Any: ...
    def set_p(self, constSmoothMoverself, floatp) -> Any: ...
    def set_phony_timestamp(self, constSmoothMoverself, doubletimestamp, boolperiod_adjust) -> Any: ...
    @overload
    def set_pos(self, constSmoothMoverself, constLVecBase3fpos) -> Any: ...
    @overload
    def set_pos(self, constSmoothMoverself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_pos(self) -> Any: ...
    @overload
    def set_pos(self) -> Any: ...
    @overload
    def set_pos_hpr(self, constSmoothMoverself, constLVecBase3fpos, constLVecBase3fhpr) -> Any: ...
    @overload
    def set_pos_hpr(self, constSmoothMoverself, floatx, floaty, floatz, floath, floatp, floatr) -> Any: ...
    @overload
    def set_pos_hpr(self) -> Any: ...
    @overload
    def set_pos_hpr(self) -> Any: ...
    def set_prediction_mode(self, constSmoothMoverself, intmode) -> Any: ...
    def set_r(self, constSmoothMoverself, floatr) -> Any: ...
    def set_reset_velocity_age(self, constSmoothMoverself, doubleage) -> Any: ...
    def set_smooth_mode(self, constSmoothMoverself, intmode) -> Any: ...
    def set_timestamp(self, constSmoothMoverself, doubletimestamp) -> Any: ...
    def set_x(self, constSmoothMoverself, floatx) -> Any: ...
    def set_y(self, constSmoothMoverself, floaty) -> Any: ...
    def set_z(self, constSmoothMoverself, floatz) -> Any: ...
    def write(self, SmoothMoverself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class WaitInterval(CInterval):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

def Dtool_BorrowThisReference(*args, **kwargs): ...
def allowAccessibilityShortcutKeys(*args, **kwargs): ...
def allow_accessibility_shortcut_keys(boolallowKeys) -> Any: ...
def getParticlePath(*args, **kwargs): ...
def get_particle_path() -> Any: ...
def initAppForGui(*args, **kwargs): ...
def init_app_for_gui() -> Any: ...
def storeAccessibilityShortcutKeys(*args, **kwargs): ...
def store_accessibility_shortcut_keys() -> Any: ...
def throwNewFrame(*args, **kwargs): ...
def throw_new_frame() -> Any: ...
