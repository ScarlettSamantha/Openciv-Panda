import dtoolconfig
import panda3d.core
from _typeshed import Incomplete
from typing import Any, ClassVar, overload

Dtool_PyNativeInterface: int

class EggAnimData(EggNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addData(self, *args, **kwargs): ...
    def add_data(self, constEggAnimDataself, doublevalue) -> Any: ...
    def assign(self, constEggAnimDataself, constEggAnimDatacopy) -> Any: ...
    def clearData(self, *args, **kwargs): ...
    def clearFps(self, *args, **kwargs): ...
    def clear_data(self, constEggAnimDataself) -> Any: ...
    def clear_fps(self, constEggAnimDataself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFps(self, *args, **kwargs): ...
    def getSize(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_fps(self, EggAnimDataself) -> Any: ...
    def get_size(self, EggAnimDataself) -> Any: ...
    def hasFps(self, *args, **kwargs): ...
    def has_fps(self, EggAnimDataself) -> Any: ...
    def quantize(self, constEggAnimDataself, doublequantum) -> Any: ...
    def setFps(self, *args, **kwargs): ...
    def set_fps(self, constEggAnimDataself, doubletype) -> Any: ...

class EggAnimPreload(EggNode):
    DtoolClassDict: ClassVar[dict] = ...
    fps: Incomplete
    num_frames: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggAnimPreloadself, constEggAnimPreloadcopy) -> Any: ...
    def clearFps(self, *args, **kwargs): ...
    def clearNumFrames(self, *args, **kwargs): ...
    def clear_fps(self, constEggAnimPreloadself) -> Any: ...
    def clear_num_frames(self, constEggAnimPreloadself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFps(self, *args, **kwargs): ...
    def getNumFrames(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_fps(self, EggAnimPreloadself) -> Any: ...
    def get_num_frames(self, EggAnimPreloadself) -> Any: ...
    def hasFps(self, *args, **kwargs): ...
    def hasNumFrames(self, *args, **kwargs): ...
    def has_fps(self, EggAnimPreloadself) -> Any: ...
    def has_num_frames(self, EggAnimPreloadself) -> Any: ...
    def setFps(self, *args, **kwargs): ...
    def setNumFrames(self, *args, **kwargs): ...
    def set_fps(self, constEggAnimPreloadself, doublefps) -> Any: ...
    def set_num_frames(self, constEggAnimPreloadself, intnum_frames) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggAttributes(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggAttributesself, constEggAttributescopy) -> Any: ...
    def clearColor(self, *args, **kwargs): ...
    def clearNormal(self, *args, **kwargs): ...
    def clear_color(self, constEggAttributesself) -> Any: ...
    def clear_normal(self, constEggAttributesself) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, EggAttributesself, constEggAttributesother) -> Any: ...
    def copyColor(self, *args, **kwargs): ...
    def copyNormal(self, *args, **kwargs): ...
    def copy_color(self, constEggAttributesself, constEggAttributesother) -> Any: ...
    def copy_normal(self, constEggAttributesself, constEggAttributesother) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColor(self, *args, **kwargs): ...
    def getNormal(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_color(self, EggAttributesself) -> Any: ...
    def get_normal(self, EggAttributesself) -> Any: ...
    def hasColor(self, *args, **kwargs): ...
    def hasNormal(self, *args, **kwargs): ...
    def has_color(self, EggAttributesself) -> Any: ...
    def has_normal(self, EggAttributesself) -> Any: ...
    def matchesColor(self, *args, **kwargs): ...
    def matchesNormal(self, *args, **kwargs): ...
    def matches_color(self, EggAttributesself, constEggAttributesother) -> Any: ...
    def matches_normal(self, EggAttributesself, constEggAttributesother) -> Any: ...
    def setColor(self, *args, **kwargs): ...
    def setNormal(self, *args, **kwargs): ...
    def set_color(self, constEggAttributesself, constLVecBase4fColor) -> Any: ...
    def set_normal(self, constEggAttributesself, constLVector3dnormal) -> Any: ...
    def sortsLessThan(self, *args, **kwargs): ...
    def sorts_less_than(self, EggAttributesself, constEggAttributesother) -> Any: ...
    def transform(self, constEggAttributesself, constLMatrix4dmat) -> Any: ...
    def write(self, EggAttributesself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class EggBin(EggGroup):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getBinNumber(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_bin_number(self, EggBinself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def setBinNumber(self, *args, **kwargs): ...
    def set_bin_number(self, constEggBinself, intbin_number) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggBinMaker(EggObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def collapseGroup(self, *args, **kwargs): ...
    def collapse_group(self, constEggBinMakerself, constEggGroupgroup, intbin_number) -> Any: ...
    def getBinName(self, *args, **kwargs): ...
    def getBinNumber(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_bin_name(self, constEggBinMakerself, intbin_number, constEggNodechild) -> Any: ...
    def get_bin_number(self, constEggBinMakerself, constEggNodenode) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def makeBin(self, *args, **kwargs): ...
    def makeBins(self, *args, **kwargs): ...
    def make_bin(self, constEggBinMakerself, intbin_number, constEggNodechild, EggGroupcollapse_from) -> Any: ...
    def make_bins(self, constEggBinMakerself, EggGroupNoderoot_group) -> Any: ...
    def prepareNode(self, *args, **kwargs): ...
    def prepare_node(self, constEggBinMakerself, EggNodenode) -> Any: ...
    def sortsLess(self, *args, **kwargs): ...
    def sorts_less(self, constEggBinMakerself, intbin_number, constEggNodea, constEggNodeb) -> Any: ...

class EggComment(EggNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def assign(self, constEggCommentself, constEggCommentcopy) -> Any: ...
    @overload
    def assign(self, constEggCommentself, strcomment) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getComment(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_comment(self, EggCommentself) -> Any: ...
    def setComment(self, *args, **kwargs): ...
    def set_comment(self, constEggCommentself, strcomment) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __reduce__(self, EggCommentself) -> Any: ...

class EggCompositePrimitive(EggPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    components: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggCompositePrimitiveself, constEggCompositePrimitivecopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getComponent(self, *args, **kwargs): ...
    def getComponents(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_component(self, constEggCompositePrimitiveself, inti) -> Any: ...
    @overload
    def get_component(self, EggCompositePrimitiveself, inti) -> Any: ...
    def get_components(self, *args, **kwargs): ...
    def get_num_components(self, EggCompositePrimitiveself) -> Any: ...
    def setComponent(self, *args, **kwargs): ...
    def set_component(self, constEggCompositePrimitiveself, inti, constEggAttributesattrib) -> Any: ...
    def triangulateInPlace(self, *args, **kwargs): ...
    def triangulateInto(self, *args, **kwargs): ...
    def triangulate_in_place(self, constEggCompositePrimitiveself) -> Any: ...
    def triangulate_into(self, EggCompositePrimitiveself, EggGroupNodecontainer) -> Any: ...

class EggCoordinateSystem(EggNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_value(self, EggCoordinateSystemself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constEggCoordinateSystemself, intvalue) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __reduce__(self, EggCoordinateSystemself) -> Any: ...

class EggCurve(EggPrimitive):
    CTHpr: ClassVar[int] = ...
    CTNone: ClassVar[int] = ...
    CTT: ClassVar[int] = ...
    CTXyz: ClassVar[int] = ...
    CT_hpr: ClassVar[int] = ...
    CT_none: ClassVar[int] = ...
    CT_t: ClassVar[int] = ...
    CT_xyz: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggCurveself, constEggCurvecopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCurveType(self, *args, **kwargs): ...
    def getSubdiv(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_curve_type(self, EggCurveself) -> Any: ...
    def get_subdiv(self, EggCurveself) -> Any: ...
    def setCurveType(self, *args, **kwargs): ...
    def setSubdiv(self, *args, **kwargs): ...
    def set_curve_type(self, constEggCurveself, inttype) -> Any: ...
    def set_subdiv(self, constEggCurveself, intsubdiv) -> Any: ...
    @staticmethod
    def stringCurveType(*args, **kwargs): ...
    @staticmethod
    def string_curve_type(strstring) -> Any: ...

class EggData(EggGroupNode):
    DtoolClassDict: ClassVar[dict] = ...
    auto_resolve_externals: Incomplete
    coordinate_system: Incomplete
    egg_filename: Incomplete
    egg_timestamp: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggDataself, constEggDatacopy) -> Any: ...
    def collapseEquivalentMaterials(self, *args, **kwargs): ...
    def collapseEquivalentTextures(self, *args, **kwargs): ...
    def collapse_equivalent_materials(self, constEggDataself) -> Any: ...
    def collapse_equivalent_textures(self, constEggDataself) -> Any: ...
    def getAutoResolveExternals(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCoordinateSystem(self, *args, **kwargs): ...
    def getEggFilename(self, *args, **kwargs): ...
    def getEggTimestamp(self, *args, **kwargs): ...
    def get_auto_resolve_externals(self, EggDataself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_coordinate_system(self, EggDataself) -> Any: ...
    def get_egg_filename(self, EggDataself) -> Any: ...
    def get_egg_timestamp(self, EggDataself) -> Any: ...
    def loadExternals(self, *args, **kwargs): ...
    @overload
    def load_externals(self, constEggDataself) -> Any: ...
    @overload
    def load_externals(self, constEggDataself, constDSearchPathsearchpath) -> Any: ...
    @overload
    def load_externals(self, constEggDataself, constDSearchPathsearchpath, BamCacheRecordrecord) -> Any: ...
    def merge(self, constEggDataself, EggDataother) -> Any: ...
    def originalHadAbsolutePathnames(self, *args, **kwargs): ...
    def original_had_absolute_pathnames(self, EggDataself) -> Any: ...
    @overload
    def read(self, constEggDataself, Filenamefilename, strdisplay_name) -> Any: ...
    @overload
    def read(self, constEggDataself, istreamin) -> Any: ...
    def recomputePolygonNormals(self, *args, **kwargs): ...
    def recomputeVertexNormals(self, *args, **kwargs): ...
    def recompute_polygon_normals(self, constEggDataself) -> Any: ...
    def recompute_vertex_normals(self, constEggDataself, doublethreshold) -> Any: ...
    @staticmethod
    def resolveEggFilename(*args, **kwargs): ...
    @staticmethod
    def resolve_egg_filename(Filenameegg_filename, constDSearchPathsearchpath) -> Any: ...
    def setAutoResolveExternals(self, *args, **kwargs): ...
    def setCoordinateSystem(self, *args, **kwargs): ...
    def setEggFilename(self, *args, **kwargs): ...
    def setEggTimestamp(self, *args, **kwargs): ...
    def set_auto_resolve_externals(self, constEggDataself, boolresolve) -> Any: ...
    def set_coordinate_system(self, constEggDataself, intcoordsys) -> Any: ...
    def set_egg_filename(self, constEggDataself, constFilenameegg_filename) -> Any: ...
    def set_egg_timestamp(self, constEggDataself, integg_timestamp) -> Any: ...
    def stripNormals(self, *args, **kwargs): ...
    def strip_normals(self, constEggDataself) -> Any: ...
    def writeEgg(self, *args, **kwargs): ...
    @overload
    def write_egg(self, constEggDataself, Filenamefilename) -> Any: ...
    @overload
    def write_egg(self, constEggDataself, ostreamout) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggExternalReference(EggFilenameNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggExternalReferenceself, constEggExternalReferencecopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggFilenameNode(EggNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggFilenameNodeself, constEggFilenameNodecopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDefaultExtension(self, *args, **kwargs): ...
    def getFilename(self, *args, **kwargs): ...
    def getFullpath(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_default_extension(self, EggFilenameNodeself) -> Any: ...
    def get_filename(self, EggFilenameNodeself) -> Any: ...
    def get_fullpath(self, EggFilenameNodeself) -> Any: ...
    def setFilename(self, *args, **kwargs): ...
    def setFullpath(self, *args, **kwargs): ...
    def set_filename(self, constEggFilenameNodeself, constFilenamefilename) -> Any: ...
    def set_fullpath(self, constEggFilenameNodeself, constFilenamefullpath) -> Any: ...

class EggGroup(EggGroupNode, EggRenderMode, EggTransform):
    BMAdd: ClassVar[int] = ...
    BMInvSubtract: ClassVar[int] = ...
    BMMax: ClassVar[int] = ...
    BMMin: ClassVar[int] = ...
    BMNone: ClassVar[int] = ...
    BMSubtract: ClassVar[int] = ...
    BMUnspecified: ClassVar[int] = ...
    BM_add: ClassVar[int] = ...
    BM_inv_subtract: ClassVar[int] = ...
    BM_max: ClassVar[int] = ...
    BM_min: ClassVar[int] = ...
    BM_none: ClassVar[int] = ...
    BM_subtract: ClassVar[int] = ...
    BM_unspecified: ClassVar[int] = ...
    BOAlphaScale: ClassVar[int] = ...
    BOColorScale: ClassVar[int] = ...
    BOConstantAlpha: ClassVar[int] = ...
    BOConstantColor: ClassVar[int] = ...
    BOFbufferAlpha: ClassVar[int] = ...
    BOFbufferColor: ClassVar[int] = ...
    BOIncomingAlpha: ClassVar[int] = ...
    BOIncomingColor: ClassVar[int] = ...
    BOIncomingColorSaturate: ClassVar[int] = ...
    BOOne: ClassVar[int] = ...
    BOOneMinusAlphaScale: ClassVar[int] = ...
    BOOneMinusColorScale: ClassVar[int] = ...
    BOOneMinusConstantAlpha: ClassVar[int] = ...
    BOOneMinusConstantColor: ClassVar[int] = ...
    BOOneMinusFbufferAlpha: ClassVar[int] = ...
    BOOneMinusFbufferColor: ClassVar[int] = ...
    BOOneMinusIncomingAlpha: ClassVar[int] = ...
    BOOneMinusIncomingColor: ClassVar[int] = ...
    BOUnspecified: ClassVar[int] = ...
    BOZero: ClassVar[int] = ...
    BO_alpha_scale: ClassVar[int] = ...
    BO_color_scale: ClassVar[int] = ...
    BO_constant_alpha: ClassVar[int] = ...
    BO_constant_color: ClassVar[int] = ...
    BO_fbuffer_alpha: ClassVar[int] = ...
    BO_fbuffer_color: ClassVar[int] = ...
    BO_incoming_alpha: ClassVar[int] = ...
    BO_incoming_color: ClassVar[int] = ...
    BO_incoming_color_saturate: ClassVar[int] = ...
    BO_one: ClassVar[int] = ...
    BO_one_minus_alpha_scale: ClassVar[int] = ...
    BO_one_minus_color_scale: ClassVar[int] = ...
    BO_one_minus_constant_alpha: ClassVar[int] = ...
    BO_one_minus_constant_color: ClassVar[int] = ...
    BO_one_minus_fbuffer_alpha: ClassVar[int] = ...
    BO_one_minus_fbuffer_color: ClassVar[int] = ...
    BO_one_minus_incoming_alpha: ClassVar[int] = ...
    BO_one_minus_incoming_color: ClassVar[int] = ...
    BO_unspecified: ClassVar[int] = ...
    BO_zero: ClassVar[int] = ...
    BTAxis: ClassVar[int] = ...
    BTNone: ClassVar[int] = ...
    BTPointCameraRelative: ClassVar[int] = ...
    BTPointWorldRelative: ClassVar[int] = ...
    BT_axis: ClassVar[int] = ...
    BT_none: ClassVar[int] = ...
    BT_point_camera_relative: ClassVar[int] = ...
    BT_point_world_relative: ClassVar[int] = ...
    CFCenter: ClassVar[int] = ...
    CFDescend: ClassVar[int] = ...
    CFEvent: ClassVar[int] = ...
    CFIntangible: ClassVar[int] = ...
    CFKeep: ClassVar[int] = ...
    CFLevel: ClassVar[int] = ...
    CFNone: ClassVar[int] = ...
    CFSolid: ClassVar[int] = ...
    CFTurnstile: ClassVar[int] = ...
    CF_center: ClassVar[int] = ...
    CF_descend: ClassVar[int] = ...
    CF_event: ClassVar[int] = ...
    CF_intangible: ClassVar[int] = ...
    CF_keep: ClassVar[int] = ...
    CF_level: ClassVar[int] = ...
    CF_none: ClassVar[int] = ...
    CF_solid: ClassVar[int] = ...
    CF_turnstile: ClassVar[int] = ...
    CSTBox: ClassVar[int] = ...
    CSTFloorMesh: ClassVar[int] = ...
    CSTInvSphere: ClassVar[int] = ...
    CSTNone: ClassVar[int] = ...
    CSTPlane: ClassVar[int] = ...
    CSTPolygon: ClassVar[int] = ...
    CSTPolyset: ClassVar[int] = ...
    CSTSphere: ClassVar[int] = ...
    CSTTube: ClassVar[int] = ...
    CST_box: ClassVar[int] = ...
    CST_floor_mesh: ClassVar[int] = ...
    CST_inv_sphere: ClassVar[int] = ...
    CST_none: ClassVar[int] = ...
    CST_plane: ClassVar[int] = ...
    CST_polygon: ClassVar[int] = ...
    CST_polyset: ClassVar[int] = ...
    CST_sphere: ClassVar[int] = ...
    CST_tube: ClassVar[int] = ...
    DCDefault: ClassVar[int] = ...
    DCLocal: ClassVar[int] = ...
    DCNet: ClassVar[int] = ...
    DCNoTouch: ClassVar[int] = ...
    DCNone: ClassVar[int] = ...
    DCUnspecified: ClassVar[int] = ...
    DC_default: ClassVar[int] = ...
    DC_local: ClassVar[int] = ...
    DC_net: ClassVar[int] = ...
    DC_no_touch: ClassVar[int] = ...
    DC_none: ClassVar[int] = ...
    DC_unspecified: ClassVar[int] = ...
    DTDefault: ClassVar[int] = ...
    DTNone: ClassVar[int] = ...
    DTNosync: ClassVar[int] = ...
    DTStructured: ClassVar[int] = ...
    DTSync: ClassVar[int] = ...
    DT_default: ClassVar[int] = ...
    DT_none: ClassVar[int] = ...
    DT_nosync: ClassVar[int] = ...
    DT_structured: ClassVar[int] = ...
    DT_sync: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    GTGroup: ClassVar[int] = ...
    GTInstance: ClassVar[int] = ...
    GTInvalid: ClassVar[int] = ...
    GTJoint: ClassVar[int] = ...
    GT_group: ClassVar[int] = ...
    GT_instance: ClassVar[int] = ...
    GT_invalid: ClassVar[int] = ...
    GT_joint: ClassVar[int] = ...
    billboard_center: Incomplete
    billboard_type: Incomplete
    blend_color: Incomplete
    blend_mode: Incomplete
    blend_operand_a: Incomplete
    blend_operand_b: Incomplete
    collide_flags: Incomplete
    collide_mask: Incomplete
    collision_name: Incomplete
    cs_type: Incomplete
    dart_type: Incomplete
    dcs_type: Incomplete
    decal_flag: Incomplete
    default_pose: Incomplete
    direct_flag: Incomplete
    from_collide_mask: Incomplete
    group_type: Incomplete
    indexed_flag: Incomplete
    into_collide_mask: Incomplete
    lod: Incomplete
    model_flag: Incomplete
    nofog_flag: Incomplete
    object_types: Incomplete
    occluder_flag: Incomplete
    portal_flag: Incomplete
    scroll_r: Incomplete
    scroll_u: Incomplete
    scroll_v: Incomplete
    scroll_w: Incomplete
    switch_flag: Incomplete
    switch_fps: Incomplete
    texlist_flag: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addGroupRef(self, *args, **kwargs): ...
    def addObjectType(self, *args, **kwargs): ...
    def add_group_ref(self, constEggGroupself, EggGroupgroup) -> Any: ...
    def add_object_type(self, constEggGroupself, strobject_type) -> Any: ...
    def assign(self, constEggGroupself, constEggGroupcopy) -> Any: ...
    def clearBillboardCenter(self, *args, **kwargs): ...
    def clearBlendColor(self, *args, **kwargs): ...
    def clearCollideMask(self, *args, **kwargs): ...
    def clearCollisionName(self, *args, **kwargs): ...
    def clearDefaultPose(self, *args, **kwargs): ...
    def clearFromCollideMask(self, *args, **kwargs): ...
    def clearGroupRefs(self, *args, **kwargs): ...
    def clearIndexedFlag(self, *args, **kwargs): ...
    def clearIntoCollideMask(self, *args, **kwargs): ...
    def clearLod(self, *args, **kwargs): ...
    def clearObjectTypes(self, *args, **kwargs): ...
    def clearTag(self, *args, **kwargs): ...
    def clear_billboard_center(self, constEggGroupself) -> Any: ...
    def clear_blend_color(self, constEggGroupself) -> Any: ...
    def clear_collide_mask(self, constEggGroupself) -> Any: ...
    def clear_collision_name(self, constEggGroupself) -> Any: ...
    def clear_default_pose(self, constEggGroupself) -> Any: ...
    def clear_from_collide_mask(self, constEggGroupself) -> Any: ...
    def clear_group_refs(self, constEggGroupself) -> Any: ...
    def clear_indexed_flag(self, constEggGroupself) -> Any: ...
    def clear_into_collide_mask(self, constEggGroupself) -> Any: ...
    def clear_lod(self, constEggGroupself) -> Any: ...
    def clear_object_types(self, constEggGroupself) -> Any: ...
    @overload
    def clear_tag(self, constEggGroupself, strkey) -> Any: ...
    @overload
    def clear_tag(self) -> Any: ...
    def determineAlphaMode(self, *args, **kwargs): ...
    def determineBin(self, *args, **kwargs): ...
    def determineDecal(self, *args, **kwargs): ...
    def determineDepthOffset(self, *args, **kwargs): ...
    def determineDepthTestMode(self, *args, **kwargs): ...
    def determineDepthWriteMode(self, *args, **kwargs): ...
    def determineDrawOrder(self, *args, **kwargs): ...
    def determineIndexed(self, *args, **kwargs): ...
    def determineVisibilityMode(self, *args, **kwargs): ...
    def determine_alpha_mode(self, constEggGroupself) -> Any: ...
    def determine_bin(self, constEggGroupself) -> Any: ...
    def determine_decal(self, constEggGroupself) -> Any: ...
    def determine_depth_offset(self, constEggGroupself) -> Any: ...
    def determine_depth_test_mode(self, constEggGroupself) -> Any: ...
    def determine_depth_write_mode(self, constEggGroupself) -> Any: ...
    def determine_draw_order(self, constEggGroupself) -> Any: ...
    def determine_indexed(self, constEggGroupself) -> Any: ...
    def determine_visibility_mode(self, constEggGroupself) -> Any: ...
    def getBillboardCenter(self, *args, **kwargs): ...
    def getBillboardType(self, *args, **kwargs): ...
    def getBlendColor(self, *args, **kwargs): ...
    def getBlendMode(self, *args, **kwargs): ...
    def getBlendOperandA(self, *args, **kwargs): ...
    def getBlendOperandB(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCollideFlags(self, *args, **kwargs): ...
    def getCollideMask(self, *args, **kwargs): ...
    def getCollisionName(self, *args, **kwargs): ...
    def getCsType(self, *args, **kwargs): ...
    def getDartType(self, *args, **kwargs): ...
    def getDcsType(self, *args, **kwargs): ...
    def getDecalFlag(self, *args, **kwargs): ...
    def getDefaultPose(self, *args, **kwargs): ...
    def getDirectFlag(self, *args, **kwargs): ...
    def getFromCollideMask(self, *args, **kwargs): ...
    def getGroupRef(self, *args, **kwargs): ...
    def getGroupRefs(self, *args, **kwargs): ...
    def getGroupType(self, *args, **kwargs): ...
    def getIndexedFlag(self, *args, **kwargs): ...
    def getIntoCollideMask(self, *args, **kwargs): ...
    def getLod(self, *args, **kwargs): ...
    def getModelFlag(self, *args, **kwargs): ...
    def getNofogFlag(self, *args, **kwargs): ...
    def getNumGroupRefs(self, *args, **kwargs): ...
    def getNumObjectTypes(self, *args, **kwargs): ...
    def getObjectType(self, *args, **kwargs): ...
    def getObjectTypes(self, *args, **kwargs): ...
    def getOccluderFlag(self, *args, **kwargs): ...
    def getPolylightFlag(self, *args, **kwargs): ...
    def getPortalFlag(self, *args, **kwargs): ...
    def getScrollR(self, *args, **kwargs): ...
    def getScrollU(self, *args, **kwargs): ...
    def getScrollV(self, *args, **kwargs): ...
    def getScrollW(self, *args, **kwargs): ...
    def getSwitchFlag(self, *args, **kwargs): ...
    def getSwitchFps(self, *args, **kwargs): ...
    def getTag(self, *args, **kwargs): ...
    def getTexlistFlag(self, *args, **kwargs): ...
    def getVertexMembership(self, *args, **kwargs): ...
    def get_billboard_center(self, EggGroupself) -> Any: ...
    def get_billboard_type(self, EggGroupself) -> Any: ...
    def get_blend_color(self, EggGroupself) -> Any: ...
    def get_blend_mode(self, EggGroupself) -> Any: ...
    def get_blend_operand_a(self, EggGroupself) -> Any: ...
    def get_blend_operand_b(self, EggGroupself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_collide_flags(self, EggGroupself) -> Any: ...
    def get_collide_mask(self, EggGroupself) -> Any: ...
    def get_collision_name(self, EggGroupself) -> Any: ...
    def get_cs_type(self, EggGroupself) -> Any: ...
    def get_dart_type(self, EggGroupself) -> Any: ...
    def get_dcs_type(self, EggGroupself) -> Any: ...
    def get_decal_flag(self, EggGroupself) -> Any: ...
    def get_default_pose(self, EggGroupself) -> Any: ...
    def get_direct_flag(self, EggGroupself) -> Any: ...
    def get_from_collide_mask(self, EggGroupself) -> Any: ...
    def get_group_ref(self, EggGroupself, intn) -> Any: ...
    def get_group_refs(self, *args, **kwargs): ...
    def get_group_type(self, EggGroupself) -> Any: ...
    def get_indexed_flag(self, EggGroupself) -> Any: ...
    def get_into_collide_mask(self, EggGroupself) -> Any: ...
    def get_lod(self, EggGroupself) -> Any: ...
    def get_model_flag(self, EggGroupself) -> Any: ...
    def get_nofog_flag(self, EggGroupself) -> Any: ...
    def get_num_group_refs(self, EggGroupself) -> Any: ...
    def get_num_object_types(self, EggGroupself) -> Any: ...
    def get_object_type(self, EggGroupself, intindex) -> Any: ...
    def get_object_types(self, *args, **kwargs): ...
    def get_occluder_flag(self, EggGroupself) -> Any: ...
    def get_polylight_flag(self, EggGroupself) -> Any: ...
    def get_portal_flag(self, EggGroupself) -> Any: ...
    def get_scroll_r(self, EggGroupself) -> Any: ...
    def get_scroll_u(self, EggGroupself) -> Any: ...
    def get_scroll_v(self, EggGroupself) -> Any: ...
    def get_scroll_w(self, EggGroupself) -> Any: ...
    def get_switch_flag(self, EggGroupself) -> Any: ...
    def get_switch_fps(self, EggGroupself) -> Any: ...
    def get_tag(self, EggGroupself, strkey) -> Any: ...
    def get_texlist_flag(self, EggGroupself) -> Any: ...
    def get_vertex_membership(self, EggGroupself, constEggVertexvert) -> Any: ...
    def hasBillboardCenter(self, *args, **kwargs): ...
    def hasBlendColor(self, *args, **kwargs): ...
    def hasCollideMask(self, *args, **kwargs): ...
    def hasCollisionName(self, *args, **kwargs): ...
    def hasDcsType(self, *args, **kwargs): ...
    def hasFromCollideMask(self, *args, **kwargs): ...
    def hasIndexedFlag(self, *args, **kwargs): ...
    def hasIntoCollideMask(self, *args, **kwargs): ...
    def hasLod(self, *args, **kwargs): ...
    def hasObjectType(self, *args, **kwargs): ...
    def hasScrollingUvs(self, *args, **kwargs): ...
    def hasTag(self, *args, **kwargs): ...
    def has_billboard_center(self, EggGroupself) -> Any: ...
    def has_blend_color(self, EggGroupself) -> Any: ...
    def has_collide_mask(self, EggGroupself) -> Any: ...
    def has_collision_name(self, EggGroupself) -> Any: ...
    def has_dcs_type(self, EggGroupself) -> Any: ...
    def has_from_collide_mask(self, EggGroupself) -> Any: ...
    def has_indexed_flag(self, EggGroupself) -> Any: ...
    def has_into_collide_mask(self, EggGroupself) -> Any: ...
    def has_lod(self, EggGroupself) -> Any: ...
    def has_object_type(self, EggGroupself, strobject_type) -> Any: ...
    def has_scrolling_uvs(self, constEggGroupself) -> Any: ...
    def has_tag(self, EggGroupself, strkey) -> Any: ...
    def isInstanceType(self, *args, **kwargs): ...
    def isJoint(self, *args, **kwargs): ...
    def is_instance_type(self, EggGroupself) -> Any: ...
    def is_joint(self, EggGroupself) -> Any: ...
    def modifyDefaultPose(self, *args, **kwargs): ...
    def modify_default_pose(self, constEggGroupself) -> Any: ...
    def refVertex(self, *args, **kwargs): ...
    def ref_vertex(self, constEggGroupself, EggVertexvert, doublemembership) -> Any: ...
    def removeGroupRef(self, *args, **kwargs): ...
    def removeObjectType(self, *args, **kwargs): ...
    def remove_group_ref(self, constEggGroupself, intn) -> Any: ...
    def remove_object_type(self, constEggGroupself, strobject_type) -> Any: ...
    def setBillboardCenter(self, *args, **kwargs): ...
    def setBillboardType(self, *args, **kwargs): ...
    def setBlendColor(self, *args, **kwargs): ...
    def setBlendMode(self, *args, **kwargs): ...
    def setBlendOperandA(self, *args, **kwargs): ...
    def setBlendOperandB(self, *args, **kwargs): ...
    def setCollideFlags(self, *args, **kwargs): ...
    def setCollideMask(self, *args, **kwargs): ...
    def setCollisionName(self, *args, **kwargs): ...
    def setCsType(self, *args, **kwargs): ...
    def setDartType(self, *args, **kwargs): ...
    def setDcsType(self, *args, **kwargs): ...
    def setDecalFlag(self, *args, **kwargs): ...
    def setDefaultPose(self, *args, **kwargs): ...
    def setDirectFlag(self, *args, **kwargs): ...
    def setFromCollideMask(self, *args, **kwargs): ...
    def setGroupType(self, *args, **kwargs): ...
    def setIndexedFlag(self, *args, **kwargs): ...
    def setIntoCollideMask(self, *args, **kwargs): ...
    def setLod(self, *args, **kwargs): ...
    def setModelFlag(self, *args, **kwargs): ...
    def setNofogFlag(self, *args, **kwargs): ...
    def setOccluderFlag(self, *args, **kwargs): ...
    def setPolylightFlag(self, *args, **kwargs): ...
    def setPortalFlag(self, *args, **kwargs): ...
    def setScrollR(self, *args, **kwargs): ...
    def setScrollU(self, *args, **kwargs): ...
    def setScrollV(self, *args, **kwargs): ...
    def setScrollW(self, *args, **kwargs): ...
    def setSwitchFlag(self, *args, **kwargs): ...
    def setSwitchFps(self, *args, **kwargs): ...
    def setTag(self, *args, **kwargs): ...
    def setTexlistFlag(self, *args, **kwargs): ...
    def setVertexMembership(self, *args, **kwargs): ...
    def set_billboard_center(self, constEggGroupself, constLPoint3dbillboard_center) -> Any: ...
    def set_billboard_type(self, constEggGroupself, inttype) -> Any: ...
    def set_blend_color(self, constEggGroupself, constLVecBase4fblend_color) -> Any: ...
    def set_blend_mode(self, constEggGroupself, intblend_mode) -> Any: ...
    def set_blend_operand_a(self, constEggGroupself, intblend_operand_a) -> Any: ...
    def set_blend_operand_b(self, constEggGroupself, intblend_operand_b) -> Any: ...
    def set_collide_flags(self, constEggGroupself, intflags) -> Any: ...
    def set_collide_mask(self, constEggGroupself, BitMaskmask) -> Any: ...
    def set_collision_name(self, constEggGroupself, strcollision_name) -> Any: ...
    def set_cs_type(self, constEggGroupself, inttype) -> Any: ...
    def set_dart_type(self, constEggGroupself, inttype) -> Any: ...
    def set_dcs_type(self, constEggGroupself, inttype) -> Any: ...
    def set_decal_flag(self, constEggGroupself, boolflag) -> Any: ...
    def set_default_pose(self, constEggGroupself, constEggTransformtransform) -> Any: ...
    def set_direct_flag(self, constEggGroupself, boolflag) -> Any: ...
    def set_from_collide_mask(self, constEggGroupself, BitMaskmask) -> Any: ...
    def set_group_type(self, constEggGroupself, inttype) -> Any: ...
    def set_indexed_flag(self, constEggGroupself, boolflag) -> Any: ...
    def set_into_collide_mask(self, constEggGroupself, BitMaskmask) -> Any: ...
    def set_lod(self, constEggGroupself, constEggSwitchConditionlod) -> Any: ...
    def set_model_flag(self, constEggGroupself, boolflag) -> Any: ...
    def set_nofog_flag(self, constEggGroupself, boolflag) -> Any: ...
    def set_occluder_flag(self, constEggGroupself, boolflag) -> Any: ...
    def set_polylight_flag(self, constEggGroupself, boolflag) -> Any: ...
    def set_portal_flag(self, constEggGroupself, boolflag) -> Any: ...
    def set_scroll_r(self, constEggGroupself, doubler_speed) -> Any: ...
    def set_scroll_u(self, constEggGroupself, doubleu_speed) -> Any: ...
    def set_scroll_v(self, constEggGroupself, doublev_speed) -> Any: ...
    def set_scroll_w(self, constEggGroupself, doublew_speed) -> Any: ...
    def set_switch_flag(self, constEggGroupself, boolflag) -> Any: ...
    def set_switch_fps(self, constEggGroupself, doublefps) -> Any: ...
    def set_tag(self, constEggGroupself, strkey, strvalue) -> Any: ...
    def set_texlist_flag(self, constEggGroupself, boolflag) -> Any: ...
    def set_vertex_membership(self, constEggGroupself, EggVertexvert, doublemembership) -> Any: ...
    def stealVrefs(self, *args, **kwargs): ...
    def steal_vrefs(self, constEggGroupself, EggGroupother) -> Any: ...
    @staticmethod
    def stringBillboardType(*args, **kwargs): ...
    @staticmethod
    def stringBlendMode(*args, **kwargs): ...
    @staticmethod
    def stringBlendOperand(*args, **kwargs): ...
    @staticmethod
    def stringCollideFlags(*args, **kwargs): ...
    @staticmethod
    def stringCsType(*args, **kwargs): ...
    @staticmethod
    def stringDartType(*args, **kwargs): ...
    @staticmethod
    def stringDcsType(*args, **kwargs): ...
    @staticmethod
    def stringGroupType(*args, **kwargs): ...
    @staticmethod
    def string_billboard_type(strstrval) -> Any: ...
    @staticmethod
    def string_blend_mode(strstrval) -> Any: ...
    @staticmethod
    def string_blend_operand(strstrval) -> Any: ...
    @staticmethod
    def string_collide_flags(strstrval) -> Any: ...
    @staticmethod
    def string_cs_type(strstrval) -> Any: ...
    @staticmethod
    def string_dart_type(strstrval) -> Any: ...
    @staticmethod
    def string_dcs_type(strstrval) -> Any: ...
    @staticmethod
    def string_group_type(strstrval) -> Any: ...
    def testVrefIntegrity(self, *args, **kwargs): ...
    def test_vref_integrity(self, EggGroupself) -> Any: ...
    def unrefAllVertices(self, *args, **kwargs): ...
    def unrefVertex(self, *args, **kwargs): ...
    def unref_all_vertices(self, constEggGroupself) -> Any: ...
    def unref_vertex(self, constEggGroupself, EggVertexvert) -> Any: ...
    def upcastToEggGroupNode(self, *args, **kwargs): ...
    def upcastToEggRenderMode(self, *args, **kwargs): ...
    def upcastToEggTransform(self, *args, **kwargs): ...
    def upcast_to_EggGroupNode(self, constEggGroupself) -> Any: ...
    def upcast_to_EggRenderMode(self, constEggGroupself) -> Any: ...
    def upcast_to_EggTransform(self, constEggGroupself) -> Any: ...
    def write(self, EggGroupself, ostreamout, intindent_level) -> Any: ...
    def writeBillboardFlags(self, *args, **kwargs): ...
    def writeCollideFlags(self, *args, **kwargs): ...
    def writeDecalFlags(self, *args, **kwargs): ...
    def writeModelFlags(self, *args, **kwargs): ...
    def writeObjectTypes(self, *args, **kwargs): ...
    def writeRenderMode(self, *args, **kwargs): ...
    def writeSwitchFlags(self, *args, **kwargs): ...
    def writeTags(self, *args, **kwargs): ...
    def write_billboard_flags(self, EggGroupself, ostreamout, intindent_level) -> Any: ...
    def write_collide_flags(self, EggGroupself, ostreamout, intindent_level) -> Any: ...
    def write_decal_flags(self, EggGroupself, ostreamout, intindent_level) -> Any: ...
    def write_model_flags(self, EggGroupself, ostreamout, intindent_level) -> Any: ...
    def write_object_types(self, EggGroupself, ostreamout, intindent_level) -> Any: ...
    def write_render_mode(self, EggGroupself, ostreamout, intindent_level) -> Any: ...
    def write_switch_flags(self, EggGroupself, ostreamout, intindent_level) -> Any: ...
    def write_tags(self, EggGroupself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggGroupNode(EggNode):
    DtoolClassDict: ClassVar[dict] = ...
    TComposite: ClassVar[int] = ...
    TConvex: ClassVar[int] = ...
    TFlatShaded: ClassVar[int] = ...
    TPolygon: ClassVar[int] = ...
    TRecurse: ClassVar[int] = ...
    T_composite: ClassVar[int] = ...
    T_convex: ClassVar[int] = ...
    T_flat_shaded: ClassVar[int] = ...
    T_polygon: ClassVar[int] = ...
    T_recurse: ClassVar[int] = ...
    children: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addChild(self, *args, **kwargs): ...
    def add_child(self, constEggGroupNodeself, EggNodenode) -> Any: ...
    def applyFirstAttribute(self, *args, **kwargs): ...
    def applyLastAttribute(self, *args, **kwargs): ...
    def apply_first_attribute(self, constEggGroupNodeself, boolrecurse) -> Any: ...
    def apply_last_attribute(self, constEggGroupNodeself, boolrecurse) -> Any: ...
    def assign(self, constEggGroupNodeself, constEggGroupNodecopy) -> Any: ...
    def clear(self, constEggGroupNodeself) -> Any: ...
    def clearConnectedShading(self, *args, **kwargs): ...
    def clear_connected_shading(self, constEggGroupNodeself) -> Any: ...
    def empty(self, EggGroupNodeself) -> Any: ...
    def findChild(self, *args, **kwargs): ...
    def find_child(self, EggGroupNodeself, strname) -> Any: ...
    def forceFilenames(self, *args, **kwargs): ...
    def force_filenames(self, constEggGroupNodeself, constFilenamedirectory) -> Any: ...
    def getChildren(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getConnectedShading(self, *args, **kwargs): ...
    def getFirstChild(self, *args, **kwargs): ...
    def getNextChild(self, *args, **kwargs): ...
    def get_children(self, EggGroupNodeself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_connected_shading(self, constEggGroupNodeself) -> Any: ...
    def get_first_child(self, constEggGroupNodeself) -> Any: ...
    def get_next_child(self, constEggGroupNodeself) -> Any: ...
    def hasAbsolutePathnames(self, *args, **kwargs): ...
    def hasNormals(self, *args, **kwargs): ...
    def hasPrimitives(self, *args, **kwargs): ...
    def has_absolute_pathnames(self, EggGroupNodeself) -> Any: ...
    def has_normals(self, EggGroupNodeself) -> Any: ...
    def has_primitives(self, EggGroupNodeself) -> Any: ...
    @staticmethod
    def isRight(*args, **kwargs): ...
    @staticmethod
    def is_right(constLVector2dv1, constLVector2dv2) -> Any: ...
    def jointHasPrimitives(self, *args, **kwargs): ...
    def joint_has_primitives(self, EggGroupNodeself) -> Any: ...
    def makePointPrimitives(self, *args, **kwargs): ...
    def make_point_primitives(self, constEggGroupNodeself) -> Any: ...
    def meshTriangles(self, *args, **kwargs): ...
    def mesh_triangles(self, constEggGroupNodeself, intflags) -> Any: ...
    def postApplyFlatAttribute(self, *args, **kwargs): ...
    def post_apply_flat_attribute(self, constEggGroupNodeself, boolrecurse) -> Any: ...
    def recomputePolygonNormals(self, *args, **kwargs): ...
    def recomputeTangentBinormal(self, *args, **kwargs): ...
    def recomputeTangentBinormalAuto(self, *args, **kwargs): ...
    def recomputeVertexNormals(self, *args, **kwargs): ...
    def recompute_polygon_normals(self, constEggGroupNodeself, intcs) -> Any: ...
    def recompute_tangent_binormal(self, constEggGroupNodeself, constGlobPatternuv_name) -> Any: ...
    def recompute_tangent_binormal_auto(self, constEggGroupNodeself) -> Any: ...
    def recompute_vertex_normals(self, constEggGroupNodeself, doublethreshold, intcs) -> Any: ...
    def removeChild(self, *args, **kwargs): ...
    def removeInvalidPrimitives(self, *args, **kwargs): ...
    def removeUnusedVertices(self, *args, **kwargs): ...
    def remove_child(self, constEggGroupNodeself, EggNodenode) -> Any: ...
    def remove_invalid_primitives(self, constEggGroupNodeself, boolrecurse) -> Any: ...
    def remove_unused_vertices(self, constEggGroupNodeself, boolrecurse) -> Any: ...
    def resolveFilenames(self, *args, **kwargs): ...
    def resolve_filenames(self, constEggGroupNodeself, constDSearchPathsearchpath) -> Any: ...
    def reverseVertexOrdering(self, *args, **kwargs): ...
    def reverse_vertex_ordering(self, constEggGroupNodeself) -> Any: ...
    def size(self, EggGroupNodeself) -> Any: ...
    def stealChildren(self, *args, **kwargs): ...
    def steal_children(self, constEggGroupNodeself, EggGroupNodeother) -> Any: ...
    def stripNormals(self, *args, **kwargs): ...
    def strip_normals(self, constEggGroupNodeself) -> Any: ...
    def triangulatePolygons(self, *args, **kwargs): ...
    def triangulate_polygons(self, constEggGroupNodeself, intflags) -> Any: ...
    def unifyAttributes(self, *args, **kwargs): ...
    def unify_attributes(self, constEggGroupNodeself, booluse_connected_shading, boolallow_per_primitive, boolrecurse) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggGroupUniquifier(EggNameUniquifier):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class EggLine(EggCompositePrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggLineself, constEggLinecopy) -> Any: ...
    def clearThick(self, *args, **kwargs): ...
    def clear_thick(self, constEggLineself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getThick(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_thick(self, EggLineself) -> Any: ...
    def hasThick(self, *args, **kwargs): ...
    def has_thick(self, EggLineself) -> Any: ...
    def setThick(self, *args, **kwargs): ...
    def set_thick(self, constEggLineself, doublethick) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggMaterial(EggNode):
    DtoolClassDict: ClassVar[dict] = ...
    EAttributes: ClassVar[int] = ...
    EMrefName: ClassVar[int] = ...
    E_attributes: ClassVar[int] = ...
    E_mref_name: ClassVar[int] = ...
    amb: Incomplete
    base: Incomplete
    diff: Incomplete
    emit: Incomplete
    ior: Incomplete
    local: Incomplete
    metallic: Incomplete
    roughness: Incomplete
    shininess: Incomplete
    spec: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clearAmb(self, *args, **kwargs): ...
    def clearBase(self, *args, **kwargs): ...
    def clearDiff(self, *args, **kwargs): ...
    def clearEmit(self, *args, **kwargs): ...
    def clearIor(self, *args, **kwargs): ...
    def clearLocal(self, *args, **kwargs): ...
    def clearMetallic(self, *args, **kwargs): ...
    def clearRoughness(self, *args, **kwargs): ...
    def clearShininess(self, *args, **kwargs): ...
    def clearSpec(self, *args, **kwargs): ...
    def clear_amb(self, constEggMaterialself) -> Any: ...
    def clear_base(self, constEggMaterialself) -> Any: ...
    def clear_diff(self, constEggMaterialself) -> Any: ...
    def clear_emit(self, constEggMaterialself) -> Any: ...
    def clear_ior(self, constEggMaterialself) -> Any: ...
    def clear_local(self, constEggMaterialself) -> Any: ...
    def clear_metallic(self, constEggMaterialself) -> Any: ...
    def clear_roughness(self, constEggMaterialself) -> Any: ...
    def clear_shininess(self, constEggMaterialself) -> Any: ...
    def clear_spec(self, constEggMaterialself) -> Any: ...
    def getAmb(self, *args, **kwargs): ...
    def getBase(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDiff(self, *args, **kwargs): ...
    def getEmit(self, *args, **kwargs): ...
    def getIor(self, *args, **kwargs): ...
    def getLocal(self, *args, **kwargs): ...
    def getMetallic(self, *args, **kwargs): ...
    def getRoughness(self, *args, **kwargs): ...
    def getShininess(self, *args, **kwargs): ...
    def getSpec(self, *args, **kwargs): ...
    def get_amb(self, EggMaterialself) -> Any: ...
    def get_base(self, EggMaterialself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_diff(self, EggMaterialself) -> Any: ...
    def get_emit(self, EggMaterialself) -> Any: ...
    def get_ior(self, EggMaterialself) -> Any: ...
    def get_local(self, EggMaterialself) -> Any: ...
    def get_metallic(self, EggMaterialself) -> Any: ...
    def get_roughness(self, EggMaterialself) -> Any: ...
    def get_shininess(self, EggMaterialself) -> Any: ...
    def get_spec(self, EggMaterialself) -> Any: ...
    def hasAmb(self, *args, **kwargs): ...
    def hasBase(self, *args, **kwargs): ...
    def hasDiff(self, *args, **kwargs): ...
    def hasEmit(self, *args, **kwargs): ...
    def hasIor(self, *args, **kwargs): ...
    def hasLocal(self, *args, **kwargs): ...
    def hasMetallic(self, *args, **kwargs): ...
    def hasRoughness(self, *args, **kwargs): ...
    def hasShininess(self, *args, **kwargs): ...
    def hasSpec(self, *args, **kwargs): ...
    def has_amb(self, EggMaterialself) -> Any: ...
    def has_base(self, EggMaterialself) -> Any: ...
    def has_diff(self, EggMaterialself) -> Any: ...
    def has_emit(self, EggMaterialself) -> Any: ...
    def has_ior(self, EggMaterialself) -> Any: ...
    def has_local(self, EggMaterialself) -> Any: ...
    def has_metallic(self, EggMaterialself) -> Any: ...
    def has_roughness(self, EggMaterialself) -> Any: ...
    def has_shininess(self, EggMaterialself) -> Any: ...
    def has_spec(self, EggMaterialself) -> Any: ...
    def isEquivalentTo(self, *args, **kwargs): ...
    def is_equivalent_to(self, EggMaterialself, constEggMaterialother, inteq) -> Any: ...
    def setAmb(self, *args, **kwargs): ...
    def setBase(self, *args, **kwargs): ...
    def setDiff(self, *args, **kwargs): ...
    def setEmit(self, *args, **kwargs): ...
    def setIor(self, *args, **kwargs): ...
    def setLocal(self, *args, **kwargs): ...
    def setMetallic(self, *args, **kwargs): ...
    def setRoughness(self, *args, **kwargs): ...
    def setShininess(self, *args, **kwargs): ...
    def setSpec(self, *args, **kwargs): ...
    def set_amb(self, constEggMaterialself, constLVecBase4famb) -> Any: ...
    def set_base(self, constEggMaterialself, constLVecBase4fbase) -> Any: ...
    def set_diff(self, constEggMaterialself, constLVecBase4fdiff) -> Any: ...
    def set_emit(self, constEggMaterialself, constLVecBase4femit) -> Any: ...
    def set_ior(self, constEggMaterialself, doubleior) -> Any: ...
    def set_local(self, constEggMaterialself, boollocal) -> Any: ...
    def set_metallic(self, constEggMaterialself, doublemetallic) -> Any: ...
    def set_roughness(self, constEggMaterialself, doubleroughness) -> Any: ...
    def set_shininess(self, constEggMaterialself, doubleshininess) -> Any: ...
    def set_spec(self, constEggMaterialself, constLVecBase4fspec) -> Any: ...
    def sortsLessThan(self, *args, **kwargs): ...
    def sorts_less_than(self, EggMaterialself, constEggMaterialother, inteq) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggMaterialCollection(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addMaterial(self, *args, **kwargs): ...
    def add_material(self, constEggMaterialCollectionself, EggMaterialmaterial) -> Any: ...
    def assign(self, constEggMaterialCollectionself, constEggMaterialCollectioncopy) -> Any: ...
    def clear(self, constEggMaterialCollectionself) -> Any: ...
    def collapseEquivalentMaterials(self, *args, **kwargs): ...
    @overload
    def collapse_equivalent_materials(self, constEggMaterialCollectionself, inteq, EggGroupNodenode) -> Any: ...
    @overload
    def collapse_equivalent_materials(self) -> Any: ...
    @overload
    def collapse_equivalent_materials(self) -> Any: ...
    def createUniqueMaterial(self, *args, **kwargs): ...
    @overload
    def create_unique_material(self, constEggMaterialCollectionself, constEggMaterialcopy, inteq) -> Any: ...
    @overload
    def create_unique_material(self) -> Any: ...
    def extractMaterials(self, *args, **kwargs): ...
    def extract_materials(self, constEggMaterialCollectionself, EggGroupNodenode) -> Any: ...
    def findMref(self, *args, **kwargs): ...
    def findUsedMaterials(self, *args, **kwargs): ...
    def find_mref(self, EggMaterialCollectionself, strmref_name) -> Any: ...
    def find_used_materials(self, constEggMaterialCollectionself, EggNodenode) -> Any: ...
    def removeMaterial(self, *args, **kwargs): ...
    def removeUnusedMaterials(self, *args, **kwargs): ...
    def remove_material(self, constEggMaterialCollectionself, EggMaterialmaterial) -> Any: ...
    def remove_unused_materials(self, constEggMaterialCollectionself, EggNodenode) -> Any: ...
    def sortByMref(self, *args, **kwargs): ...
    def sort_by_mref(self, constEggMaterialCollectionself) -> Any: ...
    def uniquifyMrefs(self, *args, **kwargs): ...
    def uniquify_mrefs(self, constEggMaterialCollectionself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggNameUniquifier(EggObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addName(self, *args, **kwargs): ...
    def add_name(self, constEggNameUniquifierself, strcategory, strname, EggNodenode) -> Any: ...
    def clear(self, constEggNameUniquifierself) -> Any: ...
    def filterName(self, *args, **kwargs): ...
    def filter_name(self, constEggNameUniquifierself, EggNodenode) -> Any: ...
    def generateName(self, *args, **kwargs): ...
    def generate_name(self, constEggNameUniquifierself, EggNodenode, strcategory, intindex) -> Any: ...
    def getCategory(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNode(self, *args, **kwargs): ...
    def get_category(self, constEggNameUniquifierself, EggNodenode) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_node(self, EggNameUniquifierself, strcategory, strname) -> Any: ...
    def hasName(self, *args, **kwargs): ...
    def has_name(self, EggNameUniquifierself, strcategory, strname) -> Any: ...
    def uniquify(self, constEggNameUniquifierself, EggNodenode) -> Any: ...

class EggNamedObject(EggObject, panda3d.core.Namable):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggNamedObjectself, constEggNamedObjectcopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def output(self, EggNamedObjectself, ostreamout) -> Any: ...
    def upcastToEggObject(self, *args, **kwargs): ...
    def upcastToNamable(self, *args, **kwargs): ...
    def upcast_to_EggObject(self, constEggNamedObjectself) -> Any: ...
    def upcast_to_Namable(self, constEggNamedObjectself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggNode(EggNamedObject):
    DtoolClassDict: ClassVar[dict] = ...
    depth: Incomplete
    parent: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def applyTexmats(self, *args, **kwargs): ...
    def apply_texmats(self, constEggNodeself) -> Any: ...
    def assign(self, constEggNodeself, constEggNodecopy) -> Any: ...
    def determineAlphaMode(self, *args, **kwargs): ...
    def determineBin(self, *args, **kwargs): ...
    def determineDecal(self, *args, **kwargs): ...
    def determineDepthOffset(self, *args, **kwargs): ...
    def determineDepthTestMode(self, *args, **kwargs): ...
    def determineDepthWriteMode(self, *args, **kwargs): ...
    def determineDrawOrder(self, *args, **kwargs): ...
    def determineIndexed(self, *args, **kwargs): ...
    def determineVisibilityMode(self, *args, **kwargs): ...
    def determine_alpha_mode(self, constEggNodeself) -> Any: ...
    def determine_bin(self, constEggNodeself) -> Any: ...
    def determine_decal(self, constEggNodeself) -> Any: ...
    def determine_depth_offset(self, constEggNodeself) -> Any: ...
    def determine_depth_test_mode(self, constEggNodeself) -> Any: ...
    def determine_depth_write_mode(self, constEggNodeself) -> Any: ...
    def determine_draw_order(self, constEggNodeself) -> Any: ...
    def determine_indexed(self, constEggNodeself) -> Any: ...
    def determine_visibility_mode(self, constEggNodeself) -> Any: ...
    def flattenTransforms(self, *args, **kwargs): ...
    def flatten_transforms(self, constEggNodeself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDepth(self, *args, **kwargs): ...
    def getNodeFrame(self, *args, **kwargs): ...
    def getNodeFrameInv(self, *args, **kwargs): ...
    def getNodeFrameInvPtr(self, *args, **kwargs): ...
    def getNodeFramePtr(self, *args, **kwargs): ...
    def getNodeToVertex(self, *args, **kwargs): ...
    def getNodeToVertexPtr(self, *args, **kwargs): ...
    def getParent(self, *args, **kwargs): ...
    def getVertexFrame(self, *args, **kwargs): ...
    def getVertexFrameInv(self, *args, **kwargs): ...
    def getVertexFrameInvPtr(self, *args, **kwargs): ...
    def getVertexFramePtr(self, *args, **kwargs): ...
    def getVertexToNode(self, *args, **kwargs): ...
    def getVertexToNodePtr(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_depth(self, EggNodeself) -> Any: ...
    def get_node_frame(self, EggNodeself) -> Any: ...
    def get_node_frame_inv(self, EggNodeself) -> Any: ...
    def get_node_frame_inv_ptr(self, EggNodeself) -> Any: ...
    def get_node_frame_ptr(self, EggNodeself) -> Any: ...
    def get_node_to_vertex(self, EggNodeself) -> Any: ...
    def get_node_to_vertex_ptr(self, EggNodeself) -> Any: ...
    def get_parent(self, EggNodeself) -> Any: ...
    @overload
    def get_vertex_frame(self, EggNodeself) -> Any: ...
    @overload
    def get_vertex_frame(self) -> Any: ...
    def get_vertex_frame_inv(self, EggNodeself) -> Any: ...
    def get_vertex_frame_inv_ptr(self, EggNodeself) -> Any: ...
    def get_vertex_frame_ptr(self, EggNodeself) -> Any: ...
    def get_vertex_to_node(self, EggNodeself) -> Any: ...
    def get_vertex_to_node_ptr(self, EggNodeself) -> Any: ...
    def isAnimMatrix(self, *args, **kwargs): ...
    def isJoint(self, *args, **kwargs): ...
    def isLocalCoord(self, *args, **kwargs): ...
    def isUnderInstance(self, *args, **kwargs): ...
    def isUnderTransform(self, *args, **kwargs): ...
    def is_anim_matrix(self, EggNodeself) -> Any: ...
    def is_joint(self, EggNodeself) -> Any: ...
    def is_local_coord(self, EggNodeself) -> Any: ...
    def is_under_instance(self, EggNodeself) -> Any: ...
    def is_under_transform(self, EggNodeself) -> Any: ...
    def parseEgg(self, *args, **kwargs): ...
    def parse_egg(self, constEggNodeself, stregg_syntax) -> Any: ...
    def testUnderIntegrity(self, *args, **kwargs): ...
    def test_under_integrity(self, EggNodeself) -> Any: ...
    def transform(self, constEggNodeself, constLMatrix4dmat) -> Any: ...
    def transformVerticesOnly(self, *args, **kwargs): ...
    def transform_vertices_only(self, constEggNodeself, constLMatrix4dmat) -> Any: ...
    def write(self, EggNodeself, ostreamout, intindent_level) -> Any: ...
    def __reduce__(self, EggNodeself) -> Any: ...

class EggNurbsCurve(EggCurve):
    DtoolClassDict: ClassVar[dict] = ...
    closed: Incomplete
    degree: Incomplete
    knots: Incomplete
    order: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggNurbsCurveself, constEggNurbsCurvecopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDegree(self, *args, **kwargs): ...
    def getKnot(self, *args, **kwargs): ...
    def getKnots(self, *args, **kwargs): ...
    def getNumCvs(self, *args, **kwargs): ...
    def getNumKnots(self, *args, **kwargs): ...
    def getOrder(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_degree(self, EggNurbsCurveself) -> Any: ...
    def get_knot(self, EggNurbsCurveself, intk) -> Any: ...
    def get_knots(self, *args, **kwargs): ...
    def get_num_cvs(self, EggNurbsCurveself) -> Any: ...
    def get_num_knots(self, EggNurbsCurveself) -> Any: ...
    def get_order(self, EggNurbsCurveself) -> Any: ...
    def isClosed(self, *args, **kwargs): ...
    def isValid(self, *args, **kwargs): ...
    def is_closed(self, EggNurbsCurveself) -> Any: ...
    def is_valid(self, EggNurbsCurveself) -> Any: ...
    def setKnot(self, *args, **kwargs): ...
    def setNumKnots(self, *args, **kwargs): ...
    def setOrder(self, *args, **kwargs): ...
    def set_knot(self, constEggNurbsCurveself, intk, doublevalue) -> Any: ...
    def set_num_knots(self, constEggNurbsCurveself, intnum) -> Any: ...
    def set_order(self, constEggNurbsCurveself, intorder) -> Any: ...
    def setup(self, constEggNurbsCurveself, intorder, intnum_knots) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggNurbsSurface(EggSurface):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggNurbsSurfaceself, constEggNurbsSurfacecopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCv(self, *args, **kwargs): ...
    def getNumCvs(self, *args, **kwargs): ...
    def getNumUCvs(self, *args, **kwargs): ...
    def getNumUKnots(self, *args, **kwargs): ...
    def getNumVCvs(self, *args, **kwargs): ...
    def getNumVKnots(self, *args, **kwargs): ...
    def getUDegree(self, *args, **kwargs): ...
    def getUIndex(self, *args, **kwargs): ...
    def getUKnot(self, *args, **kwargs): ...
    def getUKnots(self, *args, **kwargs): ...
    def getUOrder(self, *args, **kwargs): ...
    def getVDegree(self, *args, **kwargs): ...
    def getVIndex(self, *args, **kwargs): ...
    def getVKnot(self, *args, **kwargs): ...
    def getVKnots(self, *args, **kwargs): ...
    def getVOrder(self, *args, **kwargs): ...
    def getVertexIndex(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_cv(self, EggNurbsSurfaceself, intui, intvi) -> Any: ...
    def get_num_cvs(self, EggNurbsSurfaceself) -> Any: ...
    def get_num_u_cvs(self, EggNurbsSurfaceself) -> Any: ...
    def get_num_u_knots(self, EggNurbsSurfaceself) -> Any: ...
    def get_num_v_cvs(self, EggNurbsSurfaceself) -> Any: ...
    def get_num_v_knots(self, EggNurbsSurfaceself) -> Any: ...
    def get_u_degree(self, EggNurbsSurfaceself) -> Any: ...
    def get_u_index(self, EggNurbsSurfaceself, intvertex_index) -> Any: ...
    def get_u_knot(self, EggNurbsSurfaceself, intk) -> Any: ...
    def get_u_knots(self, *args, **kwargs): ...
    def get_u_order(self, EggNurbsSurfaceself) -> Any: ...
    def get_v_degree(self, EggNurbsSurfaceself) -> Any: ...
    def get_v_index(self, EggNurbsSurfaceself, intvertex_index) -> Any: ...
    def get_v_knot(self, EggNurbsSurfaceself, intk) -> Any: ...
    def get_v_knots(self, *args, **kwargs): ...
    def get_v_order(self, EggNurbsSurfaceself) -> Any: ...
    def get_vertex_index(self, EggNurbsSurfaceself, intui, intvi) -> Any: ...
    def isClosedU(self, *args, **kwargs): ...
    def isClosedV(self, *args, **kwargs): ...
    def isValid(self, *args, **kwargs): ...
    def is_closed_u(self, EggNurbsSurfaceself) -> Any: ...
    def is_closed_v(self, EggNurbsSurfaceself) -> Any: ...
    def is_valid(self, EggNurbsSurfaceself) -> Any: ...
    def setCv(self, *args, **kwargs): ...
    def setNumUKnots(self, *args, **kwargs): ...
    def setNumVKnots(self, *args, **kwargs): ...
    def setUKnot(self, *args, **kwargs): ...
    def setUOrder(self, *args, **kwargs): ...
    def setVKnot(self, *args, **kwargs): ...
    def setVOrder(self, *args, **kwargs): ...
    def set_cv(self, constEggNurbsSurfaceself, intui, intvi, EggVertexvertex) -> Any: ...
    def set_num_u_knots(self, constEggNurbsSurfaceself, intnum) -> Any: ...
    def set_num_v_knots(self, constEggNurbsSurfaceself, intnum) -> Any: ...
    def set_u_knot(self, constEggNurbsSurfaceself, intk, doublevalue) -> Any: ...
    def set_u_order(self, constEggNurbsSurfaceself, intu_order) -> Any: ...
    def set_v_knot(self, constEggNurbsSurfaceself, intk, doublevalue) -> Any: ...
    def set_v_order(self, constEggNurbsSurfaceself, intv_order) -> Any: ...
    def setup(self, constEggNurbsSurfaceself, intu_order, intv_order, intnum_u_knots, intnum_v_knots) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggObject(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggObjectself, constEggObjectcopy) -> Any: ...
    def clearUserData(self, *args, **kwargs): ...
    @overload
    def clear_user_data(self, constEggObjectself) -> Any: ...
    @overload
    def clear_user_data(self, constEggObjectself, TypeHandletype) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getUserData(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_user_data(self, EggObjectself) -> Any: ...
    @overload
    def get_user_data(self, EggObjectself, TypeHandletype) -> Any: ...
    def hasUserData(self, *args, **kwargs): ...
    @overload
    def has_user_data(self, EggObjectself) -> Any: ...
    @overload
    def has_user_data(self, EggObjectself, TypeHandletype) -> Any: ...
    def setUserData(self, *args, **kwargs): ...
    def set_user_data(self, constEggObjectself, EggUserDatauser_data) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggPatch(EggPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggPatchself, constEggPatchcopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggPoint(EggPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggPointself, constEggPointcopy) -> Any: ...
    def clearPerspective(self, *args, **kwargs): ...
    def clearThick(self, *args, **kwargs): ...
    def clear_perspective(self, constEggPointself) -> Any: ...
    def clear_thick(self, constEggPointself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPerspective(self, *args, **kwargs): ...
    def getThick(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_perspective(self, EggPointself) -> Any: ...
    def get_thick(self, EggPointself) -> Any: ...
    def hasPerspective(self, *args, **kwargs): ...
    def hasThick(self, *args, **kwargs): ...
    def has_perspective(self, EggPointself) -> Any: ...
    def has_thick(self, EggPointself) -> Any: ...
    def setPerspective(self, *args, **kwargs): ...
    def setThick(self, *args, **kwargs): ...
    def set_perspective(self, constEggPointself, boolperspective) -> Any: ...
    def set_thick(self, constEggPointself, doublethick) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggPolygon(EggPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggPolygonself, constEggPolygoncopy) -> Any: ...
    def calculateNormal(self, *args, **kwargs): ...
    def calculate_normal(self, EggPolygonself, LVector3dresult, intcs) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def isPlanar(self, *args, **kwargs): ...
    def is_planar(self, EggPolygonself) -> Any: ...
    def recomputePolygonNormal(self, *args, **kwargs): ...
    def recompute_polygon_normal(self, constEggPolygonself, intcs) -> Any: ...
    def triangulateInPlace(self, *args, **kwargs): ...
    def triangulateInto(self, *args, **kwargs): ...
    def triangulate_in_place(self, constEggPolygonself, boolconvex_also) -> Any: ...
    def triangulate_into(self, EggPolygonself, EggGroupNodecontainer, boolconvex_also) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggPolysetMaker(EggBinMaker):
    BNNone: ClassVar[int] = ...
    BNPolyset: ClassVar[int] = ...
    BN_none: ClassVar[int] = ...
    BN_polyset: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    PBface: ClassVar[int] = ...
    PHasMaterial: ClassVar[int] = ...
    PHasPolyColor: ClassVar[int] = ...
    PHasPolyNormal: ClassVar[int] = ...
    PHasTexture: ClassVar[int] = ...
    PHasVertexColor: ClassVar[int] = ...
    PHasVertexNormal: ClassVar[int] = ...
    PMaterial: ClassVar[int] = ...
    PPolyColor: ClassVar[int] = ...
    PTexture: ClassVar[int] = ...
    P_bface: ClassVar[int] = ...
    P_has_material: ClassVar[int] = ...
    P_has_poly_color: ClassVar[int] = ...
    P_has_poly_normal: ClassVar[int] = ...
    P_has_texture: ClassVar[int] = ...
    P_has_vertex_color: ClassVar[int] = ...
    P_has_vertex_normal: ClassVar[int] = ...
    P_material: ClassVar[int] = ...
    P_poly_color: ClassVar[int] = ...
    P_texture: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def setProperties(self, *args, **kwargs): ...
    def set_properties(self, constEggPolysetMakerself, intproperties) -> Any: ...

class EggPoolUniquifier(EggNameUniquifier):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class EggPrimitive(EggNode, EggAttributes, EggRenderMode):
    DtoolClassDict: ClassVar[dict] = ...
    SOverall: ClassVar[int] = ...
    SPerFace: ClassVar[int] = ...
    SPerVertex: ClassVar[int] = ...
    SUnknown: ClassVar[int] = ...
    S_overall: ClassVar[int] = ...
    S_per_face: ClassVar[int] = ...
    S_per_vertex: ClassVar[int] = ...
    S_unknown: ClassVar[int] = ...
    bface_flag: Incomplete
    connected_shading: Incomplete
    material: Incomplete
    pool: Incomplete
    shading: Incomplete
    sort_name: Incomplete
    textures: Incomplete
    vertices: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addTexture(self, *args, **kwargs): ...
    def addVertex(self, *args, **kwargs): ...
    def add_texture(self, constEggPrimitiveself, EggTexturetexture) -> Any: ...
    def add_vertex(self, constEggPrimitiveself, EggVertexvertex) -> Any: ...
    def applyFirstAttribute(self, *args, **kwargs): ...
    def applyLastAttribute(self, *args, **kwargs): ...
    def apply_first_attribute(self, constEggPrimitiveself) -> Any: ...
    def apply_last_attribute(self, constEggPrimitiveself) -> Any: ...
    def assign(self, constEggPrimitiveself, constEggPrimitivecopy) -> Any: ...
    def cleanup(self, constEggPrimitiveself) -> Any: ...
    def clear(self, constEggPrimitiveself) -> Any: ...
    def clearConnectedShading(self, *args, **kwargs): ...
    def clearMaterial(self, *args, **kwargs): ...
    def clearTexture(self, *args, **kwargs): ...
    def clear_connected_shading(self, constEggPrimitiveself) -> Any: ...
    def clear_material(self, constEggPrimitiveself) -> Any: ...
    def clear_texture(self, constEggPrimitiveself) -> Any: ...
    def copyAttributes(self, *args, **kwargs): ...
    def copyVertices(self, *args, **kwargs): ...
    @overload
    def copy_attributes(self, constEggPrimitiveself, constEggPrimitiveother) -> Any: ...
    @overload
    def copy_attributes(self, constEggPrimitiveself, constEggAttributesother) -> Any: ...
    def copy_vertices(self, constEggPrimitiveself, constEggPrimitiveother) -> Any: ...
    def determineAlphaMode(self, *args, **kwargs): ...
    def determineBin(self, *args, **kwargs): ...
    def determineDepthOffset(self, *args, **kwargs): ...
    def determineDepthTestMode(self, *args, **kwargs): ...
    def determineDepthWriteMode(self, *args, **kwargs): ...
    def determineDrawOrder(self, *args, **kwargs): ...
    def determineVisibilityMode(self, *args, **kwargs): ...
    def determine_alpha_mode(self, constEggPrimitiveself) -> Any: ...
    def determine_bin(self, constEggPrimitiveself) -> Any: ...
    def determine_depth_offset(self, constEggPrimitiveself) -> Any: ...
    def determine_depth_test_mode(self, constEggPrimitiveself) -> Any: ...
    def determine_depth_write_mode(self, constEggPrimitiveself) -> Any: ...
    def determine_draw_order(self, constEggPrimitiveself) -> Any: ...
    def determine_visibility_mode(self, constEggPrimitiveself) -> Any: ...
    def getBfaceFlag(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getConnectedShading(self, *args, **kwargs): ...
    def getMaterial(self, *args, **kwargs): ...
    def getNumTextures(self, *args, **kwargs): ...
    def getNumVertices(self, *args, **kwargs): ...
    def getPool(self, *args, **kwargs): ...
    def getShading(self, *args, **kwargs): ...
    def getSortName(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    def getTextures(self, *args, **kwargs): ...
    def getVertex(self, *args, **kwargs): ...
    def getVertices(self, *args, **kwargs): ...
    def get_bface_flag(self, EggPrimitiveself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_connected_shading(self, EggPrimitiveself) -> Any: ...
    def get_material(self, EggPrimitiveself) -> Any: ...
    def get_num_textures(self, EggPrimitiveself) -> Any: ...
    def get_num_vertices(self, EggPrimitiveself) -> Any: ...
    def get_pool(self, EggPrimitiveself) -> Any: ...
    @overload
    def get_shading(self, EggPrimitiveself) -> Any: ...
    @overload
    def get_shading(self) -> Any: ...
    def get_sort_name(self, EggPrimitiveself) -> Any: ...
    @overload
    def get_texture(self, EggPrimitiveself) -> Any: ...
    @overload
    def get_texture(self, EggPrimitiveself, intn) -> Any: ...
    def get_textures(self, *args, **kwargs): ...
    def get_vertex(self, EggPrimitiveself, intindex) -> Any: ...
    def get_vertices(self, *args, **kwargs): ...
    def hasMaterial(self, *args, **kwargs): ...
    def hasNormals(self, *args, **kwargs): ...
    def hasPrimitives(self, *args, **kwargs): ...
    def hasTexture(self, *args, **kwargs): ...
    def hasVertexColor(self, *args, **kwargs): ...
    def hasVertexNormal(self, *args, **kwargs): ...
    def has_material(self, EggPrimitiveself) -> Any: ...
    def has_normals(self, EggPrimitiveself) -> Any: ...
    def has_primitives(self, EggPrimitiveself) -> Any: ...
    @overload
    def has_texture(self, EggPrimitiveself) -> Any: ...
    @overload
    def has_texture(self, EggPrimitiveself, EggTexturetexture) -> Any: ...
    def has_vertex_color(self, EggPrimitiveself) -> Any: ...
    def has_vertex_normal(self, EggPrimitiveself) -> Any: ...
    def insertVertex(self, *args, **kwargs): ...
    def insert_vertex(self, constEggPrimitiveself, intindex, EggVertexvertex) -> Any: ...
    def jointHasPrimitives(self, *args, **kwargs): ...
    def joint_has_primitives(self, EggPrimitiveself) -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, EggPrimitiveself) -> Any: ...
    def postApplyFlatAttribute(self, *args, **kwargs): ...
    def post_apply_flat_attribute(self, constEggPrimitiveself) -> Any: ...
    def removeDoubledVerts(self, *args, **kwargs): ...
    def removeNonuniqueVerts(self, *args, **kwargs): ...
    def removeVertex(self, *args, **kwargs): ...
    def remove_doubled_verts(self, constEggPrimitiveself, boolclosed) -> Any: ...
    def remove_nonunique_verts(self, constEggPrimitiveself) -> Any: ...
    @overload
    def remove_vertex(self, constEggPrimitiveself, EggVertexvertex) -> Any: ...
    @overload
    def remove_vertex(self, constEggPrimitiveself, intindex) -> Any: ...
    def reverseVertexOrdering(self, *args, **kwargs): ...
    def reverse_vertex_ordering(self, constEggPrimitiveself) -> Any: ...
    def setBfaceFlag(self, *args, **kwargs): ...
    def setMaterial(self, *args, **kwargs): ...
    def setTexture(self, *args, **kwargs): ...
    def setVertex(self, *args, **kwargs): ...
    def set_bface_flag(self, constEggPrimitiveself, boolflag) -> Any: ...
    def set_material(self, constEggPrimitiveself, EggMaterialmaterial) -> Any: ...
    def set_texture(self, constEggPrimitiveself, EggTexturetexture) -> Any: ...
    def set_vertex(self, constEggPrimitiveself, intindex, EggVertexvertex) -> Any: ...
    def testVrefIntegrity(self, *args, **kwargs): ...
    def test_vref_integrity(self, EggPrimitiveself) -> Any: ...
    def unifyAttributes(self, *args, **kwargs): ...
    def unify_attributes(self, constEggPrimitiveself, intshading) -> Any: ...
    def upcastToEggAttributes(self, *args, **kwargs): ...
    def upcastToEggNode(self, *args, **kwargs): ...
    def upcastToEggRenderMode(self, *args, **kwargs): ...
    def upcast_to_EggAttributes(self, constEggPrimitiveself) -> Any: ...
    def upcast_to_EggNode(self, constEggPrimitiveself) -> Any: ...
    def upcast_to_EggRenderMode(self, constEggPrimitiveself) -> Any: ...
    def write(self, EggPrimitiveself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggRenderMode(dtoolconfig.DTOOL_SUPER_BASE):
    AMBinary: ClassVar[int] = ...
    AMBlend: ClassVar[int] = ...
    AMBlendNoOcclude: ClassVar[int] = ...
    AMDual: ClassVar[int] = ...
    AMMs: ClassVar[int] = ...
    AMMsMask: ClassVar[int] = ...
    AMOff: ClassVar[int] = ...
    AMOn: ClassVar[int] = ...
    AMPremultiplied: ClassVar[int] = ...
    AMUnspecified: ClassVar[int] = ...
    AM_binary: ClassVar[int] = ...
    AM_blend: ClassVar[int] = ...
    AM_blend_no_occlude: ClassVar[int] = ...
    AM_dual: ClassVar[int] = ...
    AM_ms: ClassVar[int] = ...
    AM_ms_mask: ClassVar[int] = ...
    AM_off: ClassVar[int] = ...
    AM_on: ClassVar[int] = ...
    AM_premultiplied: ClassVar[int] = ...
    AM_unspecified: ClassVar[int] = ...
    DTMOff: ClassVar[int] = ...
    DTMOn: ClassVar[int] = ...
    DTMUnspecified: ClassVar[int] = ...
    DTM_off: ClassVar[int] = ...
    DTM_on: ClassVar[int] = ...
    DTM_unspecified: ClassVar[int] = ...
    DWMOff: ClassVar[int] = ...
    DWMOn: ClassVar[int] = ...
    DWMUnspecified: ClassVar[int] = ...
    DWM_off: ClassVar[int] = ...
    DWM_on: ClassVar[int] = ...
    DWM_unspecified: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    VMHidden: ClassVar[int] = ...
    VMNormal: ClassVar[int] = ...
    VMUnspecified: ClassVar[int] = ...
    VM_hidden: ClassVar[int] = ...
    VM_normal: ClassVar[int] = ...
    VM_unspecified: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggRenderModeself, constEggRenderModecopy) -> Any: ...
    def clearBin(self, *args, **kwargs): ...
    def clearDepthOffset(self, *args, **kwargs): ...
    def clearDrawOrder(self, *args, **kwargs): ...
    def clear_bin(self, constEggRenderModeself) -> Any: ...
    def clear_depth_offset(self, constEggRenderModeself) -> Any: ...
    def clear_draw_order(self, constEggRenderModeself) -> Any: ...
    def getAlphaMode(self, *args, **kwargs): ...
    def getBin(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDepthOffset(self, *args, **kwargs): ...
    def getDepthTestMode(self, *args, **kwargs): ...
    def getDepthWriteMode(self, *args, **kwargs): ...
    def getDrawOrder(self, *args, **kwargs): ...
    def getVisibilityMode(self, *args, **kwargs): ...
    def get_alpha_mode(self, EggRenderModeself) -> Any: ...
    def get_bin(self, EggRenderModeself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_depth_offset(self, EggRenderModeself) -> Any: ...
    def get_depth_test_mode(self, EggRenderModeself) -> Any: ...
    def get_depth_write_mode(self, EggRenderModeself) -> Any: ...
    def get_draw_order(self, EggRenderModeself) -> Any: ...
    def get_visibility_mode(self, EggRenderModeself) -> Any: ...
    def hasBin(self, *args, **kwargs): ...
    def hasDepthOffset(self, *args, **kwargs): ...
    def hasDrawOrder(self, *args, **kwargs): ...
    def has_bin(self, EggRenderModeself) -> Any: ...
    def has_depth_offset(self, EggRenderModeself) -> Any: ...
    def has_draw_order(self, EggRenderModeself) -> Any: ...
    def setAlphaMode(self, *args, **kwargs): ...
    def setBin(self, *args, **kwargs): ...
    def setDepthOffset(self, *args, **kwargs): ...
    def setDepthTestMode(self, *args, **kwargs): ...
    def setDepthWriteMode(self, *args, **kwargs): ...
    def setDrawOrder(self, *args, **kwargs): ...
    def setVisibilityMode(self, *args, **kwargs): ...
    def set_alpha_mode(self, constEggRenderModeself, intmode) -> Any: ...
    def set_bin(self, constEggRenderModeself, strbin) -> Any: ...
    @overload
    def set_depth_offset(self, constEggRenderModeself, intbias) -> Any: ...
    @overload
    def set_depth_offset(self) -> Any: ...
    def set_depth_test_mode(self, constEggRenderModeself, intmode) -> Any: ...
    def set_depth_write_mode(self, constEggRenderModeself, intmode) -> Any: ...
    def set_draw_order(self, constEggRenderModeself, intorder) -> Any: ...
    def set_visibility_mode(self, constEggRenderModeself, intmode) -> Any: ...
    @staticmethod
    def stringAlphaMode(*args, **kwargs): ...
    @staticmethod
    def stringDepthTestMode(*args, **kwargs): ...
    @staticmethod
    def stringDepthWriteMode(*args, **kwargs): ...
    @staticmethod
    def stringVisibilityMode(*args, **kwargs): ...
    @staticmethod
    def string_alpha_mode(strstring) -> Any: ...
    @staticmethod
    def string_depth_test_mode(strstring) -> Any: ...
    @staticmethod
    def string_depth_write_mode(strstring) -> Any: ...
    @staticmethod
    def string_visibility_mode(strstring) -> Any: ...
    def write(self, EggRenderModeself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class EggSAnimData(EggAnimData):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggSAnimDataself, constEggSAnimDatacopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumRows(self, *args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_rows(self, EggSAnimDataself) -> Any: ...
    def get_value(self, EggSAnimDataself, introw) -> Any: ...
    def optimize(self, constEggSAnimDataself) -> Any: ...
    def setValue(self, *args, **kwargs): ...
    def set_value(self, constEggSAnimDataself, introw, doublevalue) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggSurface(EggPrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggSurfaceself, constEggSurfacecopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getUSubdiv(self, *args, **kwargs): ...
    def getVSubdiv(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_u_subdiv(self, EggSurfaceself) -> Any: ...
    def get_v_subdiv(self, EggSurfaceself) -> Any: ...
    def setUSubdiv(self, *args, **kwargs): ...
    def setVSubdiv(self, *args, **kwargs): ...
    def set_u_subdiv(self, constEggSurfaceself, intsubdiv) -> Any: ...
    def set_v_subdiv(self, constEggSurfaceself, intsubdiv) -> Any: ...

class EggSwitchCondition(EggObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def makeCopy(self, *args, **kwargs): ...
    def make_copy(self, EggSwitchConditionself) -> Any: ...
    def transform(self, constEggSwitchConditionself, constLMatrix4dmat) -> Any: ...
    def write(self, EggSwitchConditionself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggSwitchConditionDistance(EggSwitchCondition):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class EggTable(EggGroupNode):
    DtoolClassDict: ClassVar[dict] = ...
    TTBundle: ClassVar[int] = ...
    TTInvalid: ClassVar[int] = ...
    TTTable: ClassVar[int] = ...
    TT_bundle: ClassVar[int] = ...
    TT_invalid: ClassVar[int] = ...
    TT_table: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggTableself, constEggTablecopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getTableType(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_table_type(self, EggTableself) -> Any: ...
    def hasTransform(self, *args, **kwargs): ...
    def has_transform(self, EggTableself) -> Any: ...
    def setTableType(self, *args, **kwargs): ...
    def set_table_type(self, constEggTableself, inttype) -> Any: ...
    @staticmethod
    def stringTableType(*args, **kwargs): ...
    @staticmethod
    def string_table_type(strstring) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggTexture(EggFilenameNode, EggRenderMode, EggTransform):
    CCAlpha: ClassVar[int] = ...
    CCNumChannels: ClassVar[int] = ...
    CCRgb: ClassVar[int] = ...
    CC_alpha: ClassVar[int] = ...
    CC_num_channels: ClassVar[int] = ...
    CC_rgb: ClassVar[int] = ...
    CINumIndices: ClassVar[int] = ...
    CI_num_indices: ClassVar[int] = ...
    CMAdd: ClassVar[int] = ...
    CMAddSigned: ClassVar[int] = ...
    CMDefault: ClassVar[int] = ...
    CMDot3Rgb: ClassVar[int] = ...
    CMDot3Rgba: ClassVar[int] = ...
    CMDxt1: ClassVar[int] = ...
    CMDxt2: ClassVar[int] = ...
    CMDxt3: ClassVar[int] = ...
    CMDxt4: ClassVar[int] = ...
    CMDxt5: ClassVar[int] = ...
    CMFxt1: ClassVar[int] = ...
    CMInterpolate: ClassVar[int] = ...
    CMModulate: ClassVar[int] = ...
    CMOff: ClassVar[int] = ...
    CMOn: ClassVar[int] = ...
    CMReplace: ClassVar[int] = ...
    CMSubtract: ClassVar[int] = ...
    CMUnspecified: ClassVar[int] = ...
    CM_add: ClassVar[int] = ...
    CM_add_signed: ClassVar[int] = ...
    CM_default: ClassVar[int] = ...
    CM_dot3_rgb: ClassVar[int] = ...
    CM_dot3_rgba: ClassVar[int] = ...
    CM_dxt1: ClassVar[int] = ...
    CM_dxt2: ClassVar[int] = ...
    CM_dxt3: ClassVar[int] = ...
    CM_dxt4: ClassVar[int] = ...
    CM_dxt5: ClassVar[int] = ...
    CM_fxt1: ClassVar[int] = ...
    CM_interpolate: ClassVar[int] = ...
    CM_modulate: ClassVar[int] = ...
    CM_off: ClassVar[int] = ...
    CM_on: ClassVar[int] = ...
    CM_replace: ClassVar[int] = ...
    CM_subtract: ClassVar[int] = ...
    CM_unspecified: ClassVar[int] = ...
    COOneMinusSrcAlpha: ClassVar[int] = ...
    COOneMinusSrcColor: ClassVar[int] = ...
    COSrcAlpha: ClassVar[int] = ...
    COSrcColor: ClassVar[int] = ...
    COUnspecified: ClassVar[int] = ...
    CO_one_minus_src_alpha: ClassVar[int] = ...
    CO_one_minus_src_color: ClassVar[int] = ...
    CO_src_alpha: ClassVar[int] = ...
    CO_src_color: ClassVar[int] = ...
    CO_unspecified: ClassVar[int] = ...
    CSConstant: ClassVar[int] = ...
    CSConstantColorScale: ClassVar[int] = ...
    CSLastSavedResult: ClassVar[int] = ...
    CSPrevious: ClassVar[int] = ...
    CSPrimaryColor: ClassVar[int] = ...
    CSTexture: ClassVar[int] = ...
    CSUnspecified: ClassVar[int] = ...
    CS_constant: ClassVar[int] = ...
    CS_constant_color_scale: ClassVar[int] = ...
    CS_last_saved_result: ClassVar[int] = ...
    CS_previous: ClassVar[int] = ...
    CS_primary_color: ClassVar[int] = ...
    CS_texture: ClassVar[int] = ...
    CS_unspecified: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    EAttributes: ClassVar[int] = ...
    EBasename: ClassVar[int] = ...
    ECompleteFilename: ClassVar[int] = ...
    EDirname: ClassVar[int] = ...
    EExtension: ClassVar[int] = ...
    ETAdd: ClassVar[int] = ...
    ETBlend: ClassVar[int] = ...
    ETBlendColorScale: ClassVar[int] = ...
    ETDecal: ClassVar[int] = ...
    ETEmission: ClassVar[int] = ...
    ETGloss: ClassVar[int] = ...
    ETGlow: ClassVar[int] = ...
    ETHeight: ClassVar[int] = ...
    ETModulate: ClassVar[int] = ...
    ETModulateGloss: ClassVar[int] = ...
    ETModulateGlow: ClassVar[int] = ...
    ETNormal: ClassVar[int] = ...
    ETNormalGloss: ClassVar[int] = ...
    ETNormalHeight: ClassVar[int] = ...
    ETReplace: ClassVar[int] = ...
    ETSelector: ClassVar[int] = ...
    ETUnspecified: ClassVar[int] = ...
    ET_add: ClassVar[int] = ...
    ET_blend: ClassVar[int] = ...
    ET_blend_color_scale: ClassVar[int] = ...
    ET_decal: ClassVar[int] = ...
    ET_emission: ClassVar[int] = ...
    ET_gloss: ClassVar[int] = ...
    ET_glow: ClassVar[int] = ...
    ET_height: ClassVar[int] = ...
    ET_modulate: ClassVar[int] = ...
    ET_modulate_gloss: ClassVar[int] = ...
    ET_modulate_glow: ClassVar[int] = ...
    ET_normal: ClassVar[int] = ...
    ET_normal_gloss: ClassVar[int] = ...
    ET_normal_height: ClassVar[int] = ...
    ET_replace: ClassVar[int] = ...
    ET_selector: ClassVar[int] = ...
    ET_unspecified: ClassVar[int] = ...
    ETransform: ClassVar[int] = ...
    ETrefName: ClassVar[int] = ...
    E_attributes: ClassVar[int] = ...
    E_basename: ClassVar[int] = ...
    E_complete_filename: ClassVar[int] = ...
    E_dirname: ClassVar[int] = ...
    E_extension: ClassVar[int] = ...
    E_transform: ClassVar[int] = ...
    E_tref_name: ClassVar[int] = ...
    FAlpha: ClassVar[int] = ...
    FBlue: ClassVar[int] = ...
    FGreen: ClassVar[int] = ...
    FLuminance: ClassVar[int] = ...
    FLuminanceAlpha: ClassVar[int] = ...
    FLuminanceAlphamask: ClassVar[int] = ...
    FRed: ClassVar[int] = ...
    FRgb: ClassVar[int] = ...
    FRgb12: ClassVar[int] = ...
    FRgb332: ClassVar[int] = ...
    FRgb5: ClassVar[int] = ...
    FRgb8: ClassVar[int] = ...
    FRgba: ClassVar[int] = ...
    FRgba12: ClassVar[int] = ...
    FRgba4: ClassVar[int] = ...
    FRgba5: ClassVar[int] = ...
    FRgba8: ClassVar[int] = ...
    FRgbm: ClassVar[int] = ...
    FSluminance: ClassVar[int] = ...
    FSluminanceAlpha: ClassVar[int] = ...
    FSrgb: ClassVar[int] = ...
    FSrgbAlpha: ClassVar[int] = ...
    FTLinear: ClassVar[int] = ...
    FTLinearMipmapLinear: ClassVar[int] = ...
    FTLinearMipmapNearest: ClassVar[int] = ...
    FTNearest: ClassVar[int] = ...
    FTNearestMipmapLinear: ClassVar[int] = ...
    FTNearestMipmapNearest: ClassVar[int] = ...
    FTUnspecified: ClassVar[int] = ...
    FT_linear: ClassVar[int] = ...
    FT_linear_mipmap_linear: ClassVar[int] = ...
    FT_linear_mipmap_nearest: ClassVar[int] = ...
    FT_nearest: ClassVar[int] = ...
    FT_nearest_mipmap_linear: ClassVar[int] = ...
    FT_nearest_mipmap_nearest: ClassVar[int] = ...
    FT_unspecified: ClassVar[int] = ...
    FUnspecified: ClassVar[int] = ...
    F_alpha: ClassVar[int] = ...
    F_blue: ClassVar[int] = ...
    F_green: ClassVar[int] = ...
    F_luminance: ClassVar[int] = ...
    F_luminance_alpha: ClassVar[int] = ...
    F_luminance_alphamask: ClassVar[int] = ...
    F_red: ClassVar[int] = ...
    F_rgb: ClassVar[int] = ...
    F_rgb12: ClassVar[int] = ...
    F_rgb332: ClassVar[int] = ...
    F_rgb5: ClassVar[int] = ...
    F_rgb8: ClassVar[int] = ...
    F_rgba: ClassVar[int] = ...
    F_rgba12: ClassVar[int] = ...
    F_rgba4: ClassVar[int] = ...
    F_rgba5: ClassVar[int] = ...
    F_rgba8: ClassVar[int] = ...
    F_rgbm: ClassVar[int] = ...
    F_sluminance: ClassVar[int] = ...
    F_sluminance_alpha: ClassVar[int] = ...
    F_srgb: ClassVar[int] = ...
    F_srgb_alpha: ClassVar[int] = ...
    F_unspecified: ClassVar[int] = ...
    QLBest: ClassVar[int] = ...
    QLDefault: ClassVar[int] = ...
    QLFastest: ClassVar[int] = ...
    QLNormal: ClassVar[int] = ...
    QLUnspecified: ClassVar[int] = ...
    QL_best: ClassVar[int] = ...
    QL_default: ClassVar[int] = ...
    QL_fastest: ClassVar[int] = ...
    QL_normal: ClassVar[int] = ...
    QL_unspecified: ClassVar[int] = ...
    TGEyeCubeMap: ClassVar[int] = ...
    TGEyeNormal: ClassVar[int] = ...
    TGEyePosition: ClassVar[int] = ...
    TGEyeSphereMap: ClassVar[int] = ...
    TGPointSprite: ClassVar[int] = ...
    TGUnspecified: ClassVar[int] = ...
    TGWorldCubeMap: ClassVar[int] = ...
    TGWorldNormal: ClassVar[int] = ...
    TGWorldPosition: ClassVar[int] = ...
    TG_eye_cube_map: ClassVar[int] = ...
    TG_eye_normal: ClassVar[int] = ...
    TG_eye_position: ClassVar[int] = ...
    TG_eye_sphere_map: ClassVar[int] = ...
    TG_point_sprite: ClassVar[int] = ...
    TG_unspecified: ClassVar[int] = ...
    TG_world_cube_map: ClassVar[int] = ...
    TG_world_normal: ClassVar[int] = ...
    TG_world_position: ClassVar[int] = ...
    TT1dTexture: ClassVar[int] = ...
    TT2dTexture: ClassVar[int] = ...
    TT3dTexture: ClassVar[int] = ...
    TTCubeMap: ClassVar[int] = ...
    TTUnspecified: ClassVar[int] = ...
    TT_1d_texture: ClassVar[int] = ...
    TT_2d_texture: ClassVar[int] = ...
    TT_3d_texture: ClassVar[int] = ...
    TT_cube_map: ClassVar[int] = ...
    TT_unspecified: ClassVar[int] = ...
    WMBorderColor: ClassVar[int] = ...
    WMClamp: ClassVar[int] = ...
    WMMirror: ClassVar[int] = ...
    WMMirrorOnce: ClassVar[int] = ...
    WMRepeat: ClassVar[int] = ...
    WMUnspecified: ClassVar[int] = ...
    WM_border_color: ClassVar[int] = ...
    WM_clamp: ClassVar[int] = ...
    WM_mirror: ClassVar[int] = ...
    WM_mirror_once: ClassVar[int] = ...
    WM_repeat: ClassVar[int] = ...
    WM_unspecified: ClassVar[int] = ...
    alpha_file_channel: Incomplete
    alpha_filename: Incomplete
    alpha_fullpath: Incomplete
    alpha_scale: Incomplete
    anisotropic_degree: Incomplete
    border_color: Incomplete
    color: Incomplete
    compression_mode: Incomplete
    env_type: Incomplete
    format: Incomplete
    lod_bias: Incomplete
    magfilter: Incomplete
    max_lod: Incomplete
    min_lod: Incomplete
    minfilter: Incomplete
    multitexture_sort: Incomplete
    multiview: Incomplete
    num_views: Incomplete
    priority: Incomplete
    quality_level: Incomplete
    read_mipmaps: Incomplete
    rgb_scale: Incomplete
    saved_result: Incomplete
    stage_name: Incomplete
    tex_gen: Incomplete
    texture_type: Incomplete
    uv_name: Incomplete
    wrap_mode: Incomplete
    wrap_u: Incomplete
    wrap_v: Incomplete
    wrap_w: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def affectsPolygonAlpha(self, *args, **kwargs): ...
    def affects_polygon_alpha(self, EggTextureself) -> Any: ...
    def assign(self, constEggTextureself, constEggTexturecopy) -> Any: ...
    def clearAlphaFileChannel(self, *args, **kwargs): ...
    def clearAlphaFilename(self, *args, **kwargs): ...
    def clearAlphaScale(self, *args, **kwargs): ...
    def clearAnisotropicDegree(self, *args, **kwargs): ...
    def clearBorderColor(self, *args, **kwargs): ...
    def clearColor(self, *args, **kwargs): ...
    def clearLodBias(self, *args, **kwargs): ...
    def clearMaxLod(self, *args, **kwargs): ...
    def clearMinLod(self, *args, **kwargs): ...
    def clearMultitexture(self, *args, **kwargs): ...
    def clearNumViews(self, *args, **kwargs): ...
    def clearPriority(self, *args, **kwargs): ...
    def clearRgbScale(self, *args, **kwargs): ...
    def clearStageName(self, *args, **kwargs): ...
    def clearUvName(self, *args, **kwargs): ...
    def clear_alpha_file_channel(self, constEggTextureself) -> Any: ...
    def clear_alpha_filename(self, constEggTextureself) -> Any: ...
    def clear_alpha_scale(self, constEggTextureself) -> Any: ...
    def clear_anisotropic_degree(self, constEggTextureself) -> Any: ...
    def clear_border_color(self, constEggTextureself) -> Any: ...
    def clear_color(self, constEggTextureself) -> Any: ...
    def clear_lod_bias(self, constEggTextureself) -> Any: ...
    def clear_max_lod(self, constEggTextureself) -> Any: ...
    def clear_min_lod(self, constEggTextureself) -> Any: ...
    def clear_multitexture(self, constEggTextureself) -> Any: ...
    def clear_num_views(self, constEggTextureself) -> Any: ...
    def clear_priority(self, constEggTextureself) -> Any: ...
    def clear_rgb_scale(self, constEggTextureself) -> Any: ...
    def clear_stage_name(self, constEggTextureself) -> Any: ...
    def clear_uv_name(self, constEggTextureself) -> Any: ...
    def determineWrapU(self, *args, **kwargs): ...
    def determineWrapV(self, *args, **kwargs): ...
    def determineWrapW(self, *args, **kwargs): ...
    def determine_wrap_u(self, EggTextureself) -> Any: ...
    def determine_wrap_v(self, EggTextureself) -> Any: ...
    def determine_wrap_w(self, EggTextureself) -> Any: ...
    def getAlphaFileChannel(self, *args, **kwargs): ...
    def getAlphaFilename(self, *args, **kwargs): ...
    def getAlphaFullpath(self, *args, **kwargs): ...
    def getAlphaScale(self, *args, **kwargs): ...
    def getAnisotropicDegree(self, *args, **kwargs): ...
    def getBorderColor(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getColor(self, *args, **kwargs): ...
    def getCombineMode(self, *args, **kwargs): ...
    def getCombineOperand(self, *args, **kwargs): ...
    def getCombineSource(self, *args, **kwargs): ...
    def getCompressionMode(self, *args, **kwargs): ...
    def getEnvType(self, *args, **kwargs): ...
    def getFormat(self, *args, **kwargs): ...
    def getLodBias(self, *args, **kwargs): ...
    def getMagfilter(self, *args, **kwargs): ...
    def getMaxLod(self, *args, **kwargs): ...
    def getMinLod(self, *args, **kwargs): ...
    def getMinfilter(self, *args, **kwargs): ...
    def getMultitextureSort(self, *args, **kwargs): ...
    def getMultiview(self, *args, **kwargs): ...
    def getNumViews(self, *args, **kwargs): ...
    def getPriority(self, *args, **kwargs): ...
    def getQualityLevel(self, *args, **kwargs): ...
    def getReadMipmaps(self, *args, **kwargs): ...
    def getRgbScale(self, *args, **kwargs): ...
    def getSavedResult(self, *args, **kwargs): ...
    def getStageName(self, *args, **kwargs): ...
    def getTexGen(self, *args, **kwargs): ...
    def getTextureType(self, *args, **kwargs): ...
    def getUvName(self, *args, **kwargs): ...
    def getWrapMode(self, *args, **kwargs): ...
    def getWrapU(self, *args, **kwargs): ...
    def getWrapV(self, *args, **kwargs): ...
    def getWrapW(self, *args, **kwargs): ...
    def get_alpha_file_channel(self, EggTextureself) -> Any: ...
    def get_alpha_filename(self, EggTextureself) -> Any: ...
    def get_alpha_fullpath(self, EggTextureself) -> Any: ...
    def get_alpha_scale(self, EggTextureself) -> Any: ...
    def get_anisotropic_degree(self, EggTextureself) -> Any: ...
    def get_border_color(self, EggTextureself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_color(self, EggTextureself) -> Any: ...
    def get_combine_mode(self, EggTextureself, intchannel) -> Any: ...
    def get_combine_operand(self, EggTextureself, intchannel, intn) -> Any: ...
    def get_combine_source(self, EggTextureself, intchannel, intn) -> Any: ...
    def get_compression_mode(self, EggTextureself) -> Any: ...
    def get_env_type(self, EggTextureself) -> Any: ...
    def get_format(self, EggTextureself) -> Any: ...
    def get_lod_bias(self, EggTextureself) -> Any: ...
    def get_magfilter(self, EggTextureself) -> Any: ...
    def get_max_lod(self, EggTextureself) -> Any: ...
    def get_min_lod(self, EggTextureself) -> Any: ...
    def get_minfilter(self, EggTextureself) -> Any: ...
    def get_multitexture_sort(self, EggTextureself) -> Any: ...
    def get_multiview(self, EggTextureself) -> Any: ...
    def get_num_views(self, EggTextureself) -> Any: ...
    def get_priority(self, EggTextureself) -> Any: ...
    def get_quality_level(self, EggTextureself) -> Any: ...
    def get_read_mipmaps(self, EggTextureself) -> Any: ...
    def get_rgb_scale(self, EggTextureself) -> Any: ...
    def get_saved_result(self, EggTextureself) -> Any: ...
    def get_stage_name(self, EggTextureself) -> Any: ...
    def get_tex_gen(self, EggTextureself) -> Any: ...
    def get_texture_type(self, EggTextureself) -> Any: ...
    def get_uv_name(self, EggTextureself) -> Any: ...
    def get_wrap_mode(self, EggTextureself) -> Any: ...
    def get_wrap_u(self, EggTextureself) -> Any: ...
    def get_wrap_v(self, EggTextureself) -> Any: ...
    def get_wrap_w(self, EggTextureself) -> Any: ...
    def hasAlphaChannel(self, *args, **kwargs): ...
    def hasAlphaFileChannel(self, *args, **kwargs): ...
    def hasAlphaFilename(self, *args, **kwargs): ...
    def hasAlphaScale(self, *args, **kwargs): ...
    def hasAnisotropicDegree(self, *args, **kwargs): ...
    def hasBorderColor(self, *args, **kwargs): ...
    def hasColor(self, *args, **kwargs): ...
    def hasLodBias(self, *args, **kwargs): ...
    def hasMaxLod(self, *args, **kwargs): ...
    def hasMinLod(self, *args, **kwargs): ...
    def hasNumViews(self, *args, **kwargs): ...
    def hasPriority(self, *args, **kwargs): ...
    def hasRgbScale(self, *args, **kwargs): ...
    def hasStageName(self, *args, **kwargs): ...
    def hasUvName(self, *args, **kwargs): ...
    def has_alpha_channel(self, EggTextureself, intnum_components) -> Any: ...
    def has_alpha_file_channel(self, EggTextureself) -> Any: ...
    def has_alpha_filename(self, EggTextureself) -> Any: ...
    def has_alpha_scale(self, EggTextureself) -> Any: ...
    def has_anisotropic_degree(self, EggTextureself) -> Any: ...
    def has_border_color(self, EggTextureself) -> Any: ...
    def has_color(self, EggTextureself) -> Any: ...
    def has_lod_bias(self, EggTextureself) -> Any: ...
    def has_max_lod(self, EggTextureself) -> Any: ...
    def has_min_lod(self, EggTextureself) -> Any: ...
    def has_num_views(self, EggTextureself) -> Any: ...
    def has_priority(self, EggTextureself) -> Any: ...
    def has_rgb_scale(self, EggTextureself) -> Any: ...
    def has_stage_name(self, EggTextureself) -> Any: ...
    def has_uv_name(self, EggTextureself) -> Any: ...
    def isEquivalentTo(self, *args, **kwargs): ...
    def is_equivalent_to(self, EggTextureself, constEggTextureother, inteq) -> Any: ...
    def multitextureOver(self, *args, **kwargs): ...
    def multitexture_over(self, constEggTextureself, EggTextureother) -> Any: ...
    def setAlphaFileChannel(self, *args, **kwargs): ...
    def setAlphaFilename(self, *args, **kwargs): ...
    def setAlphaFullpath(self, *args, **kwargs): ...
    def setAlphaScale(self, *args, **kwargs): ...
    def setAnisotropicDegree(self, *args, **kwargs): ...
    def setBorderColor(self, *args, **kwargs): ...
    def setColor(self, *args, **kwargs): ...
    def setCombineMode(self, *args, **kwargs): ...
    def setCombineOperand(self, *args, **kwargs): ...
    def setCombineSource(self, *args, **kwargs): ...
    def setCompressionMode(self, *args, **kwargs): ...
    def setEnvType(self, *args, **kwargs): ...
    def setFormat(self, *args, **kwargs): ...
    def setLodBias(self, *args, **kwargs): ...
    def setMagfilter(self, *args, **kwargs): ...
    def setMaxLod(self, *args, **kwargs): ...
    def setMinLod(self, *args, **kwargs): ...
    def setMinfilter(self, *args, **kwargs): ...
    def setMultiview(self, *args, **kwargs): ...
    def setNumViews(self, *args, **kwargs): ...
    def setPriority(self, *args, **kwargs): ...
    def setQualityLevel(self, *args, **kwargs): ...
    def setReadMipmaps(self, *args, **kwargs): ...
    def setRgbScale(self, *args, **kwargs): ...
    def setSavedResult(self, *args, **kwargs): ...
    def setStageName(self, *args, **kwargs): ...
    def setTexGen(self, *args, **kwargs): ...
    def setTextureType(self, *args, **kwargs): ...
    def setUvName(self, *args, **kwargs): ...
    def setWrapMode(self, *args, **kwargs): ...
    def setWrapU(self, *args, **kwargs): ...
    def setWrapV(self, *args, **kwargs): ...
    def setWrapW(self, *args, **kwargs): ...
    def set_alpha_file_channel(self, constEggTextureself, intalpha_file_channel) -> Any: ...
    def set_alpha_filename(self, constEggTextureself, constFilenamefilename) -> Any: ...
    def set_alpha_fullpath(self, constEggTextureself, constFilenamefullpath) -> Any: ...
    def set_alpha_scale(self, constEggTextureself, intalpha_scale) -> Any: ...
    def set_anisotropic_degree(self, constEggTextureself, intanisotropic_degree) -> Any: ...
    def set_border_color(self, constEggTextureself, constLVecBase4fborder_color) -> Any: ...
    def set_color(self, constEggTextureself, constLVecBase4fcolor) -> Any: ...
    def set_combine_mode(self, constEggTextureself, intchannel, intcm) -> Any: ...
    def set_combine_operand(self, constEggTextureself, intchannel, intn, intco) -> Any: ...
    def set_combine_source(self, constEggTextureself, intchannel, intn, intcs) -> Any: ...
    def set_compression_mode(self, constEggTextureself, intmode) -> Any: ...
    def set_env_type(self, constEggTextureself, inttype) -> Any: ...
    def set_format(self, constEggTextureself, intformat) -> Any: ...
    def set_lod_bias(self, constEggTextureself, doublelod_bias) -> Any: ...
    def set_magfilter(self, constEggTextureself, inttype) -> Any: ...
    def set_max_lod(self, constEggTextureself, doublemax_lod) -> Any: ...
    def set_min_lod(self, constEggTextureself, doublemin_lod) -> Any: ...
    def set_minfilter(self, constEggTextureself, inttype) -> Any: ...
    def set_multiview(self, constEggTextureself, boolmultiview) -> Any: ...
    def set_num_views(self, constEggTextureself, intnum_views) -> Any: ...
    def set_priority(self, constEggTextureself, intpriority) -> Any: ...
    def set_quality_level(self, constEggTextureself, intquality_level) -> Any: ...
    def set_read_mipmaps(self, constEggTextureself, boolread_mipmaps) -> Any: ...
    def set_rgb_scale(self, constEggTextureself, intrgb_scale) -> Any: ...
    def set_saved_result(self, constEggTextureself, boolsaved_result) -> Any: ...
    def set_stage_name(self, constEggTextureself, strstage_name) -> Any: ...
    def set_tex_gen(self, constEggTextureself, inttex_gen) -> Any: ...
    def set_texture_type(self, constEggTextureself, inttexture_type) -> Any: ...
    def set_uv_name(self, constEggTextureself, struv_name) -> Any: ...
    def set_wrap_mode(self, constEggTextureself, intmode) -> Any: ...
    def set_wrap_u(self, constEggTextureself, intmode) -> Any: ...
    def set_wrap_v(self, constEggTextureself, intmode) -> Any: ...
    def set_wrap_w(self, constEggTextureself, intmode) -> Any: ...
    def sortsLessThan(self, *args, **kwargs): ...
    def sorts_less_than(self, EggTextureself, constEggTextureother, inteq) -> Any: ...
    @staticmethod
    def stringCombineMode(*args, **kwargs): ...
    @staticmethod
    def stringCombineOperand(*args, **kwargs): ...
    @staticmethod
    def stringCombineSource(*args, **kwargs): ...
    @staticmethod
    def stringCompressionMode(*args, **kwargs): ...
    @staticmethod
    def stringEnvType(*args, **kwargs): ...
    @staticmethod
    def stringFilterType(*args, **kwargs): ...
    @staticmethod
    def stringFormat(*args, **kwargs): ...
    @staticmethod
    def stringQualityLevel(*args, **kwargs): ...
    @staticmethod
    def stringTexGen(*args, **kwargs): ...
    @staticmethod
    def stringTextureType(*args, **kwargs): ...
    @staticmethod
    def stringWrapMode(*args, **kwargs): ...
    @staticmethod
    def string_combine_mode(strstring) -> Any: ...
    @staticmethod
    def string_combine_operand(strstring) -> Any: ...
    @staticmethod
    def string_combine_source(strstring) -> Any: ...
    @staticmethod
    def string_compression_mode(strstring) -> Any: ...
    @staticmethod
    def string_env_type(strstring) -> Any: ...
    @staticmethod
    def string_filter_type(strstring) -> Any: ...
    @staticmethod
    def string_format(strstring) -> Any: ...
    @staticmethod
    def string_quality_level(strstring) -> Any: ...
    @staticmethod
    def string_tex_gen(strstring) -> Any: ...
    @staticmethod
    def string_texture_type(strstring) -> Any: ...
    @staticmethod
    def string_wrap_mode(strstring) -> Any: ...
    def upcastToEggFilenameNode(self, *args, **kwargs): ...
    def upcastToEggRenderMode(self, *args, **kwargs): ...
    def upcastToEggTransform(self, *args, **kwargs): ...
    def upcast_to_EggFilenameNode(self, constEggTextureself) -> Any: ...
    def upcast_to_EggRenderMode(self, constEggTextureself) -> Any: ...
    def upcast_to_EggTransform(self, constEggTextureself) -> Any: ...
    def write(self, EggTextureself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggTextureCollection(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addTexture(self, *args, **kwargs): ...
    def add_texture(self, constEggTextureCollectionself, EggTexturetexture) -> Any: ...
    def assign(self, constEggTextureCollectionself, constEggTextureCollectioncopy) -> Any: ...
    def clear(self, constEggTextureCollectionself) -> Any: ...
    def collapseEquivalentTextures(self, *args, **kwargs): ...
    @overload
    def collapse_equivalent_textures(self, constEggTextureCollectionself, inteq, EggGroupNodenode) -> Any: ...
    @overload
    def collapse_equivalent_textures(self) -> Any: ...
    @overload
    def collapse_equivalent_textures(self) -> Any: ...
    def createUniqueTexture(self, *args, **kwargs): ...
    @overload
    def create_unique_texture(self, constEggTextureCollectionself, constEggTexturecopy, inteq) -> Any: ...
    @overload
    def create_unique_texture(self) -> Any: ...
    def extractTextures(self, *args, **kwargs): ...
    def extract_textures(self, constEggTextureCollectionself, EggGroupNodenode) -> Any: ...
    def findFilename(self, *args, **kwargs): ...
    def findTref(self, *args, **kwargs): ...
    def findUsedTextures(self, *args, **kwargs): ...
    def find_filename(self, EggTextureCollectionself, constFilenamefilename) -> Any: ...
    def find_tref(self, EggTextureCollectionself, strtref_name) -> Any: ...
    def find_used_textures(self, constEggTextureCollectionself, EggNodenode) -> Any: ...
    def getNumTextures(self, *args, **kwargs): ...
    def getTexture(self, *args, **kwargs): ...
    def getTextures(self, *args, **kwargs): ...
    def get_num_textures(self, EggTextureCollectionself) -> Any: ...
    def get_texture(self, EggTextureCollectionself, intindex) -> Any: ...
    def get_textures(self, *args, **kwargs): ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, EggTextureCollectionself) -> Any: ...
    def removeTexture(self, *args, **kwargs): ...
    def removeUnusedTextures(self, *args, **kwargs): ...
    def remove_texture(self, constEggTextureCollectionself, EggTexturetexture) -> Any: ...
    def remove_unused_textures(self, constEggTextureCollectionself, EggNodenode) -> Any: ...
    def sortByBasename(self, *args, **kwargs): ...
    def sortByTref(self, *args, **kwargs): ...
    def sort_by_basename(self, constEggTextureCollectionself) -> Any: ...
    def sort_by_tref(self, constEggTextureCollectionself) -> Any: ...
    def uniquifyTrefs(self, *args, **kwargs): ...
    def uniquify_trefs(self, constEggTextureCollectionself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...

class EggTransform(dtoolconfig.DTOOL_SUPER_BASE):
    CTInvalid: ClassVar[int] = ...
    CTMatrix3: ClassVar[int] = ...
    CTMatrix4: ClassVar[int] = ...
    CTRotate2d: ClassVar[int] = ...
    CTRotate3d: ClassVar[int] = ...
    CTRotx: ClassVar[int] = ...
    CTRoty: ClassVar[int] = ...
    CTRotz: ClassVar[int] = ...
    CTScale2d: ClassVar[int] = ...
    CTScale3d: ClassVar[int] = ...
    CTTranslate2d: ClassVar[int] = ...
    CTTranslate3d: ClassVar[int] = ...
    CTUniformScale: ClassVar[int] = ...
    CT_invalid: ClassVar[int] = ...
    CT_matrix3: ClassVar[int] = ...
    CT_matrix4: ClassVar[int] = ...
    CT_rotate2d: ClassVar[int] = ...
    CT_rotate3d: ClassVar[int] = ...
    CT_rotx: ClassVar[int] = ...
    CT_roty: ClassVar[int] = ...
    CT_rotz: ClassVar[int] = ...
    CT_scale2d: ClassVar[int] = ...
    CT_scale3d: ClassVar[int] = ...
    CT_translate2d: ClassVar[int] = ...
    CT_translate3d: ClassVar[int] = ...
    CT_uniform_scale: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addMatrix3(self, *args, **kwargs): ...
    def addMatrix4(self, *args, **kwargs): ...
    def addRotate2d(self, *args, **kwargs): ...
    def addRotate3d(self, *args, **kwargs): ...
    def addRotx(self, *args, **kwargs): ...
    def addRoty(self, *args, **kwargs): ...
    def addRotz(self, *args, **kwargs): ...
    def addScale2d(self, *args, **kwargs): ...
    def addScale3d(self, *args, **kwargs): ...
    def addTranslate2d(self, *args, **kwargs): ...
    def addTranslate3d(self, *args, **kwargs): ...
    def addUniformScale(self, *args, **kwargs): ...
    def add_matrix3(self, constEggTransformself, constLMatrix3dmat) -> Any: ...
    def add_matrix4(self, constEggTransformself, constLMatrix4dmat) -> Any: ...
    def add_rotate2d(self, constEggTransformself, doubleangle) -> Any: ...
    @overload
    def add_rotate3d(self, constEggTransformself, constLQuaterniondquat) -> Any: ...
    @overload
    def add_rotate3d(self, constEggTransformself, doubleangle, constLVector3daxis) -> Any: ...
    def add_rotx(self, constEggTransformself, doubleangle) -> Any: ...
    def add_roty(self, constEggTransformself, doubleangle) -> Any: ...
    def add_rotz(self, constEggTransformself, doubleangle) -> Any: ...
    def add_scale2d(self, constEggTransformself, constLVecBase2dscale) -> Any: ...
    def add_scale3d(self, constEggTransformself, constLVecBase3dscale) -> Any: ...
    def add_translate2d(self, constEggTransformself, constLVector2dtranslate) -> Any: ...
    def add_translate3d(self, constEggTransformself, constLVector3dtranslate) -> Any: ...
    def add_uniform_scale(self, constEggTransformself, doublescale) -> Any: ...
    def assign(self, constEggTransformself, constEggTransformcopy) -> Any: ...
    def clearTransform(self, *args, **kwargs): ...
    def clear_transform(self, constEggTransformself) -> Any: ...
    def getComponentMat3(self, *args, **kwargs): ...
    def getComponentMat4(self, *args, **kwargs): ...
    def getComponentNumber(self, *args, **kwargs): ...
    def getComponentType(self, *args, **kwargs): ...
    def getComponentVec2(self, *args, **kwargs): ...
    def getComponentVec3(self, *args, **kwargs): ...
    def getNumComponents(self, *args, **kwargs): ...
    def getTransform2d(self, *args, **kwargs): ...
    def getTransform3d(self, *args, **kwargs): ...
    def get_component_mat3(self, EggTransformself, intn) -> Any: ...
    def get_component_mat4(self, EggTransformself, intn) -> Any: ...
    def get_component_number(self, EggTransformself, intn) -> Any: ...
    def get_component_type(self, EggTransformself, intn) -> Any: ...
    def get_component_vec2(self, EggTransformself, intn) -> Any: ...
    def get_component_vec3(self, EggTransformself, intn) -> Any: ...
    def get_num_components(self, EggTransformself) -> Any: ...
    def get_transform2d(self, EggTransformself) -> Any: ...
    def get_transform3d(self, EggTransformself) -> Any: ...
    def hasTransform(self, *args, **kwargs): ...
    def hasTransform2d(self, *args, **kwargs): ...
    def hasTransform3d(self, *args, **kwargs): ...
    def has_transform(self, EggTransformself) -> Any: ...
    def has_transform2d(self, EggTransformself) -> Any: ...
    def has_transform3d(self, EggTransformself) -> Any: ...
    def setTransform2d(self, *args, **kwargs): ...
    def setTransform3d(self, *args, **kwargs): ...
    def set_transform2d(self, constEggTransformself, constLMatrix3dmat) -> Any: ...
    def set_transform3d(self, constEggTransformself, constLMatrix4dmat) -> Any: ...
    def transformIsIdentity(self, *args, **kwargs): ...
    def transform_is_identity(self, EggTransformself) -> Any: ...
    def write(self, EggTransformself, ostreamout, intindent_level, strlabel) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggTriangleFan(EggCompositePrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggTriangleFanself, constEggTriangleFancopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggTriangleStrip(EggCompositePrimitive):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggTriangleStripself, constEggTriangleStripcopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggUserData(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggUserDataself, constEggUserDatacopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggVertex(EggObject, EggAttributes):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggVertexself, constEggVertexcopy) -> Any: ...
    def clearAux(self, *args, **kwargs): ...
    def clearGrefs(self, *args, **kwargs): ...
    def clearUv(self, *args, **kwargs): ...
    @overload
    def clear_aux(self, constEggVertexself) -> Any: ...
    @overload
    def clear_aux(self, constEggVertexself, strname) -> Any: ...
    def clear_grefs(self, constEggVertexself) -> Any: ...
    @overload
    def clear_uv(self, constEggVertexself) -> Any: ...
    @overload
    def clear_uv(self, constEggVertexself, strname) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, EggVertexself, constEggVertexother) -> Any: ...
    def copyGrefsFrom(self, *args, **kwargs): ...
    def copy_grefs_from(self, constEggVertexself, constEggVertexother) -> Any: ...
    def getAux(self, *args, **kwargs): ...
    def getAuxObj(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getExternalIndex(self, *args, **kwargs): ...
    def getExternalIndex2(self, *args, **kwargs): ...
    def getIndex(self, *args, **kwargs): ...
    def getNumDimensions(self, *args, **kwargs): ...
    def getNumGlobalCoord(self, *args, **kwargs): ...
    def getNumLocalCoord(self, *args, **kwargs): ...
    def getPool(self, *args, **kwargs): ...
    def getPos1(self, *args, **kwargs): ...
    def getPos2(self, *args, **kwargs): ...
    def getPos3(self, *args, **kwargs): ...
    def getPos4(self, *args, **kwargs): ...
    def getUv(self, *args, **kwargs): ...
    def getUvObj(self, *args, **kwargs): ...
    def getUvw(self, *args, **kwargs): ...
    def get_aux(self, EggVertexself, strname) -> Any: ...
    def get_aux_obj(self, EggVertexself, strname) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_external_index(self, EggVertexself) -> Any: ...
    def get_external_index2(self, EggVertexself) -> Any: ...
    def get_index(self, EggVertexself) -> Any: ...
    @overload
    def get_num_dimensions(self, EggVertexself) -> Any: ...
    @overload
    def get_num_dimensions(self) -> Any: ...
    def get_num_global_coord(self, EggVertexself) -> Any: ...
    def get_num_local_coord(self, EggVertexself) -> Any: ...
    def get_pool(self, EggVertexself) -> Any: ...
    def get_pos1(self, EggVertexself) -> Any: ...
    def get_pos2(self, EggVertexself) -> Any: ...
    def get_pos3(self, EggVertexself) -> Any: ...
    def get_pos4(self, EggVertexself) -> Any: ...
    @overload
    def get_uv(self, EggVertexself) -> Any: ...
    @overload
    def get_uv(self, EggVertexself, strname) -> Any: ...
    @overload
    def get_uv(self, name) -> Any: ...
    def get_uv_obj(self, EggVertexself, strname) -> Any: ...
    def get_uvw(self, EggVertexself, strname) -> Any: ...
    def hasAux(self, *args, **kwargs): ...
    def hasGref(self, *args, **kwargs): ...
    def hasPref(self, *args, **kwargs): ...
    def hasUv(self, *args, **kwargs): ...
    def hasUvw(self, *args, **kwargs): ...
    @overload
    def has_aux(self, EggVertexself) -> Any: ...
    @overload
    def has_aux(self, EggVertexself, strname) -> Any: ...
    def has_gref(self, EggVertexself, constEggGroupgroup) -> Any: ...
    def has_pref(self, EggVertexself, constEggPrimitiveprim) -> Any: ...
    @overload
    def has_uv(self, EggVertexself) -> Any: ...
    @overload
    def has_uv(self, EggVertexself, strname) -> Any: ...
    @overload
    def has_uv(self, name) -> Any: ...
    def has_uvw(self, EggVertexself, strname) -> Any: ...
    def isForwardReference(self, *args, **kwargs): ...
    def is_forward_reference(self, EggVertexself) -> Any: ...
    @staticmethod
    def makeAverage(*args, **kwargs): ...
    @staticmethod
    def make_average(constEggVertexfirst, constEggVertexsecond) -> Any: ...
    def modifyAuxObj(self, *args, **kwargs): ...
    def modifyUvObj(self, *args, **kwargs): ...
    def modify_aux_obj(self, constEggVertexself, strname) -> Any: ...
    def modify_uv_obj(self, constEggVertexself, strname) -> Any: ...
    def output(self, EggVertexself, ostreamout) -> Any: ...
    def setAux(self, *args, **kwargs): ...
    def setAuxObj(self, *args, **kwargs): ...
    def setExternalIndex(self, *args, **kwargs): ...
    def setExternalIndex2(self, *args, **kwargs): ...
    def setPos(self, *args, **kwargs): ...
    def setPos4(self, *args, **kwargs): ...
    def setUv(self, *args, **kwargs): ...
    def setUvObj(self, *args, **kwargs): ...
    def setUvw(self, *args, **kwargs): ...
    def set_aux(self, constEggVertexself, strname, constLVecBase4daux) -> Any: ...
    def set_aux_obj(self, constEggVertexself, EggVertexAuxvertex_aux) -> Any: ...
    def set_external_index(self, constEggVertexself, intexternal_index) -> Any: ...
    def set_external_index2(self, constEggVertexself, intexternal_index2) -> Any: ...
    @overload
    def set_pos(self, constEggVertexself, constLPoint4dpos) -> Any: ...
    @overload
    def set_pos(self, constEggVertexself, constLPoint2dpos) -> Any: ...
    @overload
    def set_pos(self, constEggVertexself, constLPoint3dpos) -> Any: ...
    @overload
    def set_pos(self, constEggVertexself, doublepos) -> Any: ...
    def set_pos4(self, constEggVertexself, constLPoint4dpos) -> Any: ...
    @overload
    def set_uv(self, constEggVertexself, constLPoint2dtexCoord) -> Any: ...
    @overload
    def set_uv(self, constEggVertexself, strname, constLPoint2dtexCoord) -> Any: ...
    @overload
    def set_uv(self, name, uv) -> Any: ...
    def set_uv_obj(self, constEggVertexself, EggVertexUVvertex_uv) -> Any: ...
    def set_uvw(self, constEggVertexself, strname, constLPoint3dtexCoord) -> Any: ...
    def sortsLessThan(self, *args, **kwargs): ...
    def sorts_less_than(self, EggVertexself, constEggVertexother) -> Any: ...
    def testGrefIntegrity(self, *args, **kwargs): ...
    def testPrefIntegrity(self, *args, **kwargs): ...
    def test_gref_integrity(self, EggVertexself) -> Any: ...
    def test_pref_integrity(self, EggVertexself) -> Any: ...
    def transform(self, constEggVertexself, constLMatrix4dmat) -> Any: ...
    def upcastToEggAttributes(self, *args, **kwargs): ...
    def upcastToEggObject(self, *args, **kwargs): ...
    def upcast_to_EggAttributes(self, constEggVertexself) -> Any: ...
    def upcast_to_EggObject(self, constEggVertexself) -> Any: ...
    def write(self, EggVertexself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class EggVertexAux(EggNamedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggVertexAuxself, constEggVertexAuxcopy) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, EggVertexAuxself, constEggVertexAuxother) -> Any: ...
    def getAux(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_aux(self, EggVertexAuxself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    @staticmethod
    def makeAverage(*args, **kwargs): ...
    @staticmethod
    def make_average(constEggVertexAuxfirst, constEggVertexAuxsecond) -> Any: ...
    def setAux(self, *args, **kwargs): ...
    def setName(self, *args, **kwargs): ...
    def set_aux(self, constEggVertexAuxself, constLVecBase4daux) -> Any: ...
    def set_name(self, constEggVertexAuxself, strname) -> Any: ...
    def write(self, EggVertexAuxself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class EggVertexPool(EggNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addUnusedVerticesToPrim(self, *args, **kwargs): ...
    def addVertex(self, *args, **kwargs): ...
    def add_unused_vertices_to_prim(self, constEggVertexPoolself, EggPrimitiveprim) -> Any: ...
    @overload
    def add_vertex(self, constEggVertexPoolself, EggVertexvertex, intindex) -> Any: ...
    @overload
    def add_vertex(self) -> Any: ...
    def createUniqueVertex(self, *args, **kwargs): ...
    @overload
    def create_unique_vertex(self, constEggVertexPoolself, constEggVertexcopy) -> Any: ...
    @overload
    def create_unique_vertex(self) -> Any: ...
    def findMatchingVertex(self, *args, **kwargs): ...
    def find_matching_vertex(self, constEggVertexPoolself, constEggVertexcopy) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getForwardVertex(self, *args, **kwargs): ...
    def getHighestIndex(self, *args, **kwargs): ...
    def getNumDimensions(self, *args, **kwargs): ...
    def getVertex(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_forward_vertex(self, constEggVertexPoolself, intindex) -> Any: ...
    def get_highest_index(self, EggVertexPoolself) -> Any: ...
    def get_num_dimensions(self, EggVertexPoolself) -> Any: ...
    def get_vertex(self, EggVertexPoolself, intindex) -> Any: ...
    def hasAux(self, *args, **kwargs): ...
    def hasColors(self, *args, **kwargs): ...
    def hasDefinedVertices(self, *args, **kwargs): ...
    def hasForwardVertices(self, *args, **kwargs): ...
    def hasNonwhiteColors(self, *args, **kwargs): ...
    def hasNormals(self, *args, **kwargs): ...
    def hasUvs(self, *args, **kwargs): ...
    def hasVertex(self, *args, **kwargs): ...
    def has_aux(self, EggVertexPoolself) -> Any: ...
    def has_colors(self, EggVertexPoolself) -> Any: ...
    def has_defined_vertices(self, EggVertexPoolself) -> Any: ...
    def has_forward_vertices(self, EggVertexPoolself) -> Any: ...
    def has_nonwhite_colors(self, EggVertexPoolself) -> Any: ...
    def has_normals(self, EggVertexPoolself) -> Any: ...
    def has_uvs(self, EggVertexPoolself) -> Any: ...
    def has_vertex(self, EggVertexPoolself, intindex) -> Any: ...
    def makeNewVertex(self, *args, **kwargs): ...
    @overload
    def make_new_vertex(self, constEggVertexPoolself) -> Any: ...
    @overload
    def make_new_vertex(self, constEggVertexPoolself, constLPoint4dpos) -> Any: ...
    @overload
    def make_new_vertex(self, constEggVertexPoolself, constLPoint2dpos) -> Any: ...
    @overload
    def make_new_vertex(self, constEggVertexPoolself, constLPoint3dpos) -> Any: ...
    @overload
    def make_new_vertex(self, constEggVertexPoolself, doublepos) -> Any: ...
    @overload
    def make_new_vertex(self) -> Any: ...
    @overload
    def make_new_vertex(self) -> Any: ...
    @overload
    def make_new_vertex(self) -> Any: ...
    @overload
    def make_new_vertex(self) -> Any: ...
    @overload
    def make_new_vertex(self) -> Any: ...
    def removeUnusedVertices(self, *args, **kwargs): ...
    def removeVertex(self, *args, **kwargs): ...
    def remove_unused_vertices(self, constEggVertexPoolself) -> Any: ...
    def remove_vertex(self, constEggVertexPoolself, EggVertexvertex) -> Any: ...
    def setHighestIndex(self, *args, **kwargs): ...
    def set_highest_index(self, constEggVertexPoolself, inthighest_index) -> Any: ...
    def sortByExternalIndex(self, *args, **kwargs): ...
    def sort_by_external_index(self, constEggVertexPoolself) -> Any: ...
    def transform(self, constEggVertexPoolself, constLMatrix4dmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...

class EggVertexUV(EggNamedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggVertexUVself, constEggVertexUVcopy) -> Any: ...
    def clearBinormal(self, *args, **kwargs): ...
    def clearTangent(self, *args, **kwargs): ...
    def clear_binormal(self, constEggVertexUVself) -> Any: ...
    def clear_tangent(self, constEggVertexUVself) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, EggVertexUVself, constEggVertexUVother) -> Any: ...
    @staticmethod
    def filterName(*args, **kwargs): ...
    @staticmethod
    def filter_name(strname) -> Any: ...
    def getBinormal(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumDimensions(self, *args, **kwargs): ...
    def getTangent(self, *args, **kwargs): ...
    def getTangent4(self, *args, **kwargs): ...
    def getUv(self, *args, **kwargs): ...
    def getUvw(self, *args, **kwargs): ...
    def get_binormal(self, EggVertexUVself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_dimensions(self, EggVertexUVself) -> Any: ...
    def get_tangent(self, EggVertexUVself) -> Any: ...
    def get_tangent4(self, EggVertexUVself) -> Any: ...
    def get_uv(self, EggVertexUVself) -> Any: ...
    def get_uvw(self, EggVertexUVself) -> Any: ...
    def hasBinormal(self, *args, **kwargs): ...
    def hasTangent(self, *args, **kwargs): ...
    def hasTangent4(self, *args, **kwargs): ...
    def hasW(self, *args, **kwargs): ...
    def has_binormal(self, EggVertexUVself) -> Any: ...
    def has_tangent(self, EggVertexUVself) -> Any: ...
    def has_tangent4(self, EggVertexUVself) -> Any: ...
    def has_w(self, EggVertexUVself) -> Any: ...
    @staticmethod
    def makeAverage(*args, **kwargs): ...
    @staticmethod
    def make_average(constEggVertexUVfirst, constEggVertexUVsecond) -> Any: ...
    def setBinormal(self, *args, **kwargs): ...
    def setName(self, *args, **kwargs): ...
    def setTangent(self, *args, **kwargs): ...
    def setTangent4(self, *args, **kwargs): ...
    def setUv(self, *args, **kwargs): ...
    def setUvw(self, *args, **kwargs): ...
    def set_binormal(self, constEggVertexUVself, constLVector3dbinormal) -> Any: ...
    def set_name(self, constEggVertexUVself, strname) -> Any: ...
    def set_tangent(self, constEggVertexUVself, constLVector3dtangent) -> Any: ...
    def set_tangent4(self, constEggVertexUVself, constLVecBase4dtangent) -> Any: ...
    def set_uv(self, constEggVertexUVself, constLPoint2dtexCoord) -> Any: ...
    def set_uvw(self, constEggVertexUVself, constLPoint3dtexCoord) -> Any: ...
    def transform(self, constEggVertexUVself, constLMatrix4dmat) -> Any: ...
    def write(self, EggVertexUVself, ostreamout, intindent_level) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class EggXfmAnimData(EggAnimData):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assign(self, constEggXfmAnimDataself, constEggXfmAnimDatacopy) -> Any: ...
    def clearContents(self, *args, **kwargs): ...
    def clearOrder(self, *args, **kwargs): ...
    def clear_contents(self, constEggXfmAnimDataself) -> Any: ...
    def clear_order(self, constEggXfmAnimDataself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getContents(self, *args, **kwargs): ...
    def getCoordinateSystem(self, *args, **kwargs): ...
    def getNumCols(self, *args, **kwargs): ...
    def getNumRows(self, *args, **kwargs): ...
    def getOrder(self, *args, **kwargs): ...
    @staticmethod
    def getStandardOrder(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_contents(self, EggXfmAnimDataself) -> Any: ...
    def get_coordinate_system(self, EggXfmAnimDataself) -> Any: ...
    def get_num_cols(self, EggXfmAnimDataself) -> Any: ...
    def get_num_rows(self, EggXfmAnimDataself) -> Any: ...
    def get_order(self, EggXfmAnimDataself) -> Any: ...
    @staticmethod
    def get_standard_order() -> Any: ...
    @overload
    def get_value(self, EggXfmAnimDataself, introw, LMatrix4dmat) -> Any: ...
    @overload
    def get_value(self, EggXfmAnimDataself, introw, intcol) -> Any: ...
    def hasContents(self, *args, **kwargs): ...
    def hasOrder(self, *args, **kwargs): ...
    def has_contents(self, EggXfmAnimDataself) -> Any: ...
    def has_order(self, EggXfmAnimDataself) -> Any: ...
    def setContents(self, *args, **kwargs): ...
    def setOrder(self, *args, **kwargs): ...
    def set_contents(self, constEggXfmAnimDataself, strcontents) -> Any: ...
    def set_order(self, constEggXfmAnimDataself, strorder) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class EggXfmSAnim(EggGroupNode):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addComponentData(self, *args, **kwargs): ...
    def addData(self, *args, **kwargs): ...
    @overload
    def add_component_data(self, constEggXfmSAnimself, strcomponent_name, doublevalue) -> Any: ...
    @overload
    def add_component_data(self, constEggXfmSAnimself, intcomponent, doublevalue) -> Any: ...
    def add_data(self, constEggXfmSAnimself, constLMatrix4dmat) -> Any: ...
    def assign(self, constEggXfmSAnimself, constEggXfmSAnimcopy) -> Any: ...
    def clearData(self, *args, **kwargs): ...
    def clearFps(self, *args, **kwargs): ...
    def clearOrder(self, *args, **kwargs): ...
    def clear_data(self, constEggXfmSAnimself) -> Any: ...
    def clear_fps(self, constEggXfmSAnimself) -> Any: ...
    def clear_order(self, constEggXfmSAnimself) -> Any: ...
    @staticmethod
    def composeWithOrder(*args, **kwargs): ...
    @staticmethod
    def compose_with_order(LMatrix4dmat, constLVecBase3dscale, constLVecBase3dshear, constLVecBase3dhpr, constLVecBase3dtrans, strorder, intcs) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCoordinateSystem(self, *args, **kwargs): ...
    def getFps(self, *args, **kwargs): ...
    def getNumRows(self, *args, **kwargs): ...
    def getOrder(self, *args, **kwargs): ...
    @staticmethod
    def getStandardOrder(*args, **kwargs): ...
    def getValue(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_coordinate_system(self, EggXfmSAnimself) -> Any: ...
    def get_fps(self, EggXfmSAnimself) -> Any: ...
    def get_num_rows(self, EggXfmSAnimself) -> Any: ...
    def get_order(self, EggXfmSAnimself) -> Any: ...
    @staticmethod
    def get_standard_order() -> Any: ...
    def get_value(self, EggXfmSAnimself, introw, LMatrix4dmat) -> Any: ...
    def hasFps(self, *args, **kwargs): ...
    def hasOrder(self, *args, **kwargs): ...
    def has_fps(self, EggXfmSAnimself) -> Any: ...
    def has_order(self, EggXfmSAnimself) -> Any: ...
    def normalize(self, constEggXfmSAnimself) -> Any: ...
    def optimize(self, constEggXfmSAnimself) -> Any: ...
    def optimizeToStandardOrder(self, *args, **kwargs): ...
    def optimize_to_standard_order(self, constEggXfmSAnimself) -> Any: ...
    def setFps(self, *args, **kwargs): ...
    def setOrder(self, *args, **kwargs): ...
    def setValue(self, *args, **kwargs): ...
    def set_fps(self, constEggXfmSAnimself, doublefps) -> Any: ...
    def set_order(self, constEggXfmSAnimself, strorder) -> Any: ...
    def set_value(self, constEggXfmSAnimself, introw, constLMatrix4dmat) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

def Dtool_BorrowThisReference(*args, **kwargs): ...
def loadEggData(*args, **kwargs): ...
def loadEggFile(*args, **kwargs): ...
def load_egg_data(EggDatadata, intcs) -> Any: ...
def load_egg_file(constFilenamefilename, intcs, BamCacheRecordrecord) -> Any: ...
def parseEggData(*args, **kwargs): ...
def parseEggNode(*args, **kwargs): ...
def parse_egg_data(stregg_syntax) -> Any: ...
def parse_egg_node(stregg_syntax) -> Any: ...
def saveEggData(*args, **kwargs): ...
def saveEggFile(*args, **kwargs): ...
def save_egg_data(EggDatadata, PandaNodenode) -> Any: ...
def save_egg_file(constFilenamefilename, PandaNodenode, intcs) -> Any: ...
