import dtoolconfig
import panda3d.core
from _typeshed import Incomplete
from typing import Any, ClassVar, overload

Dtool_PyNativeInterface: int

class DxBody(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DxGeom(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DxJoint(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DxJointGroup(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DxSpace(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DxTriMeshData(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DxWorld(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class OdeAMotorJoint(OdeJoint):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addTorques(self, *args, **kwargs): ...
    def add_torques(self, constOdeAMotorJointself, floattorque1, floattorque2, floattorque3) -> Any: ...
    def getAngle(self, *args, **kwargs): ...
    def getAngleRate(self, *args, **kwargs): ...
    def getAxes(self, *args, **kwargs): ...
    def getAxis(self, *args, **kwargs): ...
    def getAxisRel(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    def getNumAxes(self, *args, **kwargs): ...
    def getParamBounce(self, *args, **kwargs): ...
    def getParamCFM(self, *args, **kwargs): ...
    def getParamFMax(self, *args, **kwargs): ...
    def getParamFudgeFactor(self, *args, **kwargs): ...
    def getParamHiStop(self, *args, **kwargs): ...
    def getParamLoStop(self, *args, **kwargs): ...
    def getParamStopCFM(self, *args, **kwargs): ...
    def getParamStopERP(self, *args, **kwargs): ...
    def getParamVel(self, *args, **kwargs): ...
    def get_angle(self, OdeAMotorJointself, intanum) -> Any: ...
    def get_angle_rate(self, OdeAMotorJointself, intanum) -> Any: ...
    def get_axes(self, *args, **kwargs): ...
    def get_axis(self, OdeAMotorJointself, intanum) -> Any: ...
    def get_axis_rel(self, OdeAMotorJointself, intanum) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_mode(self, OdeAMotorJointself) -> Any: ...
    def get_num_axes(self, OdeAMotorJointself) -> Any: ...
    def get_param_CFM(self, OdeAMotorJointself, intaxis) -> Any: ...
    def get_param_bounce(self, OdeAMotorJointself, intaxis) -> Any: ...
    def get_param_f_max(self, OdeAMotorJointself, intaxis) -> Any: ...
    def get_param_fudge_factor(self, OdeAMotorJointself, intaxis) -> Any: ...
    def get_param_hi_stop(self, OdeAMotorJointself, intaxis) -> Any: ...
    def get_param_lo_stop(self, OdeAMotorJointself, intaxis) -> Any: ...
    def get_param_stop_CFM(self, OdeAMotorJointself, intaxis) -> Any: ...
    def get_param_stop_ERP(self, OdeAMotorJointself, intaxis) -> Any: ...
    def get_param_vel(self, OdeAMotorJointself, intaxis) -> Any: ...
    def setAngle(self, *args, **kwargs): ...
    def setAxis(self, *args, **kwargs): ...
    def setMode(self, *args, **kwargs): ...
    def setNumAxes(self, *args, **kwargs): ...
    def setParamBounce(self, *args, **kwargs): ...
    def setParamCFM(self, *args, **kwargs): ...
    def setParamFMax(self, *args, **kwargs): ...
    def setParamFudgeFactor(self, *args, **kwargs): ...
    def setParamHiStop(self, *args, **kwargs): ...
    def setParamLoStop(self, *args, **kwargs): ...
    def setParamStopCFM(self, *args, **kwargs): ...
    def setParamStopERP(self, *args, **kwargs): ...
    def setParamVel(self, *args, **kwargs): ...
    def set_angle(self, constOdeAMotorJointself, intanum, floatangle) -> Any: ...
    @overload
    def set_axis(self, constOdeAMotorJointself, intanum, intrel, constLVecBase3faxis) -> Any: ...
    @overload
    def set_axis(self, constOdeAMotorJointself, intanum, intrel, floatx, floaty, floatz) -> Any: ...
    def set_mode(self, constOdeAMotorJointself, intmode) -> Any: ...
    def set_num_axes(self, constOdeAMotorJointself, intnum) -> Any: ...
    def set_param_CFM(self, constOdeAMotorJointself, intaxis, floatval) -> Any: ...
    def set_param_bounce(self, constOdeAMotorJointself, intaxis, floatval) -> Any: ...
    def set_param_f_max(self, constOdeAMotorJointself, intaxis, floatval) -> Any: ...
    def set_param_fudge_factor(self, constOdeAMotorJointself, intaxis, floatval) -> Any: ...
    def set_param_hi_stop(self, constOdeAMotorJointself, intaxis, floatval) -> Any: ...
    def set_param_lo_stop(self, constOdeAMotorJointself, intaxis, floatval) -> Any: ...
    def set_param_stop_CFM(self, constOdeAMotorJointself, intaxis, floatval) -> Any: ...
    def set_param_stop_ERP(self, constOdeAMotorJointself, intaxis, floatval) -> Any: ...
    def set_param_vel(self, constOdeAMotorJointself, intaxis, floatval) -> Any: ...

class OdeBallJoint(OdeJoint):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAnchor(self, *args, **kwargs): ...
    def getAnchor2(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def get_anchor(self, OdeBallJointself) -> Any: ...
    def get_anchor2(self, OdeBallJointself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def setAnchor(self, *args, **kwargs): ...
    def setAnchor2(self, *args, **kwargs): ...
    @overload
    def set_anchor(self, constOdeBallJointself, constLVecBase3fanchor) -> Any: ...
    @overload
    def set_anchor(self, constOdeBallJointself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_anchor2(self, constOdeBallJointself, constLVecBase3fanchor) -> Any: ...
    @overload
    def set_anchor2(self, constOdeBallJointself, floatx, floaty, floatz) -> Any: ...

class OdeBody(panda3d.core.TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    joints: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def addForce(self, *args, **kwargs): ...
    def addForceAtPos(self, *args, **kwargs): ...
    def addForceAtRelPos(self, *args, **kwargs): ...
    def addRelForce(self, *args, **kwargs): ...
    def addRelForceAtPos(self, *args, **kwargs): ...
    def addRelForceAtRelPos(self, *args, **kwargs): ...
    def addRelTorque(self, *args, **kwargs): ...
    def addTorque(self, *args, **kwargs): ...
    @overload
    def add_force(self, constOdeBodyself, constLVecBase3ff) -> Any: ...
    @overload
    def add_force(self, constOdeBodyself, floatfx, floatfy, floatfz) -> Any: ...
    @overload
    def add_force_at_pos(self, constOdeBodyself, constLVecBase3ff, constLVecBase3fpos) -> Any: ...
    @overload
    def add_force_at_pos(self, constOdeBodyself, floatfx, floatfy, floatfz, floatpx, floatpy, floatpz) -> Any: ...
    @overload
    def add_force_at_rel_pos(self, constOdeBodyself, constLVecBase3ff, constLVecBase3fpos) -> Any: ...
    @overload
    def add_force_at_rel_pos(self, constOdeBodyself, floatfx, floatfy, floatfz, floatpx, floatpy, floatpz) -> Any: ...
    @overload
    def add_rel_force(self, constOdeBodyself, constLVecBase3ff) -> Any: ...
    @overload
    def add_rel_force(self, constOdeBodyself, floatfx, floatfy, floatfz) -> Any: ...
    @overload
    def add_rel_force_at_pos(self, constOdeBodyself, constLVecBase3ff, constLVecBase3fpos) -> Any: ...
    @overload
    def add_rel_force_at_pos(self, constOdeBodyself, floatfx, floatfy, floatfz, floatpx, floatpy, floatpz) -> Any: ...
    @overload
    def add_rel_force_at_rel_pos(self, constOdeBodyself, constLVecBase3ff, constLVecBase3fpos) -> Any: ...
    @overload
    def add_rel_force_at_rel_pos(self, constOdeBodyself, floatfx, floatfy, floatfz, floatpx, floatpy, floatpz) -> Any: ...
    @overload
    def add_rel_torque(self, constOdeBodyself, constLVecBase3ff) -> Any: ...
    @overload
    def add_rel_torque(self, constOdeBodyself, floatfx, floatfy, floatfz) -> Any: ...
    @overload
    def add_torque(self, constOdeBodyself, constLVecBase3ff) -> Any: ...
    @overload
    def add_torque(self, constOdeBodyself, floatfx, floatfy, floatfz) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, OdeBodyself, constOdeBodyother) -> Any: ...
    def destroy(self, constOdeBodyself) -> Any: ...
    def disable(self, constOdeBodyself) -> Any: ...
    def enable(self, constOdeBodyself) -> Any: ...
    def getAngularVel(self, *args, **kwargs): ...
    def getAutoDisableAngularThreshold(self, *args, **kwargs): ...
    def getAutoDisableFlag(self, *args, **kwargs): ...
    def getAutoDisableLinearThreshold(self, *args, **kwargs): ...
    def getAutoDisableSteps(self, *args, **kwargs): ...
    def getAutoDisableTime(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getConvertedJoint(self, *args, **kwargs): ...
    def getData(self, *args, **kwargs): ...
    def getFiniteRotationAxis(self, *args, **kwargs): ...
    def getFiniteRotationMode(self, *args, **kwargs): ...
    def getGravityMode(self, *args, **kwargs): ...
    def getId(self, *args, **kwargs): ...
    def getJoint(self, *args, **kwargs): ...
    def getJoints(self, *args, **kwargs): ...
    def getLinearVel(self, *args, **kwargs): ...
    def getMass(self, *args, **kwargs): ...
    def getNumJoints(self, *args, **kwargs): ...
    def getPointVel(self, *args, **kwargs): ...
    def getPosRelPoint(self, *args, **kwargs): ...
    def getPosition(self, *args, **kwargs): ...
    def getQuaternion(self, *args, **kwargs): ...
    def getRelPointPos(self, *args, **kwargs): ...
    def getRelPointVel(self, *args, **kwargs): ...
    def getRotation(self, *args, **kwargs): ...
    def get_angular_vel(self, OdeBodyself) -> Any: ...
    def get_auto_disable_angular_threshold(self, OdeBodyself) -> Any: ...
    def get_auto_disable_flag(self, OdeBodyself) -> Any: ...
    def get_auto_disable_linear_threshold(self, OdeBodyself) -> Any: ...
    def get_auto_disable_steps(self, OdeBodyself) -> Any: ...
    def get_auto_disable_time(self, OdeBodyself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_converted_joint(self, OdeBodyself, inti) -> Any: ...
    def get_data(self, OdeBodyself) -> Any: ...
    def get_finite_rotation_axis(self, OdeBodyself) -> Any: ...
    def get_finite_rotation_mode(self, OdeBodyself) -> Any: ...
    def get_gravity_mode(self, OdeBodyself) -> Any: ...
    def get_id(self, OdeBodyself) -> Any: ...
    def get_joint(self, OdeBodyself, intindex) -> Any: ...
    def get_joints(self, *args, **kwargs): ...
    def get_linear_vel(self, OdeBodyself) -> Any: ...
    def get_mass(self, OdeBodyself) -> Any: ...
    def get_num_joints(self, OdeBodyself) -> Any: ...
    @overload
    def get_point_vel(self, OdeBodyself, constLVecBase3fpos) -> Any: ...
    @overload
    def get_point_vel(self, OdeBodyself, floatpx, floatpy, floatpz) -> Any: ...
    @overload
    def get_pos_rel_point(self, OdeBodyself, constLVecBase3fpos) -> Any: ...
    @overload
    def get_pos_rel_point(self, OdeBodyself, floatpx, floatpy, floatpz) -> Any: ...
    def get_position(self, OdeBodyself) -> Any: ...
    def get_quaternion(self, OdeBodyself) -> Any: ...
    @overload
    def get_rel_point_pos(self, OdeBodyself, constLVecBase3fpos) -> Any: ...
    @overload
    def get_rel_point_pos(self, OdeBodyself, floatpx, floatpy, floatpz) -> Any: ...
    @overload
    def get_rel_point_vel(self, OdeBodyself, constLVecBase3fpos) -> Any: ...
    @overload
    def get_rel_point_vel(self, OdeBodyself, floatpx, floatpy, floatpz) -> Any: ...
    def get_rotation(self, OdeBodyself) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def isEnabled(self, *args, **kwargs): ...
    def is_empty(self, OdeBodyself) -> Any: ...
    def is_enabled(self, OdeBodyself) -> Any: ...
    def setAngularVel(self, *args, **kwargs): ...
    def setAutoDisableAngularThreshold(self, *args, **kwargs): ...
    def setAutoDisableDefaults(self, *args, **kwargs): ...
    def setAutoDisableFlag(self, *args, **kwargs): ...
    def setAutoDisableLinearThreshold(self, *args, **kwargs): ...
    def setAutoDisableSteps(self, *args, **kwargs): ...
    def setAutoDisableTime(self, *args, **kwargs): ...
    def setData(self, *args, **kwargs): ...
    def setFiniteRotationAxis(self, *args, **kwargs): ...
    def setFiniteRotationMode(self, *args, **kwargs): ...
    def setForce(self, *args, **kwargs): ...
    def setGravityMode(self, *args, **kwargs): ...
    def setLinearVel(self, *args, **kwargs): ...
    def setMass(self, *args, **kwargs): ...
    def setPosition(self, *args, **kwargs): ...
    def setQuaternion(self, *args, **kwargs): ...
    def setRotation(self, *args, **kwargs): ...
    def setTorque(self, *args, **kwargs): ...
    @overload
    def set_angular_vel(self, constOdeBodyself, constLVecBase3fvel) -> Any: ...
    @overload
    def set_angular_vel(self, constOdeBodyself, floatx, floaty, floatz) -> Any: ...
    def set_auto_disable_angular_threshold(self, constOdeBodyself, floatangular_threshold) -> Any: ...
    def set_auto_disable_defaults(self, constOdeBodyself) -> Any: ...
    def set_auto_disable_flag(self, constOdeBodyself, intdo_auto_disable) -> Any: ...
    def set_auto_disable_linear_threshold(self, constOdeBodyself, floatlinear_threshold) -> Any: ...
    def set_auto_disable_steps(self, constOdeBodyself, intsteps) -> Any: ...
    def set_auto_disable_time(self, constOdeBodyself, floattime) -> Any: ...
    def set_data(self, constOdeBodyself, objectdata) -> Any: ...
    @overload
    def set_finite_rotation_axis(self, constOdeBodyself, constLVecBase3faxis) -> Any: ...
    @overload
    def set_finite_rotation_axis(self, constOdeBodyself, floatx, floaty, floatz) -> Any: ...
    def set_finite_rotation_mode(self, constOdeBodyself, intmode) -> Any: ...
    @overload
    def set_force(self, constOdeBodyself, constLVecBase3ff) -> Any: ...
    @overload
    def set_force(self, constOdeBodyself, floatx, floaty, floatz) -> Any: ...
    def set_gravity_mode(self, constOdeBodyself, intmode) -> Any: ...
    @overload
    def set_linear_vel(self, constOdeBodyself, constLVecBase3fvel) -> Any: ...
    @overload
    def set_linear_vel(self, constOdeBodyself, floatx, floaty, floatz) -> Any: ...
    def set_mass(self, constOdeBodyself, OdeMassmass) -> Any: ...
    @overload
    def set_position(self, constOdeBodyself, constLVecBase3fpos) -> Any: ...
    @overload
    def set_position(self, constOdeBodyself, floatx, floaty, floatz) -> Any: ...
    def set_quaternion(self, constOdeBodyself, constLQuaternionfq) -> Any: ...
    def set_rotation(self, constOdeBodyself, constLMatrix3fr) -> Any: ...
    @overload
    def set_torque(self, constOdeBodyself, constLVecBase3ff) -> Any: ...
    @overload
    def set_torque(self, constOdeBodyself, floatx, floaty, floatz) -> Any: ...
    def vectorFromWorld(self, *args, **kwargs): ...
    def vectorToWorld(self, *args, **kwargs): ...
    @overload
    def vector_from_world(self, OdeBodyself, constLVecBase3fpos) -> Any: ...
    @overload
    def vector_from_world(self, OdeBodyself, floatpx, floatpy, floatpz) -> Any: ...
    @overload
    def vector_to_world(self, OdeBodyself, constLVecBase3fpos) -> Any: ...
    @overload
    def vector_to_world(self, OdeBodyself, floatpx, floatpy, floatpz) -> Any: ...
    def write(self, OdeBodyself, ostreamout, intindent) -> Any: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class OdeBoxGeom(OdeGeom):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLengths(self, *args, **kwargs): ...
    def getPointDepth(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_lengths(self, constOdeBoxGeomself) -> Any: ...
    @overload
    def get_point_depth(self, constOdeBoxGeomself, constLPoint3fp) -> Any: ...
    @overload
    def get_point_depth(self, constOdeBoxGeomself, floatx, floaty, floatz) -> Any: ...
    def setLengths(self, *args, **kwargs): ...
    @overload
    def set_lengths(self, constOdeBoxGeomself, constLVecBase3fsize) -> Any: ...
    @overload
    def set_lengths(self, constOdeBoxGeomself, floatlx, floatly, floatlz) -> Any: ...

class OdeCappedCylinderGeom(OdeGeom):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLength(self, *args, **kwargs): ...
    def getPointDepth(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_length(self, OdeCappedCylinderGeomself) -> Any: ...
    @overload
    def get_point_depth(self, OdeCappedCylinderGeomself, constLPoint3fp) -> Any: ...
    @overload
    def get_point_depth(self, OdeCappedCylinderGeomself, floatx, floaty, floatz) -> Any: ...
    def get_radius(self, OdeCappedCylinderGeomself) -> Any: ...
    def setParams(self, *args, **kwargs): ...
    def set_params(self, constOdeCappedCylinderGeomself, floatradius, floatlength) -> Any: ...

class OdeCollisionEntry(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getBody1(self, *args, **kwargs): ...
    def getBody2(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getContactGeom(self, *args, **kwargs): ...
    def getContactGeoms(self, *args, **kwargs): ...
    def getContactPoint(self, *args, **kwargs): ...
    def getContactPoints(self, *args, **kwargs): ...
    def getGeom1(self, *args, **kwargs): ...
    def getGeom2(self, *args, **kwargs): ...
    def getNumContacts(self, *args, **kwargs): ...
    def get_body1(self, OdeCollisionEntryself) -> Any: ...
    def get_body2(self, OdeCollisionEntryself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_contact_geom(self, OdeCollisionEntryself, intn) -> Any: ...
    def get_contact_geoms(self, *args, **kwargs): ...
    def get_contact_point(self, OdeCollisionEntryself, intn) -> Any: ...
    def get_contact_points(self, *args, **kwargs): ...
    def get_geom1(self, OdeCollisionEntryself) -> Any: ...
    def get_geom2(self, OdeCollisionEntryself) -> Any: ...
    def get_num_contacts(self, OdeCollisionEntryself) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, OdeCollisionEntryself) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...

class OdeContact(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFdir1(self, *args, **kwargs): ...
    def getGeom(self, *args, **kwargs): ...
    def getSurface(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_fdir1(self, OdeContactself) -> Any: ...
    def get_geom(self, constOdeContactself) -> Any: ...
    def get_surface(self, OdeContactself) -> Any: ...
    def setFdir1(self, *args, **kwargs): ...
    def setGeom(self, *args, **kwargs): ...
    def setSurface(self, *args, **kwargs): ...
    def set_fdir1(self, constOdeContactself, constLVecBase3ffdir1) -> Any: ...
    def set_geom(self, constOdeContactself, constOdeContactGeomcontact_geom) -> Any: ...
    def set_surface(self, constOdeContactself, constOdeSurfaceParameterssurface_parameters) -> Any: ...

class OdeContactGeom(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getDepth(self, *args, **kwargs): ...
    def getG1(self, *args, **kwargs): ...
    def getG2(self, *args, **kwargs): ...
    def getNormal(self, *args, **kwargs): ...
    def getPos(self, *args, **kwargs): ...
    def getSide1(self, *args, **kwargs): ...
    def getSide2(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_depth(self, OdeContactGeomself) -> Any: ...
    def get_g1(self, OdeContactGeomself) -> Any: ...
    def get_g2(self, OdeContactGeomself) -> Any: ...
    def get_normal(self, OdeContactGeomself) -> Any: ...
    def get_pos(self, OdeContactGeomself) -> Any: ...
    def get_side1(self, OdeContactGeomself) -> Any: ...
    def get_side2(self, OdeContactGeomself) -> Any: ...
    def setDepth(self, *args, **kwargs): ...
    def setG1(self, *args, **kwargs): ...
    def setG2(self, *args, **kwargs): ...
    def setNormal(self, *args, **kwargs): ...
    def setPos(self, *args, **kwargs): ...
    def set_depth(self, constOdeContactGeomself, floatdepth) -> Any: ...
    def set_g1(self, constOdeContactGeomself, constOdeGeomgeom) -> Any: ...
    def set_g2(self, constOdeContactGeomself, constOdeGeomgeom) -> Any: ...
    def set_normal(self, constOdeContactGeomself, constLVecBase3fnormal) -> Any: ...
    def set_pos(self, constOdeContactGeomself, constLVecBase3fpos) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class OdeContactJoint(OdeJoint):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class OdeCylinderGeom(OdeGeom):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getLength(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_length(self, OdeCylinderGeomself) -> Any: ...
    def get_radius(self, OdeCylinderGeomself) -> Any: ...
    def setParams(self, *args, **kwargs): ...
    def set_params(self, constOdeCylinderGeomself, floatradius, floatlength) -> Any: ...

class OdeFixedJoint(OdeJoint):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def set(self, constOdeFixedJointself) -> Any: ...

class OdeGeom(panda3d.core.TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    GCBox: ClassVar[int] = ...
    GCCappedCylinder: ClassVar[int] = ...
    GCCylinder: ClassVar[int] = ...
    GCHashSpace: ClassVar[int] = ...
    GCPlane: ClassVar[int] = ...
    GCQuadTreeSpace: ClassVar[int] = ...
    GCRay: ClassVar[int] = ...
    GCSimpleSpace: ClassVar[int] = ...
    GCSphere: ClassVar[int] = ...
    GCTriMesh: ClassVar[int] = ...
    GC_box: ClassVar[int] = ...
    GC_capped_cylinder: ClassVar[int] = ...
    GC_cylinder: ClassVar[int] = ...
    GC_hash_space: ClassVar[int] = ...
    GC_plane: ClassVar[int] = ...
    GC_quad_tree_space: ClassVar[int] = ...
    GC_ray: ClassVar[int] = ...
    GC_simple_space: ClassVar[int] = ...
    GC_sphere: ClassVar[int] = ...
    GC_tri_mesh: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearOffset(self, *args, **kwargs): ...
    def clear_offset(self, constOdeGeomself) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, OdeGeomself, constOdeGeomother) -> Any: ...
    def convert(self, OdeGeomself) -> Any: ...
    def convertToBox(self, *args, **kwargs): ...
    def convertToCappedCylinder(self, *args, **kwargs): ...
    def convertToCylinder(self, *args, **kwargs): ...
    def convertToHashSpace(self, *args, **kwargs): ...
    def convertToPlane(self, *args, **kwargs): ...
    def convertToQuadTreeSpace(self, *args, **kwargs): ...
    def convertToRay(self, *args, **kwargs): ...
    def convertToSimpleSpace(self, *args, **kwargs): ...
    def convertToSphere(self, *args, **kwargs): ...
    def convertToTriMesh(self, *args, **kwargs): ...
    def convert_to_box(self, OdeGeomself) -> Any: ...
    def convert_to_capped_cylinder(self, OdeGeomself) -> Any: ...
    def convert_to_cylinder(self, OdeGeomself) -> Any: ...
    def convert_to_hash_space(self, OdeGeomself) -> Any: ...
    def convert_to_plane(self, OdeGeomself) -> Any: ...
    def convert_to_quad_tree_space(self, OdeGeomself) -> Any: ...
    def convert_to_ray(self, OdeGeomself) -> Any: ...
    def convert_to_simple_space(self, OdeGeomself) -> Any: ...
    def convert_to_sphere(self, OdeGeomself) -> Any: ...
    def convert_to_tri_mesh(self, OdeGeomself) -> Any: ...
    def destroy(self, constOdeGeomself) -> Any: ...
    def disable(self, constOdeGeomself) -> Any: ...
    def enable(self, constOdeGeomself) -> Any: ...
    def getAABB(self, *args, **kwargs): ...
    def getAABounds(self, *args, **kwargs): ...
    def getBody(self, *args, **kwargs): ...
    def getCategoryBits(self, *args, **kwargs): ...
    def getClass(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCollideBits(self, *args, **kwargs): ...
    def getConvertedSpace(self, *args, **kwargs): ...
    def getId(self, *args, **kwargs): ...
    def getOffsetPosition(self, *args, **kwargs): ...
    def getOffsetQuaternion(self, *args, **kwargs): ...
    def getOffsetRotation(self, *args, **kwargs): ...
    def getPosition(self, *args, **kwargs): ...
    def getQuaternion(self, *args, **kwargs): ...
    def getRotation(self, *args, **kwargs): ...
    def getSpace(self, *args, **kwargs): ...
    def get_AABB(self, OdeGeomself, LVecBase3fmin, LVecBase3fmax) -> Any: ...
    def get_AA_bounds(self, OdeGeomself) -> Any: ...
    def get_body(self, OdeGeomself) -> Any: ...
    def get_category_bits(self, constOdeGeomself) -> Any: ...
    def get_class(self, OdeGeomself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_collide_bits(self, constOdeGeomself) -> Any: ...
    def get_converted_space(self, OdeGeomself) -> Any: ...
    def get_id(self, OdeGeomself) -> Any: ...
    def get_offset_position(self, OdeGeomself) -> Any: ...
    def get_offset_quaternion(self, OdeGeomself) -> Any: ...
    def get_offset_rotation(self, OdeGeomself) -> Any: ...
    def get_position(self, OdeGeomself) -> Any: ...
    def get_quaternion(self, OdeGeomself) -> Any: ...
    def get_rotation(self, OdeGeomself) -> Any: ...
    def get_space(self, OdeGeomself) -> Any: ...
    def hasBody(self, *args, **kwargs): ...
    def has_body(self, OdeGeomself) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def isEnabled(self, *args, **kwargs): ...
    def isOffset(self, *args, **kwargs): ...
    def isSpace(self, *args, **kwargs): ...
    def is_empty(self, OdeGeomself) -> Any: ...
    def is_enabled(self, constOdeGeomself) -> Any: ...
    def is_offset(self, constOdeGeomself) -> Any: ...
    def is_space(self, constOdeGeomself) -> Any: ...
    def setBody(self, *args, **kwargs): ...
    def setCategoryBits(self, *args, **kwargs): ...
    def setCollideBits(self, *args, **kwargs): ...
    def setOffsetPosition(self, *args, **kwargs): ...
    def setOffsetQuaternion(self, *args, **kwargs): ...
    def setOffsetRotation(self, *args, **kwargs): ...
    def setOffsetWorldPosition(self, *args, **kwargs): ...
    def setOffsetWorldQuaternion(self, *args, **kwargs): ...
    def setOffsetWorldRotation(self, *args, **kwargs): ...
    def setPosition(self, *args, **kwargs): ...
    def setQuaternion(self, *args, **kwargs): ...
    def setRotation(self, *args, **kwargs): ...
    def set_body(self, constOdeGeomself, OdeBodybody) -> Any: ...
    def set_category_bits(self, constOdeGeomself, constBitMaskbits) -> Any: ...
    def set_collide_bits(self, constOdeGeomself, constBitMaskbits) -> Any: ...
    @overload
    def set_offset_position(self, constOdeGeomself, constLVecBase3fpos) -> Any: ...
    @overload
    def set_offset_position(self, constOdeGeomself, floatx, floaty, floatz) -> Any: ...
    def set_offset_quaternion(self, constOdeGeomself, constLQuaternionfq) -> Any: ...
    def set_offset_rotation(self, constOdeGeomself, constLMatrix3fr) -> Any: ...
    @overload
    def set_offset_world_position(self, constOdeGeomself, constLVecBase3fpos) -> Any: ...
    @overload
    def set_offset_world_position(self, constOdeGeomself, floatx, floaty, floatz) -> Any: ...
    def set_offset_world_quaternion(self, constOdeGeomself, constLQuaternionfq) -> Any: ...
    def set_offset_world_rotation(self, constOdeGeomself, constLMatrix3fr) -> Any: ...
    @overload
    def set_position(self, constOdeGeomself, constLVecBase3fpos) -> Any: ...
    @overload
    def set_position(self, constOdeGeomself, floatx, floaty, floatz) -> Any: ...
    def set_quaternion(self, constOdeGeomself, constLQuaternionfq) -> Any: ...
    def set_rotation(self, constOdeGeomself, constLMatrix3fr) -> Any: ...
    def write(self, OdeGeomself, ostreamout, intindent) -> Any: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class OdeHashSpace(OdeSpace):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMaxLevel(self, *args, **kwargs): ...
    def getMinLevel(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_max_level(self, OdeHashSpaceself) -> Any: ...
    def get_min_level(self, OdeHashSpaceself) -> Any: ...
    def setLevels(self, *args, **kwargs): ...
    def set_levels(self, constOdeHashSpaceself, intminlevel, intmaxlevel) -> Any: ...

class OdeHinge2Joint(OdeJoint):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addTorques(self, *args, **kwargs): ...
    def add_torques(self, constOdeHinge2Jointself, floattorque1, floattorque2) -> Any: ...
    def getAnchor(self, *args, **kwargs): ...
    def getAnchor2(self, *args, **kwargs): ...
    def getAngle1(self, *args, **kwargs): ...
    def getAngle1Rate(self, *args, **kwargs): ...
    def getAngle2Rate(self, *args, **kwargs): ...
    def getAxis1(self, *args, **kwargs): ...
    def getAxis2(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getParamBounce(self, *args, **kwargs): ...
    def getParamCFM(self, *args, **kwargs): ...
    def getParamFMax(self, *args, **kwargs): ...
    def getParamFudgeFactor(self, *args, **kwargs): ...
    def getParamHiStop(self, *args, **kwargs): ...
    def getParamLoStop(self, *args, **kwargs): ...
    def getParamStopCFM(self, *args, **kwargs): ...
    def getParamStopERP(self, *args, **kwargs): ...
    def getParamSuspensionCFM(self, *args, **kwargs): ...
    def getParamSuspensionERP(self, *args, **kwargs): ...
    def getParamVel(self, *args, **kwargs): ...
    def get_anchor(self, OdeHinge2Jointself) -> Any: ...
    def get_anchor2(self, OdeHinge2Jointself) -> Any: ...
    def get_angle1(self, OdeHinge2Jointself) -> Any: ...
    def get_angle1_rate(self, OdeHinge2Jointself) -> Any: ...
    def get_angle2_rate(self, OdeHinge2Jointself) -> Any: ...
    def get_axis1(self, OdeHinge2Jointself) -> Any: ...
    def get_axis2(self, OdeHinge2Jointself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_param_CFM(self, OdeHinge2Jointself, intaxis) -> Any: ...
    def get_param_bounce(self, OdeHinge2Jointself, intaxis) -> Any: ...
    def get_param_f_max(self, OdeHinge2Jointself, intaxis) -> Any: ...
    def get_param_fudge_factor(self, OdeHinge2Jointself, intaxis) -> Any: ...
    def get_param_hi_stop(self, OdeHinge2Jointself, intaxis) -> Any: ...
    def get_param_lo_stop(self, OdeHinge2Jointself, intaxis) -> Any: ...
    def get_param_stop_CFM(self, OdeHinge2Jointself, intaxis) -> Any: ...
    def get_param_stop_ERP(self, OdeHinge2Jointself, intaxis) -> Any: ...
    def get_param_suspension_CFM(self, OdeHinge2Jointself, intaxis) -> Any: ...
    def get_param_suspension_ERP(self, OdeHinge2Jointself, intaxis) -> Any: ...
    def get_param_vel(self, OdeHinge2Jointself, intaxis) -> Any: ...
    def setAnchor(self, *args, **kwargs): ...
    def setAxis1(self, *args, **kwargs): ...
    def setAxis2(self, *args, **kwargs): ...
    def setParamBounce(self, *args, **kwargs): ...
    def setParamCFM(self, *args, **kwargs): ...
    def setParamFMax(self, *args, **kwargs): ...
    def setParamFudgeFactor(self, *args, **kwargs): ...
    def setParamHiStop(self, *args, **kwargs): ...
    def setParamLoStop(self, *args, **kwargs): ...
    def setParamStopCFM(self, *args, **kwargs): ...
    def setParamStopERP(self, *args, **kwargs): ...
    def setParamSuspensionCFM(self, *args, **kwargs): ...
    def setParamSuspensionERP(self, *args, **kwargs): ...
    def setParamVel(self, *args, **kwargs): ...
    @overload
    def set_anchor(self, constOdeHinge2Jointself, constLVecBase3fanchor) -> Any: ...
    @overload
    def set_anchor(self, constOdeHinge2Jointself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_axis1(self, constOdeHinge2Jointself, constLVecBase3faxis) -> Any: ...
    @overload
    def set_axis1(self, constOdeHinge2Jointself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_axis2(self, constOdeHinge2Jointself, constLVecBase3faxis) -> Any: ...
    @overload
    def set_axis2(self, constOdeHinge2Jointself, floatx, floaty, floatz) -> Any: ...
    def set_param_CFM(self, constOdeHinge2Jointself, intaxis, floatval) -> Any: ...
    def set_param_bounce(self, constOdeHinge2Jointself, intaxis, floatval) -> Any: ...
    def set_param_f_max(self, constOdeHinge2Jointself, intaxis, floatval) -> Any: ...
    def set_param_fudge_factor(self, constOdeHinge2Jointself, intaxis, floatval) -> Any: ...
    def set_param_hi_stop(self, constOdeHinge2Jointself, intaxis, floatval) -> Any: ...
    def set_param_lo_stop(self, constOdeHinge2Jointself, intaxis, floatval) -> Any: ...
    def set_param_stop_CFM(self, constOdeHinge2Jointself, intaxis, floatval) -> Any: ...
    def set_param_stop_ERP(self, constOdeHinge2Jointself, intaxis, floatval) -> Any: ...
    def set_param_suspension_CFM(self, constOdeHinge2Jointself, intaxis, floatval) -> Any: ...
    def set_param_suspension_ERP(self, constOdeHinge2Jointself, intaxis, floatval) -> Any: ...
    def set_param_vel(self, constOdeHinge2Jointself, intaxis, floatval) -> Any: ...

class OdeHingeJoint(OdeJoint):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addTorque(self, *args, **kwargs): ...
    def add_torque(self, constOdeHingeJointself, floattorque) -> Any: ...
    def getAnchor(self, *args, **kwargs): ...
    def getAnchor2(self, *args, **kwargs): ...
    def getAngle(self, *args, **kwargs): ...
    def getAngleRate(self, *args, **kwargs): ...
    def getAxis(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getParamBounce(self, *args, **kwargs): ...
    def getParamCFM(self, *args, **kwargs): ...
    def getParamFMax(self, *args, **kwargs): ...
    def getParamFudgeFactor(self, *args, **kwargs): ...
    def getParamHiStop(self, *args, **kwargs): ...
    def getParamLoStop(self, *args, **kwargs): ...
    def getParamStopCFM(self, *args, **kwargs): ...
    def getParamStopERP(self, *args, **kwargs): ...
    def getParamVel(self, *args, **kwargs): ...
    def get_anchor(self, OdeHingeJointself) -> Any: ...
    def get_anchor2(self, OdeHingeJointself) -> Any: ...
    def get_angle(self, OdeHingeJointself) -> Any: ...
    def get_angle_rate(self, OdeHingeJointself) -> Any: ...
    def get_axis(self, OdeHingeJointself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_param_CFM(self, OdeHingeJointself) -> Any: ...
    def get_param_bounce(self, OdeHingeJointself) -> Any: ...
    def get_param_f_max(self, OdeHingeJointself) -> Any: ...
    def get_param_fudge_factor(self, OdeHingeJointself) -> Any: ...
    def get_param_hi_stop(self, OdeHingeJointself) -> Any: ...
    def get_param_lo_stop(self, OdeHingeJointself) -> Any: ...
    def get_param_stop_CFM(self, OdeHingeJointself) -> Any: ...
    def get_param_stop_ERP(self, OdeHingeJointself) -> Any: ...
    def get_param_vel(self, OdeHingeJointself) -> Any: ...
    def setAnchor(self, *args, **kwargs): ...
    def setAnchorDelta(self, *args, **kwargs): ...
    def setAxis(self, *args, **kwargs): ...
    def setParamBounce(self, *args, **kwargs): ...
    def setParamCFM(self, *args, **kwargs): ...
    def setParamFMax(self, *args, **kwargs): ...
    def setParamFudgeFactor(self, *args, **kwargs): ...
    def setParamHiStop(self, *args, **kwargs): ...
    def setParamLoStop(self, *args, **kwargs): ...
    def setParamStopCFM(self, *args, **kwargs): ...
    def setParamStopERP(self, *args, **kwargs): ...
    def setParamVel(self, *args, **kwargs): ...
    @overload
    def set_anchor(self, constOdeHingeJointself, constLVecBase3fanchor) -> Any: ...
    @overload
    def set_anchor(self, constOdeHingeJointself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_anchor_delta(self, constOdeHingeJointself, constLVecBase3fanchor, constLVecBase3fvec) -> Any: ...
    @overload
    def set_anchor_delta(self, constOdeHingeJointself, floatx, floaty, floatz, floatax, floatay, floataz) -> Any: ...
    @overload
    def set_axis(self, constOdeHingeJointself, constLVecBase3faxis) -> Any: ...
    @overload
    def set_axis(self, constOdeHingeJointself, floatx, floaty, floatz) -> Any: ...
    def set_param_CFM(self, constOdeHingeJointself, floatval) -> Any: ...
    def set_param_bounce(self, constOdeHingeJointself, floatval) -> Any: ...
    def set_param_f_max(self, constOdeHingeJointself, floatval) -> Any: ...
    def set_param_fudge_factor(self, constOdeHingeJointself, floatval) -> Any: ...
    def set_param_hi_stop(self, constOdeHingeJointself, floatval) -> Any: ...
    def set_param_lo_stop(self, constOdeHingeJointself, floatval) -> Any: ...
    def set_param_stop_CFM(self, constOdeHingeJointself, floatval) -> Any: ...
    def set_param_stop_ERP(self, constOdeHingeJointself, floatval) -> Any: ...
    def set_param_vel(self, constOdeHingeJointself, floatval) -> Any: ...

class OdeJoint(panda3d.core.TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    JTAMotor: ClassVar[int] = ...
    JTBall: ClassVar[int] = ...
    JTContact: ClassVar[int] = ...
    JTFixed: ClassVar[int] = ...
    JTHinge: ClassVar[int] = ...
    JTHinge2: ClassVar[int] = ...
    JTLMotor: ClassVar[int] = ...
    JTNone: ClassVar[int] = ...
    JTNull: ClassVar[int] = ...
    JTPlane2d: ClassVar[int] = ...
    JTSlider: ClassVar[int] = ...
    JTUniversal: ClassVar[int] = ...
    JT_a_motor: ClassVar[int] = ...
    JT_ball: ClassVar[int] = ...
    JT_contact: ClassVar[int] = ...
    JT_fixed: ClassVar[int] = ...
    JT_hinge: ClassVar[int] = ...
    JT_hinge2: ClassVar[int] = ...
    JT_l_motor: ClassVar[int] = ...
    JT_none: ClassVar[int] = ...
    JT_null: ClassVar[int] = ...
    JT_plane2d: ClassVar[int] = ...
    JT_slider: ClassVar[int] = ...
    JT_universal: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def attach(self, constOdeJointself, objectbody1, objectbody2) -> Any: ...
    def attachBodies(self, *args, **kwargs): ...
    def attachBody(self, *args, **kwargs): ...
    def attach_bodies(self, constOdeJointself, constOdeBodybody1, constOdeBodybody2) -> Any: ...
    def attach_body(self, constOdeJointself, constOdeBodybody, intindex) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, OdeJointself, constOdeJointother) -> Any: ...
    def convert(self, OdeJointself) -> Any: ...
    def convertToAMotor(self, *args, **kwargs): ...
    def convertToBall(self, *args, **kwargs): ...
    def convertToContact(self, *args, **kwargs): ...
    def convertToFixed(self, *args, **kwargs): ...
    def convertToHinge(self, *args, **kwargs): ...
    def convertToHinge2(self, *args, **kwargs): ...
    def convertToLMotor(self, *args, **kwargs): ...
    def convertToNull(self, *args, **kwargs): ...
    def convertToPlane2d(self, *args, **kwargs): ...
    def convertToSlider(self, *args, **kwargs): ...
    def convertToUniversal(self, *args, **kwargs): ...
    def convert_to_a_motor(self, OdeJointself) -> Any: ...
    def convert_to_ball(self, OdeJointself) -> Any: ...
    def convert_to_contact(self, OdeJointself) -> Any: ...
    def convert_to_fixed(self, OdeJointself) -> Any: ...
    def convert_to_hinge(self, OdeJointself) -> Any: ...
    def convert_to_hinge2(self, OdeJointself) -> Any: ...
    def convert_to_l_motor(self, OdeJointself) -> Any: ...
    def convert_to_null(self, OdeJointself) -> Any: ...
    def convert_to_plane2d(self, OdeJointself) -> Any: ...
    def convert_to_slider(self, OdeJointself) -> Any: ...
    def convert_to_universal(self, OdeJointself) -> Any: ...
    def destroy(self, constOdeJointself) -> Any: ...
    def detach(self, constOdeJointself) -> Any: ...
    def getBody(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getFeedback(self, *args, **kwargs): ...
    def getId(self, *args, **kwargs): ...
    def getJointType(self, *args, **kwargs): ...
    def get_body(self, OdeJointself, intindex) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_feedback(self, constOdeJointself) -> Any: ...
    def get_id(self, OdeJointself) -> Any: ...
    def get_joint_type(self, OdeJointself) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, OdeJointself) -> Any: ...
    def setFeedback(self, *args, **kwargs): ...
    @overload
    def set_feedback(self, constOdeJointself) -> Any: ...
    @overload
    def set_feedback(self, constOdeJointself, OdeJointFeedbackparam0) -> Any: ...
    @overload
    def set_feedback(self, constOdeJointself, boolflag) -> Any: ...
    def write(self, OdeJointself, ostreamout, intindent) -> Any: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class OdeJointCollection(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addJoint(self, *args, **kwargs): ...
    def addJointsFrom(self, *args, **kwargs): ...
    def add_joint(self, constOdeJointCollectionself, constOdeJointjoint) -> Any: ...
    def add_joints_from(self, constOdeJointCollectionself, constOdeJointCollectionother) -> Any: ...
    def assign(self, constOdeJointCollectionself, constOdeJointCollectioncopy) -> Any: ...
    def clear(self, constOdeJointCollectionself) -> Any: ...
    def getJoint(self, *args, **kwargs): ...
    def getJoints(self, *args, **kwargs): ...
    def getNumJoints(self, *args, **kwargs): ...
    def get_joint(self, OdeJointCollectionself, intindex) -> Any: ...
    def get_joints(self, *args, **kwargs): ...
    def get_num_joints(self, OdeJointCollectionself) -> Any: ...
    def hasJoint(self, *args, **kwargs): ...
    def has_joint(self, OdeJointCollectionself, constOdeJointjoint) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, OdeJointCollectionself) -> Any: ...
    def removeDuplicateJoints(self, *args, **kwargs): ...
    def removeJoint(self, *args, **kwargs): ...
    def removeJointsFrom(self, *args, **kwargs): ...
    def remove_duplicate_joints(self, constOdeJointCollectionself) -> Any: ...
    def remove_joint(self, constOdeJointCollectionself, constOdeJointjoint) -> Any: ...
    def remove_joints_from(self, constOdeJointCollectionself, constOdeJointCollectionother) -> Any: ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __getitem__(self, index): ...
    def __iadd__(self, other): ...
    def __len__(self) -> int: ...
    def __radd__(self, other): ...

class OdeJointFeedback(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getForce1(self, *args, **kwargs): ...
    def getForce2(self, *args, **kwargs): ...
    def getTorque1(self, *args, **kwargs): ...
    def getTorque2(self, *args, **kwargs): ...
    def get_force1(self, OdeJointFeedbackself) -> Any: ...
    def get_force2(self, OdeJointFeedbackself) -> Any: ...
    def get_torque1(self, OdeJointFeedbackself) -> Any: ...
    def get_torque2(self, OdeJointFeedbackself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class OdeJointGroup(panda3d.core.TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, OdeJointGroupself, constOdeJointGroupother) -> Any: ...
    def destroy(self, constOdeJointGroupself) -> Any: ...
    def empty(self, OdeJointGroupself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getId(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_id(self, OdeJointGroupself) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class OdeLMotorJoint(OdeJoint):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getAxes(self, *args, **kwargs): ...
    def getAxis(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getNumAxes(self, *args, **kwargs): ...
    def getParam(self, *args, **kwargs): ...
    def get_axes(self, *args, **kwargs): ...
    def get_axis(self, OdeLMotorJointself, intanum) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_num_axes(self, OdeLMotorJointself) -> Any: ...
    def get_param(self, OdeLMotorJointself, intparameter) -> Any: ...
    def setAxis(self, *args, **kwargs): ...
    def setNumAxes(self, *args, **kwargs): ...
    def setParam(self, *args, **kwargs): ...
    @overload
    def set_axis(self, constOdeLMotorJointself, intanum, intrel, constLVecBase3faxis) -> Any: ...
    @overload
    def set_axis(self, constOdeLMotorJointself, intanum, intrel, floatx, floaty, floatz) -> Any: ...
    def set_num_axes(self, constOdeLMotorJointself, intnum) -> Any: ...
    def set_param(self, constOdeLMotorJointself, intparameter, floatvalue) -> Any: ...

class OdeMass(panda3d.core.TypedReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, constOdeMassself, OdeMassother) -> Any: ...
    def adjust(self, constOdeMassself, floatnewmass) -> Any: ...
    def check(self, constOdeMassself) -> Any: ...
    def getCenter(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getInertialTensor(self, *args, **kwargs): ...
    def getMagnitude(self, *args, **kwargs): ...
    def get_center(self, OdeMassself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_inertial_tensor(self, OdeMassself) -> Any: ...
    def get_magnitude(self, OdeMassself) -> Any: ...
    def rotate(self, constOdeMassself, constLMatrix3fr) -> Any: ...
    def setBox(self, *args, **kwargs): ...
    def setBoxTotal(self, *args, **kwargs): ...
    def setCapsule(self, *args, **kwargs): ...
    def setCapsuleTotal(self, *args, **kwargs): ...
    def setCylinder(self, *args, **kwargs): ...
    def setCylinderTotal(self, *args, **kwargs): ...
    def setParameters(self, *args, **kwargs): ...
    def setSphere(self, *args, **kwargs): ...
    def setSphereTotal(self, *args, **kwargs): ...
    def setZero(self, *args, **kwargs): ...
    @overload
    def set_box(self, constOdeMassself, floatdensity, constLVecBase3fsize) -> Any: ...
    @overload
    def set_box(self, constOdeMassself, floatdensity, floatlx, floatly, floatlz) -> Any: ...
    @overload
    def set_box_total(self, constOdeMassself, floattotal_mass, constLVecBase3fsize) -> Any: ...
    @overload
    def set_box_total(self, constOdeMassself, floattotal_mass, floatlx, floatly, floatlz) -> Any: ...
    def set_capsule(self, constOdeMassself, floatdensity, intdirection, floatradius, floatlength) -> Any: ...
    def set_capsule_total(self, constOdeMassself, floattotal_mass, intdirection, floatradius, floatlength) -> Any: ...
    def set_cylinder(self, constOdeMassself, floatdensity, intdirection, floatradius, floatlength) -> Any: ...
    def set_cylinder_total(self, constOdeMassself, floattotal_mass, intdirection, floatradius, floatlength) -> Any: ...
    @overload
    def set_parameters(self, constOdeMassself, floatthemass, constLVecBase3fcenter, constLMatrix3fr) -> Any: ...
    @overload
    def set_parameters(self, constOdeMassself, floatthemass, floatcgx, floatcgy, floatcgz, floatI11, floatI22, floatI33, floatI12, floatI13, floatI23) -> Any: ...
    def set_sphere(self, constOdeMassself, floatdensity, floatradius) -> Any: ...
    def set_sphere_total(self, constOdeMassself, floattotal_mass, floatradius) -> Any: ...
    def set_zero(self, constOdeMassself) -> Any: ...
    @overload
    def translate(self, constOdeMassself, constLVecBase3fpos) -> Any: ...
    @overload
    def translate(self, constOdeMassself, floatx, floaty, floatz) -> Any: ...
    def write(self, OdeMassself, ostreamout, intindent) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class OdeNullJoint(OdeJoint):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class OdePlane2dJoint(OdeJoint):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def setAngleParam(self, *args, **kwargs): ...
    def setXParam(self, *args, **kwargs): ...
    def setYParam(self, *args, **kwargs): ...
    def set_angle_param(self, constOdePlane2dJointself, intparameter, floatvalue) -> Any: ...
    def set_x_param(self, constOdePlane2dJointself, intparameter, floatvalue) -> Any: ...
    def set_y_param(self, constOdePlane2dJointself, intparameter, floatvalue) -> Any: ...

class OdePlaneGeom(OdeGeom):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getParams(self, *args, **kwargs): ...
    def getPointDepth(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_params(self, OdePlaneGeomself) -> Any: ...
    @overload
    def get_point_depth(self, OdePlaneGeomself, constLPoint3fp) -> Any: ...
    @overload
    def get_point_depth(self, OdePlaneGeomself, floatx, floaty, floatz) -> Any: ...
    def setParams(self, *args, **kwargs): ...
    @overload
    def set_params(self, constOdePlaneGeomself, constLVecBase4fparams) -> Any: ...
    @overload
    def set_params(self, constOdePlaneGeomself, floata, floatb, floatc, floatd) -> Any: ...

class OdeQuadTreeSpace(OdeSpace):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class OdeRayGeom(OdeGeom):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, OdeRayGeomself, LVecBase3fstart, LVecBase3fdir) -> Any: ...
    def getBackfaceCull(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getClosestHit(self, *args, **kwargs): ...
    def getDirection(self, *args, **kwargs): ...
    def getFirstContact(self, *args, **kwargs): ...
    def getLength(self, *args, **kwargs): ...
    def getStart(self, *args, **kwargs): ...
    def get_backface_cull(self, OdeRayGeomself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_closest_hit(self, constOdeRayGeomself) -> Any: ...
    def get_direction(self, OdeRayGeomself) -> Any: ...
    def get_first_contact(self, OdeRayGeomself) -> Any: ...
    def get_length(self, constOdeRayGeomself) -> Any: ...
    def get_start(self, OdeRayGeomself) -> Any: ...
    @overload
    def set(self, constOdeRayGeomself, constLVecBase3fstart, constLVecBase3fdir) -> Any: ...
    @overload
    def set(self, constOdeRayGeomself, floatpx, floatpy, floatpz, floatdx, floatdy, floatdz) -> Any: ...
    def setClosestHit(self, *args, **kwargs): ...
    def setLength(self, *args, **kwargs): ...
    def setParams(self, *args, **kwargs): ...
    def set_closest_hit(self, constOdeRayGeomself, intclosest_hit) -> Any: ...
    def set_length(self, constOdeRayGeomself, floatlength) -> Any: ...
    def set_params(self, constOdeRayGeomself, intfirst_contact, intbackface_cull) -> Any: ...

class OdeSimpleSpace(OdeSpace):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...

class OdeSliderJoint(OdeJoint):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addForce(self, *args, **kwargs): ...
    def add_force(self, constOdeSliderJointself, floatforce) -> Any: ...
    def getAxis(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getParamBounce(self, *args, **kwargs): ...
    def getParamCFM(self, *args, **kwargs): ...
    def getParamFMax(self, *args, **kwargs): ...
    def getParamFudgeFactor(self, *args, **kwargs): ...
    def getParamHiStop(self, *args, **kwargs): ...
    def getParamLoStop(self, *args, **kwargs): ...
    def getParamStopCFM(self, *args, **kwargs): ...
    def getParamStopERP(self, *args, **kwargs): ...
    def getParamVel(self, *args, **kwargs): ...
    def getPosition(self, *args, **kwargs): ...
    def getPositionRate(self, *args, **kwargs): ...
    def get_axis(self, OdeSliderJointself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_param_CFM(self, OdeSliderJointself) -> Any: ...
    def get_param_bounce(self, OdeSliderJointself) -> Any: ...
    def get_param_f_max(self, OdeSliderJointself) -> Any: ...
    def get_param_fudge_factor(self, OdeSliderJointself) -> Any: ...
    def get_param_hi_stop(self, OdeSliderJointself) -> Any: ...
    def get_param_lo_stop(self, OdeSliderJointself) -> Any: ...
    def get_param_stop_CFM(self, OdeSliderJointself) -> Any: ...
    def get_param_stop_ERP(self, OdeSliderJointself) -> Any: ...
    def get_param_vel(self, OdeSliderJointself) -> Any: ...
    def get_position(self, OdeSliderJointself) -> Any: ...
    def get_position_rate(self, OdeSliderJointself) -> Any: ...
    def setAxis(self, *args, **kwargs): ...
    def setAxisDelta(self, *args, **kwargs): ...
    def setParamBounce(self, *args, **kwargs): ...
    def setParamCFM(self, *args, **kwargs): ...
    def setParamFMax(self, *args, **kwargs): ...
    def setParamFudgeFactor(self, *args, **kwargs): ...
    def setParamHiStop(self, *args, **kwargs): ...
    def setParamLoStop(self, *args, **kwargs): ...
    def setParamStopCFM(self, *args, **kwargs): ...
    def setParamStopERP(self, *args, **kwargs): ...
    def setParamVel(self, *args, **kwargs): ...
    @overload
    def set_axis(self, constOdeSliderJointself, constLVecBase3faxis) -> Any: ...
    @overload
    def set_axis(self, constOdeSliderJointself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_axis_delta(self, constOdeSliderJointself, constLVecBase3faxis, constLVecBase3fvec) -> Any: ...
    @overload
    def set_axis_delta(self, constOdeSliderJointself, floatx, floaty, floatz, floatax, floatay, floataz) -> Any: ...
    def set_param_CFM(self, constOdeSliderJointself, floatval) -> Any: ...
    def set_param_bounce(self, constOdeSliderJointself, floatval) -> Any: ...
    def set_param_f_max(self, constOdeSliderJointself, floatval) -> Any: ...
    def set_param_fudge_factor(self, constOdeSliderJointself, floatval) -> Any: ...
    def set_param_hi_stop(self, constOdeSliderJointself, floatval) -> Any: ...
    def set_param_lo_stop(self, constOdeSliderJointself, floatval) -> Any: ...
    def set_param_stop_CFM(self, constOdeSliderJointself, floatval) -> Any: ...
    def set_param_stop_ERP(self, constOdeSliderJointself, floatval) -> Any: ...
    def set_param_vel(self, constOdeSliderJointself, floatval) -> Any: ...

class OdeSpace(panda3d.core.TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def add(self, constOdeSpaceself, OdeGeomgeom) -> Any: ...
    @overload
    def add(self, constOdeSpaceself, OdeSpacespace) -> Any: ...
    def autoCollide(self, *args, **kwargs): ...
    def auto_collide(self, constOdeSpaceself) -> Any: ...
    def clean(self, constOdeSpaceself) -> Any: ...
    def collide(self, constOdeSpaceself, objectarg, objectnear_callback) -> Any: ...
    def convert(self, OdeSpaceself) -> Any: ...
    def convertToHashSpace(self, *args, **kwargs): ...
    def convertToQuadTreeSpace(self, *args, **kwargs): ...
    def convertToSimpleSpace(self, *args, **kwargs): ...
    def convert_to_hash_space(self, OdeSpaceself) -> Any: ...
    def convert_to_quad_tree_space(self, OdeSpaceself) -> Any: ...
    def convert_to_simple_space(self, OdeSpaceself) -> Any: ...
    def destroy(self, constOdeSpaceself) -> Any: ...
    def disable(self, constOdeSpaceself) -> Any: ...
    def enable(self, constOdeSpaceself) -> Any: ...
    def getAABB(self, *args, **kwargs): ...
    def getAABounds(self, *args, **kwargs): ...
    def getCategoryBits(self, *args, **kwargs): ...
    def getClass(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getCleanup(self, *args, **kwargs): ...
    def getCollideBits(self, *args, **kwargs): ...
    def getCollideId(self, *args, **kwargs): ...
    def getCollisionEvent(self, *args, **kwargs): ...
    def getConvertedGeom(self, *args, **kwargs): ...
    def getConvertedSpace(self, *args, **kwargs): ...
    def getGeom(self, *args, **kwargs): ...
    def getNumGeoms(self, *args, **kwargs): ...
    def getSpace(self, *args, **kwargs): ...
    def getSurfaceType(self, *args, **kwargs): ...
    def get_AABB(self, OdeSpaceself, LVecBase3fmin, LVecBase3fmax) -> Any: ...
    def get_AA_bounds(self, OdeSpaceself) -> Any: ...
    def get_category_bits(self, constOdeSpaceself) -> Any: ...
    def get_class(self, OdeSpaceself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_cleanup(self, OdeSpaceself) -> Any: ...
    def get_collide_bits(self, constOdeSpaceself) -> Any: ...
    @overload
    def get_collide_id(self, constOdeSpaceself, OdeGeomgeom) -> Any: ...
    @overload
    def get_collide_id(self, constOdeSpaceself, dxGeomo1) -> Any: ...
    def get_collision_event(self, constOdeSpaceself) -> Any: ...
    def get_converted_geom(self, OdeSpaceself, inti) -> Any: ...
    def get_converted_space(self, OdeSpaceself) -> Any: ...
    def get_geom(self, constOdeSpaceself, inti) -> Any: ...
    def get_num_geoms(self, OdeSpaceself) -> Any: ...
    def get_space(self, OdeSpaceself) -> Any: ...
    @overload
    def get_surface_type(self, constOdeSpaceself, OdeGeomgeom) -> Any: ...
    @overload
    def get_surface_type(self, constOdeSpaceself, dxGeomo1) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def isEnabled(self, *args, **kwargs): ...
    def isSpace(self, *args, **kwargs): ...
    def is_empty(self, OdeSpaceself) -> Any: ...
    def is_enabled(self, constOdeSpaceself) -> Any: ...
    def is_space(self, constOdeSpaceself) -> Any: ...
    @overload
    def query(self, OdeSpaceself, constOdeSpacespace) -> Any: ...
    @overload
    def query(self, OdeSpaceself, constOdeGeomgeom) -> Any: ...
    @overload
    def remove(self, constOdeSpaceself, OdeGeomgeom) -> Any: ...
    @overload
    def remove(self, constOdeSpaceself, OdeSpacespace) -> Any: ...
    def setAutoCollideJointGroup(self, *args, **kwargs): ...
    def setAutoCollideWorld(self, *args, **kwargs): ...
    def setCategoryBits(self, *args, **kwargs): ...
    def setCleanup(self, *args, **kwargs): ...
    def setCollideBits(self, *args, **kwargs): ...
    def setCollideId(self, *args, **kwargs): ...
    def setCollisionEvent(self, *args, **kwargs): ...
    def setSurfaceType(self, *args, **kwargs): ...
    def set_auto_collide_joint_group(self, constOdeSpaceself, OdeJointGroupparam0) -> Any: ...
    def set_auto_collide_world(self, constOdeSpaceself, OdeWorldparam0) -> Any: ...
    def set_category_bits(self, constOdeSpaceself, constBitMaskbits) -> Any: ...
    def set_cleanup(self, constOdeSpaceself, intmode) -> Any: ...
    def set_collide_bits(self, constOdeSpaceself, constBitMaskbits) -> Any: ...
    @overload
    def set_collide_id(self, constOdeSpaceself, OdeGeomgeom, intcollide_id) -> Any: ...
    @overload
    def set_collide_id(self, constOdeSpaceself, intcollide_id, dxGeomid) -> Any: ...
    def set_collision_event(self, constOdeSpaceself, strevent_name) -> Any: ...
    @overload
    def set_surface_type(self, constOdeSpaceself, OdeGeomgeom, intsurface_type) -> Any: ...
    @overload
    def set_surface_type(self, constOdeSpaceself, intsurface_type, dxGeomid) -> Any: ...
    def write(self, OdeSpaceself, ostreamout, intindent) -> Any: ...
    def __bool__(self) -> bool: ...

class OdeSphereGeom(OdeGeom):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getPointDepth(self, *args, **kwargs): ...
    def getRadius(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    @overload
    def get_point_depth(self, OdeSphereGeomself, constLPoint3fp) -> Any: ...
    @overload
    def get_point_depth(self, OdeSphereGeomself, floatx, floaty, floatz) -> Any: ...
    def get_radius(self, OdeSphereGeomself) -> Any: ...
    def setRadius(self, *args, **kwargs): ...
    def set_radius(self, constOdeSphereGeomself, floatradius) -> Any: ...

class OdeSurfaceParameters(panda3d.core.TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    MFContactApprox0: ClassVar[int] = ...
    MFContactApprox1: ClassVar[int] = ...
    MFContactApprox11: ClassVar[int] = ...
    MFContactApprox12: ClassVar[int] = ...
    MFContactBounce: ClassVar[int] = ...
    MFContactFDir1: ClassVar[int] = ...
    MFContactMotion1: ClassVar[int] = ...
    MFContactMotion2: ClassVar[int] = ...
    MFContactMu2: ClassVar[int] = ...
    MFContactSlip1: ClassVar[int] = ...
    MFContactSlip2: ClassVar[int] = ...
    MFContactSoftCFM: ClassVar[int] = ...
    MFContactSoftERP: ClassVar[int] = ...
    MF_contactApprox0: ClassVar[int] = ...
    MF_contactApprox1: ClassVar[int] = ...
    MF_contactApprox1_1: ClassVar[int] = ...
    MF_contactApprox1_2: ClassVar[int] = ...
    MF_contactBounce: ClassVar[int] = ...
    MF_contactFDir1: ClassVar[int] = ...
    MF_contactMotion1: ClassVar[int] = ...
    MF_contactMotion2: ClassVar[int] = ...
    MF_contactSlip1: ClassVar[int] = ...
    MF_contactSlip2: ClassVar[int] = ...
    MF_contactSoftCFM: ClassVar[int] = ...
    MF_contactSoftERP: ClassVar[int] = ...
    MF_contact_mu2: ClassVar[int] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getBounce(self, *args, **kwargs): ...
    def getBounceVel(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getMode(self, *args, **kwargs): ...
    def getMotion1(self, *args, **kwargs): ...
    def getMotion2(self, *args, **kwargs): ...
    def getMu(self, *args, **kwargs): ...
    def getMu2(self, *args, **kwargs): ...
    def getSlip1(self, *args, **kwargs): ...
    def getSlip2(self, *args, **kwargs): ...
    def getSoftCfm(self, *args, **kwargs): ...
    def getSoftErp(self, *args, **kwargs): ...
    def get_bounce(self, OdeSurfaceParametersself) -> Any: ...
    def get_bounce_vel(self, OdeSurfaceParametersself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_mode(self, OdeSurfaceParametersself) -> Any: ...
    def get_motion1(self, OdeSurfaceParametersself) -> Any: ...
    def get_motion2(self, OdeSurfaceParametersself) -> Any: ...
    def get_mu(self, OdeSurfaceParametersself) -> Any: ...
    def get_mu2(self, OdeSurfaceParametersself) -> Any: ...
    def get_slip1(self, OdeSurfaceParametersself) -> Any: ...
    def get_slip2(self, OdeSurfaceParametersself) -> Any: ...
    def get_soft_cfm(self, OdeSurfaceParametersself) -> Any: ...
    def get_soft_erp(self, OdeSurfaceParametersself) -> Any: ...
    def setBounce(self, *args, **kwargs): ...
    def setBounceVel(self, *args, **kwargs): ...
    def setMode(self, *args, **kwargs): ...
    def setMotion1(self, *args, **kwargs): ...
    def setMotion2(self, *args, **kwargs): ...
    def setMu(self, *args, **kwargs): ...
    def setMu2(self, *args, **kwargs): ...
    def setSlip1(self, *args, **kwargs): ...
    def setSlip2(self, *args, **kwargs): ...
    def setSoftCfm(self, *args, **kwargs): ...
    def setSoftErp(self, *args, **kwargs): ...
    def set_bounce(self, constOdeSurfaceParametersself, floatbounce) -> Any: ...
    def set_bounce_vel(self, constOdeSurfaceParametersself, floatbounce_vel) -> Any: ...
    def set_mode(self, constOdeSurfaceParametersself, intmode) -> Any: ...
    def set_motion1(self, constOdeSurfaceParametersself, floatmotion) -> Any: ...
    def set_motion2(self, constOdeSurfaceParametersself, floatmotion) -> Any: ...
    def set_mu(self, constOdeSurfaceParametersself, floatmu) -> Any: ...
    def set_mu2(self, constOdeSurfaceParametersself, floatmu2) -> Any: ...
    def set_slip1(self, constOdeSurfaceParametersself, floatslip) -> Any: ...
    def set_slip2(self, constOdeSurfaceParametersself, floatslip) -> Any: ...
    def set_soft_cfm(self, constOdeSurfaceParametersself, floatsoft_cfm) -> Any: ...
    def set_soft_erp(self, constOdeSurfaceParametersself, floatsoft_erp) -> Any: ...

class OdeTriMeshData(panda3d.core.TypedReferenceCount):
    DTFaceNormals: ClassVar[int] = ...
    DTLastTransformation: ClassVar[int] = ...
    DT_face_normals: ClassVar[int] = ...
    DT_last_transformation: ClassVar[int] = ...
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def destroy(self, constOdeTriMeshDataself) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def write(self, OdeTriMeshDataself, ostreamout, intindent) -> Any: ...
    def writeFaces(self, *args, **kwargs): ...
    def write_faces(self, OdeTriMeshDataself, ostreamout) -> Any: ...

class OdeTriMeshGeom(OdeGeom):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clearTCCache(self, *args, **kwargs): ...
    def clear_TC_cache(self, constOdeTriMeshGeomself, constOdeGeomgeom) -> Any: ...
    def destroy(self, constOdeTriMeshGeomself) -> Any: ...
    def enableTC(self, *args, **kwargs): ...
    def enable_TC(self, constOdeTriMeshGeomself, intgeom_class, intenable) -> Any: ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getData(self, *args, **kwargs): ...
    def getNumTriangles(self, *args, **kwargs): ...
    def getPoint(self, *args, **kwargs): ...
    def getTriMeshData(self, *args, **kwargs): ...
    def getTriangle(self, *args, **kwargs): ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_data(self, OdeTriMeshGeomself) -> Any: ...
    def get_num_triangles(self, OdeTriMeshGeomself) -> Any: ...
    def get_point(self, OdeTriMeshGeomself, intface_index, floatu, floatv) -> Any: ...
    def get_tri_mesh_data(self, OdeTriMeshGeomself) -> Any: ...
    def get_triangle(self, OdeTriMeshGeomself, intface_index, LPoint3fv0, LPoint3fv1, LPoint3fv2) -> Any: ...
    def isTCEnabled(self, *args, **kwargs): ...
    def is_TC_enabled(self, OdeTriMeshGeomself, intgeom_class) -> Any: ...
    def setData(self, *args, **kwargs): ...
    def setTriMeshData(self, *args, **kwargs): ...
    def set_data(self, constOdeTriMeshGeomself, OdeTriMeshDatadata) -> Any: ...
    def set_tri_mesh_data(self, constOdeTriMeshGeomself, OdeTriMeshDatadata) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class OdeUniversalJoint(OdeJoint):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addTorques(self, *args, **kwargs): ...
    def add_torques(self, constOdeUniversalJointself, floattorque1, floattorque2) -> Any: ...
    def getAnchor(self, *args, **kwargs): ...
    def getAnchor2(self, *args, **kwargs): ...
    def getAngle1(self, *args, **kwargs): ...
    def getAngle1Rate(self, *args, **kwargs): ...
    def getAngle2(self, *args, **kwargs): ...
    def getAngle2Rate(self, *args, **kwargs): ...
    def getAxis1(self, *args, **kwargs): ...
    def getAxis2(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getParamBounce(self, *args, **kwargs): ...
    def getParamCFM(self, *args, **kwargs): ...
    def getParamFMax(self, *args, **kwargs): ...
    def getParamFudgeFactor(self, *args, **kwargs): ...
    def getParamHiStop(self, *args, **kwargs): ...
    def getParamLoStop(self, *args, **kwargs): ...
    def getParamStopCFM(self, *args, **kwargs): ...
    def getParamStopERP(self, *args, **kwargs): ...
    def getParamVel(self, *args, **kwargs): ...
    def get_anchor(self, OdeUniversalJointself) -> Any: ...
    def get_anchor2(self, OdeUniversalJointself) -> Any: ...
    def get_angle1(self, OdeUniversalJointself) -> Any: ...
    def get_angle1_rate(self, OdeUniversalJointself) -> Any: ...
    def get_angle2(self, OdeUniversalJointself) -> Any: ...
    def get_angle2_rate(self, OdeUniversalJointself) -> Any: ...
    def get_axis1(self, OdeUniversalJointself) -> Any: ...
    def get_axis2(self, OdeUniversalJointself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_param_CFM(self, OdeUniversalJointself, intaxis) -> Any: ...
    def get_param_bounce(self, OdeUniversalJointself, intaxis) -> Any: ...
    def get_param_f_max(self, OdeUniversalJointself, intaxis) -> Any: ...
    def get_param_fudge_factor(self, OdeUniversalJointself, intaxis) -> Any: ...
    def get_param_hi_stop(self, OdeUniversalJointself, intaxis) -> Any: ...
    def get_param_lo_stop(self, OdeUniversalJointself, intaxis) -> Any: ...
    def get_param_stop_CFM(self, OdeUniversalJointself, intaxis) -> Any: ...
    def get_param_stop_ERP(self, OdeUniversalJointself, intaxis) -> Any: ...
    def get_param_vel(self, OdeUniversalJointself, intaxis) -> Any: ...
    def setAnchor(self, *args, **kwargs): ...
    def setAxis1(self, *args, **kwargs): ...
    def setAxis2(self, *args, **kwargs): ...
    def setParamBounce(self, *args, **kwargs): ...
    def setParamCFM(self, *args, **kwargs): ...
    def setParamFMax(self, *args, **kwargs): ...
    def setParamFudgeFactor(self, *args, **kwargs): ...
    def setParamHiStop(self, *args, **kwargs): ...
    def setParamLoStop(self, *args, **kwargs): ...
    def setParamStopCFM(self, *args, **kwargs): ...
    def setParamStopERP(self, *args, **kwargs): ...
    def setParamVel(self, *args, **kwargs): ...
    @overload
    def set_anchor(self, constOdeUniversalJointself, constLVecBase3fanchor) -> Any: ...
    @overload
    def set_anchor(self, constOdeUniversalJointself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_axis1(self, constOdeUniversalJointself, constLVecBase3faxis) -> Any: ...
    @overload
    def set_axis1(self, constOdeUniversalJointself, floatx, floaty, floatz) -> Any: ...
    @overload
    def set_axis2(self, constOdeUniversalJointself, constLVecBase3faxis) -> Any: ...
    @overload
    def set_axis2(self, constOdeUniversalJointself, floatx, floaty, floatz) -> Any: ...
    def set_param_CFM(self, constOdeUniversalJointself, intaxis, floatval) -> Any: ...
    def set_param_bounce(self, constOdeUniversalJointself, intaxis, floatval) -> Any: ...
    def set_param_f_max(self, constOdeUniversalJointself, intaxis, floatval) -> Any: ...
    def set_param_fudge_factor(self, constOdeUniversalJointself, intaxis, floatval) -> Any: ...
    def set_param_hi_stop(self, constOdeUniversalJointself, intaxis, floatval) -> Any: ...
    def set_param_lo_stop(self, constOdeUniversalJointself, intaxis, floatval) -> Any: ...
    def set_param_stop_CFM(self, constOdeUniversalJointself, intaxis, floatval) -> Any: ...
    def set_param_stop_ERP(self, constOdeUniversalJointself, intaxis, floatval) -> Any: ...
    def set_param_vel(self, constOdeUniversalJointself, intaxis, floatval) -> Any: ...

class OdeUtil(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def areConnected(*args, **kwargs): ...
    @staticmethod
    def areConnectedExcluding(*args, **kwargs): ...
    @staticmethod
    def are_connected(constOdeBodybody1, constOdeBodybody2) -> Any: ...
    @staticmethod
    def are_connected_excluding(constOdeBodybody1, constOdeBodybody2, intjoint_type) -> Any: ...
    @staticmethod
    def collide(constOdeGeomgeom1, constOdeGeomgeom2, intmax_contacts) -> Any: ...
    @staticmethod
    def collide2(constOdeGeomgeom1, constOdeGeomgeom2, objectarg, objectcallback) -> Any: ...
    @staticmethod
    def getConnectingJoint(*args, **kwargs): ...
    @staticmethod
    def getConnectingJointList(*args, **kwargs): ...
    @staticmethod
    def getInfinity(*args, **kwargs): ...
    @staticmethod
    def get_connecting_joint(constOdeBodybody1, constOdeBodybody2) -> Any: ...
    @staticmethod
    def get_connecting_joint_list(constOdeBodybody1, constOdeBodybody2) -> Any: ...
    @staticmethod
    def get_infinity() -> Any: ...
    @staticmethod
    def randGetSeed(*args, **kwargs): ...
    @staticmethod
    def randSetSeed(*args, **kwargs): ...
    @staticmethod
    def rand_get_seed() -> Any: ...
    @staticmethod
    def rand_set_seed(ints) -> Any: ...
    @staticmethod
    def spaceToGeom(*args, **kwargs): ...
    @staticmethod
    def space_to_geom(constOdeSpacespace) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class OdeWorld(panda3d.core.TypedObject):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addBodyDampening(self, *args, **kwargs): ...
    def add_body_dampening(self, constOdeWorldself, OdeBodybody, intsurface) -> Any: ...
    def applyDampening(self, *args, **kwargs): ...
    def apply_dampening(self, constOdeWorldself, floatdt, OdeBodybody) -> Any: ...
    def compareTo(self, *args, **kwargs): ...
    def compare_to(self, OdeWorldself, constOdeWorldother) -> Any: ...
    def destroy(self, constOdeWorldself) -> Any: ...
    def getAutoDisableAngularThreshold(self, *args, **kwargs): ...
    def getAutoDisableFlag(self, *args, **kwargs): ...
    def getAutoDisableLinearThreshold(self, *args, **kwargs): ...
    def getAutoDisableSteps(self, *args, **kwargs): ...
    def getAutoDisableTime(self, *args, **kwargs): ...
    def getCfm(self, *args, **kwargs): ...
    @staticmethod
    def getClassType(*args, **kwargs): ...
    def getContactMaxCorrectingVel(self, *args, **kwargs): ...
    def getContactSurfaceLayer(self, *args, **kwargs): ...
    def getErp(self, *args, **kwargs): ...
    def getGravity(self, *args, **kwargs): ...
    def getId(self, *args, **kwargs): ...
    def getQuickStepNumIterations(self, *args, **kwargs): ...
    def getQuickStepW(self, *args, **kwargs): ...
    def get_auto_disable_angular_threshold(self, OdeWorldself) -> Any: ...
    def get_auto_disable_flag(self, OdeWorldself) -> Any: ...
    def get_auto_disable_linear_threshold(self, OdeWorldself) -> Any: ...
    def get_auto_disable_steps(self, OdeWorldself) -> Any: ...
    def get_auto_disable_time(self, OdeWorldself) -> Any: ...
    def get_cfm(self, OdeWorldself) -> Any: ...
    @staticmethod
    def get_class_type() -> Any: ...
    def get_contact_max_correcting_vel(self, OdeWorldself) -> Any: ...
    def get_contact_surface_layer(self, OdeWorldself) -> Any: ...
    def get_erp(self, OdeWorldself) -> Any: ...
    def get_gravity(self, OdeWorldself) -> Any: ...
    def get_id(self, OdeWorldself) -> Any: ...
    def get_quick_step_num_iterations(self, OdeWorldself) -> Any: ...
    def get_quick_step_w(self, OdeWorldself) -> Any: ...
    def impulseToForce(self, *args, **kwargs): ...
    @overload
    def impulse_to_force(self, constOdeWorldself, floatstepsize, constLVecBase3fimpulse) -> Any: ...
    @overload
    def impulse_to_force(self, constOdeWorldself, floatstepsize, floatix, floatiy, floatiz) -> Any: ...
    def initSurfaceTable(self, *args, **kwargs): ...
    def init_surface_table(self, constOdeWorldself, intnum_surfaces) -> Any: ...
    def isEmpty(self, *args, **kwargs): ...
    def is_empty(self, OdeWorldself) -> Any: ...
    def quickStep(self, *args, **kwargs): ...
    def quick_step(self, constOdeWorldself, floatstepsize) -> Any: ...
    def setAutoDisableAngularThreshold(self, *args, **kwargs): ...
    def setAutoDisableFlag(self, *args, **kwargs): ...
    def setAutoDisableLinearThreshold(self, *args, **kwargs): ...
    def setAutoDisableSteps(self, *args, **kwargs): ...
    def setAutoDisableTime(self, *args, **kwargs): ...
    def setCfm(self, *args, **kwargs): ...
    def setContactMaxCorrectingVel(self, *args, **kwargs): ...
    def setContactSurfaceLayer(self, *args, **kwargs): ...
    def setErp(self, *args, **kwargs): ...
    def setGravity(self, *args, **kwargs): ...
    def setQuickStepNumIterations(self, *args, **kwargs): ...
    def setQuickStepW(self, *args, **kwargs): ...
    def setSurfaceEntry(self, *args, **kwargs): ...
    def set_auto_disable_angular_threshold(self, constOdeWorldself, floatangular_threshold) -> Any: ...
    def set_auto_disable_flag(self, constOdeWorldself, intdo_auto_disable) -> Any: ...
    def set_auto_disable_linear_threshold(self, constOdeWorldself, floatlinear_threshold) -> Any: ...
    def set_auto_disable_steps(self, constOdeWorldself, intsteps) -> Any: ...
    def set_auto_disable_time(self, constOdeWorldself, floattime) -> Any: ...
    def set_cfm(self, constOdeWorldself, floatcfm) -> Any: ...
    def set_contact_max_correcting_vel(self, constOdeWorldself, floatvel) -> Any: ...
    def set_contact_surface_layer(self, constOdeWorldself, floatdepth) -> Any: ...
    def set_erp(self, constOdeWorldself, floaterp) -> Any: ...
    @overload
    def set_gravity(self, constOdeWorldself, constLVecBase3fvec) -> Any: ...
    @overload
    def set_gravity(self, constOdeWorldself, floatx, floaty, floatz) -> Any: ...
    def set_quick_step_num_iterations(self, constOdeWorldself, intnum) -> Any: ...
    def set_quick_step_w(self, constOdeWorldself, floatover_relaxation) -> Any: ...
    def set_surface_entry(self, constOdeWorldself, intpos1, intpos2, floatmu, floatbounce, floatbounce_vel, floatsoft_erp, floatsoft_cfm, floatslip, floatdampen) -> Any: ...
    def step(self, constOdeWorldself, floatstepsize) -> Any: ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class dxBody(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class dxGeom(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class dxJoint(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class dxJointGroup(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class dxSpace(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class dxTriMeshData(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class dxWorld(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...

def Dtool_BorrowThisReference(*args, **kwargs): ...
