import dtoolconfig
import panda3d.core
from _typeshed import Incomplete
from typing import Any, ClassVar, overload

Dtool_PyNativeInterface: int

class AIBehaviors(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addDynamicObstacle(self, *args, **kwargs): ...
    def addStaticObstacle(self, *args, **kwargs): ...
    def addToPath(self, *args, **kwargs): ...
    def add_dynamic_obstacle(self, constAIBehaviorsself, NodePathobstacle) -> Any: ...
    def add_static_obstacle(self, constAIBehaviorsself, NodePathobstacle) -> Any: ...
    def add_to_path(self, constAIBehaviorsself, LVecBase3fpos) -> Any: ...
    def arrival(self, constAIBehaviorsself, doubledistance) -> Any: ...
    def behaviorStatus(self, *args, **kwargs): ...
    def behavior_status(self, constAIBehaviorsself, strai_type) -> Any: ...
    def evade(self, constAIBehaviorsself, NodePathtarget_object, doublepanic_distance, doublerelax_distance, floatevade_wt) -> Any: ...
    @overload
    def flee(self, constAIBehaviorsself, LVecBase3fpos, doublepanic_distance, doublerelax_distance, floatflee_wt) -> Any: ...
    @overload
    def flee(self, constAIBehaviorsself, NodePathtarget_object, doublepanic_distance, doublerelax_distance, floatflee_wt) -> Any: ...
    def flock(self, constAIBehaviorsself, floatflock_wt) -> Any: ...
    def initPathFind(self, *args, **kwargs): ...
    def init_path_find(self, constAIBehaviorsself, strnavmesh_filename) -> Any: ...
    def obstacleAvoidance(self, *args, **kwargs): ...
    def obstacle_avoidance(self, constAIBehaviorsself, floatfeeler_length) -> Any: ...
    def pathFindTo(self, *args, **kwargs): ...
    def pathFollow(self, *args, **kwargs): ...
    @overload
    def path_find_to(self, constAIBehaviorsself, LVecBase3fpos, strtype) -> Any: ...
    @overload
    def path_find_to(self, constAIBehaviorsself, NodePathtarget, strtype) -> Any: ...
    def path_follow(self, constAIBehaviorsself, floatfollow_wt) -> Any: ...
    def pauseAi(self, *args, **kwargs): ...
    def pause_ai(self, constAIBehaviorsself, strai_type) -> Any: ...
    def pursue(self, constAIBehaviorsself, NodePathtarget_object, floatpursue_wt) -> Any: ...
    def removeAi(self, *args, **kwargs): ...
    def remove_ai(self, constAIBehaviorsself, strai_type) -> Any: ...
    def resumeAi(self, *args, **kwargs): ...
    def resume_ai(self, constAIBehaviorsself, strai_type) -> Any: ...
    @overload
    def seek(self, constAIBehaviorsself, LVecBase3fpos, floatseek_wt) -> Any: ...
    @overload
    def seek(self, constAIBehaviorsself, NodePathtarget_object, floatseek_wt) -> Any: ...
    def startFollow(self, *args, **kwargs): ...
    def start_follow(self, constAIBehaviorsself, strtype) -> Any: ...
    def wander(self, constAIBehaviorsself, doublewander_radius, intflag, doubleaoe, floatwander_weight) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class AICharacter(panda3d.core.ReferenceCount):
    DtoolClassDict: ClassVar[dict] = ...
    name: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getAiBehaviors(self, *args, **kwargs): ...
    def getMass(self, *args, **kwargs): ...
    def getMaxForce(self, *args, **kwargs): ...
    def getNodePath(self, *args, **kwargs): ...
    def getVelocity(self, *args, **kwargs): ...
    def get_ai_behaviors(self, constAICharacterself) -> Any: ...
    def get_mass(self, constAICharacterself) -> Any: ...
    def get_max_force(self, constAICharacterself) -> Any: ...
    def get_node_path(self, constAICharacterself) -> Any: ...
    def get_velocity(self, constAICharacterself) -> Any: ...
    def setMass(self, *args, **kwargs): ...
    def setMaxForce(self, *args, **kwargs): ...
    def setNodePath(self, *args, **kwargs): ...
    def setPfGuide(self, *args, **kwargs): ...
    def set_mass(self, constAICharacterself, doublem) -> Any: ...
    def set_max_force(self, constAICharacterself, doublemax_force) -> Any: ...
    def set_node_path(self, constAICharacterself, NodePathnp) -> Any: ...
    def set_pf_guide(self, constAICharacterself, boolpf_guide) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class AINode(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def contains(self, constAINodeself, floatx, floaty) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class AIWorld(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addAiChar(self, *args, **kwargs): ...
    def addFlock(self, *args, **kwargs): ...
    def addObstacle(self, *args, **kwargs): ...
    def add_ai_char(self, constAIWorldself, AICharacterai_ch) -> Any: ...
    def add_flock(self, constAIWorldself, Flockflock) -> Any: ...
    def add_obstacle(self, constAIWorldself, NodePathobstacle) -> Any: ...
    def flockOff(self, *args, **kwargs): ...
    def flockOn(self, *args, **kwargs): ...
    def flock_off(self, constAIWorldself, intflock_id) -> Any: ...
    def flock_on(self, constAIWorldself, intflock_id) -> Any: ...
    def getFlock(self, *args, **kwargs): ...
    def get_flock(self, constAIWorldself, intflock_id) -> Any: ...
    def printList(self, *args, **kwargs): ...
    def print_list(self, constAIWorldself) -> Any: ...
    def removeAiChar(self, *args, **kwargs): ...
    def removeFlock(self, *args, **kwargs): ...
    def removeObstacle(self, *args, **kwargs): ...
    def remove_ai_char(self, constAIWorldself, strname) -> Any: ...
    def remove_flock(self, constAIWorldself, intflock_id) -> Any: ...
    def remove_obstacle(self, constAIWorldself, NodePathobstacle) -> Any: ...
    def update(self, constAIWorldself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

class Flock(dtoolconfig.DTOOL_SUPER_BASE):
    DtoolClassDict: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def addAiChar(self, *args, **kwargs): ...
    def add_ai_char(self, constFlockself, AICharacterai_char) -> Any: ...
    def getId(self, *args, **kwargs): ...
    def get_id(self, constFlockself) -> Any: ...
    def __copy__(self): ...
    def __deepcopy__(self): ...

def Dtool_BorrowThisReference(*args, **kwargs): ...
